
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000034e0  0800d840  0800d840  0001d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d20  08010d20  000300e4  2**0
                  CONTENTS
  4 .ARM          00000008  08010d20  08010d20  00020d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d28  08010d28  000300e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d28  08010d28  00020d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010d2c  08010d2c  00020d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  08010d30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300e4  2**0
                  CONTENTS
 10 .bss          00000dcc  200000e4  200000e4  000300e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000eb0  20000eb0  000300e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029eb3  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055a7  00000000  00000000  00059fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  0005f570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017e8  00000000  00000000  00060f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002955c  00000000  00000000  00062780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000253b4  00000000  00000000  0008bcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2317  00000000  00000000  000b1090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001933a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007720  00000000  00000000  001933fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d828 	.word	0x0800d828

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	0800d828 	.word	0x0800d828

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f32:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f34:	4a3d      	ldr	r2, [pc, #244]	; (800102c <MX_ADC1_Init+0x10c>)
 8000f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5e:	4b32      	ldr	r3, [pc, #200]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f60:	4a33      	ldr	r2, [pc, #204]	; (8001030 <MX_ADC1_Init+0x110>)
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f6a:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7e:	482a      	ldr	r0, [pc, #168]	; (8001028 <MX_ADC1_Init+0x108>)
 8000f80:	f005 fafa 	bl	8006578 <HAL_ADC_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f002 fb63 	bl	8003654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f8e:	2308      	movs	r3, #8
 8000f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4822      	ldr	r0, [pc, #136]	; (8001028 <MX_ADC1_Init+0x108>)
 8000fa0:	f005 fc5c 	bl	800685c <HAL_ADC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000faa:	f002 fb53 	bl	8003654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481b      	ldr	r0, [pc, #108]	; (8001028 <MX_ADC1_Init+0x108>)
 8000fbc:	f005 fc4e 	bl	800685c <HAL_ADC_ConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fc6:	f002 fb45 	bl	8003654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_ADC1_Init+0x108>)
 8000fd8:	f005 fc40 	bl	800685c <HAL_ADC_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000fe2:	f002 fb37 	bl	8003654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <MX_ADC1_Init+0x108>)
 8000ff4:	f005 fc32 	bl	800685c <HAL_ADC_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ffe:	f002 fb29 	bl	8003654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001002:	230c      	movs	r3, #12
 8001004:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001006:	2305      	movs	r3, #5
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <MX_ADC1_Init+0x108>)
 8001010:	f005 fc24 	bl	800685c <HAL_ADC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800101a:	f002 fb1b 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200009cc 	.word	0x200009cc
 800102c:	40012000 	.word	0x40012000
 8001030:	0f000001 	.word	0x0f000001

08001034 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a3c      	ldr	r2, [pc, #240]	; (8001144 <HAL_ADC_MspInit+0x110>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d171      	bne.n	800113a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_ADC_MspInit+0x114>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a3a      	ldr	r2, [pc, #232]	; (8001148 <HAL_ADC_MspInit+0x114>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_ADC_MspInit+0x114>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <HAL_ADC_MspInit+0x114>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a33      	ldr	r2, [pc, #204]	; (8001148 <HAL_ADC_MspInit+0x114>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_ADC_MspInit+0x114>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <HAL_ADC_MspInit+0x114>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a2c      	ldr	r2, [pc, #176]	; (8001148 <HAL_ADC_MspInit+0x114>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_ADC_MspInit+0x114>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4823      	ldr	r0, [pc, #140]	; (800114c <HAL_ADC_MspInit+0x118>)
 80010be:	f006 fb81 	bl	80077c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010c2:	2303      	movs	r3, #3
 80010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	481e      	ldr	r0, [pc, #120]	; (8001150 <HAL_ADC_MspInit+0x11c>)
 80010d6:	f006 fb75 	bl	80077c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010dc:	4a1e      	ldr	r2, [pc, #120]	; (8001158 <HAL_ADC_MspInit+0x124>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <HAL_ADC_MspInit+0x120>)
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001104:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001108:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_ADC_MspInit+0x120>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_ADC_MspInit+0x120>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001120:	f005 ff4e 	bl	8006fc0 <HAL_DMA_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800112a:	f002 fa93 	bl	8003654 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001132:	639a      	str	r2, [r3, #56]	; 0x38
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_ADC_MspInit+0x120>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40012000 	.word	0x40012000
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020400 	.word	0x40020400
 8001154:	20000a14 	.word	0x20000a14
 8001158:	40026410 	.word	0x40026410

0800115c <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	at24c_Check();
 8001160:	f000 f83c 	bl	80011dc <at24c_Check>
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af04      	add	r7, sp, #16
 800116e:	4603      	mov	r3, r0
 8001170:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 8001176:	88fa      	ldrh	r2, [r7, #6]
 8001178:	230a      	movs	r3, #10
 800117a:	9302      	str	r3, [sp, #8]
 800117c:	2301      	movs	r3, #1
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	f107 030f 	add.w	r3, r7, #15
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2310      	movs	r3, #16
 8001188:	21a0      	movs	r1, #160	; 0xa0
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <at24c_ReadOneByte+0x34>)
 800118c:	f006 ff40 	bl	8008010 <HAL_I2C_Mem_Read>
	return temp;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000ae4 	.word	0x20000ae4

080011a0 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	4603      	mov	r3, r0
 80011a8:	460a      	mov	r2, r1
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	230a      	movs	r3, #10
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2301      	movs	r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	1d7b      	adds	r3, r7, #5
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2310      	movs	r3, #16
 80011c0:	21a0      	movs	r1, #160	; 0xa0
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <at24c_WriteOneByte+0x38>)
 80011c4:	f006 fe2a 	bl	8007e1c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80011c8:	2005      	movs	r0, #5
 80011ca:	f005 f9b1 	bl	8006530 <HAL_Delay>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000ae4 	.word	0x20000ae4

080011dc <at24c_Check>:

uint8_t at24c_Check(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 80011e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011e6:	f7ff ffbf 	bl	8001168 <at24c_ReadOneByte>
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b55      	cmp	r3, #85	; 0x55
 80011f2:	d101      	bne.n	80011f8 <at24c_Check+0x1c>
 80011f4:	2300      	movs	r3, #0
 80011f6:	e010      	b.n	800121a <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80011f8:	2155      	movs	r1, #85	; 0x55
 80011fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011fe:	f7ff ffcf 	bl	80011a0 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 8001202:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001206:	f7ff ffaf 	bl	8001168 <at24c_ReadOneByte>
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b55      	cmp	r3, #85	; 0x55
 8001212:	d101      	bne.n	8001218 <at24c_Check+0x3c>
 8001214:	2300      	movs	r3, #0
 8001216:	e000      	b.n	800121a <at24c_Check+0x3e>
	}
	return 1;
 8001218:	2301      	movs	r3, #1
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 8001222:	b590      	push	{r4, r7, lr}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	6039      	str	r1, [r7, #0]
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	4613      	mov	r3, r2
 8001230:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001232:	e00d      	b.n	8001250 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	80fa      	strh	r2, [r7, #6]
 800123a:	683c      	ldr	r4, [r7, #0]
 800123c:	1c62      	adds	r2, r4, #1
 800123e:	603a      	str	r2, [r7, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff91 	bl	8001168 <at24c_ReadOneByte>
 8001246:	4603      	mov	r3, r0
 8001248:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	3b01      	subs	r3, #1
 800124e:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1ee      	bne.n	8001234 <at24c_Read+0x12>
	}
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}

08001260 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	80fb      	strh	r3, [r7, #6]
 800126c:	4613      	mov	r3, r2
 800126e:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001270:	e00c      	b.n	800128c <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff90 	bl	80011a0 <at24c_WriteOneByte>
		WriteAddr++;
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	3301      	adds	r3, #1
 8001284:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	1e5a      	subs	r2, r3, #1
 8001290:	80ba      	strh	r2, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1ed      	bne.n	8001272 <at24c_Write+0x12>
	}
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2108      	movs	r1, #8
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <button_init+0x14>)
 80012aa:	f006 fc3f 	bl	8007b2c <HAL_GPIO_WritePin>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40020c00 	.word	0x40020c00

080012b8 <button_Scan>:

void button_Scan(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2108      	movs	r1, #8
 80012c2:	482f      	ldr	r0, [pc, #188]	; (8001380 <button_Scan+0xc8>)
 80012c4:	f006 fc32 	bl	8007b2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2108      	movs	r1, #8
 80012cc:	482c      	ldr	r0, [pc, #176]	; (8001380 <button_Scan+0xc8>)
 80012ce:	f006 fc2d 	bl	8007b2c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80012d2:	230a      	movs	r3, #10
 80012d4:	2202      	movs	r2, #2
 80012d6:	492b      	ldr	r1, [pc, #172]	; (8001384 <button_Scan+0xcc>)
 80012d8:	482b      	ldr	r0, [pc, #172]	; (8001388 <button_Scan+0xd0>)
 80012da:	f008 fa54 	bl	8009786 <HAL_SPI_Receive>
	  int button_index = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80012e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	e03f      	b.n	800136e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	db06      	blt.n	8001302 <button_Scan+0x4a>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	dc03      	bgt.n	8001302 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e018      	b.n	8001334 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b03      	cmp	r3, #3
 8001306:	dd07      	ble.n	8001318 <button_Scan+0x60>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b07      	cmp	r3, #7
 800130c:	dc04      	bgt.n	8001318 <button_Scan+0x60>
			  button_index = 7 - i;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f1c3 0307 	rsb	r3, r3, #7
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e00d      	b.n	8001334 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b07      	cmp	r3, #7
 800131c:	dd06      	ble.n	800132c <button_Scan+0x74>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0b      	cmp	r3, #11
 8001322:	dc03      	bgt.n	800132c <button_Scan+0x74>
			  button_index = i + 4;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3304      	adds	r3, #4
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e003      	b.n	8001334 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f1c3 0317 	rsb	r3, r3, #23
 8001332:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <button_Scan+0xcc>)
 8001336:	881a      	ldrh	r2, [r3, #0]
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	4013      	ands	r3, r2
 800133c:	b29b      	uxth	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d005      	beq.n	800134e <button_Scan+0x96>
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <button_Scan+0xd4>)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2100      	movs	r1, #0
 8001348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800134c:	e009      	b.n	8001362 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800134e:	4a0f      	ldr	r2, [pc, #60]	; (800138c <button_Scan+0xd4>)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001356:	3301      	adds	r3, #1
 8001358:	b299      	uxth	r1, r3
 800135a:	4a0c      	ldr	r2, [pc, #48]	; (800138c <button_Scan+0xd4>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8001362:	897b      	ldrh	r3, [r7, #10]
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b0f      	cmp	r3, #15
 8001372:	ddbc      	ble.n	80012ee <button_Scan+0x36>
	  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020c00 	.word	0x40020c00
 8001384:	20000100 	.word	0x20000100
 8001388:	20000b80 	.word	0x20000b80
 800138c:	20000a74 	.word	0x20000a74

08001390 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001394:	2100      	movs	r1, #0
 8001396:	4802      	ldr	r0, [pc, #8]	; (80013a0 <buzzer_init+0x10>)
 8001398:	f008 ff9e 	bl	800a2d8 <HAL_TIM_PWM_Start>
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000bd8 	.word	0x20000bd8

080013a4 <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80013ae:	4a07      	ldr	r2, [pc, #28]	; (80013cc <buzzer_SetVolume+0x28>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <buzzer_SetVolume+0x28>)
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <buzzer_SetVolume+0x2c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000102 	.word	0x20000102
 80013d0:	20000bd8 	.word	0x20000bd8

080013d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_DMA_Init+0x3c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <MX_DMA_Init+0x3c>)
 80013e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_DMA_Init+0x3c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2038      	movs	r0, #56	; 0x38
 80013fc:	f005 fda9 	bl	8006f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001400:	2038      	movs	r0, #56	; 0x38
 8001402:	f005 fdc2 	bl	8006f8a <HAL_NVIC_EnableIRQ>

}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <fsm_mode>:
int colon = 0;
int send_flag = 0;

struct player *leaderboard = NULL;

void fsm_mode(){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	switch(mode){
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <fsm_mode+0x70>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d82e      	bhi.n	800147e <fsm_mode+0x6a>
 8001420:	a201      	add	r2, pc, #4	; (adr r2, 8001428 <fsm_mode+0x14>)
 8001422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001426:	bf00      	nop
 8001428:	08001439 	.word	0x08001439
 800142c:	08001447 	.word	0x08001447
 8001430:	08001459 	.word	0x08001459
 8001434:	0800146b 	.word	0x0800146b
	case NORMAL:
		wall = 0;
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <fsm_mode+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
		walls = 0;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <fsm_mode+0x78>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
		break;
 8001444:	e01b      	b.n	800147e <fsm_mode+0x6a>
	case WALL:
		wall = 1;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <fsm_mode+0x74>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
		walls = 0;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <fsm_mode+0x78>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
		spawn_wall();
 8001452:	f002 ffc1 	bl	80043d8 <spawn_wall>
		break;
 8001456:	e012      	b.n	800147e <fsm_mode+0x6a>
	case WALLS:
		wall = 1;
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <fsm_mode+0x74>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
		walls = 1;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <fsm_mode+0x78>)
 8001460:	2201      	movs	r2, #1
 8001462:	601a      	str	r2, [r3, #0]
		spawn_wall();
 8001464:	f002 ffb8 	bl	80043d8 <spawn_wall>
		break;
 8001468:	e009      	b.n	800147e <fsm_mode+0x6a>
	case TIMER:
		wall = 0;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <fsm_mode+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
		walls = 0;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <fsm_mode+0x78>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
		countdown = 180;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <fsm_mode+0x7c>)
 8001478:	22b4      	movs	r2, #180	; 0xb4
 800147a:	601a      	str	r2, [r3, #0]
		break;
 800147c:	bf00      	nop
	}
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000010c 	.word	0x2000010c
 8001488:	20000114 	.word	0x20000114
 800148c:	20000118 	.word	0x20000118
 8001490:	20000008 	.word	0x20000008

08001494 <fsm_buzzer>:

void fsm_buzzer(){// gui canh bao do am > 70% loa bao hieu moi 1 giay, tan so 0.5Hz
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	switch (buzzer_flag) {
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <fsm_buzzer+0x58>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d002      	beq.n	80014a6 <fsm_buzzer+0x12>
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d012      	beq.n	80014ca <fsm_buzzer+0x36>
				buzzer_flag = BUZZER_OFF;
			}
			buzzer_SetVolume(50);
			break;
		default:
			break;
 80014a4:	e020      	b.n	80014e8 <fsm_buzzer+0x54>
			if(flag_timer7 == 1){
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <fsm_buzzer+0x5c>)
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d109      	bne.n	80014c2 <fsm_buzzer+0x2e>
				uart_EspSendString("Humidity is higher than 70%\n/");
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <fsm_buzzer+0x60>)
 80014b0:	f004 fe74 	bl	800619c <uart_EspSendString>
				setTimer7(1000);
 80014b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b8:	f003 fa72 	bl	80049a0 <setTimer7>
				buzzer_flag = BUZZER_ON;
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <fsm_buzzer+0x58>)
 80014be:	2201      	movs	r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(0);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff ff6e 	bl	80013a4 <buzzer_SetVolume>
			break;
 80014c8:	e00e      	b.n	80014e8 <fsm_buzzer+0x54>
			if(flag_timer7 == 1){
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <fsm_buzzer+0x5c>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d106      	bne.n	80014e0 <fsm_buzzer+0x4c>
				setTimer7(1000);
 80014d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d6:	f003 fa63 	bl	80049a0 <setTimer7>
				buzzer_flag = BUZZER_OFF;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <fsm_buzzer+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(50);
 80014e0:	2032      	movs	r0, #50	; 0x32
 80014e2:	f7ff ff5f 	bl	80013a4 <buzzer_SetVolume>
			break;
 80014e6:	bf00      	nop
	}
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000120 	.word	0x20000120
 80014f0:	200009b6 	.word	0x200009b6
 80014f4:	0800d840 	.word	0x0800d840

080014f8 <fsm_send_buzzer>:

void fsm_send_buzzer(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	switch (buzzer_check) {
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <fsm_send_buzzer+0x24>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <fsm_send_buzzer+0x12>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d004      	beq.n	8001512 <fsm_send_buzzer+0x1a>
			break;
		case 1:
			fsm_buzzer();
			break;
		default:
			break;
 8001508:	e006      	b.n	8001518 <fsm_send_buzzer+0x20>
			buzzer_SetVolume(0);
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff ff4a 	bl	80013a4 <buzzer_SetVolume>
			break;
 8001510:	e002      	b.n	8001518 <fsm_send_buzzer+0x20>
			fsm_buzzer();
 8001512:	f7ff ffbf 	bl	8001494 <fsm_buzzer>
			break;
 8001516:	bf00      	nop
	}
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000124 	.word	0x20000124

08001520 <enter_ID>:

void enter_ID(){//nhap id nguoi choi
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	if(button_count[0] == 1)
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <enter_ID+0x13c>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <enter_ID+0x1e>
		ID = ID*10+1;
 800152c:	4b4c      	ldr	r3, [pc, #304]	; (8001660 <enter_ID+0x140>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	3301      	adds	r3, #1
 800153a:	4a49      	ldr	r2, [pc, #292]	; (8001660 <enter_ID+0x140>)
 800153c:	6013      	str	r3, [r2, #0]
	if(button_count[1] == 1)
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <enter_ID+0x13c>)
 8001540:	885b      	ldrh	r3, [r3, #2]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d108      	bne.n	8001558 <enter_ID+0x38>
		ID = ID*10+2;
 8001546:	4b46      	ldr	r3, [pc, #280]	; (8001660 <enter_ID+0x140>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	3302      	adds	r3, #2
 8001554:	4a42      	ldr	r2, [pc, #264]	; (8001660 <enter_ID+0x140>)
 8001556:	6013      	str	r3, [r2, #0]
	if(button_count[2] == 1)
 8001558:	4b40      	ldr	r3, [pc, #256]	; (800165c <enter_ID+0x13c>)
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <enter_ID+0x52>
		ID = ID*10+3;
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <enter_ID+0x140>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	3303      	adds	r3, #3
 800156e:	4a3c      	ldr	r2, [pc, #240]	; (8001660 <enter_ID+0x140>)
 8001570:	6013      	str	r3, [r2, #0]
	if(button_count[4] == 1)
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <enter_ID+0x13c>)
 8001574:	891b      	ldrh	r3, [r3, #8]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <enter_ID+0x6c>
		ID = ID*10+4;
 800157a:	4b39      	ldr	r3, [pc, #228]	; (8001660 <enter_ID+0x140>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	3304      	adds	r3, #4
 8001588:	4a35      	ldr	r2, [pc, #212]	; (8001660 <enter_ID+0x140>)
 800158a:	6013      	str	r3, [r2, #0]
	if(button_count[5] == 1)
 800158c:	4b33      	ldr	r3, [pc, #204]	; (800165c <enter_ID+0x13c>)
 800158e:	895b      	ldrh	r3, [r3, #10]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <enter_ID+0x86>
		ID = ID*10+5;
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <enter_ID+0x140>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	3305      	adds	r3, #5
 80015a2:	4a2f      	ldr	r2, [pc, #188]	; (8001660 <enter_ID+0x140>)
 80015a4:	6013      	str	r3, [r2, #0]
	if(button_count[6] == 1)
 80015a6:	4b2d      	ldr	r3, [pc, #180]	; (800165c <enter_ID+0x13c>)
 80015a8:	899b      	ldrh	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d108      	bne.n	80015c0 <enter_ID+0xa0>
		ID = ID*10+6;
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <enter_ID+0x140>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4613      	mov	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4413      	add	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	3306      	adds	r3, #6
 80015bc:	4a28      	ldr	r2, [pc, #160]	; (8001660 <enter_ID+0x140>)
 80015be:	6013      	str	r3, [r2, #0]
	if(button_count[8] == 1)
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <enter_ID+0x13c>)
 80015c2:	8a1b      	ldrh	r3, [r3, #16]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d108      	bne.n	80015da <enter_ID+0xba>
		ID = ID*10+7;
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <enter_ID+0x140>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	3307      	adds	r3, #7
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <enter_ID+0x140>)
 80015d8:	6013      	str	r3, [r2, #0]
	if(button_count[9] == 1)
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <enter_ID+0x13c>)
 80015dc:	8a5b      	ldrh	r3, [r3, #18]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d108      	bne.n	80015f4 <enter_ID+0xd4>
		ID = ID*10+8;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <enter_ID+0x140>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	3308      	adds	r3, #8
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <enter_ID+0x140>)
 80015f2:	6013      	str	r3, [r2, #0]
	if(button_count[10] == 1)
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <enter_ID+0x13c>)
 80015f6:	8a9b      	ldrh	r3, [r3, #20]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d108      	bne.n	800160e <enter_ID+0xee>
		ID = ID*10+9;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <enter_ID+0x140>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	3309      	adds	r3, #9
 800160a:	4a15      	ldr	r2, [pc, #84]	; (8001660 <enter_ID+0x140>)
 800160c:	6013      	str	r3, [r2, #0]
	if(button_count[13] == 1)
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <enter_ID+0x13c>)
 8001610:	8b5b      	ldrh	r3, [r3, #26]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <enter_ID+0x108>
		ID = ID*10;
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <enter_ID+0x140>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	461a      	mov	r2, r3
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <enter_ID+0x140>)
 8001626:	601a      	str	r2, [r3, #0]
	if(ID > 9999)
 8001628:	4b0d      	ldr	r3, [pc, #52]	; (8001660 <enter_ID+0x140>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001630:	4293      	cmp	r3, r2
 8001632:	dd0e      	ble.n	8001652 <enter_ID+0x132>
		ID = ID % 10;
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <enter_ID+0x140>)
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <enter_ID+0x144>)
 800163a:	fb83 2301 	smull	r2, r3, r3, r1
 800163e:	109a      	asrs	r2, r3, #2
 8001640:	17cb      	asrs	r3, r1, #31
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	1aca      	subs	r2, r1, r3
 800164e:	4b04      	ldr	r3, [pc, #16]	; (8001660 <enter_ID+0x140>)
 8001650:	601a      	str	r2, [r3, #0]
}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	20000a74 	.word	0x20000a74
 8001660:	20000108 	.word	0x20000108
 8001664:	66666667 	.word	0x66666667

08001668 <change_mode>:

void change_mode(){// doi che do choi
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 800166e:	4b41      	ldr	r3, [pc, #260]	; (8001774 <change_mode+0x10c>)
 8001670:	8b1b      	ldrh	r3, [r3, #24]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d106      	bne.n	8001684 <change_mode+0x1c>
		lcd_Clear(BLACK);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 fe9e 	bl	80023b8 <lcd_Clear>
		status = INIT;
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <change_mode+0x110>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
		return;
 8001682:	e074      	b.n	800176e <change_mode+0x106>
	}
	lcd_ShowStr(0, 10, "1. NORMAL", WHITE, BLACK, 16, 0);
 8001684:	2300      	movs	r3, #0
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	2310      	movs	r3, #16
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001694:	4a39      	ldr	r2, [pc, #228]	; (800177c <change_mode+0x114>)
 8001696:	210a      	movs	r1, #10
 8001698:	2000      	movs	r0, #0
 800169a:	f001 fbff 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. WALL", WHITE, BLACK, 16, 0);
 800169e:	2300      	movs	r3, #0
 80016a0:	9302      	str	r3, [sp, #8]
 80016a2:	2310      	movs	r3, #16
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	4a34      	ldr	r2, [pc, #208]	; (8001780 <change_mode+0x118>)
 80016b0:	211e      	movs	r1, #30
 80016b2:	2000      	movs	r0, #0
 80016b4:	f001 fbf2 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. WALLS", WHITE, BLACK, 16, 0);
 80016b8:	2300      	movs	r3, #0
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	2310      	movs	r3, #16
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c8:	4a2e      	ldr	r2, [pc, #184]	; (8001784 <change_mode+0x11c>)
 80016ca:	2132      	movs	r1, #50	; 0x32
 80016cc:	2000      	movs	r0, #0
 80016ce:	f001 fbe5 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(0, 70, "4. TIMER", WHITE, BLACK, 16, 0);
 80016d2:	2300      	movs	r3, #0
 80016d4:	9302      	str	r3, [sp, #8]
 80016d6:	2310      	movs	r3, #16
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e2:	4a29      	ldr	r2, [pc, #164]	; (8001788 <change_mode+0x120>)
 80016e4:	2146      	movs	r1, #70	; 0x46
 80016e6:	2000      	movs	r0, #0
 80016e8:	f001 fbd8 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(0, 90, "E. EXIT", WHITE, BLACK, 16, 0);
 80016ec:	2300      	movs	r3, #0
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	2310      	movs	r3, #16
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	2300      	movs	r3, #0
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016fc:	4a23      	ldr	r2, [pc, #140]	; (800178c <change_mode+0x124>)
 80016fe:	215a      	movs	r1, #90	; 0x5a
 8001700:	2000      	movs	r0, #0
 8001702:	f001 fbcb 	bl	8002e9c <lcd_ShowStr>

	if(button_count[0] == 1){
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <change_mode+0x10c>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <change_mode+0xb8>
		mode = NORMAL;
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <change_mode+0x128>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001714:	2000      	movs	r0, #0
 8001716:	f000 fe4f 	bl	80023b8 <lcd_Clear>
		status = INIT;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <change_mode+0x110>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
	}
	if(button_count[1] == 1){
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <change_mode+0x10c>)
 8001722:	885b      	ldrh	r3, [r3, #2]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <change_mode+0xd2>
		mode = WALL;
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <change_mode+0x128>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 fe42 	bl	80023b8 <lcd_Clear>
		status = INIT;
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <change_mode+0x110>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
	}
	if(button_count[2] == 1){
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <change_mode+0x10c>)
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <change_mode+0xec>
		mode = WALLS;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <change_mode+0x128>)
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001748:	2000      	movs	r0, #0
 800174a:	f000 fe35 	bl	80023b8 <lcd_Clear>
		status = INIT;
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <change_mode+0x110>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
	}
	if(button_count[4] == 1){
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <change_mode+0x10c>)
 8001756:	891b      	ldrh	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d108      	bne.n	800176e <change_mode+0x106>
		mode = TIMER;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <change_mode+0x128>)
 800175e:	2203      	movs	r2, #3
 8001760:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 fe28 	bl	80023b8 <lcd_Clear>
		status = INIT;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <change_mode+0x110>)
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
	}
}
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000a74 	.word	0x20000a74
 8001778:	20000104 	.word	0x20000104
 800177c:	0800d860 	.word	0x0800d860
 8001780:	0800d86c 	.word	0x0800d86c
 8001784:	0800d874 	.word	0x0800d874
 8001788:	0800d880 	.word	0x0800d880
 800178c:	0800d88c 	.word	0x0800d88c
 8001790:	2000010c 	.word	0x2000010c

08001794 <change_speed>:

void change_speed(){// doi toc do ran
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <change_speed+0xdc>)
 800179c:	8b1b      	ldrh	r3, [r3, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d106      	bne.n	80017b0 <change_speed+0x1c>
		lcd_Clear(BLACK);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 fe08 	bl	80023b8 <lcd_Clear>
		status = INIT;
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <change_speed+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
		return;
 80017ae:	e05c      	b.n	800186a <change_speed+0xd6>
	}
	lcd_ShowStr(0, 10, "1. EASY", WHITE, BLACK, 16, 0);
 80017b0:	2300      	movs	r3, #0
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2310      	movs	r3, #16
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c0:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <change_speed+0xe4>)
 80017c2:	210a      	movs	r1, #10
 80017c4:	2000      	movs	r0, #0
 80017c6:	f001 fb69 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. MEDIUM", WHITE, BLACK, 16, 0);
 80017ca:	2300      	movs	r3, #0
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	2310      	movs	r3, #16
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017da:	4a28      	ldr	r2, [pc, #160]	; (800187c <change_speed+0xe8>)
 80017dc:	211e      	movs	r1, #30
 80017de:	2000      	movs	r0, #0
 80017e0:	f001 fb5c 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. HARD", WHITE, BLACK, 16, 0);
 80017e4:	2300      	movs	r3, #0
 80017e6:	9302      	str	r3, [sp, #8]
 80017e8:	2310      	movs	r3, #16
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2300      	movs	r3, #0
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f4:	4a22      	ldr	r2, [pc, #136]	; (8001880 <change_speed+0xec>)
 80017f6:	2132      	movs	r1, #50	; 0x32
 80017f8:	2000      	movs	r0, #0
 80017fa:	f001 fb4f 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(0, 70, "E. EXIT", WHITE, BLACK, 16, 0);
 80017fe:	2300      	movs	r3, #0
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	2310      	movs	r3, #16
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2300      	movs	r3, #0
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180e:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <change_speed+0xf0>)
 8001810:	2146      	movs	r1, #70	; 0x46
 8001812:	2000      	movs	r0, #0
 8001814:	f001 fb42 	bl	8002e9c <lcd_ShowStr>

	if(button_count[0] == 1){
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <change_speed+0xdc>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d109      	bne.n	8001834 <change_speed+0xa0>
		speed = 1000;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <change_speed+0xf4>)
 8001822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001826:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001828:	2000      	movs	r0, #0
 800182a:	f000 fdc5 	bl	80023b8 <lcd_Clear>
		status = INIT;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <change_speed+0xe0>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
	}
	if(button_count[1] == 1){
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <change_speed+0xdc>)
 8001836:	885b      	ldrh	r3, [r3, #2]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d109      	bne.n	8001850 <change_speed+0xbc>
		speed = 500;
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <change_speed+0xf4>)
 800183e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001842:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 fdb7 	bl	80023b8 <lcd_Clear>
		status = INIT;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <change_speed+0xe0>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
	}
	if(button_count[2] == 1){
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <change_speed+0xdc>)
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <change_speed+0xd6>
		speed = 100;
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <change_speed+0xf4>)
 800185a:	2264      	movs	r2, #100	; 0x64
 800185c:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800185e:	2000      	movs	r0, #0
 8001860:	f000 fdaa 	bl	80023b8 <lcd_Clear>
		status = INIT;
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <change_speed+0xe0>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
	}
}
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000a74 	.word	0x20000a74
 8001874:	20000104 	.word	0x20000104
 8001878:	0800d894 	.word	0x0800d894
 800187c:	0800d89c 	.word	0x0800d89c
 8001880:	0800d8a8 	.word	0x0800d8a8
 8001884:	0800d88c 	.word	0x0800d88c
 8001888:	20000000 	.word	0x20000000

0800188c <displayLeaderBoard>:

void displayLeaderBoard(struct player *head){
 800188c:	b580      	push	{r7, lr}
 800188e:	b0a0      	sub	sp, #128	; 0x80
 8001890:	af02      	add	r7, sp, #8
 8001892:	6078      	str	r0, [r7, #4]
	struct player *temp = head;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	677b      	str	r3, [r7, #116]	; 0x74
	int count_leaderboard = 1;
 8001898:	2301      	movs	r3, #1
 800189a:	673b      	str	r3, [r7, #112]	; 0x70
	uart_EspSendString("Leaderboard :\n");
 800189c:	482e      	ldr	r0, [pc, #184]	; (8001958 <displayLeaderBoard+0xcc>)
 800189e:	f004 fc7d 	bl	800619c <uart_EspSendString>
	while(temp != NULL){
 80018a2:	e04c      	b.n	800193e <displayLeaderBoard+0xb2>
		if(count_leaderboard < 7){
 80018a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	dc4d      	bgt.n	8001946 <displayLeaderBoard+0xba>
		char res[100];
		if(temp->player_mode == NORMAL)
 80018aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10c      	bne.n	80018cc <displayLeaderBoard+0x40>
			sprintf(res, "#%d ID: %d, score: %d, mode : NORMAL\n", count_leaderboard, temp->player_ID, temp->player_score);
 80018b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f107 000c 	add.w	r0, r7, #12
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4613      	mov	r3, r2
 80018c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018c4:	4925      	ldr	r1, [pc, #148]	; (800195c <displayLeaderBoard+0xd0>)
 80018c6:	f00a fdf5 	bl	800c4b4 <siprintf>
 80018ca:	e02d      	b.n	8001928 <displayLeaderBoard+0x9c>
		else if(temp->player_mode == WALL)
 80018cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10c      	bne.n	80018ee <displayLeaderBoard+0x62>
			sprintf(res, "#%d ID: %d, score: %d, mode : WALL\n", count_leaderboard, temp->player_ID, temp->player_score);
 80018d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f107 000c 	add.w	r0, r7, #12
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	4613      	mov	r3, r2
 80018e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018e6:	491e      	ldr	r1, [pc, #120]	; (8001960 <displayLeaderBoard+0xd4>)
 80018e8:	f00a fde4 	bl	800c4b4 <siprintf>
 80018ec:	e01c      	b.n	8001928 <displayLeaderBoard+0x9c>
		else if(temp->player_mode == WALLS)
 80018ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d10c      	bne.n	8001910 <displayLeaderBoard+0x84>
			sprintf(res, "#%d ID: %d, score: %d, mode : WALLS\n", count_leaderboard, temp->player_ID, temp->player_score);
 80018f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f107 000c 	add.w	r0, r7, #12
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001908:	4916      	ldr	r1, [pc, #88]	; (8001964 <displayLeaderBoard+0xd8>)
 800190a:	f00a fdd3 	bl	800c4b4 <siprintf>
 800190e:	e00b      	b.n	8001928 <displayLeaderBoard+0x9c>
		else
			sprintf(res, "#%d ID: %d, score: %d, mode : TIMER\n", count_leaderboard, temp->player_ID, temp->player_score);
 8001910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f107 000c 	add.w	r0, r7, #12
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001922:	4911      	ldr	r1, [pc, #68]	; (8001968 <displayLeaderBoard+0xdc>)
 8001924:	f00a fdc6 	bl	800c4b4 <siprintf>
		uart_EspSendString(res);
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fc35 	bl	800619c <uart_EspSendString>
		count_leaderboard++;
 8001932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001934:	3301      	adds	r3, #1
 8001936:	673b      	str	r3, [r7, #112]	; 0x70
		temp = temp -> next;
 8001938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	677b      	str	r3, [r7, #116]	; 0x74
	while(temp != NULL){
 800193e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1af      	bne.n	80018a4 <displayLeaderBoard+0x18>
 8001944:	e000      	b.n	8001948 <displayLeaderBoard+0xbc>
		}else
			break;
 8001946:	bf00      	nop
	}
	uart_EspSendString("/");
 8001948:	4808      	ldr	r0, [pc, #32]	; (800196c <displayLeaderBoard+0xe0>)
 800194a:	f004 fc27 	bl	800619c <uart_EspSendString>
}
 800194e:	bf00      	nop
 8001950:	3778      	adds	r7, #120	; 0x78
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	0800d8b0 	.word	0x0800d8b0
 800195c:	0800d8c0 	.word	0x0800d8c0
 8001960:	0800d8e8 	.word	0x0800d8e8
 8001964:	0800d90c 	.word	0x0800d90c
 8001968:	0800d934 	.word	0x0800d934
 800196c:	0800d95c 	.word	0x0800d95c

08001970 <fsm_machine>:

void fsm_machine(){
 8001970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001972:	b09f      	sub	sp, #124	; 0x7c
 8001974:	af04      	add	r7, sp, #16
	switch (status) {
 8001976:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <fsm_machine+0xf0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	f200 8228 	bhi.w	8001dd0 <fsm_machine+0x460>
 8001980:	a201      	add	r2, pc, #4	; (adr r2, 8001988 <fsm_machine+0x18>)
 8001982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001986:	bf00      	nop
 8001988:	080019a9 	.word	0x080019a9
 800198c:	08001a37 	.word	0x08001a37
 8001990:	08001d4d 	.word	0x08001d4d
 8001994:	0800199d 	.word	0x0800199d
 8001998:	080019a3 	.word	0x080019a3
	case CHANGE_MODE:
		change_mode();
 800199c:	f7ff fe64 	bl	8001668 <change_mode>
		break;
 80019a0:	e21d      	b.n	8001dde <fsm_machine+0x46e>
	case CHANGE_SPEED:
		change_speed();
 80019a2:	f7ff fef7 	bl	8001794 <change_speed>
		break;
 80019a6:	e21a      	b.n	8001dde <fsm_machine+0x46e>
	case INIT:
		screen_init();
 80019a8:	f001 fe5a 	bl	8003660 <screen_init>
		enter_ID();
 80019ac:	f7ff fdb8 	bl	8001520 <enter_ID>
		//test_Adc();

		if(button_count[14] == 1){
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <fsm_machine+0xf4>)
 80019b2:	8b9b      	ldrh	r3, [r3, #28]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <fsm_machine+0x54>
			lcd_Clear(BLACK);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 fcfd 	bl	80023b8 <lcd_Clear>
			status = CHANGE_MODE;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <fsm_machine+0xf0>)
 80019c0:	2203      	movs	r2, #3
 80019c2:	601a      	str	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <fsm_machine+0xf4>)
 80019c6:	8b1b      	ldrh	r3, [r3, #24]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d105      	bne.n	80019d8 <fsm_machine+0x68>
			lcd_Clear(BLACK);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 fcf3 	bl	80023b8 <lcd_Clear>
			status = CHANGE_SPEED;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <fsm_machine+0xf0>)
 80019d4:	2204      	movs	r2, #4
 80019d6:	601a      	str	r2, [r3, #0]
		}
		if(button_count[15] == 1){
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <fsm_machine+0xf4>)
 80019da:	8bdb      	ldrh	r3, [r3, #30]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d104      	bne.n	80019ea <fsm_machine+0x7a>
			displayLeaderBoard(leaderboard);
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <fsm_machine+0xf8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff51 	bl	800188c <displayLeaderBoard>
		}

		if(isButtonStart()){
 80019ea:	f004 faef 	bl	8005fcc <isButtonStart>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 81ef 	beq.w	8001dd4 <fsm_machine+0x464>
			status = PLAY;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <fsm_machine+0xf0>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//gui len Wifi
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <fsm_machine+0xfc>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <fsm_machine+0x100>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	1d38      	adds	r0, r7, #4
 8001a06:	491b      	ldr	r1, [pc, #108]	; (8001a74 <fsm_machine+0x104>)
 8001a08:	f00a fd54 	bl	800c4b4 <siprintf>
			uart_EspSendString(res);
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 fbc4 	bl	800619c <uart_EspSendString>
			count = 0;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <fsm_machine+0x108>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 fccc 	bl	80023b8 <lcd_Clear>
			re_init();
 8001a20:	f002 fc64 	bl	80042ec <re_init>
			screen_play();
 8001a24:	f001 ff22 	bl	800386c <screen_play>
			fsm_mode();
 8001a28:	f7ff fcf4 	bl	8001414 <fsm_mode>
			setTimer4(1000);
 8001a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a30:	f002 ff7e 	bl	8004930 <setTimer4>
		}
		break;
 8001a34:	e1ce      	b.n	8001dd4 <fsm_machine+0x464>
	case PLAY:
		if(flag_timer4 == 1){
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <fsm_machine+0x10c>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	f040 80b3 	bne.w	8001ba6 <fsm_machine+0x236>
			setTimer4(1000);
 8001a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a44:	f002 ff74 	bl	8004930 <setTimer4>
			if(colon == 0){
 8001a48:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <fsm_machine+0x110>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d119      	bne.n	8001a84 <fsm_machine+0x114>
				led7_SetColon(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f001 fb81 	bl	8003158 <led7_SetColon>
				colon = 1;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <fsm_machine+0x110>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	e018      	b.n	8001a90 <fsm_machine+0x120>
 8001a5e:	bf00      	nop
 8001a60:	20000104 	.word	0x20000104
 8001a64:	20000a74 	.word	0x20000a74
 8001a68:	20000130 	.word	0x20000130
 8001a6c:	20000108 	.word	0x20000108
 8001a70:	20000004 	.word	0x20000004
 8001a74:	0800d960 	.word	0x0800d960
 8001a78:	20000110 	.word	0x20000110
 8001a7c:	200009a4 	.word	0x200009a4
 8001a80:	20000128 	.word	0x20000128
			}else{
				led7_SetColon(0);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f001 fb67 	bl	8003158 <led7_SetColon>
				colon = 0;
 8001a8a:	4b98      	ldr	r3, [pc, #608]	; (8001cec <fsm_machine+0x37c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
			}
			count++;
 8001a90:	4b97      	ldr	r3, [pc, #604]	; (8001cf0 <fsm_machine+0x380>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	4a96      	ldr	r2, [pc, #600]	; (8001cf0 <fsm_machine+0x380>)
 8001a98:	6013      	str	r3, [r2, #0]
			timer = count;
 8001a9a:	4b95      	ldr	r3, [pc, #596]	; (8001cf0 <fsm_machine+0x380>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a95      	ldr	r2, [pc, #596]	; (8001cf4 <fsm_machine+0x384>)
 8001aa0:	6013      	str	r3, [r2, #0]
			if(wall == 1){
 8001aa2:	4b95      	ldr	r3, [pc, #596]	; (8001cf8 <fsm_machine+0x388>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d115      	bne.n	8001ad6 <fsm_machine+0x166>
				if(count%5 == 0){
 8001aaa:	4b91      	ldr	r3, [pc, #580]	; (8001cf0 <fsm_machine+0x380>)
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	4b93      	ldr	r3, [pc, #588]	; (8001cfc <fsm_machine+0x38c>)
 8001ab0:	fb83 2301 	smull	r2, r3, r3, r1
 8001ab4:	105a      	asrs	r2, r3, #1
 8001ab6:	17cb      	asrs	r3, r1, #31
 8001ab8:	1ad2      	subs	r2, r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	1aca      	subs	r2, r1, r3
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d107      	bne.n	8001ad6 <fsm_machine+0x166>
					if(walls == 0){
 8001ac6:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <fsm_machine+0x390>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <fsm_machine+0x162>
						delete_wall();
 8001ace:	f002 fad5 	bl	800407c <delete_wall>
					}
					spawn_wall();
 8001ad2:	f002 fc81 	bl	80043d8 <spawn_wall>
				}
			}
			if(mode == TIMER){
 8001ad6:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <fsm_machine+0x394>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d108      	bne.n	8001af0 <fsm_machine+0x180>
				countdown--;
 8001ade:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <fsm_machine+0x398>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	4a88      	ldr	r2, [pc, #544]	; (8001d08 <fsm_machine+0x398>)
 8001ae6:	6013      	str	r3, [r2, #0]
				timer = countdown;
 8001ae8:	4b87      	ldr	r3, [pc, #540]	; (8001d08 <fsm_machine+0x398>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a81      	ldr	r2, [pc, #516]	; (8001cf4 <fsm_machine+0x384>)
 8001aee:	6013      	str	r3, [r2, #0]
			}
			led7_SetDigit((timer%60)%10, 3, 0);
 8001af0:	4b80      	ldr	r3, [pc, #512]	; (8001cf4 <fsm_machine+0x384>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <fsm_machine+0x39c>)
 8001af6:	fb83 2301 	smull	r2, r3, r3, r1
 8001afa:	440b      	add	r3, r1
 8001afc:	115a      	asrs	r2, r3, #5
 8001afe:	17cb      	asrs	r3, r1, #31
 8001b00:	1ad2      	subs	r2, r2, r3
 8001b02:	4613      	mov	r3, r2
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	1aca      	subs	r2, r1, r3
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <fsm_machine+0x38c>)
 8001b0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001b12:	1099      	asrs	r1, r3, #2
 8001b14:	17d3      	asrs	r3, r2, #31
 8001b16:	1ac8      	subs	r0, r1, r3
 8001b18:	4603      	mov	r3, r0
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4403      	add	r3, r0
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	1ad0      	subs	r0, r2, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	2103      	movs	r1, #3
 8001b26:	f001 faf3 	bl	8003110 <led7_SetDigit>
			led7_SetDigit((timer%60)/10, 2, 0);
 8001b2a:	4b72      	ldr	r3, [pc, #456]	; (8001cf4 <fsm_machine+0x384>)
 8001b2c:	6819      	ldr	r1, [r3, #0]
 8001b2e:	4b77      	ldr	r3, [pc, #476]	; (8001d0c <fsm_machine+0x39c>)
 8001b30:	fb83 2301 	smull	r2, r3, r3, r1
 8001b34:	440b      	add	r3, r1
 8001b36:	115a      	asrs	r2, r3, #5
 8001b38:	17cb      	asrs	r3, r1, #31
 8001b3a:	1ad2      	subs	r2, r2, r3
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	1aca      	subs	r2, r1, r3
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <fsm_machine+0x38c>)
 8001b48:	fb83 1302 	smull	r1, r3, r3, r2
 8001b4c:	1099      	asrs	r1, r3, #2
 8001b4e:	17d3      	asrs	r3, r2, #31
 8001b50:	1acb      	subs	r3, r1, r3
 8001b52:	2200      	movs	r2, #0
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fada 	bl	8003110 <led7_SetDigit>
			led7_SetDigit((timer/60)%10, 1, 0);
 8001b5c:	4b65      	ldr	r3, [pc, #404]	; (8001cf4 <fsm_machine+0x384>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <fsm_machine+0x39c>)
 8001b62:	fb82 1203 	smull	r1, r2, r2, r3
 8001b66:	441a      	add	r2, r3
 8001b68:	1152      	asrs	r2, r2, #5
 8001b6a:	17db      	asrs	r3, r3, #31
 8001b6c:	1ad2      	subs	r2, r2, r3
 8001b6e:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <fsm_machine+0x38c>)
 8001b70:	fb83 1302 	smull	r1, r3, r3, r2
 8001b74:	1099      	asrs	r1, r3, #2
 8001b76:	17d3      	asrs	r3, r2, #31
 8001b78:	1ac8      	subs	r0, r1, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4403      	add	r3, r0
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	1ad0      	subs	r0, r2, r3
 8001b84:	2200      	movs	r2, #0
 8001b86:	2101      	movs	r1, #1
 8001b88:	f001 fac2 	bl	8003110 <led7_SetDigit>
			led7_SetDigit((timer/60)/10, 0, 0);
 8001b8c:	4b59      	ldr	r3, [pc, #356]	; (8001cf4 <fsm_machine+0x384>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a5f      	ldr	r2, [pc, #380]	; (8001d10 <fsm_machine+0x3a0>)
 8001b92:	fb82 1203 	smull	r1, r2, r2, r3
 8001b96:	1192      	asrs	r2, r2, #6
 8001b98:	17db      	asrs	r3, r3, #31
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f001 fab5 	bl	8003110 <led7_SetDigit>
		}
		if(isButtonUp()){
 8001ba6:	f004 fa35 	bl	8006014 <isButtonUp>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <fsm_machine+0x258>
			sw_up = 0;
 8001bb0:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <fsm_machine+0x3a4>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <fsm_machine+0x3a8>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001bbc:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <fsm_machine+0x3ac>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <fsm_machine+0x3b0>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonDown()){
 8001bc8:	f004 fa47 	bl	800605a <isButtonDown>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00b      	beq.n	8001bea <fsm_machine+0x27a>
			sw_up = 1;
 8001bd2:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <fsm_machine+0x3a4>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
			sw_down = 0;
 8001bd8:	4b4f      	ldr	r3, [pc, #316]	; (8001d18 <fsm_machine+0x3a8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001bde:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <fsm_machine+0x3ac>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001be4:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <fsm_machine+0x3b0>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonLeft()){
 8001bea:	f004 fa5b 	bl	80060a4 <isButtonLeft>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <fsm_machine+0x29c>
			sw_up = 1;
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <fsm_machine+0x3a4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <fsm_machine+0x3a8>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
			sw_left = 0;
 8001c00:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <fsm_machine+0x3ac>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001c06:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <fsm_machine+0x3b0>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonRight()){
 8001c0c:	f004 fa6f 	bl	80060ee <isButtonRight>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <fsm_machine+0x2be>
			sw_up = 1;
 8001c16:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <fsm_machine+0x3a4>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <fsm_machine+0x3a8>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <fsm_machine+0x3ac>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
			sw_right = 0;
 8001c28:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <fsm_machine+0x3b0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		wait_check();
 8001c2e:	f002 fda7 	bl	8004780 <wait_check>
		update_grid();
 8001c32:	f002 f985 	bl	8003f40 <update_grid>
		if(flag_timer3 == 1){
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <fsm_machine+0x3b4>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10b      	bne.n	8001c56 <fsm_machine+0x2e6>
			//wait_check();
			setTimer3(speed);
 8001c3e:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <fsm_machine+0x3b8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 fe57 	bl	80048f8 <setTimer3>
			move_snake();
 8001c4a:	f002 fa77 	bl	800413c <move_snake>
			//check_food();
			//check_collision();
			screen_score();
 8001c4e:	f001 fe43 	bl	80038d8 <screen_score>
			update_grid();
 8001c52:	f002 f975 	bl	8003f40 <update_grid>
		}
		if(lose == 1){
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <fsm_machine+0x3bc>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	f040 80bc 	bne.w	8001dd8 <fsm_machine+0x468>
			status = GAME_OVER;
 8001c60:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <fsm_machine+0x3c0>)
 8001c62:	2202      	movs	r2, #2
 8001c64:	601a      	str	r2, [r3, #0]
			addPlayer(&leaderboard, ID, score, mode);
 8001c66:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <fsm_machine+0x3c4>)
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <fsm_machine+0x3c8>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <fsm_machine+0x394>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4831      	ldr	r0, [pc, #196]	; (8001d3c <fsm_machine+0x3cc>)
 8001c76:	f001 f975 	bl	8002f64 <addPlayer>
			send_flag = 1;
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <fsm_machine+0x3d0>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d was game over\nScore : %d\nTime : %d:%d %c", ID, score, count/60, count%60, sec);//STM32 -> wifi
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <fsm_machine+0x3c4>)
 8001c82:	681d      	ldr	r5, [r3, #0]
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <fsm_machine+0x3c8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461e      	mov	r6, r3
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <fsm_machine+0x380>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <fsm_machine+0x39c>)
 8001c90:	fb82 1203 	smull	r1, r2, r2, r3
 8001c94:	441a      	add	r2, r3
 8001c96:	1152      	asrs	r2, r2, #5
 8001c98:	17db      	asrs	r3, r3, #31
 8001c9a:	1ad0      	subs	r0, r2, r3
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <fsm_machine+0x380>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <fsm_machine+0x39c>)
 8001ca2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	1159      	asrs	r1, r3, #5
 8001caa:	17d3      	asrs	r3, r2, #31
 8001cac:	1ac9      	subs	r1, r1, r3
 8001cae:	460b      	mov	r3, r1
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	1a5b      	subs	r3, r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	1ad1      	subs	r1, r2, r3
 8001cb8:	4b22      	ldr	r3, [pc, #136]	; (8001d44 <fsm_machine+0x3d4>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	1d3c      	adds	r4, r7, #4
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	9101      	str	r1, [sp, #4]
 8001cc2:	9000      	str	r0, [sp, #0]
 8001cc4:	4633      	mov	r3, r6
 8001cc6:	462a      	mov	r2, r5
 8001cc8:	491f      	ldr	r1, [pc, #124]	; (8001d48 <fsm_machine+0x3d8>)
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f00a fbf2 	bl	800c4b4 <siprintf>
			uart_EspSendString(res);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 fa62 	bl	800619c <uart_EspSendString>
			send_flag =0;
 8001cd8:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <fsm_machine+0x3d0>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f000 fb6a 	bl	80023b8 <lcd_Clear>
			lose = 0;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <fsm_machine+0x3bc>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
		}
		break;
 8001cea:	e075      	b.n	8001dd8 <fsm_machine+0x468>
 8001cec:	20000128 	.word	0x20000128
 8001cf0:	20000110 	.word	0x20000110
 8001cf4:	2000011c 	.word	0x2000011c
 8001cf8:	20000114 	.word	0x20000114
 8001cfc:	66666667 	.word	0x66666667
 8001d00:	20000118 	.word	0x20000118
 8001d04:	2000010c 	.word	0x2000010c
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	88888889 	.word	0x88888889
 8001d10:	1b4e81b5 	.word	0x1b4e81b5
 8001d14:	20000028 	.word	0x20000028
 8001d18:	2000002c 	.word	0x2000002c
 8001d1c:	20000034 	.word	0x20000034
 8001d20:	20000030 	.word	0x20000030
 8001d24:	2000099e 	.word	0x2000099e
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000994 	.word	0x20000994
 8001d30:	20000104 	.word	0x20000104
 8001d34:	20000108 	.word	0x20000108
 8001d38:	20000990 	.word	0x20000990
 8001d3c:	20000130 	.word	0x20000130
 8001d40:	2000012c 	.word	0x2000012c
 8001d44:	20000004 	.word	0x20000004
 8001d48:	0800d974 	.word	0x0800d974
	case GAME_OVER:
		enter_ID();
 8001d4c:	f7ff fbe8 	bl	8001520 <enter_ID>
		screen_game_over();
 8001d50:	f001 fdea 	bl	8003928 <screen_game_over>
		if(button_count[14] == 1){
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <fsm_machine+0x478>)
 8001d56:	8b9b      	ldrh	r3, [r3, #28]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <fsm_machine+0x3f8>
			lcd_Clear(BLACK);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 fb2b 	bl	80023b8 <lcd_Clear>
			status = CHANGE_MODE;
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <fsm_machine+0x47c>)
 8001d64:	2203      	movs	r2, #3
 8001d66:	601a      	str	r2, [r3, #0]
		}

		if(button_count[12] == 1){
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <fsm_machine+0x478>)
 8001d6a:	8b1b      	ldrh	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <fsm_machine+0x40c>
			lcd_Clear(BLACK);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f000 fb21 	bl	80023b8 <lcd_Clear>
			status = CHANGE_SPEED;
 8001d76:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <fsm_machine+0x47c>)
 8001d78:	2204      	movs	r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
		}

		if(button_count[15] == 1){
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <fsm_machine+0x478>)
 8001d7e:	8bdb      	ldrh	r3, [r3, #30]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d104      	bne.n	8001d8e <fsm_machine+0x41e>
			displayLeaderBoard(leaderboard);
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <fsm_machine+0x480>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fd7f 	bl	800188c <displayLeaderBoard>
		}

		if(isButtonRestart()){
 8001d8e:	f004 f9d3 	bl	8006138 <isButtonRestart>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d021      	beq.n	8001ddc <fsm_machine+0x46c>
//			status = INIT;
//			lcd_Clear(BLACK);
//			re_init();
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//STM32->Wifi
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <fsm_machine+0x484>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <fsm_machine+0x488>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	1d38      	adds	r0, r7, #4
 8001da2:	4916      	ldr	r1, [pc, #88]	; (8001dfc <fsm_machine+0x48c>)
 8001da4:	f00a fb86 	bl	800c4b4 <siprintf>
			uart_EspSendString(res);
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 f9f6 	bl	800619c <uart_EspSendString>
			count = 0;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <fsm_machine+0x490>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
			status = PLAY;
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <fsm_machine+0x47c>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f000 fafb 	bl	80023b8 <lcd_Clear>
			re_init();
 8001dc2:	f002 fa93 	bl	80042ec <re_init>
			screen_play();
 8001dc6:	f001 fd51 	bl	800386c <screen_play>
			fsm_mode();
 8001dca:	f7ff fb23 	bl	8001414 <fsm_mode>
		}
		break;
 8001dce:	e005      	b.n	8001ddc <fsm_machine+0x46c>
	default:
		break;
 8001dd0:	bf00      	nop
 8001dd2:	e004      	b.n	8001dde <fsm_machine+0x46e>
		break;
 8001dd4:	bf00      	nop
 8001dd6:	e002      	b.n	8001dde <fsm_machine+0x46e>
		break;
 8001dd8:	bf00      	nop
 8001dda:	e000      	b.n	8001dde <fsm_machine+0x46e>
		break;
 8001ddc:	bf00      	nop
	}
}
 8001dde:	bf00      	nop
 8001de0:	376c      	adds	r7, #108	; 0x6c
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000a74 	.word	0x20000a74
 8001dec:	20000104 	.word	0x20000104
 8001df0:	20000130 	.word	0x20000130
 8001df4:	20000108 	.word	0x20000108
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	0800d960 	.word	0x0800d960
 8001e00:	20000110 	.word	0x20000110

08001e04 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08e      	sub	sp, #56	; 0x38
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]
 8001e1a:	615a      	str	r2, [r3, #20]
 8001e1c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001e1e:	463b      	mov	r3, r7
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	615a      	str	r2, [r3, #20]
 8001e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e32:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001e36:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <MX_FSMC_Init+0xf0>)
 8001e3c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e4a:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e52:	2210      	movs	r2, #16
 8001e54:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001e62:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e68:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001e96:	230f      	movs	r3, #15
 8001e98:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001e9e:	233c      	movs	r3, #60	; 0x3c
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001ea6:	2310      	movs	r3, #16
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001eaa:	2311      	movs	r3, #17
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001eba:	2309      	movs	r3, #9
 8001ebc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001ec2:	2310      	movs	r3, #16
 8001ec4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001ec6:	2311      	movs	r3, #17
 8001ec8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001ece:	463a      	mov	r2, r7
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4806      	ldr	r0, [pc, #24]	; (8001ef0 <MX_FSMC_Init+0xec>)
 8001ed8:	f008 f838 	bl	8009f4c <HAL_SRAM_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001ee2:	f001 fbb7 	bl	8003654 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001ee6:	bf00      	nop
 8001ee8:	3738      	adds	r7, #56	; 0x38
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000a94 	.word	0x20000a94
 8001ef4:	a0000104 	.word	0xa0000104

08001ef8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_FSMC_MspInit+0x88>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d131      	bne.n	8001f78 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_FSMC_MspInit+0x88>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <HAL_FSMC_MspInit+0x8c>)
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_FSMC_MspInit+0x8c>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6393      	str	r3, [r2, #56]	; 0x38
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_FSMC_MspInit+0x8c>)
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001f36:	f64f 7388 	movw	r3, #65416	; 0xff88
 8001f3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <HAL_FSMC_MspInit+0x90>)
 8001f52:	f005 fc37 	bl	80077c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f56:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001f5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f68:	230c      	movs	r3, #12
 8001f6a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <HAL_FSMC_MspInit+0x94>)
 8001f72:	f005 fc27 	bl	80077c4 <HAL_GPIO_Init>
 8001f76:	e000      	b.n	8001f7a <HAL_FSMC_MspInit+0x82>
    return;
 8001f78:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000134 	.word	0x20000134
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40020c00 	.word	0x40020c00

08001f90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001f98:	f7ff ffae 	bl	8001ef8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08e      	sub	sp, #56	; 0x38
 8001fa8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	4b7e      	ldr	r3, [pc, #504]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a7d      	ldr	r2, [pc, #500]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	623b      	str	r3, [r7, #32]
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	4b77      	ldr	r3, [pc, #476]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a76      	ldr	r2, [pc, #472]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a6f      	ldr	r2, [pc, #444]	; (80021b8 <MX_GPIO_Init+0x214>)
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	4b69      	ldr	r3, [pc, #420]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a68      	ldr	r2, [pc, #416]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a61      	ldr	r2, [pc, #388]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <MX_GPIO_Init+0x214>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <MX_GPIO_Init+0x214>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a5a      	ldr	r2, [pc, #360]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a53      	ldr	r2, [pc, #332]	; (80021b8 <MX_GPIO_Init+0x214>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a4c      	ldr	r2, [pc, #304]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <MX_GPIO_Init+0x214>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	2170      	movs	r1, #112	; 0x70
 800209e:	4847      	ldr	r0, [pc, #284]	; (80021bc <MX_GPIO_Init+0x218>)
 80020a0:	f005 fd44 	bl	8007b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80020aa:	4845      	ldr	r0, [pc, #276]	; (80021c0 <MX_GPIO_Init+0x21c>)
 80020ac:	f005 fd3e 	bl	8007b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80020b6:	4843      	ldr	r0, [pc, #268]	; (80021c4 <MX_GPIO_Init+0x220>)
 80020b8:	f005 fd38 	bl	8007b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c2:	4841      	ldr	r0, [pc, #260]	; (80021c8 <MX_GPIO_Init+0x224>)
 80020c4:	f005 fd32 	bl	8007b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2108      	movs	r1, #8
 80020cc:	483f      	ldr	r0, [pc, #252]	; (80021cc <MX_GPIO_Init+0x228>)
 80020ce:	f005 fd2d 	bl	8007b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80020d2:	2370      	movs	r3, #112	; 0x70
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4834      	ldr	r0, [pc, #208]	; (80021bc <MX_GPIO_Init+0x218>)
 80020ea:	f005 fb6b 	bl	80077c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80020ee:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	482e      	ldr	r0, [pc, #184]	; (80021c0 <MX_GPIO_Init+0x21c>)
 8002108:	f005 fb5c 	bl	80077c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 800210c:	23c0      	movs	r3, #192	; 0xc0
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211c:	4619      	mov	r1, r3
 800211e:	482a      	ldr	r0, [pc, #168]	; (80021c8 <MX_GPIO_Init+0x224>)
 8002120:	f005 fb50 	bl	80077c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8002124:	2330      	movs	r3, #48	; 0x30
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4822      	ldr	r0, [pc, #136]	; (80021c0 <MX_GPIO_Init+0x21c>)
 8002138:	f005 fb44 	bl	80077c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 800213c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800214e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002152:	4619      	mov	r1, r3
 8002154:	481b      	ldr	r0, [pc, #108]	; (80021c4 <MX_GPIO_Init+0x220>)
 8002156:	f005 fb35 	bl	80077c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 800215a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002164:	2301      	movs	r3, #1
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800216c:	4619      	mov	r1, r3
 800216e:	4814      	ldr	r0, [pc, #80]	; (80021c0 <MX_GPIO_Init+0x21c>)
 8002170:	f005 fb28 	bl	80077c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	2301      	movs	r3, #1
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218a:	4619      	mov	r1, r3
 800218c:	480e      	ldr	r0, [pc, #56]	; (80021c8 <MX_GPIO_Init+0x224>)
 800218e:	f005 fb19 	bl	80077c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8002192:	2308      	movs	r3, #8
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	4619      	mov	r1, r3
 80021a8:	4808      	ldr	r0, [pc, #32]	; (80021cc <MX_GPIO_Init+0x228>)
 80021aa:	f005 fb0b 	bl	80077c4 <HAL_GPIO_Init>

}
 80021ae:	bf00      	nop
 80021b0:	3738      	adds	r7, #56	; 0x38
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40020800 	.word	0x40020800
 80021c4:	40021800 	.word	0x40021800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020c00 	.word	0x40020c00

080021d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <MX_I2C1_Init+0x50>)
 80021d6:	4a13      	ldr	r2, [pc, #76]	; (8002224 <MX_I2C1_Init+0x54>)
 80021d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_I2C1_Init+0x50>)
 80021dc:	4a12      	ldr	r2, [pc, #72]	; (8002228 <MX_I2C1_Init+0x58>)
 80021de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_I2C1_Init+0x50>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_I2C1_Init+0x50>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_I2C1_Init+0x50>)
 80021ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <MX_I2C1_Init+0x50>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_I2C1_Init+0x50>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <MX_I2C1_Init+0x50>)
 8002202:	2200      	movs	r2, #0
 8002204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_I2C1_Init+0x50>)
 8002208:	2200      	movs	r2, #0
 800220a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800220c:	4804      	ldr	r0, [pc, #16]	; (8002220 <MX_I2C1_Init+0x50>)
 800220e:	f005 fcc1 	bl	8007b94 <HAL_I2C_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002218:	f001 fa1c 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800221c:	bf00      	nop
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000ae4 	.word	0x20000ae4
 8002224:	40005400 	.word	0x40005400
 8002228:	000186a0 	.word	0x000186a0

0800222c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <HAL_I2C_MspInit+0x84>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d12b      	bne.n	80022a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800226a:	23c0      	movs	r3, #192	; 0xc0
 800226c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226e:	2312      	movs	r3, #18
 8002270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002276:	2303      	movs	r3, #3
 8002278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800227a:	2304      	movs	r3, #4
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	480c      	ldr	r0, [pc, #48]	; (80022b8 <HAL_I2C_MspInit+0x8c>)
 8002286:	f005 fa9d 	bl	80077c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 8002294:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_I2C_MspInit+0x88>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	; 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40005400 	.word	0x40005400
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020400 	.word	0x40020400

080022bc <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <LCD_WR_REG+0x1c>)
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	8013      	strh	r3, [r2, #0]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	600ffffe 	.word	0x600ffffe

080022dc <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80022e6:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <LCD_WR_DATA+0x1c>)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	8053      	strh	r3, [r2, #2]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	600ffffe 	.word	0x600ffffe

080022fc <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <LCD_RD_DATA+0x20>)
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	b29b      	uxth	r3, r3
 8002308:	80fb      	strh	r3, [r7, #6]
	return ram;
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	b29b      	uxth	r3, r3
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	600ffffe 	.word	0x600ffffe

08002320 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4604      	mov	r4, r0
 8002328:	4608      	mov	r0, r1
 800232a:	4611      	mov	r1, r2
 800232c:	461a      	mov	r2, r3
 800232e:	4623      	mov	r3, r4
 8002330:	80fb      	strh	r3, [r7, #6]
 8002332:	4603      	mov	r3, r0
 8002334:	80bb      	strh	r3, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	807b      	strh	r3, [r7, #2]
 800233a:	4613      	mov	r3, r2
 800233c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800233e:	202a      	movs	r0, #42	; 0x2a
 8002340:	f7ff ffbc 	bl	80022bc <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ffc6 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	b29b      	uxth	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ffc0 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	b29b      	uxth	r3, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ffba 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ffb4 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8002374:	202b      	movs	r0, #43	; 0x2b
 8002376:	f7ff ffa1 	bl	80022bc <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 800237a:	88bb      	ldrh	r3, [r7, #4]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b29b      	uxth	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ffab 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	b29b      	uxth	r3, r3
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff ffa5 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8002392:	883b      	ldrh	r3, [r7, #0]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff9f 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800239e:	883b      	ldrh	r3, [r7, #0]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff99 	bl	80022dc <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80023aa:	202c      	movs	r0, #44	; 0x2c
 80023ac:	f7ff ff86 	bl	80022bc <LCD_WR_REG>
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <lcd_Clear+0x60>)
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	4b13      	ldr	r3, [pc, #76]	; (8002418 <lcd_Clear+0x60>)
 80023cc:	885b      	ldrh	r3, [r3, #2]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff ffa3 	bl	8002320 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80023da:	2300      	movs	r3, #0
 80023dc:	81fb      	strh	r3, [r7, #14]
 80023de:	e011      	b.n	8002404 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	81bb      	strh	r3, [r7, #12]
 80023e4:	e006      	b.n	80023f4 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff77 	bl	80022dc <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80023ee:	89bb      	ldrh	r3, [r7, #12]
 80023f0:	3301      	adds	r3, #1
 80023f2:	81bb      	strh	r3, [r7, #12]
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <lcd_Clear+0x60>)
 80023f6:	885b      	ldrh	r3, [r3, #2]
 80023f8:	89ba      	ldrh	r2, [r7, #12]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3f3      	bcc.n	80023e6 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	3301      	adds	r3, #1
 8002402:	81fb      	strh	r3, [r7, #14]
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <lcd_Clear+0x60>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	89fa      	ldrh	r2, [r7, #14]
 800240a:	429a      	cmp	r2, r3
 800240c:	d3e8      	bcc.n	80023e0 <lcd_Clear+0x28>
		}
	}
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000b38 	.word	0x20000b38

0800241c <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	4604      	mov	r4, r0
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4623      	mov	r3, r4
 800242c:	80fb      	strh	r3, [r7, #6]
 800242e:	4603      	mov	r3, r0
 8002430:	80bb      	strh	r3, [r7, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	807b      	strh	r3, [r7, #2]
 8002436:	4613      	mov	r3, r2
 8002438:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	883b      	ldrh	r3, [r7, #0]
 8002442:	3b01      	subs	r3, #1
 8002444:	b29b      	uxth	r3, r3
 8002446:	88b9      	ldrh	r1, [r7, #4]
 8002448:	88f8      	ldrh	r0, [r7, #6]
 800244a:	f7ff ff69 	bl	8002320 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	81fb      	strh	r3, [r7, #14]
 8002452:	e010      	b.n	8002476 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8002454:	88fb      	ldrh	r3, [r7, #6]
 8002456:	81bb      	strh	r3, [r7, #12]
 8002458:	e006      	b.n	8002468 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 800245a:	8c3b      	ldrh	r3, [r7, #32]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff3d 	bl	80022dc <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8002462:	89bb      	ldrh	r3, [r7, #12]
 8002464:	3301      	adds	r3, #1
 8002466:	81bb      	strh	r3, [r7, #12]
 8002468:	89ba      	ldrh	r2, [r7, #12]
 800246a:	887b      	ldrh	r3, [r7, #2]
 800246c:	429a      	cmp	r2, r3
 800246e:	d3f4      	bcc.n	800245a <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002470:	89fb      	ldrh	r3, [r7, #14]
 8002472:	3301      	adds	r3, #1
 8002474:	81fb      	strh	r3, [r7, #14]
 8002476:	89fa      	ldrh	r2, [r7, #14]
 8002478:	883b      	ldrh	r3, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d3ea      	bcc.n	8002454 <lcd_Fill+0x38>
		}
	}
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
 8002492:	460b      	mov	r3, r1
 8002494:	80bb      	strh	r3, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	88fa      	ldrh	r2, [r7, #6]
 800249e:	88b9      	ldrh	r1, [r7, #4]
 80024a0:	88f8      	ldrh	r0, [r7, #6]
 80024a2:	f7ff ff3d 	bl	8002320 <lcd_AddressSet>
	LCD_WR_DATA(color);
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff17 	bl	80022dc <LCD_WR_DATA>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b08d      	sub	sp, #52	; 0x34
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4604      	mov	r4, r0
 80024be:	4608      	mov	r0, r1
 80024c0:	4611      	mov	r1, r2
 80024c2:	461a      	mov	r2, r3
 80024c4:	4623      	mov	r3, r4
 80024c6:	80fb      	strh	r3, [r7, #6]
 80024c8:	4603      	mov	r3, r0
 80024ca:	80bb      	strh	r3, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
 80024d0:	4613      	mov	r3, r2
 80024d2:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80024dc:	887a      	ldrh	r2, [r7, #2]
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80024e4:	883a      	ldrh	r2, [r7, #0]
 80024e6:	88bb      	ldrh	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	dd02      	ble.n	8002500 <lcd_DrawLine+0x4a>
 80024fa:	2301      	movs	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e00b      	b.n	8002518 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <lcd_DrawLine+0x56>
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e005      	b.n	8002518 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	425b      	negs	r3, r3
 8002516:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	dd02      	ble.n	8002524 <lcd_DrawLine+0x6e>
 800251e:	2301      	movs	r3, #1
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	e00b      	b.n	800253c <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <lcd_DrawLine+0x7a>
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e005      	b.n	800253c <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	425b      	negs	r3, r3
 800253a:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 800253c:	6a3a      	ldr	r2, [r7, #32]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	429a      	cmp	r2, r3
 8002542:	dd02      	ble.n	800254a <lcd_DrawLine+0x94>
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	61bb      	str	r3, [r7, #24]
 8002548:	e001      	b.n	800254e <lcd_DrawLine+0x98>
	else distance=delta_y;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800254e:	2300      	movs	r3, #0
 8002550:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002552:	e02b      	b.n	80025ac <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	b29b      	uxth	r3, r3
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	b291      	uxth	r1, r2
 800255c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff91 	bl	8002488 <lcd_DrawPoint>
		xerr+=delta_x;
 8002566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	4413      	add	r3, r2
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	4413      	add	r3, r2
 8002574:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8002576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	429a      	cmp	r2, r3
 800257c:	dd07      	ble.n	800258e <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800257e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	429a      	cmp	r2, r3
 8002594:	dd07      	ble.n	80025a6 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8002596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80025a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025a8:	3301      	adds	r3, #1
 80025aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80025ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	dacf      	bge.n	8002554 <lcd_DrawLine+0x9e>
		}
	}
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3734      	adds	r7, #52	; 0x34
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd90      	pop	{r4, r7, pc}
	...

080025c0 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4604      	mov	r4, r0
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4623      	mov	r3, r4
 80025d0:	80fb      	strh	r3, [r7, #6]
 80025d2:	4603      	mov	r3, r0
 80025d4:	80bb      	strh	r3, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70fb      	strb	r3, [r7, #3]
 80025da:	4613      	mov	r3, r2
 80025dc:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80025de:	2300      	movs	r3, #0
 80025e0:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80025e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	08db      	lsrs	r3, r3, #3
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf14      	ite	ne
 8002602:	2301      	movne	r3, #1
 8002604:	2300      	moveq	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4413      	add	r3, r2
 800260a:	b29a      	uxth	r2, r3
 800260c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002610:	b29b      	uxth	r3, r3
 8002612:	fb12 f303 	smulbb	r3, r2, r3
 8002616:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	3b20      	subs	r3, #32
 800261c:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	b29a      	uxth	r2, r3
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	4413      	add	r3, r2
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29c      	uxth	r4, r3
 800262c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002630:	b29a      	uxth	r2, r3
 8002632:	88bb      	ldrh	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29b      	uxth	r3, r3
 800263c:	88b9      	ldrh	r1, [r7, #4]
 800263e:	88f8      	ldrh	r0, [r7, #6]
 8002640:	4622      	mov	r2, r4
 8002642:	f7ff fe6d 	bl	8002320 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002646:	2300      	movs	r3, #0
 8002648:	827b      	strh	r3, [r7, #18]
 800264a:	e07a      	b.n	8002742 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 800264c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002650:	2b0c      	cmp	r3, #12
 8002652:	d028      	beq.n	80026a6 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8002654:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002658:	2b10      	cmp	r3, #16
 800265a:	d108      	bne.n	800266e <lcd_ShowChar+0xae>
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	8a7b      	ldrh	r3, [r7, #18]
 8002660:	493c      	ldr	r1, [pc, #240]	; (8002754 <lcd_ShowChar+0x194>)
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	440a      	add	r2, r1
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	75fb      	strb	r3, [r7, #23]
 800266c:	e01b      	b.n	80026a6 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800266e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002672:	2b18      	cmp	r3, #24
 8002674:	d10b      	bne.n	800268e <lcd_ShowChar+0xce>
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	8a79      	ldrh	r1, [r7, #18]
 800267a:	4837      	ldr	r0, [pc, #220]	; (8002758 <lcd_ShowChar+0x198>)
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	4403      	add	r3, r0
 8002686:	440b      	add	r3, r1
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	75fb      	strb	r3, [r7, #23]
 800268c:	e00b      	b.n	80026a6 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800268e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002692:	2b20      	cmp	r3, #32
 8002694:	d15a      	bne.n	800274c <lcd_ShowChar+0x18c>
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	8a7b      	ldrh	r3, [r7, #18]
 800269a:	4930      	ldr	r1, [pc, #192]	; (800275c <lcd_ShowChar+0x19c>)
 800269c:	0192      	lsls	r2, r2, #6
 800269e:	440a      	add	r2, r1
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	75bb      	strb	r3, [r7, #22]
 80026aa:	e044      	b.n	8002736 <lcd_ShowChar+0x176>
		{
			if(!mode)
 80026ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d120      	bne.n	80026f6 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80026b4:	7dfa      	ldrb	r2, [r7, #23]
 80026b6:	7dbb      	ldrb	r3, [r7, #22]
 80026b8:	fa42 f303 	asr.w	r3, r2, r3
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d004      	beq.n	80026ce <lcd_ShowChar+0x10e>
 80026c4:	883b      	ldrh	r3, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fe08 	bl	80022dc <LCD_WR_DATA>
 80026cc:	e003      	b.n	80026d6 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80026ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fe03 	bl	80022dc <LCD_WR_DATA>
				m++;
 80026d6:	7d7b      	ldrb	r3, [r7, #21]
 80026d8:	3301      	adds	r3, #1
 80026da:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80026dc:	7d7b      	ldrb	r3, [r7, #21]
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80026e4:	fb02 f201 	mul.w	r2, r2, r1
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d11f      	bne.n	8002730 <lcd_ShowChar+0x170>
				{
					m=0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	757b      	strb	r3, [r7, #21]
					break;
 80026f4:	e022      	b.n	800273c <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80026f6:	7dfa      	ldrb	r2, [r7, #23]
 80026f8:	7dbb      	ldrb	r3, [r7, #22]
 80026fa:	fa42 f303 	asr.w	r3, r2, r3
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <lcd_ShowChar+0x152>
 8002706:	883a      	ldrh	r2, [r7, #0]
 8002708:	88b9      	ldrh	r1, [r7, #4]
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff febb 	bl	8002488 <lcd_DrawPoint>
				x++;
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	3301      	adds	r3, #1
 8002716:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	8a3b      	ldrh	r3, [r7, #16]
 800271c:	1ad2      	subs	r2, r2, r3
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	429a      	cmp	r2, r3
 8002722:	d105      	bne.n	8002730 <lcd_ShowChar+0x170>
				{
					x=x0;
 8002724:	8a3b      	ldrh	r3, [r7, #16]
 8002726:	80fb      	strh	r3, [r7, #6]
					y++;
 8002728:	88bb      	ldrh	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	80bb      	strh	r3, [r7, #4]
					break;
 800272e:	e005      	b.n	800273c <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002730:	7dbb      	ldrb	r3, [r7, #22]
 8002732:	3301      	adds	r3, #1
 8002734:	75bb      	strb	r3, [r7, #22]
 8002736:	7dbb      	ldrb	r3, [r7, #22]
 8002738:	2b07      	cmp	r3, #7
 800273a:	d9b7      	bls.n	80026ac <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 800273c:	8a7b      	ldrh	r3, [r7, #18]
 800273e:	3301      	adds	r3, #1
 8002740:	827b      	strh	r3, [r7, #18]
 8002742:	8a7a      	ldrh	r2, [r7, #18]
 8002744:	89bb      	ldrh	r3, [r7, #12]
 8002746:	429a      	cmp	r2, r3
 8002748:	d380      	bcc.n	800264c <lcd_ShowChar+0x8c>
 800274a:	e000      	b.n	800274e <lcd_ShowChar+0x18e>
		else return;
 800274c:	bf00      	nop
				}
			}
		}
	}
}
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd90      	pop	{r4, r7, pc}
 8002754:	0800dc34 	.word	0x0800dc34
 8002758:	0800e224 	.word	0x0800e224
 800275c:	0800f3f4 	.word	0x0800f3f4

08002760 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	460a      	mov	r2, r1
 800276a:	71fb      	strb	r3, [r7, #7]
 800276c:	4613      	mov	r3, r2
 800276e:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002770:	2301      	movs	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002774:	e004      	b.n	8002780 <mypow+0x20>
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	fb02 f303 	mul.w	r3, r2, r3
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	79bb      	ldrb	r3, [r7, #6]
 8002782:	1e5a      	subs	r2, r3, #1
 8002784:	71ba      	strb	r2, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f5      	bne.n	8002776 <mypow+0x16>
	return result;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af04      	add	r7, sp, #16
 800279e:	4604      	mov	r4, r0
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4623      	mov	r3, r4
 80027a8:	80fb      	strh	r3, [r7, #6]
 80027aa:	4603      	mov	r3, r0
 80027ac:	80bb      	strh	r3, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	807b      	strh	r3, [r7, #2]
 80027b2:	4613      	mov	r3, r2
 80027b4:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80027ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027be:	085b      	lsrs	r3, r3, #1
 80027c0:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e059      	b.n	800287c <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80027c8:	887c      	ldrh	r4, [r7, #2]
 80027ca:	787a      	ldrb	r2, [r7, #1]
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4619      	mov	r1, r3
 80027d8:	200a      	movs	r0, #10
 80027da:	f7ff ffc1 	bl	8002760 <mypow>
 80027de:	4603      	mov	r3, r0
 80027e0:	fbb4 f1f3 	udiv	r1, r4, r3
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <lcd_ShowIntNum+0xf8>)
 80027e6:	fba3 2301 	umull	r2, r3, r3, r1
 80027ea:	08da      	lsrs	r2, r3, #3
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	1aca      	subs	r2, r1, r3
 80027f6:	4613      	mov	r3, r2
 80027f8:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80027fa:	7bbb      	ldrb	r3, [r7, #14]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d121      	bne.n	8002844 <lcd_ShowIntNum+0xac>
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	787b      	ldrb	r3, [r7, #1]
 8002804:	3b01      	subs	r3, #1
 8002806:	429a      	cmp	r2, r3
 8002808:	da1c      	bge.n	8002844 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800280a:	7b3b      	ldrb	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d117      	bne.n	8002840 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	b29a      	uxth	r2, r3
 8002814:	7b7b      	ldrb	r3, [r7, #13]
 8002816:	b29b      	uxth	r3, r3
 8002818:	fb12 f303 	smulbb	r3, r2, r3
 800281c:	b29a      	uxth	r2, r3
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	4413      	add	r3, r2
 8002822:	b298      	uxth	r0, r3
 8002824:	8c3a      	ldrh	r2, [r7, #32]
 8002826:	88b9      	ldrh	r1, [r7, #4]
 8002828:	2300      	movs	r3, #0
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	2220      	movs	r2, #32
 800283a:	f7ff fec1 	bl	80025c0 <lcd_ShowChar>
				continue;
 800283e:	e01a      	b.n	8002876 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002840:	2301      	movs	r3, #1
 8002842:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	b29a      	uxth	r2, r3
 8002848:	7b7b      	ldrb	r3, [r7, #13]
 800284a:	b29b      	uxth	r3, r3
 800284c:	fb12 f303 	smulbb	r3, r2, r3
 8002850:	b29a      	uxth	r2, r3
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	4413      	add	r3, r2
 8002856:	b298      	uxth	r0, r3
 8002858:	7b3b      	ldrb	r3, [r7, #12]
 800285a:	3330      	adds	r3, #48	; 0x30
 800285c:	b2da      	uxtb	r2, r3
 800285e:	8c3c      	ldrh	r4, [r7, #32]
 8002860:	88b9      	ldrh	r1, [r7, #4]
 8002862:	2300      	movs	r3, #0
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4623      	mov	r3, r4
 8002872:	f7ff fea5 	bl	80025c0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	3301      	adds	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	787b      	ldrb	r3, [r7, #1]
 8002880:	429a      	cmp	r2, r3
 8002882:	d3a1      	bcc.n	80027c8 <lcd_ShowIntNum+0x30>
	}
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	bf00      	nop
 8002890:	cccccccd 	.word	0xcccccccd

08002894 <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af04      	add	r7, sp, #16
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	ed87 0a02 	vstr	s0, [r7, #8]
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	81fb      	strh	r3, [r7, #14]
 80028aa:	4603      	mov	r3, r0
 80028ac:	81bb      	strh	r3, [r7, #12]
 80028ae:	460b      	mov	r3, r1
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 80028b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 80028be:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800299c <lcd_ShowFloatNum+0x108>
 80028c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ce:	ee17 3a90 	vmov	r3, s15
 80028d2:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 80028d4:	2300      	movs	r3, #0
 80028d6:	75fb      	strb	r3, [r7, #23]
 80028d8:	e057      	b.n	800298a <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 80028da:	8abc      	ldrh	r4, [r7, #20]
 80028dc:	79fa      	ldrb	r2, [r7, #7]
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4619      	mov	r1, r3
 80028ea:	200a      	movs	r0, #10
 80028ec:	f7ff ff38 	bl	8002760 <mypow>
 80028f0:	4603      	mov	r3, r0
 80028f2:	fbb4 f1f3 	udiv	r1, r4, r3
 80028f6:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <lcd_ShowFloatNum+0x10c>)
 80028f8:	fba3 2301 	umull	r2, r3, r3, r1
 80028fc:	08da      	lsrs	r2, r3, #3
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	1aca      	subs	r2, r1, r3
 8002908:	4613      	mov	r3, r2
 800290a:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 800290c:	7dfa      	ldrb	r2, [r7, #23]
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	3b02      	subs	r3, #2
 8002912:	429a      	cmp	r2, r3
 8002914:	d11d      	bne.n	8002952 <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	3b02      	subs	r3, #2
 800291a:	b29a      	uxth	r2, r3
 800291c:	7dbb      	ldrb	r3, [r7, #22]
 800291e:	b29b      	uxth	r3, r3
 8002920:	fb12 f303 	smulbb	r3, r2, r3
 8002924:	b29a      	uxth	r2, r3
 8002926:	89fb      	ldrh	r3, [r7, #14]
 8002928:	4413      	add	r3, r2
 800292a:	b298      	uxth	r0, r3
 800292c:	88ba      	ldrh	r2, [r7, #4]
 800292e:	89b9      	ldrh	r1, [r7, #12]
 8002930:	2300      	movs	r3, #0
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	4613      	mov	r3, r2
 8002940:	222e      	movs	r2, #46	; 0x2e
 8002942:	f7ff fe3d 	bl	80025c0 <lcd_ShowChar>
			t++;
 8002946:	7dfb      	ldrb	r3, [r7, #23]
 8002948:	3301      	adds	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
			len+=1;
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	3301      	adds	r3, #1
 8002950:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	b29a      	uxth	r2, r3
 8002956:	7dbb      	ldrb	r3, [r7, #22]
 8002958:	b29b      	uxth	r3, r3
 800295a:	fb12 f303 	smulbb	r3, r2, r3
 800295e:	b29a      	uxth	r2, r3
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	4413      	add	r3, r2
 8002964:	b298      	uxth	r0, r3
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	3330      	adds	r3, #48	; 0x30
 800296a:	b2da      	uxtb	r2, r3
 800296c:	88bc      	ldrh	r4, [r7, #4]
 800296e:	89b9      	ldrh	r1, [r7, #12]
 8002970:	2300      	movs	r3, #0
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4623      	mov	r3, r4
 8002980:	f7ff fe1e 	bl	80025c0 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	3301      	adds	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
 800298a:	7dfa      	ldrb	r2, [r7, #23]
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	429a      	cmp	r2, r3
 8002990:	d3a3      	bcc.n	80028da <lcd_ShowFloatNum+0x46>
	}
}
 8002992:	bf00      	nop
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd90      	pop	{r4, r7, pc}
 800299c:	42c80000 	.word	0x42c80000
 80029a0:	cccccccd 	.word	0xcccccccd

080029a4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d007      	beq.n	80029ce <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <lcd_SetDir+0x44>)
 80029c0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029c4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <lcd_SetDir+0x44>)
 80029c8:	22f0      	movs	r2, #240	; 0xf0
 80029ca:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80029cc:	e006      	b.n	80029dc <lcd_SetDir+0x38>
		lcddev.width=240;
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <lcd_SetDir+0x44>)
 80029d0:	22f0      	movs	r2, #240	; 0xf0
 80029d2:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <lcd_SetDir+0x44>)
 80029d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80029da:	805a      	strh	r2, [r3, #2]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	20000b38 	.word	0x20000b38

080029ec <lcd_init>:


void lcd_init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f6:	48aa      	ldr	r0, [pc, #680]	; (8002ca0 <lcd_init+0x2b4>)
 80029f8:	f005 f898 	bl	8007b2c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80029fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a00:	f003 fd96 	bl	8006530 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002a04:	2201      	movs	r2, #1
 8002a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a0a:	48a5      	ldr	r0, [pc, #660]	; (8002ca0 <lcd_init+0x2b4>)
 8002a0c:	f005 f88e 	bl	8007b2c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a14:	f003 fd8c 	bl	8006530 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7ff ffc3 	bl	80029a4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002a1e:	20d3      	movs	r0, #211	; 0xd3
 8002a20:	f7ff fc4c 	bl	80022bc <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002a24:	f7ff fc6a 	bl	80022fc <LCD_RD_DATA>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b9d      	ldr	r3, [pc, #628]	; (8002ca4 <lcd_init+0x2b8>)
 8002a2e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002a30:	f7ff fc64 	bl	80022fc <LCD_RD_DATA>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b9a      	ldr	r3, [pc, #616]	; (8002ca4 <lcd_init+0x2b8>)
 8002a3a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002a3c:	f7ff fc5e 	bl	80022fc <LCD_RD_DATA>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b97      	ldr	r3, [pc, #604]	; (8002ca4 <lcd_init+0x2b8>)
 8002a46:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002a48:	4b96      	ldr	r3, [pc, #600]	; (8002ca4 <lcd_init+0x2b8>)
 8002a4a:	889b      	ldrh	r3, [r3, #4]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	4b94      	ldr	r3, [pc, #592]	; (8002ca4 <lcd_init+0x2b8>)
 8002a52:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002a54:	f7ff fc52 	bl	80022fc <LCD_RD_DATA>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	4b91      	ldr	r3, [pc, #580]	; (8002ca4 <lcd_init+0x2b8>)
 8002a5e:	889b      	ldrh	r3, [r3, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4b8f      	ldr	r3, [pc, #572]	; (8002ca4 <lcd_init+0x2b8>)
 8002a66:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002a68:	20cf      	movs	r0, #207	; 0xcf
 8002a6a:	f7ff fc27 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7ff fc34 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002a74:	20c1      	movs	r0, #193	; 0xc1
 8002a76:	f7ff fc31 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002a7a:	2030      	movs	r0, #48	; 0x30
 8002a7c:	f7ff fc2e 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002a80:	20ed      	movs	r0, #237	; 0xed
 8002a82:	f7ff fc1b 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002a86:	2064      	movs	r0, #100	; 0x64
 8002a88:	f7ff fc28 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f7ff fc25 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002a92:	2012      	movs	r0, #18
 8002a94:	f7ff fc22 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002a98:	2081      	movs	r0, #129	; 0x81
 8002a9a:	f7ff fc1f 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002a9e:	20e8      	movs	r0, #232	; 0xe8
 8002aa0:	f7ff fc0c 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002aa4:	2085      	movs	r0, #133	; 0x85
 8002aa6:	f7ff fc19 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002aaa:	2010      	movs	r0, #16
 8002aac:	f7ff fc16 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002ab0:	207a      	movs	r0, #122	; 0x7a
 8002ab2:	f7ff fc13 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002ab6:	20cb      	movs	r0, #203	; 0xcb
 8002ab8:	f7ff fc00 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002abc:	2039      	movs	r0, #57	; 0x39
 8002abe:	f7ff fc0d 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	f7ff fc0a 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7ff fc07 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002ace:	2034      	movs	r0, #52	; 0x34
 8002ad0:	f7ff fc04 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f7ff fc01 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002ada:	20f7      	movs	r0, #247	; 0xf7
 8002adc:	f7ff fbee 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002ae0:	2020      	movs	r0, #32
 8002ae2:	f7ff fbfb 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002ae6:	20ea      	movs	r0, #234	; 0xea
 8002ae8:	f7ff fbe8 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7ff fbf5 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7ff fbf2 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002af8:	20c0      	movs	r0, #192	; 0xc0
 8002afa:	f7ff fbdf 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002afe:	201b      	movs	r0, #27
 8002b00:	f7ff fbec 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002b04:	20c1      	movs	r0, #193	; 0xc1
 8002b06:	f7ff fbd9 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f7ff fbe6 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002b10:	20c5      	movs	r0, #197	; 0xc5
 8002b12:	f7ff fbd3 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002b16:	2030      	movs	r0, #48	; 0x30
 8002b18:	f7ff fbe0 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002b1c:	2030      	movs	r0, #48	; 0x30
 8002b1e:	f7ff fbdd 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002b22:	20c7      	movs	r0, #199	; 0xc7
 8002b24:	f7ff fbca 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002b28:	20b7      	movs	r0, #183	; 0xb7
 8002b2a:	f7ff fbd7 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002b2e:	2036      	movs	r0, #54	; 0x36
 8002b30:	f7ff fbc4 	bl	80022bc <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002b34:	2008      	movs	r0, #8
 8002b36:	f7ff fbd1 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002b3a:	203a      	movs	r0, #58	; 0x3a
 8002b3c:	f7ff fbbe 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002b40:	2055      	movs	r0, #85	; 0x55
 8002b42:	f7ff fbcb 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002b46:	20b1      	movs	r0, #177	; 0xb1
 8002b48:	f7ff fbb8 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7ff fbc5 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002b52:	201a      	movs	r0, #26
 8002b54:	f7ff fbc2 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002b58:	20b6      	movs	r0, #182	; 0xb6
 8002b5a:	f7ff fbaf 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002b5e:	200a      	movs	r0, #10
 8002b60:	f7ff fbbc 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002b64:	20a2      	movs	r0, #162	; 0xa2
 8002b66:	f7ff fbb9 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002b6a:	20f2      	movs	r0, #242	; 0xf2
 8002b6c:	f7ff fba6 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7ff fbb3 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002b76:	2026      	movs	r0, #38	; 0x26
 8002b78:	f7ff fba0 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f7ff fbad 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002b82:	20e0      	movs	r0, #224	; 0xe0
 8002b84:	f7ff fb9a 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002b88:	200f      	movs	r0, #15
 8002b8a:	f7ff fba7 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002b8e:	202a      	movs	r0, #42	; 0x2a
 8002b90:	f7ff fba4 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002b94:	2028      	movs	r0, #40	; 0x28
 8002b96:	f7ff fba1 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002b9a:	2008      	movs	r0, #8
 8002b9c:	f7ff fb9e 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002ba0:	200e      	movs	r0, #14
 8002ba2:	f7ff fb9b 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002ba6:	2008      	movs	r0, #8
 8002ba8:	f7ff fb98 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002bac:	2054      	movs	r0, #84	; 0x54
 8002bae:	f7ff fb95 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002bb2:	20a9      	movs	r0, #169	; 0xa9
 8002bb4:	f7ff fb92 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002bb8:	2043      	movs	r0, #67	; 0x43
 8002bba:	f7ff fb8f 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002bbe:	200a      	movs	r0, #10
 8002bc0:	f7ff fb8c 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002bc4:	200f      	movs	r0, #15
 8002bc6:	f7ff fb89 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff fb86 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7ff fb83 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7ff fb80 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7ff fb7d 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002be2:	20e1      	movs	r0, #225	; 0xe1
 8002be4:	f7ff fb6a 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7ff fb77 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002bee:	2015      	movs	r0, #21
 8002bf0:	f7ff fb74 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002bf4:	2017      	movs	r0, #23
 8002bf6:	f7ff fb71 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002bfa:	2007      	movs	r0, #7
 8002bfc:	f7ff fb6e 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002c00:	2011      	movs	r0, #17
 8002c02:	f7ff fb6b 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002c06:	2006      	movs	r0, #6
 8002c08:	f7ff fb68 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002c0c:	202b      	movs	r0, #43	; 0x2b
 8002c0e:	f7ff fb65 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002c12:	2056      	movs	r0, #86	; 0x56
 8002c14:	f7ff fb62 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002c18:	203c      	movs	r0, #60	; 0x3c
 8002c1a:	f7ff fb5f 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002c1e:	2005      	movs	r0, #5
 8002c20:	f7ff fb5c 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002c24:	2010      	movs	r0, #16
 8002c26:	f7ff fb59 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002c2a:	200f      	movs	r0, #15
 8002c2c:	f7ff fb56 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002c30:	203f      	movs	r0, #63	; 0x3f
 8002c32:	f7ff fb53 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002c36:	203f      	movs	r0, #63	; 0x3f
 8002c38:	f7ff fb50 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002c3c:	200f      	movs	r0, #15
 8002c3e:	f7ff fb4d 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002c42:	202b      	movs	r0, #43	; 0x2b
 8002c44:	f7ff fb3a 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff fb47 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7ff fb44 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002c54:	2001      	movs	r0, #1
 8002c56:	f7ff fb41 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002c5a:	203f      	movs	r0, #63	; 0x3f
 8002c5c:	f7ff fb3e 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002c60:	202a      	movs	r0, #42	; 0x2a
 8002c62:	f7ff fb2b 	bl	80022bc <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff fb38 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff fb35 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7ff fb32 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002c78:	20ef      	movs	r0, #239	; 0xef
 8002c7a:	f7ff fb2f 	bl	80022dc <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002c7e:	2011      	movs	r0, #17
 8002c80:	f7ff fb1c 	bl	80022bc <LCD_WR_REG>
	HAL_Delay(120);
 8002c84:	2078      	movs	r0, #120	; 0x78
 8002c86:	f003 fc53 	bl	8006530 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002c8a:	2029      	movs	r0, #41	; 0x29
 8002c8c:	f7ff fb16 	bl	80022bc <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002c90:	2201      	movs	r2, #1
 8002c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c96:	4804      	ldr	r0, [pc, #16]	; (8002ca8 <lcd_init+0x2bc>)
 8002c98:	f004 ff48 	bl	8007b2c <HAL_GPIO_WritePin>
}
 8002c9c:	bf00      	nop
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	20000b38 	.word	0x20000b38
 8002ca8:	40020000 	.word	0x40020000

08002cac <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	b298      	uxth	r0, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	8b3a      	ldrh	r2, [r7, #24]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f7ff fbd7 	bl	8002488 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	b298      	uxth	r0, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	8b3a      	ldrh	r2, [r7, #24]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f7ff fbc7 	bl	8002488 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	b298      	uxth	r0, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	8b3a      	ldrh	r2, [r7, #24]
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7ff fbb7 	bl	8002488 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	b298      	uxth	r0, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	8b3a      	ldrh	r2, [r7, #24]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7ff fba7 	bl	8002488 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	b298      	uxth	r0, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	8b3a      	ldrh	r2, [r7, #24]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7ff fb97 	bl	8002488 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	b298      	uxth	r0, r3
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	8b3a      	ldrh	r2, [r7, #24]
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7ff fb87 	bl	8002488 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	b298      	uxth	r0, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	8b3a      	ldrh	r2, [r7, #24]
 8002d94:	4619      	mov	r1, r3
 8002d96:	f7ff fb77 	bl	8002488 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	b298      	uxth	r0, r3
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	8b3a      	ldrh	r2, [r7, #24]
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7ff fb67 	bl	8002488 <lcd_DrawPoint>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b08a      	sub	sp, #40	; 0x28
 8002dc6:	af02      	add	r7, sp, #8
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	603b      	str	r3, [r7, #0]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	f1c3 0303 	rsb	r3, r3, #3
 8002de2:	613b      	str	r3, [r7, #16]


	if (fill)
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d04f      	beq.n	8002e8a <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002dea:	e029      	b.n	8002e40 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e00a      	b.n	8002e08 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff ff55 	bl	8002cac <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	3301      	adds	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	ddf0      	ble.n	8002df2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da06      	bge.n	8002e24 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3306      	adds	r3, #6
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	e00a      	b.n	8002e3a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	330a      	adds	r3, #10
 8002e32:	613b      	str	r3, [r7, #16]
				y--;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	ddd1      	ble.n	8002dec <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002e48:	e023      	b.n	8002e92 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff ff29 	bl	8002cac <_draw_circle_8>
			if (d < 0) {
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da06      	bge.n	8002e6e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	009a      	lsls	r2, r3, #2
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	3306      	adds	r3, #6
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	e00a      	b.n	8002e84 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	009a      	lsls	r2, r3, #2
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	330a      	adds	r3, #10
 8002e7c:	613b      	str	r3, [r7, #16]
				y--;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	3b01      	subs	r3, #1
 8002e82:	61bb      	str	r3, [r7, #24]
			x++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	dddb      	ble.n	8002e4a <lcd_DrawCircle+0x88>
}
 8002e92:	bf00      	nop
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b08b      	sub	sp, #44	; 0x2c
 8002ea0:	af04      	add	r7, sp, #16
 8002ea2:	60ba      	str	r2, [r7, #8]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	81fb      	strh	r3, [r7, #14]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	81bb      	strh	r3, [r7, #12]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002eba:	e048      	b.n	8002f4e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d145      	bne.n	8002f4e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002ec2:	89fa      	ldrh	r2, [r7, #14]
 8002ec4:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <lcd_ShowStr+0xc4>)
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	1acb      	subs	r3, r1, r3
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dc3f      	bgt.n	8002f58 <lcd_ShowStr+0xbc>
 8002ed8:	89ba      	ldrh	r2, [r7, #12]
 8002eda:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <lcd_ShowStr+0xc4>)
 8002edc:	885b      	ldrh	r3, [r3, #2]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ee4:	1acb      	subs	r3, r1, r3
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dc36      	bgt.n	8002f58 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d902      	bls.n	8002ef8 <lcd_ShowStr+0x5c>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
 8002ef6:	e02a      	b.n	8002f4e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b0d      	cmp	r3, #13
 8002efe:	d10b      	bne.n	8002f18 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002f00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	89bb      	ldrh	r3, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002f0c:	8abb      	ldrh	r3, [r7, #20]
 8002f0e:	81fb      	strh	r3, [r7, #14]
					str++;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	3301      	adds	r3, #1
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	e017      	b.n	8002f48 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	88fc      	ldrh	r4, [r7, #6]
 8002f1e:	89b9      	ldrh	r1, [r7, #12]
 8002f20:	89f8      	ldrh	r0, [r7, #14]
 8002f22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	4623      	mov	r3, r4
 8002f34:	f7ff fb44 	bl	80025c0 <lcd_ShowChar>
					x+=sizey/2;
 8002f38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	89fb      	ldrh	r3, [r7, #14]
 8002f44:	4413      	add	r3, r2
 8002f46:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1b2      	bne.n	8002ebc <lcd_ShowStr+0x20>
 8002f56:	e000      	b.n	8002f5a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002f58:	bf00      	nop
			}
		}
	}
}
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}
 8002f60:	20000b38 	.word	0x20000b38

08002f64 <addPlayer>:
 *  Created on: Dec 28, 2023
 *      Author: Windows
 */
#include "leaderboard.h"

void addPlayer(struct player **head, int ID, int score, int mode){
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
    struct player *newPlayer = (struct player *)malloc(sizeof(struct player));
 8002f72:	2010      	movs	r0, #16
 8002f74:	f009 f994 	bl	800c2a0 <malloc>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	613b      	str	r3, [r7, #16]
    if (newPlayer == NULL) {
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d036      	beq.n	8002ff0 <addPlayer+0x8c>
        return;
    }
    newPlayer->player_ID = ID;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	601a      	str	r2, [r3, #0]
    newPlayer->player_score = score;
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	605a      	str	r2, [r3, #4]
    newPlayer->player_mode = mode;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	609a      	str	r2, [r3, #8]
    newPlayer->next = NULL;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	2200      	movs	r2, #0
 8002f98:	60da      	str	r2, [r3, #12]

    if (*head == NULL || score > (*head)->player_score) {
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <addPlayer+0x4a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	dd07      	ble.n	8002fbe <addPlayer+0x5a>
        newPlayer->next = *head;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	60da      	str	r2, [r3, #12]
        *head = newPlayer;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e019      	b.n	8002ff2 <addPlayer+0x8e>
    } else {
        struct player *current = *head;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 8002fc4:	e002      	b.n	8002fcc <addPlayer+0x68>
            current = current->next;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <addPlayer+0x7c>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	ddf2      	ble.n	8002fc6 <addPlayer+0x62>
        }
        newPlayer->next = current->next;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	60da      	str	r2, [r3, #12]
        current->next = newPlayer;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	e000      	b.n	8002ff2 <addPlayer+0x8e>
        return;
 8002ff0:	bf00      	nop
    }
}
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <led7_Scan>:

void led7_init(){//khoi tao
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){//quet led
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002ffc:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <led7_Scan+0x104>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	b29a      	uxth	r2, r3
 8003004:	4b3d      	ldr	r3, [pc, #244]	; (80030fc <led7_Scan+0x104>)
 8003006:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8003008:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <led7_Scan+0x108>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <led7_Scan+0x10c>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	b21a      	sxth	r2, r3
 8003014:	4b39      	ldr	r3, [pc, #228]	; (80030fc <led7_Scan+0x104>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b21b      	sxth	r3, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	b21b      	sxth	r3, r3
 800301e:	b29a      	uxth	r2, r3
 8003020:	4b36      	ldr	r3, [pc, #216]	; (80030fc <led7_Scan+0x104>)
 8003022:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8003024:	4b36      	ldr	r3, [pc, #216]	; (8003100 <led7_Scan+0x108>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d847      	bhi.n	80030bc <led7_Scan+0xc4>
 800302c:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <led7_Scan+0x3c>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	08003045 	.word	0x08003045
 8003038:	08003063 	.word	0x08003063
 800303c:	08003081 	.word	0x08003081
 8003040:	0800309f 	.word	0x0800309f
	case 0:
		spi_buffer |= 0x00b0;
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <led7_Scan+0x104>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800304c:	b29a      	uxth	r2, r3
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <led7_Scan+0x104>)
 8003050:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8003052:	4b2a      	ldr	r3, [pc, #168]	; (80030fc <led7_Scan+0x104>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <led7_Scan+0x104>)
 800305e:	801a      	strh	r2, [r3, #0]
		break;
 8003060:	e02d      	b.n	80030be <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <led7_Scan+0x104>)
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800306a:	b29a      	uxth	r2, r3
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <led7_Scan+0x104>)
 800306e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <led7_Scan+0x104>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	f023 0320 	bic.w	r3, r3, #32
 8003078:	b29a      	uxth	r2, r3
 800307a:	4b20      	ldr	r3, [pc, #128]	; (80030fc <led7_Scan+0x104>)
 800307c:	801a      	strh	r2, [r3, #0]
		break;
 800307e:	e01e      	b.n	80030be <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <led7_Scan+0x104>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003088:	b29a      	uxth	r2, r3
 800308a:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <led7_Scan+0x104>)
 800308c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <led7_Scan+0x104>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	f023 0310 	bic.w	r3, r3, #16
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <led7_Scan+0x104>)
 800309a:	801a      	strh	r2, [r3, #0]
		break;
 800309c:	e00f      	b.n	80030be <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <led7_Scan+0x104>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	4b14      	ldr	r3, [pc, #80]	; (80030fc <led7_Scan+0x104>)
 80030aa:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <led7_Scan+0x104>)
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <led7_Scan+0x104>)
 80030b8:	801a      	strh	r2, [r3, #0]
		break;
 80030ba:	e000      	b.n	80030be <led7_Scan+0xc6>
	default:
		break;
 80030bc:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <led7_Scan+0x108>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	425a      	negs	r2, r3
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	bf58      	it	pl
 80030d0:	4253      	negpl	r3, r2
 80030d2:	4a0b      	ldr	r2, [pc, #44]	; (8003100 <led7_Scan+0x108>)
 80030d4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	480b      	ldr	r0, [pc, #44]	; (8003108 <led7_Scan+0x110>)
 80030dc:	f004 fd26 	bl	8007b2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80030e0:	2301      	movs	r3, #1
 80030e2:	2202      	movs	r2, #2
 80030e4:	4905      	ldr	r1, [pc, #20]	; (80030fc <led7_Scan+0x104>)
 80030e6:	4809      	ldr	r0, [pc, #36]	; (800310c <led7_Scan+0x114>)
 80030e8:	f006 fa11 	bl	800950e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80030ec:	2201      	movs	r2, #1
 80030ee:	2140      	movs	r1, #64	; 0x40
 80030f0:	4805      	ldr	r0, [pc, #20]	; (8003108 <led7_Scan+0x110>)
 80030f2:	f004 fd1b 	bl	8007b2c <HAL_GPIO_WritePin>
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000001a 	.word	0x2000001a
 8003100:	20000138 	.word	0x20000138
 8003104:	2000000c 	.word	0x2000000c
 8003108:	40021800 	.word	0x40021800
 800310c:	20000b80 	.word	0x20000b80

08003110 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){//set so cho led
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0e      	blt.n	8003142 <led7_SetDigit+0x32>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2b09      	cmp	r3, #9
 8003128:	dc0b      	bgt.n	8003142 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <led7_SetDigit+0x40>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	b2d9      	uxtb	r1, r3
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <led7_SetDigit+0x44>)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	460a      	mov	r2, r1
 8003140:	701a      	strb	r2, [r3, #0]
	}
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	20000010 	.word	0x20000010
 8003154:	2000000c 	.word	0x2000000c

08003158 <led7_SetColon>:

void led7_SetColon(uint8_t status){// :
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <led7_SetColon+0x20>
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <led7_SetColon+0x3c>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f023 0308 	bic.w	r3, r3, #8
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <led7_SetColon+0x3c>)
 8003174:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8003176:	e006      	b.n	8003186 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <led7_SetColon+0x3c>)
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	b29a      	uxth	r2, r3
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <led7_SetColon+0x3c>)
 8003184:	801a      	strh	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2000001a 	.word	0x2000001a

08003198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800319c:	f003 f956 	bl	800644c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031a0:	f000 f872 	bl	8003288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031a4:	f7fe fefe 	bl	8001fa4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80031a8:	f001 ff02 	bl	8004fb0 <MX_TIM2_Init>
  MX_SPI1_Init();
 80031ac:	f001 fce0 	bl	8004b70 <MX_SPI1_Init>
  MX_FSMC_Init();
 80031b0:	f7fe fe28 	bl	8001e04 <MX_FSMC_Init>
  MX_I2C1_Init();
 80031b4:	f7ff f80c 	bl	80021d0 <MX_I2C1_Init>
  MX_TIM13_Init();
 80031b8:	f001 ff46 	bl	8005048 <MX_TIM13_Init>
  MX_DMA_Init();
 80031bc:	f7fe f90a 	bl	80013d4 <MX_DMA_Init>
  MX_ADC1_Init();
 80031c0:	f7fd feae 	bl	8000f20 <MX_ADC1_Init>
  MX_TIM1_Init();
 80031c4:	f001 fea4 	bl	8004f10 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80031c8:	f003 f836 	bl	8006238 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031cc:	f003 f85e 	bl	800628c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80031d0:	f000 f8c4 	bl	800335c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 //touch_Adjust();
 lcd_Clear(BLACK);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7ff f8ef 	bl	80023b8 <lcd_Clear>
 setTimer3(100);
 80031da:	2064      	movs	r0, #100	; 0x64
 80031dc:	f001 fb8c 	bl	80048f8 <setTimer3>
 setTimer5(10);
 80031e0:	200a      	movs	r0, #10
 80031e2:	f001 fbc1 	bl	8004968 <setTimer5>
 setTimer7(10);
 80031e6:	200a      	movs	r0, #10
 80031e8:	f001 fbda 	bl	80049a0 <setTimer7>
	  /*if(touch_IsTouched() && draw_Status == DRAW){
            //draw a point at the touch position
		  lcd_DrawPoint(touch_GetX(), touch_GetY(), RED);
	  }*/
	  // 50ms task
	  while(!flag_timer2);
 80031ec:	bf00      	nop
 80031ee:	4b21      	ldr	r3, [pc, #132]	; (8003274 <main+0xdc>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0fb      	beq.n	80031ee <main+0x56>
	  flag_timer2 = 0;
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <main+0xdc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	801a      	strh	r2, [r3, #0]
	  touch_Scan();
 80031fc:	f002 feb2 	bl	8005f64 <touch_Scan>
	  button_Scan();
 8003200:	f7fe f85a 	bl	80012b8 <button_Scan>
	  if(flag_timer5 == 1){
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <main+0xe0>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <main+0x80>
		  sendSensor();
 800320c:	f000 f9b0 	bl	8003570 <sendSensor>
		  setTimer5(5000);
 8003210:	f241 3088 	movw	r0, #5000	; 0x1388
 8003214:	f001 fba8 	bl	8004968 <setTimer5>
	  }
	  if(isHumidity()){
 8003218:	f000 fe12 	bl	8003e40 <isHumidity>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <main+0x92>
		  buzzer_check = 1;
 8003222:	4b16      	ldr	r3, [pc, #88]	; (800327c <main+0xe4>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e002      	b.n	8003230 <main+0x98>
	  }else{
		  buzzer_check = 0;
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <main+0xe4>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
	  }
	  if (isLight()){
 8003230:	f000 fde8 	bl	8003e04 <isLight>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <main+0xae>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, SET);
 800323a:	2201      	movs	r2, #1
 800323c:	2120      	movs	r1, #32
 800323e:	4810      	ldr	r0, [pc, #64]	; (8003280 <main+0xe8>)
 8003240:	f004 fc74 	bl	8007b2c <HAL_GPIO_WritePin>
 8003244:	e004      	b.n	8003250 <main+0xb8>
	  }else{
		  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 8003246:	2200      	movs	r2, #0
 8003248:	2120      	movs	r1, #32
 800324a:	480d      	ldr	r0, [pc, #52]	; (8003280 <main+0xe8>)
 800324c:	f004 fc6e 	bl	8007b2c <HAL_GPIO_WritePin>
	  }
	  if(status == INIT || status == GAME_OVER)
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <main+0xec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <main+0xc8>
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <main+0xec>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d101      	bne.n	8003264 <main+0xcc>
		  test_Adc();
 8003260:	f000 f890 	bl	8003384 <test_Adc>
	  //touchProcess();
	  fsm_machine();
 8003264:	f7fe fb84 	bl	8001970 <fsm_machine>
	  test_LedDebug();
 8003268:	f000 f95e 	bl	8003528 <test_LedDebug>
	  fsm_send_buzzer();
 800326c:	f7fe f944 	bl	80014f8 <fsm_send_buzzer>
	  while(!flag_timer2);
 8003270:	e7bc      	b.n	80031ec <main+0x54>
 8003272:	bf00      	nop
 8003274:	20000998 	.word	0x20000998
 8003278:	200009aa 	.word	0x200009aa
 800327c:	20000124 	.word	0x20000124
 8003280:	40021000 	.word	0x40021000
 8003284:	20000104 	.word	0x20000104

08003288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b094      	sub	sp, #80	; 0x50
 800328c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800328e:	f107 0320 	add.w	r3, r7, #32
 8003292:	2230      	movs	r2, #48	; 0x30
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f009 f80a 	bl	800c2b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <SystemClock_Config+0xcc>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <SystemClock_Config+0xcc>)
 80032b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	; 0x40
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <SystemClock_Config+0xcc>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c8:	2300      	movs	r3, #0
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	4b22      	ldr	r3, [pc, #136]	; (8003358 <SystemClock_Config+0xd0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a21      	ldr	r2, [pc, #132]	; (8003358 <SystemClock_Config+0xd0>)
 80032d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <SystemClock_Config+0xd0>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032e4:	2302      	movs	r3, #2
 80032e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032e8:	2301      	movs	r3, #1
 80032ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032ec:	2310      	movs	r3, #16
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032f0:	2302      	movs	r3, #2
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032f4:	2300      	movs	r3, #0
 80032f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032f8:	2308      	movs	r3, #8
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80032fc:	23a8      	movs	r3, #168	; 0xa8
 80032fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003300:	2302      	movs	r3, #2
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003304:	2304      	movs	r3, #4
 8003306:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003308:	f107 0320 	add.w	r3, r7, #32
 800330c:	4618      	mov	r0, r3
 800330e:	f005 fc01 	bl	8008b14 <HAL_RCC_OscConfig>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003318:	f000 f99c 	bl	8003654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800331c:	230f      	movs	r3, #15
 800331e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003320:	2302      	movs	r3, #2
 8003322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003328:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800332c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800332e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003332:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003334:	f107 030c 	add.w	r3, r7, #12
 8003338:	2105      	movs	r1, #5
 800333a:	4618      	mov	r0, r3
 800333c:	f005 fe62 	bl	8009004 <HAL_RCC_ClockConfig>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003346:	f000 f985 	bl	8003654 <Error_Handler>
  }
}
 800334a:	bf00      	nop
 800334c:	3750      	adds	r7, #80	; 0x50
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023800 	.word	0x40023800
 8003358:	40007000 	.word	0x40007000

0800335c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
	  timer_init();
 8003360:	f001 faa0 	bl	80048a4 <timer_init>
	  button_init();
 8003364:	f7fd ff9c 	bl	80012a0 <button_init>
	  buzzer_init();
 8003368:	f7fe f812 	bl	8001390 <buzzer_init>
	  lcd_init();
 800336c:	f7ff fb3e 	bl	80029ec <lcd_init>
	  touch_init();
 8003370:	f002 fde8 	bl	8005f44 <touch_init>
	  setTimer2(50);
 8003374:	2032      	movs	r0, #50	; 0x32
 8003376:	f001 faa3 	bl	80048c0 <setTimer2>
	  uart_init_esp();
 800337a:	f002 ff01 	bl	8006180 <uart_init_esp>
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <test_Adc>:

uint8_t count_adc = 0;

void test_Adc(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 800338a:	4b5d      	ldr	r3, [pc, #372]	; (8003500 <test_Adc+0x17c>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	4b5c      	ldr	r3, [pc, #368]	; (8003504 <test_Adc+0x180>)
 8003392:	fb83 1302 	smull	r1, r3, r3, r2
 8003396:	10d9      	asrs	r1, r3, #3
 8003398:	17d3      	asrs	r3, r2, #31
 800339a:	1ac9      	subs	r1, r1, r3
 800339c:	460b      	mov	r3, r1
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	1ad1      	subs	r1, r2, r3
 80033a6:	b2ca      	uxtb	r2, r1
 80033a8:	4b55      	ldr	r3, [pc, #340]	; (8003500 <test_Adc+0x17c>)
 80033aa:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80033ac:	4b54      	ldr	r3, [pc, #336]	; (8003500 <test_Adc+0x17c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f040 80a1 	bne.w	80034f8 <test_Adc+0x174>
		sensor_Read();
 80033b6:	f000 fc33 	bl	8003c20 <sensor_Read>
		lcd_ShowStr(10, 0, "Wattage:", RED, BLACK, 16, 0);
 80033ba:	2300      	movs	r3, #0
 80033bc:	9302      	str	r3, [sp, #8]
 80033be:	2310      	movs	r3, #16
 80033c0:	9301      	str	r3, [sp, #4]
 80033c2:	2300      	movs	r3, #0
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033ca:	4a4f      	ldr	r2, [pc, #316]	; (8003508 <test_Adc+0x184>)
 80033cc:	2100      	movs	r1, #0
 80033ce:	200a      	movs	r0, #10
 80033d0:	f7ff fd64 	bl	8002e9c <lcd_ShowStr>
		lcd_ShowFloatNum(130, 0,getWattage(), 4, RED, BLACK, 16);
 80033d4:	f000 fd02 	bl	8003ddc <getWattage>
 80033d8:	eef0 7a40 	vmov.f32	s15, s0
 80033dc:	2310      	movs	r3, #16
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2300      	movs	r3, #0
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033e8:	2204      	movs	r2, #4
 80033ea:	eeb0 0a67 	vmov.f32	s0, s15
 80033ee:	2100      	movs	r1, #0
 80033f0:	2082      	movs	r0, #130	; 0x82
 80033f2:	f7ff fa4f 	bl	8002894 <lcd_ShowFloatNum>
		if(!isLight()){
 80033f6:	f000 fd05 	bl	8003e04 <isLight>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11a      	bne.n	8003436 <test_Adc+0xb2>
			lcd_ShowStr(10, 20, "Light:", RED, BLACK, 16, 0);
 8003400:	2300      	movs	r3, #0
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	2310      	movs	r3, #16
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	2300      	movs	r3, #0
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003410:	4a3e      	ldr	r2, [pc, #248]	; (800350c <test_Adc+0x188>)
 8003412:	2114      	movs	r1, #20
 8003414:	200a      	movs	r0, #10
 8003416:	f7ff fd41 	bl	8002e9c <lcd_ShowStr>
			lcd_ShowStr(130, 20,"Strong", RED, BLACK, 16, 0);
 800341a:	2300      	movs	r3, #0
 800341c:	9302      	str	r3, [sp, #8]
 800341e:	2310      	movs	r3, #16
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2300      	movs	r3, #0
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800342a:	4a39      	ldr	r2, [pc, #228]	; (8003510 <test_Adc+0x18c>)
 800342c:	2114      	movs	r1, #20
 800342e:	2082      	movs	r0, #130	; 0x82
 8003430:	f7ff fd34 	bl	8002e9c <lcd_ShowStr>
 8003434:	e019      	b.n	800346a <test_Adc+0xe6>
		}else{
			lcd_ShowStr(10, 20, "Light:", RED, BLACK, 16, 0);
 8003436:	2300      	movs	r3, #0
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	2310      	movs	r3, #16
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	2300      	movs	r3, #0
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003446:	4a31      	ldr	r2, [pc, #196]	; (800350c <test_Adc+0x188>)
 8003448:	2114      	movs	r1, #20
 800344a:	200a      	movs	r0, #10
 800344c:	f7ff fd26 	bl	8002e9c <lcd_ShowStr>
			lcd_ShowStr(130, 20,"Weak  ", RED, BLACK, 16, 0);
 8003450:	2300      	movs	r3, #0
 8003452:	9302      	str	r3, [sp, #8]
 8003454:	2310      	movs	r3, #16
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2300      	movs	r3, #0
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003460:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <test_Adc+0x190>)
 8003462:	2114      	movs	r1, #20
 8003464:	2082      	movs	r0, #130	; 0x82
 8003466:	f7ff fd19 	bl	8002e9c <lcd_ShowStr>
		}
		//lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
		//lcd_ShowIntNum(130, 140, sensor_GetLight(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 40, "Potentiometer:", RED, BLACK, 16, 0);
 800346a:	2300      	movs	r3, #0
 800346c:	9302      	str	r3, [sp, #8]
 800346e:	2310      	movs	r3, #16
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	2300      	movs	r3, #0
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800347a:	4a27      	ldr	r2, [pc, #156]	; (8003518 <test_Adc+0x194>)
 800347c:	2128      	movs	r1, #40	; 0x28
 800347e:	200a      	movs	r0, #10
 8003480:	f7ff fd0c 	bl	8002e9c <lcd_ShowStr>
		lcd_ShowFloatNum(130, 40, ((float)sensor_GetPotentiometer()/4095)*100, 4, RED, BLACK, 16);
 8003484:	f000 fbe6 	bl	8003c54 <sensor_GetPotentiometer>
 8003488:	4603      	mov	r3, r0
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003492:	eddf 6a22 	vldr	s13, [pc, #136]	; 800351c <test_Adc+0x198>
 8003496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800349a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003520 <test_Adc+0x19c>
 800349e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034a2:	2310      	movs	r3, #16
 80034a4:	9301      	str	r3, [sp, #4]
 80034a6:	2300      	movs	r3, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ae:	2204      	movs	r2, #4
 80034b0:	eeb0 0a67 	vmov.f32	s0, s15
 80034b4:	2128      	movs	r1, #40	; 0x28
 80034b6:	2082      	movs	r0, #130	; 0x82
 80034b8:	f7ff f9ec 	bl	8002894 <lcd_ShowFloatNum>
		//lcd_ShowIntNum(130, 40, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 60, "Temperature:", RED, BLACK, 16, 0);
 80034bc:	2300      	movs	r3, #0
 80034be:	9302      	str	r3, [sp, #8]
 80034c0:	2310      	movs	r3, #16
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	2300      	movs	r3, #0
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <test_Adc+0x1a0>)
 80034ce:	213c      	movs	r1, #60	; 0x3c
 80034d0:	200a      	movs	r0, #10
 80034d2:	f7ff fce3 	bl	8002e9c <lcd_ShowStr>
		lcd_ShowFloatNum(130, 60,sensor_GetTemperature(), 4, RED, BLACK, 16);
 80034d6:	f000 fc63 	bl	8003da0 <sensor_GetTemperature>
 80034da:	eef0 7a40 	vmov.f32	s15, s0
 80034de:	2310      	movs	r3, #16
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	2300      	movs	r3, #0
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034ea:	2204      	movs	r2, #4
 80034ec:	eeb0 0a67 	vmov.f32	s0, s15
 80034f0:	213c      	movs	r1, #60	; 0x3c
 80034f2:	2082      	movs	r0, #130	; 0x82
 80034f4:	f7ff f9ce 	bl	8002894 <lcd_ShowFloatNum>
	}
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000013c 	.word	0x2000013c
 8003504:	66666667 	.word	0x66666667
 8003508:	0800d9a0 	.word	0x0800d9a0
 800350c:	0800d9ac 	.word	0x0800d9ac
 8003510:	0800d9b4 	.word	0x0800d9b4
 8003514:	0800d9bc 	.word	0x0800d9bc
 8003518:	0800d9c4 	.word	0x0800d9c4
 800351c:	457ff000 	.word	0x457ff000
 8003520:	42c80000 	.word	0x42c80000
 8003524:	0800d9d4 	.word	0x0800d9d4

08003528 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <test_LedDebug+0x3c>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <test_LedDebug+0x40>)
 8003534:	fb83 1302 	smull	r1, r3, r3, r2
 8003538:	10d9      	asrs	r1, r3, #3
 800353a:	17d3      	asrs	r3, r2, #31
 800353c:	1ac9      	subs	r1, r1, r3
 800353e:	460b      	mov	r3, r1
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	1ad1      	subs	r1, r2, r3
 8003548:	b2ca      	uxtb	r2, r1
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <test_LedDebug+0x3c>)
 800354c:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <test_LedDebug+0x3c>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8003556:	2110      	movs	r1, #16
 8003558:	4804      	ldr	r0, [pc, #16]	; (800356c <test_LedDebug+0x44>)
 800355a:	f004 fb00 	bl	8007b5e <HAL_GPIO_TogglePin>
	}
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2000013d 	.word	0x2000013d
 8003568:	66666667 	.word	0x66666667
 800356c:	40021000 	.word	0x40021000

08003570 <sendSensor>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void sendSensor(){
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b0a4      	sub	sp, #144	; 0x90
 8003574:	af06      	add	r7, sp, #24
	if(send_flag == 0){
 8003576:	4b2d      	ldr	r3, [pc, #180]	; (800362c <sendSensor+0xbc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d152      	bne.n	8003624 <sendSensor+0xb4>
		char res[100];
		char light[10];
		if(!isLight()){
 800357e:	f000 fc41 	bl	8003e04 <isLight>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <sendSensor+0x26>
			sprintf(light, "Strong");
 8003588:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800358c:	4928      	ldr	r1, [pc, #160]	; (8003630 <sendSensor+0xc0>)
 800358e:	4618      	mov	r0, r3
 8003590:	f008 ff90 	bl	800c4b4 <siprintf>
 8003594:	e005      	b.n	80035a2 <sendSensor+0x32>
		}else{
			sprintf(light, "Weak");
 8003596:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800359a:	4926      	ldr	r1, [pc, #152]	; (8003634 <sendSensor+0xc4>)
 800359c:	4618      	mov	r0, r3
 800359e:	f008 ff89 	bl	800c4b4 <siprintf>
		}
		//int light = sensor_GetLight();
		int po1 = sensor_GetPotentiometer();
 80035a2:	f000 fb57 	bl	8003c54 <sensor_GetPotentiometer>
 80035a6:	4603      	mov	r3, r0
 80035a8:	677b      	str	r3, [r7, #116]	; 0x74
		int temp1 = sensor_GetTemperature();
 80035aa:	f000 fbf9 	bl	8003da0 <sensor_GetTemperature>
 80035ae:	eef0 7a40 	vmov.f32	s15, s0
 80035b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b6:	ee17 3a90 	vmov	r3, s15
 80035ba:	673b      	str	r3, [r7, #112]	; 0x70
		if(status != PLAY){
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <sendSensor+0xc8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d00f      	beq.n	80035e4 <sendSensor+0x74>
			sprintf(res, "Light : %s\nPotentiometer : %d \nTemperature : %d\nNo one is playing\n%c",light, po1, temp1, sec);// khong co ai choi
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <sendSensor+0xcc>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80035cc:	4638      	mov	r0, r7
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035d6:	491a      	ldr	r1, [pc, #104]	; (8003640 <sendSensor+0xd0>)
 80035d8:	f008 ff6c 	bl	800c4b4 <siprintf>
			uart_EspSendString(res);
 80035dc:	463b      	mov	r3, r7
 80035de:	4618      	mov	r0, r3
 80035e0:	f002 fddc 	bl	800619c <uart_EspSendString>
		}
		if(status == PLAY){
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <sendSensor+0xc8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d11b      	bne.n	8003624 <sendSensor+0xb4>
			sprintf(res, "Light : %s\nPotentiometer : %d \nTemperature : %d\n%d is playing\nTime : %d sec\nScore : %d\n%c",light, po1, temp1, ID, count, score, sec);//dang co nguoi choi
 80035ec:	4b15      	ldr	r3, [pc, #84]	; (8003644 <sendSensor+0xd4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a15      	ldr	r2, [pc, #84]	; (8003648 <sendSensor+0xd8>)
 80035f2:	6812      	ldr	r2, [r2, #0]
 80035f4:	4915      	ldr	r1, [pc, #84]	; (800364c <sendSensor+0xdc>)
 80035f6:	7809      	ldrb	r1, [r1, #0]
 80035f8:	460c      	mov	r4, r1
 80035fa:	4910      	ldr	r1, [pc, #64]	; (800363c <sendSensor+0xcc>)
 80035fc:	7809      	ldrb	r1, [r1, #0]
 80035fe:	460d      	mov	r5, r1
 8003600:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8003604:	4638      	mov	r0, r7
 8003606:	9504      	str	r5, [sp, #16]
 8003608:	9403      	str	r4, [sp, #12]
 800360a:	9202      	str	r2, [sp, #8]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003614:	460a      	mov	r2, r1
 8003616:	490e      	ldr	r1, [pc, #56]	; (8003650 <sendSensor+0xe0>)
 8003618:	f008 ff4c 	bl	800c4b4 <siprintf>
			uart_EspSendString(res);
 800361c:	463b      	mov	r3, r7
 800361e:	4618      	mov	r0, r3
 8003620:	f002 fdbc 	bl	800619c <uart_EspSendString>
		}
	}
}
 8003624:	bf00      	nop
 8003626:	3778      	adds	r7, #120	; 0x78
 8003628:	46bd      	mov	sp, r7
 800362a:	bdb0      	pop	{r4, r5, r7, pc}
 800362c:	2000012c 	.word	0x2000012c
 8003630:	0800d9b4 	.word	0x0800d9b4
 8003634:	0800d9ec 	.word	0x0800d9ec
 8003638:	20000104 	.word	0x20000104
 800363c:	20000004 	.word	0x20000004
 8003640:	0800d9f4 	.word	0x0800d9f4
 8003644:	20000108 	.word	0x20000108
 8003648:	20000110 	.word	0x20000110
 800364c:	20000990 	.word	0x20000990
 8003650:	0800da3c 	.word	0x0800da3c

08003654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003658:	b672      	cpsid	i
}
 800365a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800365c:	e7fe      	b.n	800365c <Error_Handler+0x8>
	...

08003660 <screen_init>:
 *      Author: Admin
 */

#include "screen.h"

void screen_init(){
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af04      	add	r7, sp, #16
	lcd_ShowStr(60,90,"SNAKE GAME",WHITE,WHITE,24,1);
 8003666:	2301      	movs	r3, #1
 8003668:	9302      	str	r3, [sp, #8]
 800366a:	2318      	movs	r3, #24
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003678:	4a6c      	ldr	r2, [pc, #432]	; (800382c <screen_init+0x1cc>)
 800367a:	215a      	movs	r1, #90	; 0x5a
 800367c:	203c      	movs	r0, #60	; 0x3c
 800367e:	f7ff fc0d 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(40,120,"Player ID:",WHITE,BLACK,16,0);
 8003682:	2300      	movs	r3, #0
 8003684:	9302      	str	r3, [sp, #8]
 8003686:	2310      	movs	r3, #16
 8003688:	9301      	str	r3, [sp, #4]
 800368a:	2300      	movs	r3, #0
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003692:	4a67      	ldr	r2, [pc, #412]	; (8003830 <screen_init+0x1d0>)
 8003694:	2178      	movs	r1, #120	; 0x78
 8003696:	2028      	movs	r0, #40	; 0x28
 8003698:	f7ff fc00 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowIntNum(120, 120, ID, 4, WHITE, BLACK, 16);
 800369c:	4b65      	ldr	r3, [pc, #404]	; (8003834 <screen_init+0x1d4>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	2310      	movs	r3, #16
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	2300      	movs	r3, #0
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	2304      	movs	r3, #4
 80036b2:	2178      	movs	r1, #120	; 0x78
 80036b4:	2078      	movs	r0, #120	; 0x78
 80036b6:	f7ff f86f 	bl	8002798 <lcd_ShowIntNum>
	lcd_Fill(50, 200, 190, 300, GREEN);
 80036ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80036c4:	22be      	movs	r2, #190	; 0xbe
 80036c6:	21c8      	movs	r1, #200	; 0xc8
 80036c8:	2032      	movs	r0, #50	; 0x32
 80036ca:	f7fe fea7 	bl	800241c <lcd_Fill>
	lcd_ShowStr(40, 140, "Mode (B):", WHITE, BLACK, 16, 0);
 80036ce:	2300      	movs	r3, #0
 80036d0:	9302      	str	r3, [sp, #8]
 80036d2:	2310      	movs	r3, #16
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2300      	movs	r3, #0
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036de:	4a56      	ldr	r2, [pc, #344]	; (8003838 <screen_init+0x1d8>)
 80036e0:	218c      	movs	r1, #140	; 0x8c
 80036e2:	2028      	movs	r0, #40	; 0x28
 80036e4:	f7ff fbda 	bl	8002e9c <lcd_ShowStr>
	if(mode == NORMAL)
 80036e8:	4b54      	ldr	r3, [pc, #336]	; (800383c <screen_init+0x1dc>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10c      	bne.n	800370a <screen_init+0xaa>
		lcd_ShowStr(120, 140, "NORMAL", WHITE, BLACK, 16, 0);
 80036f0:	2300      	movs	r3, #0
 80036f2:	9302      	str	r3, [sp, #8]
 80036f4:	2310      	movs	r3, #16
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	2300      	movs	r3, #0
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003700:	4a4f      	ldr	r2, [pc, #316]	; (8003840 <screen_init+0x1e0>)
 8003702:	218c      	movs	r1, #140	; 0x8c
 8003704:	2078      	movs	r0, #120	; 0x78
 8003706:	f7ff fbc9 	bl	8002e9c <lcd_ShowStr>
	if(mode == WALL)
 800370a:	4b4c      	ldr	r3, [pc, #304]	; (800383c <screen_init+0x1dc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10c      	bne.n	800372c <screen_init+0xcc>
		lcd_ShowStr(120, 140, "WALL", WHITE, BLACK, 16, 0);
 8003712:	2300      	movs	r3, #0
 8003714:	9302      	str	r3, [sp, #8]
 8003716:	2310      	movs	r3, #16
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003722:	4a48      	ldr	r2, [pc, #288]	; (8003844 <screen_init+0x1e4>)
 8003724:	218c      	movs	r1, #140	; 0x8c
 8003726:	2078      	movs	r0, #120	; 0x78
 8003728:	f7ff fbb8 	bl	8002e9c <lcd_ShowStr>
	if(mode == WALLS)
 800372c:	4b43      	ldr	r3, [pc, #268]	; (800383c <screen_init+0x1dc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d10c      	bne.n	800374e <screen_init+0xee>
		lcd_ShowStr(120, 140, "WALLS", WHITE, BLACK, 16, 0);
 8003734:	2300      	movs	r3, #0
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	2310      	movs	r3, #16
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	2300      	movs	r3, #0
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003744:	4a40      	ldr	r2, [pc, #256]	; (8003848 <screen_init+0x1e8>)
 8003746:	218c      	movs	r1, #140	; 0x8c
 8003748:	2078      	movs	r0, #120	; 0x78
 800374a:	f7ff fba7 	bl	8002e9c <lcd_ShowStr>
	if(mode == TIMER)
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <screen_init+0x1dc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b03      	cmp	r3, #3
 8003754:	d10c      	bne.n	8003770 <screen_init+0x110>
		lcd_ShowStr(120, 140, "TIMER", WHITE, BLACK, 16, 0);
 8003756:	2300      	movs	r3, #0
 8003758:	9302      	str	r3, [sp, #8]
 800375a:	2310      	movs	r3, #16
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003766:	4a39      	ldr	r2, [pc, #228]	; (800384c <screen_init+0x1ec>)
 8003768:	218c      	movs	r1, #140	; 0x8c
 800376a:	2078      	movs	r0, #120	; 0x78
 800376c:	f7ff fb96 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(40, 160, "Speed (E):", WHITE, BLACK, 16, 0);
 8003770:	2300      	movs	r3, #0
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	2310      	movs	r3, #16
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2300      	movs	r3, #0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003780:	4a33      	ldr	r2, [pc, #204]	; (8003850 <screen_init+0x1f0>)
 8003782:	21a0      	movs	r1, #160	; 0xa0
 8003784:	2028      	movs	r0, #40	; 0x28
 8003786:	f7ff fb89 	bl	8002e9c <lcd_ShowStr>
	if(speed == 1000)
 800378a:	4b32      	ldr	r3, [pc, #200]	; (8003854 <screen_init+0x1f4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003792:	d10c      	bne.n	80037ae <screen_init+0x14e>
		lcd_ShowStr(120, 160, "EASY", WHITE, BLACK, 16, 0);
 8003794:	2300      	movs	r3, #0
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	2310      	movs	r3, #16
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2300      	movs	r3, #0
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037a4:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <screen_init+0x1f8>)
 80037a6:	21a0      	movs	r1, #160	; 0xa0
 80037a8:	2078      	movs	r0, #120	; 0x78
 80037aa:	f7ff fb77 	bl	8002e9c <lcd_ShowStr>
	if(speed == 500)
 80037ae:	4b29      	ldr	r3, [pc, #164]	; (8003854 <screen_init+0x1f4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80037b6:	d10c      	bne.n	80037d2 <screen_init+0x172>
		lcd_ShowStr(120, 160, "MEDIUM", WHITE, BLACK, 16, 0);
 80037b8:	2300      	movs	r3, #0
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	2310      	movs	r3, #16
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2300      	movs	r3, #0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037c8:	4a24      	ldr	r2, [pc, #144]	; (800385c <screen_init+0x1fc>)
 80037ca:	21a0      	movs	r1, #160	; 0xa0
 80037cc:	2078      	movs	r0, #120	; 0x78
 80037ce:	f7ff fb65 	bl	8002e9c <lcd_ShowStr>
	if(speed == 100)
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <screen_init+0x1f4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d10c      	bne.n	80037f4 <screen_init+0x194>
		lcd_ShowStr(120, 160, "HARD", WHITE, BLACK, 16, 0);
 80037da:	2300      	movs	r3, #0
 80037dc:	9302      	str	r3, [sp, #8]
 80037de:	2310      	movs	r3, #16
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <screen_init+0x200>)
 80037ec:	21a0      	movs	r1, #160	; 0xa0
 80037ee:	2078      	movs	r0, #120	; 0x78
 80037f0:	f7ff fb54 	bl	8002e9c <lcd_ShowStr>

	lcd_ShowStr(40,180,"Leaderboard (<)",WHITE,BLACK,16,0);
 80037f4:	2300      	movs	r3, #0
 80037f6:	9302      	str	r3, [sp, #8]
 80037f8:	2310      	movs	r3, #16
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003804:	4a17      	ldr	r2, [pc, #92]	; (8003864 <screen_init+0x204>)
 8003806:	21b4      	movs	r1, #180	; 0xb4
 8003808:	2028      	movs	r0, #40	; 0x28
 800380a:	f7ff fb47 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 800380e:	2301      	movs	r3, #1
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	2318      	movs	r3, #24
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	2300      	movs	r3, #0
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	4a12      	ldr	r2, [pc, #72]	; (8003868 <screen_init+0x208>)
 800381e:	21eb      	movs	r1, #235	; 0xeb
 8003820:	205a      	movs	r0, #90	; 0x5a
 8003822:	f7ff fb3b 	bl	8002e9c <lcd_ShowStr>
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	0800da98 	.word	0x0800da98
 8003830:	0800daa4 	.word	0x0800daa4
 8003834:	20000108 	.word	0x20000108
 8003838:	0800dab0 	.word	0x0800dab0
 800383c:	2000010c 	.word	0x2000010c
 8003840:	0800dabc 	.word	0x0800dabc
 8003844:	0800dac4 	.word	0x0800dac4
 8003848:	0800dacc 	.word	0x0800dacc
 800384c:	0800dad4 	.word	0x0800dad4
 8003850:	0800dadc 	.word	0x0800dadc
 8003854:	20000000 	.word	0x20000000
 8003858:	0800dae8 	.word	0x0800dae8
 800385c:	0800daf0 	.word	0x0800daf0
 8003860:	0800daf8 	.word	0x0800daf8
 8003864:	0800db00 	.word	0x0800db00
 8003868:	0800db10 	.word	0x0800db10

0800386c <screen_play>:

void screen_play(){
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af02      	add	r7, sp, #8
	lcd_Fill(0, 0, 240, 200, WHITE);
 8003872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	23c8      	movs	r3, #200	; 0xc8
 800387a:	22f0      	movs	r2, #240	; 0xf0
 800387c:	2100      	movs	r1, #0
 800387e:	2000      	movs	r0, #0
 8003880:	f7fe fdcc 	bl	800241c <lcd_Fill>
	lcd_Fill(90, 210, 150, 250, BLUE);//UP
 8003884:	231f      	movs	r3, #31
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	23fa      	movs	r3, #250	; 0xfa
 800388a:	2296      	movs	r2, #150	; 0x96
 800388c:	21d2      	movs	r1, #210	; 0xd2
 800388e:	205a      	movs	r0, #90	; 0x5a
 8003890:	f7fe fdc4 	bl	800241c <lcd_Fill>
	lcd_Fill(90, 260, 150, 300, BLUE);//DOWN
 8003894:	231f      	movs	r3, #31
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800389c:	2296      	movs	r2, #150	; 0x96
 800389e:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038a2:	205a      	movs	r0, #90	; 0x5a
 80038a4:	f7fe fdba 	bl	800241c <lcd_Fill>
	lcd_Fill(20, 260, 80, 300, BLUE);//LEFT
 80038a8:	231f      	movs	r3, #31
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80038b0:	2250      	movs	r2, #80	; 0x50
 80038b2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038b6:	2014      	movs	r0, #20
 80038b8:	f7fe fdb0 	bl	800241c <lcd_Fill>
	lcd_Fill(160, 260, 220, 300, BLUE);//RIGHT
 80038bc:	231f      	movs	r3, #31
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80038c4:	22dc      	movs	r2, #220	; 0xdc
 80038c6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038ca:	20a0      	movs	r0, #160	; 0xa0
 80038cc:	f7fe fda6 	bl	800241c <lcd_Fill>
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <screen_score>:

void screen_score(){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af04      	add	r7, sp, #16
	lcd_ShowStr(0, 205, "Score: ", WHITE, WHITE, 24, 1);
 80038de:	2301      	movs	r3, #1
 80038e0:	9302      	str	r3, [sp, #8]
 80038e2:	2318      	movs	r3, #24
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038f0:	4a0b      	ldr	r2, [pc, #44]	; (8003920 <screen_score+0x48>)
 80038f2:	21cd      	movs	r1, #205	; 0xcd
 80038f4:	2000      	movs	r0, #0
 80038f6:	f7ff fad1 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowIntNum(0, 230, score, 4, WHITE, BLACK, 24);
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <screen_score+0x4c>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b29a      	uxth	r2, r3
 8003900:	2318      	movs	r3, #24
 8003902:	9302      	str	r3, [sp, #8]
 8003904:	2300      	movs	r3, #0
 8003906:	9301      	str	r3, [sp, #4]
 8003908:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2304      	movs	r3, #4
 8003910:	21e6      	movs	r1, #230	; 0xe6
 8003912:	2000      	movs	r0, #0
 8003914:	f7fe ff40 	bl	8002798 <lcd_ShowIntNum>
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	0800db18 	.word	0x0800db18
 8003924:	20000990 	.word	0x20000990

08003928 <screen_game_over>:

void screen_game_over(){
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af04      	add	r7, sp, #16
	lcd_ShowStr(70,90,"GAME OVER",WHITE,WHITE,24,1);
 800392e:	2301      	movs	r3, #1
 8003930:	9302      	str	r3, [sp, #8]
 8003932:	2318      	movs	r3, #24
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003940:	4aa1      	ldr	r2, [pc, #644]	; (8003bc8 <screen_game_over+0x2a0>)
 8003942:	215a      	movs	r1, #90	; 0x5a
 8003944:	2046      	movs	r0, #70	; 0x46
 8003946:	f7ff faa9 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(80, 220, "Score: ", WHITE, WHITE, 24, 1);
 800394a:	2301      	movs	r3, #1
 800394c:	9302      	str	r3, [sp, #8]
 800394e:	2318      	movs	r3, #24
 8003950:	9301      	str	r3, [sp, #4]
 8003952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800395c:	4a9b      	ldr	r2, [pc, #620]	; (8003bcc <screen_game_over+0x2a4>)
 800395e:	21dc      	movs	r1, #220	; 0xdc
 8003960:	2050      	movs	r0, #80	; 0x50
 8003962:	f7ff fa9b 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(40,120,"Player ID:",WHITE,BLACK,16,0);
 8003966:	2300      	movs	r3, #0
 8003968:	9302      	str	r3, [sp, #8]
 800396a:	2310      	movs	r3, #16
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	2300      	movs	r3, #0
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003976:	4a96      	ldr	r2, [pc, #600]	; (8003bd0 <screen_game_over+0x2a8>)
 8003978:	2178      	movs	r1, #120	; 0x78
 800397a:	2028      	movs	r0, #40	; 0x28
 800397c:	f7ff fa8e 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowIntNum(120, 120, ID, 4, WHITE, BLACK, 16);
 8003980:	4b94      	ldr	r3, [pc, #592]	; (8003bd4 <screen_game_over+0x2ac>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b29a      	uxth	r2, r3
 8003986:	2310      	movs	r3, #16
 8003988:	9302      	str	r3, [sp, #8]
 800398a:	2300      	movs	r3, #0
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	2304      	movs	r3, #4
 8003996:	2178      	movs	r1, #120	; 0x78
 8003998:	2078      	movs	r0, #120	; 0x78
 800399a:	f7fe fefd 	bl	8002798 <lcd_ShowIntNum>
	lcd_ShowStr(40, 140, "Mode (B):", WHITE, BLACK, 16, 0);
 800399e:	2300      	movs	r3, #0
 80039a0:	9302      	str	r3, [sp, #8]
 80039a2:	2310      	movs	r3, #16
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039ae:	4a8a      	ldr	r2, [pc, #552]	; (8003bd8 <screen_game_over+0x2b0>)
 80039b0:	218c      	movs	r1, #140	; 0x8c
 80039b2:	2028      	movs	r0, #40	; 0x28
 80039b4:	f7ff fa72 	bl	8002e9c <lcd_ShowStr>
	if(mode == NORMAL)
 80039b8:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <screen_game_over+0x2b4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10c      	bne.n	80039da <screen_game_over+0xb2>
		lcd_ShowStr(120, 140, "NORMAL", WHITE, BLACK, 16, 0);
 80039c0:	2300      	movs	r3, #0
 80039c2:	9302      	str	r3, [sp, #8]
 80039c4:	2310      	movs	r3, #16
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	2300      	movs	r3, #0
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039d0:	4a83      	ldr	r2, [pc, #524]	; (8003be0 <screen_game_over+0x2b8>)
 80039d2:	218c      	movs	r1, #140	; 0x8c
 80039d4:	2078      	movs	r0, #120	; 0x78
 80039d6:	f7ff fa61 	bl	8002e9c <lcd_ShowStr>
	if(mode == WALL)
 80039da:	4b80      	ldr	r3, [pc, #512]	; (8003bdc <screen_game_over+0x2b4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d10c      	bne.n	80039fc <screen_game_over+0xd4>
		lcd_ShowStr(120, 140, "WALL", WHITE, BLACK, 16, 0);
 80039e2:	2300      	movs	r3, #0
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	2310      	movs	r3, #16
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2300      	movs	r3, #0
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f2:	4a7c      	ldr	r2, [pc, #496]	; (8003be4 <screen_game_over+0x2bc>)
 80039f4:	218c      	movs	r1, #140	; 0x8c
 80039f6:	2078      	movs	r0, #120	; 0x78
 80039f8:	f7ff fa50 	bl	8002e9c <lcd_ShowStr>
	if(mode == WALLS)
 80039fc:	4b77      	ldr	r3, [pc, #476]	; (8003bdc <screen_game_over+0x2b4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d10c      	bne.n	8003a1e <screen_game_over+0xf6>
		lcd_ShowStr(120, 140, "WALLS", WHITE, BLACK, 16, 0);
 8003a04:	2300      	movs	r3, #0
 8003a06:	9302      	str	r3, [sp, #8]
 8003a08:	2310      	movs	r3, #16
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a14:	4a74      	ldr	r2, [pc, #464]	; (8003be8 <screen_game_over+0x2c0>)
 8003a16:	218c      	movs	r1, #140	; 0x8c
 8003a18:	2078      	movs	r0, #120	; 0x78
 8003a1a:	f7ff fa3f 	bl	8002e9c <lcd_ShowStr>
	if(mode == TIMER)
 8003a1e:	4b6f      	ldr	r3, [pc, #444]	; (8003bdc <screen_game_over+0x2b4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d10c      	bne.n	8003a40 <screen_game_over+0x118>
		lcd_ShowStr(120, 140, "TIMER", WHITE, BLACK, 16, 0);
 8003a26:	2300      	movs	r3, #0
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a36:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <screen_game_over+0x2c4>)
 8003a38:	218c      	movs	r1, #140	; 0x8c
 8003a3a:	2078      	movs	r0, #120	; 0x78
 8003a3c:	f7ff fa2e 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(40, 160, "Speed (E):", WHITE, BLACK, 16, 0);
 8003a40:	2300      	movs	r3, #0
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	2310      	movs	r3, #16
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a50:	4a67      	ldr	r2, [pc, #412]	; (8003bf0 <screen_game_over+0x2c8>)
 8003a52:	21a0      	movs	r1, #160	; 0xa0
 8003a54:	2028      	movs	r0, #40	; 0x28
 8003a56:	f7ff fa21 	bl	8002e9c <lcd_ShowStr>
	if(speed == 1000)
 8003a5a:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <screen_game_over+0x2cc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d10c      	bne.n	8003a7e <screen_game_over+0x156>
		lcd_ShowStr(120, 160, "EASY", WHITE, BLACK, 16, 0);
 8003a64:	2300      	movs	r3, #0
 8003a66:	9302      	str	r3, [sp, #8]
 8003a68:	2310      	movs	r3, #16
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a74:	4a60      	ldr	r2, [pc, #384]	; (8003bf8 <screen_game_over+0x2d0>)
 8003a76:	21a0      	movs	r1, #160	; 0xa0
 8003a78:	2078      	movs	r0, #120	; 0x78
 8003a7a:	f7ff fa0f 	bl	8002e9c <lcd_ShowStr>
	if(speed == 500)
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <screen_game_over+0x2cc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a86:	d10c      	bne.n	8003aa2 <screen_game_over+0x17a>
		lcd_ShowStr(120, 160, "MEDIUM", WHITE, BLACK, 16, 0);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9302      	str	r3, [sp, #8]
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	2300      	movs	r3, #0
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <screen_game_over+0x2d4>)
 8003a9a:	21a0      	movs	r1, #160	; 0xa0
 8003a9c:	2078      	movs	r0, #120	; 0x78
 8003a9e:	f7ff f9fd 	bl	8002e9c <lcd_ShowStr>
	if(speed == 100)
 8003aa2:	4b54      	ldr	r3, [pc, #336]	; (8003bf4 <screen_game_over+0x2cc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d10c      	bne.n	8003ac4 <screen_game_over+0x19c>
		lcd_ShowStr(120, 160, "HARD", WHITE, BLACK, 16, 0);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9302      	str	r3, [sp, #8]
 8003aae:	2310      	movs	r3, #16
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aba:	4a51      	ldr	r2, [pc, #324]	; (8003c00 <screen_game_over+0x2d8>)
 8003abc:	21a0      	movs	r1, #160	; 0xa0
 8003abe:	2078      	movs	r0, #120	; 0x78
 8003ac0:	f7ff f9ec 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(40, 180, "Leaderboard (<)", WHITE, BLACK, 16, 0);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9302      	str	r3, [sp, #8]
 8003ac8:	2310      	movs	r3, #16
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad4:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <screen_game_over+0x2dc>)
 8003ad6:	21b4      	movs	r1, #180	; 0xb4
 8003ad8:	2028      	movs	r0, #40	; 0x28
 8003ada:	f7ff f9df 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowStr(40, 200, "Time:", WHITE, BLACK, 16, 0);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9302      	str	r3, [sp, #8]
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aee:	4a46      	ldr	r2, [pc, #280]	; (8003c08 <screen_game_over+0x2e0>)
 8003af0:	21c8      	movs	r1, #200	; 0xc8
 8003af2:	2028      	movs	r0, #40	; 0x28
 8003af4:	f7ff f9d2 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowIntNum(90, 200, count/60, 2, WHITE, BLACK, 16);
 8003af8:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <screen_game_over+0x2e4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a44      	ldr	r2, [pc, #272]	; (8003c10 <screen_game_over+0x2e8>)
 8003afe:	fb82 1203 	smull	r1, r2, r2, r3
 8003b02:	441a      	add	r2, r3
 8003b04:	1152      	asrs	r2, r2, #5
 8003b06:	17db      	asrs	r3, r3, #31
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	9302      	str	r3, [sp, #8]
 8003b10:	2300      	movs	r3, #0
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	21c8      	movs	r1, #200	; 0xc8
 8003b1e:	205a      	movs	r0, #90	; 0x5a
 8003b20:	f7fe fe3a 	bl	8002798 <lcd_ShowIntNum>
	lcd_ShowStr(110, 200, ":", WHITE, BLACK, 16, 0);
 8003b24:	2300      	movs	r3, #0
 8003b26:	9302      	str	r3, [sp, #8]
 8003b28:	2310      	movs	r3, #16
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b34:	4a37      	ldr	r2, [pc, #220]	; (8003c14 <screen_game_over+0x2ec>)
 8003b36:	21c8      	movs	r1, #200	; 0xc8
 8003b38:	206e      	movs	r0, #110	; 0x6e
 8003b3a:	f7ff f9af 	bl	8002e9c <lcd_ShowStr>
	lcd_ShowIntNum(120, 200, count%60, 2, WHITE, BLACK, 16);
 8003b3e:	4b33      	ldr	r3, [pc, #204]	; (8003c0c <screen_game_over+0x2e4>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <screen_game_over+0x2e8>)
 8003b44:	fb83 1302 	smull	r1, r3, r3, r2
 8003b48:	4413      	add	r3, r2
 8003b4a:	1159      	asrs	r1, r3, #5
 8003b4c:	17d3      	asrs	r3, r2, #31
 8003b4e:	1ac9      	subs	r1, r1, r3
 8003b50:	460b      	mov	r3, r1
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a5b      	subs	r3, r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	1ad1      	subs	r1, r2, r3
 8003b5a:	b28a      	uxth	r2, r1
 8003b5c:	2310      	movs	r3, #16
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	2300      	movs	r3, #0
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	21c8      	movs	r1, #200	; 0xc8
 8003b6e:	2078      	movs	r0, #120	; 0x78
 8003b70:	f7fe fe12 	bl	8002798 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 220, score, 2, WHITE, BLACK, 24);
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <screen_game_over+0x2f0>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	2318      	movs	r3, #24
 8003b7c:	9302      	str	r3, [sp, #8]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9301      	str	r3, [sp, #4]
 8003b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2302      	movs	r3, #2
 8003b8a:	21dc      	movs	r1, #220	; 0xdc
 8003b8c:	2096      	movs	r0, #150	; 0x96
 8003b8e:	f7fe fe03 	bl	8002798 <lcd_ShowIntNum>
	lcd_Fill(50, 250, 190, 300, GREEN);
 8003b92:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003b9c:	22be      	movs	r2, #190	; 0xbe
 8003b9e:	21fa      	movs	r1, #250	; 0xfa
 8003ba0:	2032      	movs	r0, #50	; 0x32
 8003ba2:	f7fe fc3b 	bl	800241c <lcd_Fill>
	lcd_ShowStr(80,260,"RESTART",BLACK,BLACK,24,1);
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	9302      	str	r3, [sp, #8]
 8003baa:	2318      	movs	r3, #24
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <screen_game_over+0x2f4>)
 8003bb6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003bba:	2050      	movs	r0, #80	; 0x50
 8003bbc:	f7ff f96e 	bl	8002e9c <lcd_ShowStr>
}
 8003bc0:	bf00      	nop
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	0800db20 	.word	0x0800db20
 8003bcc:	0800db18 	.word	0x0800db18
 8003bd0:	0800daa4 	.word	0x0800daa4
 8003bd4:	20000108 	.word	0x20000108
 8003bd8:	0800dab0 	.word	0x0800dab0
 8003bdc:	2000010c 	.word	0x2000010c
 8003be0:	0800dabc 	.word	0x0800dabc
 8003be4:	0800dac4 	.word	0x0800dac4
 8003be8:	0800dacc 	.word	0x0800dacc
 8003bec:	0800dad4 	.word	0x0800dad4
 8003bf0:	0800dadc 	.word	0x0800dadc
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	0800dae8 	.word	0x0800dae8
 8003bfc:	0800daf0 	.word	0x0800daf0
 8003c00:	0800daf8 	.word	0x0800daf8
 8003c04:	0800db00 	.word	0x0800db00
 8003c08:	0800db2c 	.word	0x0800db2c
 8003c0c:	20000110 	.word	0x20000110
 8003c10:	88888889 	.word	0x88888889
 8003c14:	0800db34 	.word	0x0800db34
 8003c18:	20000990 	.word	0x20000990
 8003c1c:	0800db38 	.word	0x0800db38

08003c20 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8003c24:	2205      	movs	r2, #5
 8003c26:	4903      	ldr	r1, [pc, #12]	; (8003c34 <sensor_Read+0x14>)
 8003c28:	4803      	ldr	r0, [pc, #12]	; (8003c38 <sensor_Read+0x18>)
 8003c2a:	f002 fce9 	bl	8006600 <HAL_ADC_Start_DMA>
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000b74 	.word	0x20000b74
 8003c38:	200009cc 	.word	0x200009cc

08003c3c <sensor_GetLight>:

uint16_t sensor_GetLight(){//do sang
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <sensor_GetLight+0x14>)
 8003c42:	889b      	ldrh	r3, [r3, #4]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000b74 	.word	0x20000b74

08003c54 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <sensor_GetPotentiometer+0x14>)
 8003c5a:	88db      	ldrh	r3, [r3, #6]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000b74 	.word	0x20000b74
 8003c6c:	00000000 	.word	0x00000000

08003c70 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8003c74:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <sensor_GetVoltage+0x70>)
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c80:	ee17 0a90 	vmov	r0, s15
 8003c84:	f7fc fc58 	bl	8000538 <__aeabi_f2d>
 8003c88:	a311      	add	r3, pc, #68	; (adr r3, 8003cd0 <sensor_GetVoltage+0x60>)
 8003c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8e:	f7fc fcab 	bl	80005e8 <__aeabi_dmul>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4610      	mov	r0, r2
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	4b11      	ldr	r3, [pc, #68]	; (8003ce4 <sensor_GetVoltage+0x74>)
 8003ca0:	f7fc fca2 	bl	80005e8 <__aeabi_dmul>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	a30a      	add	r3, pc, #40	; (adr r3, 8003cd8 <sensor_GetVoltage+0x68>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fc fdc3 	bl	800083c <__aeabi_ddiv>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f7fc ff63 	bl	8000b88 <__aeabi_d2f>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	ee07 3a90 	vmov	s15, r3
}
 8003cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	66666666 	.word	0x66666666
 8003cd4:	400a6666 	.word	0x400a6666
 8003cd8:	cccccccd 	.word	0xcccccccd
 8003cdc:	40b908ac 	.word	0x40b908ac
 8003ce0:	20000b74 	.word	0x20000b74
 8003ce4:	40280000 	.word	0x40280000

08003ce8 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8003cec:	4b28      	ldr	r3, [pc, #160]	; (8003d90 <sensor_GetCurrent+0xa8>)
 8003cee:	885b      	ldrh	r3, [r3, #2]
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf8:	ee17 0a90 	vmov	r0, s15
 8003cfc:	f7fc fc1c 	bl	8000538 <__aeabi_f2d>
 8003d00:	a31f      	add	r3, pc, #124	; (adr r3, 8003d80 <sensor_GetCurrent+0x98>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fc6f 	bl	80005e8 <__aeabi_dmul>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <sensor_GetCurrent+0xac>)
 8003d18:	f7fc fc66 	bl	80005e8 <__aeabi_dmul>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	a318      	add	r3, pc, #96	; (adr r3, 8003d88 <sensor_GetCurrent+0xa0>)
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	f7fc fd87 	bl	800083c <__aeabi_ddiv>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <sensor_GetCurrent+0xb0>)
 8003d3c:	f7fc fa9c 	bl	8000278 <__aeabi_dsub>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4610      	mov	r0, r2
 8003d46:	4619      	mov	r1, r3
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <sensor_GetCurrent+0xb4>)
 8003d4e:	f7fc fc4b 	bl	80005e8 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <sensor_GetCurrent+0xb0>)
 8003d60:	f7fc fd6c 	bl	800083c <__aeabi_ddiv>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fc ff0c 	bl	8000b88 <__aeabi_d2f>
 8003d70:	4603      	mov	r3, r0
 8003d72:	ee07 3a90 	vmov	s15, r3
}
 8003d76:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	f3af 8000 	nop.w
 8003d80:	66666666 	.word	0x66666666
 8003d84:	400a6666 	.word	0x400a6666
 8003d88:	147ae148 	.word	0x147ae148
 8003d8c:	40a4b2ee 	.word	0x40a4b2ee
 8003d90:	20000b74 	.word	0x20000b74
 8003d94:	408f4000 	.word	0x408f4000
 8003d98:	40040000 	.word	0x40040000
 8003d9c:	40140000 	.word	0x40140000

08003da0 <sensor_GetTemperature>:

float sensor_GetTemperature(){//Nhiet do
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <sensor_GetTemperature+0x30>)
 8003da6:	891b      	ldrh	r3, [r3, #8]
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003dd4 <sensor_GetTemperature+0x34>
 8003db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003dd8 <sensor_GetTemperature+0x38>
 8003dbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003dc0:	eef0 7a66 	vmov.f32	s15, s13
}
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	20000b74 	.word	0x20000b74
 8003dd4:	43a50000 	.word	0x43a50000
 8003dd8:	457ff000 	.word	0x457ff000

08003ddc <getWattage>:

float getWattage(){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	ed2d 8b02 	vpush	{d8}
 8003de2:	af00      	add	r7, sp, #0
	return sensor_GetVoltage() * sensor_GetCurrent();
 8003de4:	f7ff ff44 	bl	8003c70 <sensor_GetVoltage>
 8003de8:	eeb0 8a40 	vmov.f32	s16, s0
 8003dec:	f7ff ff7c 	bl	8003ce8 <sensor_GetCurrent>
 8003df0:	eef0 7a40 	vmov.f32	s15, s0
 8003df4:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	ecbd 8b02 	vpop	{d8}
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <isLight>:

uint16_t isLight(){//> 0.5 nguoc anh sang manh
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
	if((float)sensor_GetLight()/4095 > 0.5)
 8003e08:	f7ff ff18 	bl	8003c3c <sensor_GetLight>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e16:	eddf 6a08 	vldr	s13, [pc, #32]	; 8003e38 <isLight+0x34>
 8003e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e1e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	dd01      	ble.n	8003e30 <isLight+0x2c>
		return 1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <isLight+0x2e>
	return 0;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	457ff000 	.word	0x457ff000
 8003e3c:	00000000 	.word	0x00000000

08003e40 <isHumidity>:

uint16_t isHumidity(){//Do am (nut van bien tro)
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
	if((float)sensor_GetPotentiometer()/4094 > 0.7)
 8003e44:	f7ff ff06 	bl	8003c54 <sensor_GetPotentiometer>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e52:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003e88 <isHumidity+0x48>
 8003e56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e5a:	ee16 0a90 	vmov	r0, s13
 8003e5e:	f7fc fb6b 	bl	8000538 <__aeabi_f2d>
 8003e62:	a307      	add	r3, pc, #28	; (adr r3, 8003e80 <isHumidity+0x40>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f7fc fe4e 	bl	8000b08 <__aeabi_dcmpgt>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <isHumidity+0x36>
		return 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <isHumidity+0x38>
	return 0;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	f3af 8000 	nop.w
 8003e80:	66666666 	.word	0x66666666
 8003e84:	3fe66666 	.word	0x3fe66666
 8003e88:	457fe000 	.word	0x457fe000

08003e8c <draw_snake>:
int sw_right = 1;
int sw_left = 1;
uint8_t score = 0;
int lose = 0;

void draw_snake(int x,int y){
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GREEN, 5, 1);
 8003e96:	2301      	movs	r3, #1
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe ff8d 	bl	8002dc2 <lcd_DrawCircle>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <draw_food>:

void draw_food(int x,int y){
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, RED, 5, 1);
 8003eba:	2301      	movs	r3, #1
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2305      	movs	r3, #5
 8003ec0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe ff7b 	bl	8002dc2 <lcd_DrawCircle>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <draw_head>:

void draw_head(int x, int y){
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, LIGHTGREEN, 5, 1);
 8003ede:	2301      	movs	r3, #1
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	f248 421f 	movw	r2, #33823	; 0x841f
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fe ff69 	bl	8002dc2 <lcd_DrawCircle>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <draw_wall>:

void draw_wall(int x, int y){
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GRAY, 5, 1);
 8003f02:	2301      	movs	r3, #1
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2305      	movs	r3, #5
 8003f08:	f248 4230 	movw	r2, #33840	; 0x8430
 8003f0c:	6839      	ldr	r1, [r7, #0]
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fe ff57 	bl	8002dc2 <lcd_DrawCircle>
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <clear_block>:

void clear_block(int x,int y){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, WHITE, 5, 1);
 8003f26:	2301      	movs	r3, #1
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2305      	movs	r3, #5
 8003f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f30:	6839      	ldr	r1, [r7, #0]
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe ff45 	bl	8002dc2 <lcd_DrawCircle>
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <update_grid>:

void update_grid(){
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 8003f46:	2300      	movs	r3, #0
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	e08b      	b.n	8004064 <update_grid+0x124>
		for(int j=0;j<20;j++){
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	e081      	b.n	8004056 <update_grid+0x116>
			if(draw_grid[i][j]==2){
 8003f52:	4949      	ldr	r1, [pc, #292]	; (8004078 <update_grid+0x138>)
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4413      	add	r3, r2
 8003f62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d10f      	bne.n	8003f8a <update_grid+0x4a>
				draw_snake(i*10+5,j*10+5);
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	1d58      	adds	r0, r3, #5
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	3305      	adds	r3, #5
 8003f82:	4619      	mov	r1, r3
 8003f84:	f7ff ff82 	bl	8003e8c <draw_snake>
 8003f88:	e062      	b.n	8004050 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==4){
 8003f8a:	493b      	ldr	r1, [pc, #236]	; (8004078 <update_grid+0x138>)
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d10f      	bne.n	8003fc2 <update_grid+0x82>
				draw_head(i*10+5,j*10+5);
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	1d58      	adds	r0, r3, #5
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	3305      	adds	r3, #5
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f7ff ff8a 	bl	8003ed4 <draw_head>
 8003fc0:	e046      	b.n	8004050 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==1){
 8003fc2:	492d      	ldr	r1, [pc, #180]	; (8004078 <update_grid+0x138>)
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10f      	bne.n	8003ffa <update_grid+0xba>
				draw_food(i*10+5,j*10+5);
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	1d58      	adds	r0, r3, #5
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	3305      	adds	r3, #5
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f7ff ff5c 	bl	8003eb0 <draw_food>
 8003ff8:	e02a      	b.n	8004050 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==3){
 8003ffa:	491f      	ldr	r1, [pc, #124]	; (8004078 <update_grid+0x138>)
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4413      	add	r3, r2
 800400a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d10f      	bne.n	8004032 <update_grid+0xf2>
				draw_wall(i*10+5,j*10+5);
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	1d58      	adds	r0, r3, #5
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	3305      	adds	r3, #5
 800402a:	4619      	mov	r1, r3
 800402c:	f7ff ff64 	bl	8003ef8 <draw_wall>
 8004030:	e00e      	b.n	8004050 <update_grid+0x110>
			}
			else{
				clear_block(i*10+5,j*10+5);
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	1d58      	adds	r0, r3, #5
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	3305      	adds	r3, #5
 800404a:	4619      	mov	r1, r3
 800404c:	f7ff ff66 	bl	8003f1c <clear_block>
		for(int j=0;j<20;j++){
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	3301      	adds	r3, #1
 8004054:	603b      	str	r3, [r7, #0]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b13      	cmp	r3, #19
 800405a:	f77f af7a 	ble.w	8003f52 <update_grid+0x12>
	for(int i=0;i<24;i++){
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3301      	adds	r3, #1
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b17      	cmp	r3, #23
 8004068:	f77f af70 	ble.w	8003f4c <update_grid+0xc>
			}
		}
	}
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000140 	.word	0x20000140

0800407c <delete_wall>:

void delete_wall(void){
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	e022      	b.n	80040ce <delete_wall+0x52>
		for(int j=0;j<20;j++){
 8004088:	2300      	movs	r3, #0
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	e019      	b.n	80040c2 <delete_wall+0x46>
			if(draw_grid[i][j]==3){
 800408e:	4915      	ldr	r1, [pc, #84]	; (80040e4 <delete_wall+0x68>)
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4413      	add	r3, r2
 800409e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d10a      	bne.n	80040bc <delete_wall+0x40>
				draw_grid[i][j]=0;
 80040a6:	490f      	ldr	r1, [pc, #60]	; (80040e4 <delete_wall+0x68>)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	4413      	add	r3, r2
 80040b6:	2200      	movs	r2, #0
 80040b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	3301      	adds	r3, #1
 80040c0:	603b      	str	r3, [r7, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b13      	cmp	r3, #19
 80040c6:	dde2      	ble.n	800408e <delete_wall+0x12>
	for(int i=0;i<24;i++){
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3301      	adds	r3, #1
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b17      	cmp	r3, #23
 80040d2:	ddd9      	ble.n	8004088 <delete_wall+0xc>
			}
		}
	}
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	20000140 	.word	0x20000140

080040e8 <init_grid>:

void init_grid(void){
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
	for(int i=0; i<24;i++){
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e016      	b.n	8004122 <init_grid+0x3a>
		for(int j=0;j<20;j++){
 80040f4:	2300      	movs	r3, #0
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	e00d      	b.n	8004116 <init_grid+0x2e>
			draw_grid[i][j]=0;
 80040fa:	490f      	ldr	r1, [pc, #60]	; (8004138 <init_grid+0x50>)
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	4413      	add	r3, r2
 800410a:	2200      	movs	r2, #0
 800410c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b13      	cmp	r3, #19
 800411a:	ddee      	ble.n	80040fa <init_grid+0x12>
	for(int i=0; i<24;i++){
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3301      	adds	r3, #1
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b17      	cmp	r3, #23
 8004126:	dde5      	ble.n	80040f4 <init_grid+0xc>
		}
	}
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000140 	.word	0x20000140

0800413c <move_snake>:

void move_snake(){
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
		for(int i=size_of_snake-1;i>=0;i--){
 8004142:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <move_snake+0x194>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3b01      	subs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	e014      	b.n	8004176 <move_snake+0x3a>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=0;
 800414c:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <move_snake+0x198>)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004154:	495f      	ldr	r1, [pc, #380]	; (80042d4 <move_snake+0x198>)
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	3318      	adds	r3, #24
 800415a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800415e:	485e      	ldr	r0, [pc, #376]	; (80042d8 <move_snake+0x19c>)
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	2200      	movs	r2, #0
 800416c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-1;i>=0;i--){
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3b01      	subs	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	dae7      	bge.n	800414c <move_snake+0x10>
		}
		draw_grid[snake_pos[0][0]][snake_pos[1][0]] = 0;
 800417c:	4b55      	ldr	r3, [pc, #340]	; (80042d4 <move_snake+0x198>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b54      	ldr	r3, [pc, #336]	; (80042d4 <move_snake+0x198>)
 8004182:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004184:	4854      	ldr	r0, [pc, #336]	; (80042d8 <move_snake+0x19c>)
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	2200      	movs	r2, #0
 8004192:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		old_poshx=snake_pos[0][size_of_snake-1];
 8004196:	4b4e      	ldr	r3, [pc, #312]	; (80042d0 <move_snake+0x194>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3b01      	subs	r3, #1
 800419c:	4a4d      	ldr	r2, [pc, #308]	; (80042d4 <move_snake+0x198>)
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	4a4e      	ldr	r2, [pc, #312]	; (80042dc <move_snake+0x1a0>)
 80041a4:	6013      	str	r3, [r2, #0]
		old_poshy=snake_pos[1][size_of_snake-1];
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <move_snake+0x194>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4a49      	ldr	r2, [pc, #292]	; (80042d4 <move_snake+0x198>)
 80041ae:	3318      	adds	r3, #24
 80041b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b4:	4a4a      	ldr	r2, [pc, #296]	; (80042e0 <move_snake+0x1a4>)
 80041b6:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=snake_pos[0][size_of_snake-1]+snake_speed[0];
 80041b8:	4b45      	ldr	r3, [pc, #276]	; (80042d0 <move_snake+0x194>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3b01      	subs	r3, #1
 80041be:	4a45      	ldr	r2, [pc, #276]	; (80042d4 <move_snake+0x198>)
 80041c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041c4:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <move_snake+0x1a8>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <move_snake+0x194>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	440a      	add	r2, r1
 80041d0:	4940      	ldr	r1, [pc, #256]	; (80042d4 <move_snake+0x198>)
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=snake_pos[1][size_of_snake-1]+snake_speed[1];
 80041d6:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <move_snake+0x194>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	4a3d      	ldr	r2, [pc, #244]	; (80042d4 <move_snake+0x198>)
 80041de:	3318      	adds	r3, #24
 80041e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041e4:	4b3f      	ldr	r3, [pc, #252]	; (80042e4 <move_snake+0x1a8>)
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	4b39      	ldr	r3, [pc, #228]	; (80042d0 <move_snake+0x194>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	440a      	add	r2, r1
 80041f0:	4938      	ldr	r1, [pc, #224]	; (80042d4 <move_snake+0x198>)
 80041f2:	3318      	adds	r3, #24
 80041f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pos_head[0]=snake_pos[0][size_of_snake-1];
 80041f8:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <move_snake+0x194>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	4a35      	ldr	r2, [pc, #212]	; (80042d4 <move_snake+0x198>)
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	4a38      	ldr	r2, [pc, #224]	; (80042e8 <move_snake+0x1ac>)
 8004206:	6013      	str	r3, [r2, #0]
		pos_head[1]=snake_pos[1][size_of_snake-1];
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <move_snake+0x194>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3b01      	subs	r3, #1
 800420e:	4a31      	ldr	r2, [pc, #196]	; (80042d4 <move_snake+0x198>)
 8004210:	3318      	adds	r3, #24
 8004212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004216:	4a34      	ldr	r2, [pc, #208]	; (80042e8 <move_snake+0x1ac>)
 8004218:	6053      	str	r3, [r2, #4]
		for(int i=size_of_snake-2;i>=0;i--){
 800421a:	4b2d      	ldr	r3, [pc, #180]	; (80042d0 <move_snake+0x194>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3b02      	subs	r3, #2
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	e020      	b.n	8004266 <move_snake+0x12a>
			int nx = snake_pos[0][i];
 8004224:	4a2b      	ldr	r2, [pc, #172]	; (80042d4 <move_snake+0x198>)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800422c:	60bb      	str	r3, [r7, #8]
			int ny = snake_pos[1][i];
 800422e:	4a29      	ldr	r2, [pc, #164]	; (80042d4 <move_snake+0x198>)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	3318      	adds	r3, #24
 8004234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004238:	607b      	str	r3, [r7, #4]
			snake_pos[0][i]=old_poshx;
 800423a:	4b28      	ldr	r3, [pc, #160]	; (80042dc <move_snake+0x1a0>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4925      	ldr	r1, [pc, #148]	; (80042d4 <move_snake+0x198>)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			snake_pos[1][i]=old_poshy;
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <move_snake+0x1a4>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4922      	ldr	r1, [pc, #136]	; (80042d4 <move_snake+0x198>)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	3318      	adds	r3, #24
 8004250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			old_poshx=nx;
 8004254:	4a21      	ldr	r2, [pc, #132]	; (80042dc <move_snake+0x1a0>)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6013      	str	r3, [r2, #0]
			old_poshy=ny;
 800425a:	4a21      	ldr	r2, [pc, #132]	; (80042e0 <move_snake+0x1a4>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6013      	str	r3, [r2, #0]
		for(int i=size_of_snake-2;i>=0;i--){
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3b01      	subs	r3, #1
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	dadb      	bge.n	8004224 <move_snake+0xe8>
		}
		for(int i=size_of_snake-2;i>=0;i--){
 800426c:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <move_snake+0x194>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	3b02      	subs	r3, #2
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e014      	b.n	80042a0 <move_snake+0x164>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=2;
 8004276:	4a17      	ldr	r2, [pc, #92]	; (80042d4 <move_snake+0x198>)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800427e:	4915      	ldr	r1, [pc, #84]	; (80042d4 <move_snake+0x198>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3318      	adds	r3, #24
 8004284:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004288:	4813      	ldr	r0, [pc, #76]	; (80042d8 <move_snake+0x19c>)
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	2202      	movs	r2, #2
 8004296:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-2;i>=0;i--){
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b01      	subs	r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	dae7      	bge.n	8004276 <move_snake+0x13a>
		}
		check_collision();
 80042a6:	f000 fa19 	bl	80046dc <check_collision>
		check_food();
 80042aa:	f000 fac1 	bl	8004830 <check_food>
		draw_grid[pos_head[0]][pos_head[1]]=4;
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <move_snake+0x1ac>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <move_snake+0x1ac>)
 80042b4:	6859      	ldr	r1, [r3, #4]
 80042b6:	4808      	ldr	r0, [pc, #32]	; (80042d8 <move_snake+0x19c>)
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	2204      	movs	r2, #4
 80042c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80042c8:	bf00      	nop
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	2000001c 	.word	0x2000001c
 80042d4:	200008c0 	.word	0x200008c0
 80042d8:	20000140 	.word	0x20000140
 80042dc:	20000980 	.word	0x20000980
 80042e0:	20000984 	.word	0x20000984
 80042e4:	20000020 	.word	0x20000020
 80042e8:	20000988 	.word	0x20000988

080042ec <re_init>:

void re_init(void){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
	init_grid();
 80042f0:	f7ff fefa 	bl	80040e8 <init_grid>
	draw_grid[0][0]=2;
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <re_init+0x64>)
 80042f6:	2202      	movs	r2, #2
 80042f8:	601a      	str	r2, [r3, #0]
	draw_grid[1][0]=2;
 80042fa:	4b15      	ldr	r3, [pc, #84]	; (8004350 <re_init+0x64>)
 80042fc:	2202      	movs	r2, #2
 80042fe:	651a      	str	r2, [r3, #80]	; 0x50
	snake_pos[0][0]=0;
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <re_init+0x68>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
	snake_pos[1][0]=0;
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <re_init+0x68>)
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
	snake_pos[0][1]=1;
 800430c:	4b11      	ldr	r3, [pc, #68]	; (8004354 <re_init+0x68>)
 800430e:	2201      	movs	r2, #1
 8004310:	605a      	str	r2, [r3, #4]
	snake_pos[1][1]=0;
 8004312:	4b10      	ldr	r3, [pc, #64]	; (8004354 <re_init+0x68>)
 8004314:	2200      	movs	r2, #0
 8004316:	665a      	str	r2, [r3, #100]	; 0x64
	size_of_snake=2;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <re_init+0x6c>)
 800431a:	2202      	movs	r2, #2
 800431c:	601a      	str	r2, [r3, #0]
	snake_speed[0]=1;
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <re_init+0x70>)
 8004320:	2201      	movs	r2, #1
 8004322:	601a      	str	r2, [r3, #0]
	snake_speed[1]=0;
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <re_init+0x70>)
 8004326:	2200      	movs	r2, #0
 8004328:	605a      	str	r2, [r3, #4]
	sw_up=1;
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <re_init+0x74>)
 800432c:	2201      	movs	r2, #1
 800432e:	601a      	str	r2, [r3, #0]
	sw_down=1;
 8004330:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <re_init+0x78>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
	sw_right=1;
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <re_init+0x7c>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
	sw_left=1;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <re_init+0x80>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]
	score=0;
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <re_init+0x84>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
	spawn_food();
 8004348:	f000 f814 	bl	8004374 <spawn_food>
}
 800434c:	bf00      	nop
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20000140 	.word	0x20000140
 8004354:	200008c0 	.word	0x200008c0
 8004358:	2000001c 	.word	0x2000001c
 800435c:	20000020 	.word	0x20000020
 8004360:	20000028 	.word	0x20000028
 8004364:	2000002c 	.word	0x2000002c
 8004368:	20000030 	.word	0x20000030
 800436c:	20000034 	.word	0x20000034
 8004370:	20000990 	.word	0x20000990

08004374 <spawn_food>:

void spawn_food(void){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
	int xf=rand_no(23);
 800437a:	2017      	movs	r0, #23
 800437c:	f000 f99a 	bl	80046b4 <rand_no>
 8004380:	6078      	str	r0, [r7, #4]
	int yf=rand_no(19);
 8004382:	2013      	movs	r0, #19
 8004384:	f000 f996 	bl	80046b4 <rand_no>
 8004388:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 800438a:	e007      	b.n	800439c <spawn_food+0x28>
		xf=rand_no(23);
 800438c:	2017      	movs	r0, #23
 800438e:	f000 f991 	bl	80046b4 <rand_no>
 8004392:	6078      	str	r0, [r7, #4]
		yf=rand_no(19);
 8004394:	2013      	movs	r0, #19
 8004396:	f000 f98d 	bl	80046b4 <rand_no>
 800439a:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 800439c:	490d      	ldr	r1, [pc, #52]	; (80043d4 <spawn_food+0x60>)
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	4413      	add	r3, r2
 80043ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d0eb      	beq.n	800438c <spawn_food+0x18>
	}
	draw_grid[xf][yf]=1;
 80043b4:	4907      	ldr	r1, [pc, #28]	; (80043d4 <spawn_food+0x60>)
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	4413      	add	r3, r2
 80043c4:	2201      	movs	r2, #1
 80043c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043ca:	bf00      	nop
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000140 	.word	0x20000140

080043d8 <spawn_wall>:

void spawn_wall(void){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
	int xw=rand_no(23);
 80043de:	2017      	movs	r0, #23
 80043e0:	f000 f968 	bl	80046b4 <rand_no>
 80043e4:	60f8      	str	r0, [r7, #12]
	int yw=rand_no(19);
 80043e6:	2013      	movs	r0, #19
 80043e8:	f000 f964 	bl	80046b4 <rand_no>
 80043ec:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 80043ee:	e007      	b.n	8004400 <spawn_wall+0x28>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
		xw=rand_no(23);
 80043f0:	2017      	movs	r0, #23
 80043f2:	f000 f95f 	bl	80046b4 <rand_no>
 80043f6:	60f8      	str	r0, [r7, #12]
		yw=rand_no(19);
 80043f8:	2013      	movs	r0, #19
 80043fa:	f000 f95b 	bl	80046b4 <rand_no>
 80043fe:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 8004400:	49ab      	ldr	r1, [pc, #684]	; (80046b0 <spawn_wall+0x2d8>)
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	4413      	add	r3, r2
 8004410:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d0eb      	beq.n	80043f0 <spawn_wall+0x18>
 8004418:	49a5      	ldr	r1, [pc, #660]	; (80046b0 <spawn_wall+0x2d8>)
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4413      	add	r3, r2
 8004428:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d0df      	beq.n	80043f0 <spawn_wall+0x18>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	499e      	ldr	r1, [pc, #632]	; (80046b0 <spawn_wall+0x2d8>)
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4413      	add	r3, r2
 8004442:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 8004446:	2b02      	cmp	r3, #2
 8004448:	d00c      	beq.n	8004464 <spawn_wall+0x8c>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	4998      	ldr	r1, [pc, #608]	; (80046b0 <spawn_wall+0x2d8>)
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	4413      	add	r3, r2
 800445c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d14e      	bne.n	8004502 <spawn_wall+0x12a>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e5a      	subs	r2, r3, #1
 8004468:	4991      	ldr	r1, [pc, #580]	; (80046b0 <spawn_wall+0x2d8>)
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4413      	add	r3, r2
 8004476:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d00c      	beq.n	8004498 <spawn_wall+0xc0>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1e5a      	subs	r2, r3, #1
 8004482:	498b      	ldr	r1, [pc, #556]	; (80046b0 <spawn_wall+0x2d8>)
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	4413      	add	r3, r2
 8004490:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d134      	bne.n	8004502 <spawn_wall+0x12a>
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	4884      	ldr	r0, [pc, #528]	; (80046b0 <spawn_wall+0x2d8>)
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4613      	mov	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d00c      	beq.n	80044cc <spawn_wall+0xf4>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	1c59      	adds	r1, r3, #1
 80044b6:	487e      	ldr	r0, [pc, #504]	; (80046b0 <spawn_wall+0x2d8>)
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d11a      	bne.n	8004502 <spawn_wall+0x12a>
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	1e59      	subs	r1, r3, #1
 80044d0:	4877      	ldr	r0, [pc, #476]	; (80046b0 <spawn_wall+0x2d8>)
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d084      	beq.n	80043f0 <spawn_wall+0x18>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1e59      	subs	r1, r3, #1
 80044ea:	4871      	ldr	r0, [pc, #452]	; (80046b0 <spawn_wall+0x2d8>)
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	f43f af77 	beq.w	80043f0 <spawn_wall+0x18>
	}
	draw_grid[xw][yw]=3;
 8004502:	496b      	ldr	r1, [pc, #428]	; (80046b0 <spawn_wall+0x2d8>)
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4413      	add	r3, r2
 8004512:	2203      	movs	r2, #3
 8004514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	int d=rand_no(4);
 8004518:	2004      	movs	r0, #4
 800451a:	f000 f8cb 	bl	80046b4 <rand_no>
 800451e:	6038      	str	r0, [r7, #0]
	int flag = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	607b      	str	r3, [r7, #4]
	while(flag == 0){
 8004524:	e0bb      	b.n	800469e <spawn_wall+0x2c6>
		d = rand_no(4);
 8004526:	2004      	movs	r0, #4
 8004528:	f000 f8c4 	bl	80046b4 <rand_no>
 800452c:	6038      	str	r0, [r7, #0]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	3b01      	subs	r3, #1
 8004532:	2b03      	cmp	r3, #3
 8004534:	f200 80b2 	bhi.w	800469c <spawn_wall+0x2c4>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <spawn_wall+0x168>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004551 	.word	0x08004551
 8004544:	080045a7 	.word	0x080045a7
 8004548:	080045f9 	.word	0x080045f9
 800454c:	0800464b 	.word	0x0800464b
		switch (d){
		case 1:
			if(draw_grid[xw+1][yw]!=2 && draw_grid[xw+1][yw]!=1){
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	4956      	ldr	r1, [pc, #344]	; (80046b0 <spawn_wall+0x2d8>)
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4413      	add	r3, r2
 8004562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004566:	2b02      	cmp	r3, #2
 8004568:	f000 8099 	beq.w	800469e <spawn_wall+0x2c6>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	494f      	ldr	r1, [pc, #316]	; (80046b0 <spawn_wall+0x2d8>)
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	4413      	add	r3, r2
 800457e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004582:	2b01      	cmp	r3, #1
 8004584:	f000 808b 	beq.w	800469e <spawn_wall+0x2c6>
				draw_grid[xw+1][yw]=3;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	4948      	ldr	r1, [pc, #288]	; (80046b0 <spawn_wall+0x2d8>)
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	4413      	add	r3, r2
 800459a:	2203      	movs	r2, #3
 800459c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 80045a0:	2301      	movs	r3, #1
 80045a2:	607b      	str	r3, [r7, #4]
			}
			break;
 80045a4:	e07b      	b.n	800469e <spawn_wall+0x2c6>
		case 2:
			if(draw_grid[xw-1][yw]!=2 && draw_grid[xw-1][yw]!=1){
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1e5a      	subs	r2, r3, #1
 80045aa:	4941      	ldr	r1, [pc, #260]	; (80046b0 <spawn_wall+0x2d8>)
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	4413      	add	r3, r2
 80045b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d06e      	beq.n	800469e <spawn_wall+0x2c6>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	493a      	ldr	r1, [pc, #232]	; (80046b0 <spawn_wall+0x2d8>)
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4413      	add	r3, r2
 80045d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d061      	beq.n	800469e <spawn_wall+0x2c6>
				draw_grid[xw-1][yw]=3;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1e5a      	subs	r2, r3, #1
 80045de:	4934      	ldr	r1, [pc, #208]	; (80046b0 <spawn_wall+0x2d8>)
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	4413      	add	r3, r2
 80045ec:	2203      	movs	r2, #3
 80045ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 80045f2:	2301      	movs	r3, #1
 80045f4:	607b      	str	r3, [r7, #4]
			}
			break;
 80045f6:	e052      	b.n	800469e <spawn_wall+0x2c6>
		case 3:
			if(draw_grid[xw][yw+1]!=2 && draw_grid[xw][yw+1]!=1){
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	482c      	ldr	r0, [pc, #176]	; (80046b0 <spawn_wall+0x2d8>)
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800460e:	2b02      	cmp	r3, #2
 8004610:	d045      	beq.n	800469e <spawn_wall+0x2c6>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	1c59      	adds	r1, r3, #1
 8004616:	4826      	ldr	r0, [pc, #152]	; (80046b0 <spawn_wall+0x2d8>)
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d038      	beq.n	800469e <spawn_wall+0x2c6>
				draw_grid[xw][yw+1]=3;
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	1c59      	adds	r1, r3, #1
 8004630:	481f      	ldr	r0, [pc, #124]	; (80046b0 <spawn_wall+0x2d8>)
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	440b      	add	r3, r1
 800463e:	2203      	movs	r2, #3
 8004640:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 8004644:	2301      	movs	r3, #1
 8004646:	607b      	str	r3, [r7, #4]
			}
			break;
 8004648:	e029      	b.n	800469e <spawn_wall+0x2c6>
		case 4:
			if(draw_grid[xw][yw-1]!=2 && draw_grid[xw][yw-1]!=1){
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1e59      	subs	r1, r3, #1
 800464e:	4818      	ldr	r0, [pc, #96]	; (80046b0 <spawn_wall+0x2d8>)
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d01c      	beq.n	800469e <spawn_wall+0x2c6>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	1e59      	subs	r1, r3, #1
 8004668:	4811      	ldr	r0, [pc, #68]	; (80046b0 <spawn_wall+0x2d8>)
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d00f      	beq.n	800469e <spawn_wall+0x2c6>
				draw_grid[xw][yw-1]=3;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	1e59      	subs	r1, r3, #1
 8004682:	480b      	ldr	r0, [pc, #44]	; (80046b0 <spawn_wall+0x2d8>)
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	2203      	movs	r2, #3
 8004692:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 8004696:	2301      	movs	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
			}
			break;
 800469a:	e000      	b.n	800469e <spawn_wall+0x2c6>
		default:
			break;
 800469c:	bf00      	nop
	while(flag == 0){
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f43f af40 	beq.w	8004526 <spawn_wall+0x14e>
		}
	}
}
 80046a6:	bf00      	nop
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000140 	.word	0x20000140

080046b4 <rand_no>:

int rand_no(int m){
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	int num = (rand()%(m+1));
 80046bc:	f007 feaa 	bl	800c414 <rand>
 80046c0:	4602      	mov	r2, r0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3301      	adds	r3, #1
 80046c6:	fb92 f1f3 	sdiv	r1, r2, r3
 80046ca:	fb03 f301 	mul.w	r3, r3, r1
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	60fb      	str	r3, [r7, #12]
	return num;
 80046d2:	68fb      	ldr	r3, [r7, #12]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <check_collision>:

void check_collision(void){
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
	if(pos_head[0]>23 || pos_head[0]<0){
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <check_collision+0x94>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b17      	cmp	r3, #23
 80046e6:	dc03      	bgt.n	80046f0 <check_collision+0x14>
 80046e8:	4b21      	ldr	r3, [pc, #132]	; (8004770 <check_collision+0x94>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da02      	bge.n	80046f6 <check_collision+0x1a>
		lose = 1;
 80046f0:	4b20      	ldr	r3, [pc, #128]	; (8004774 <check_collision+0x98>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
	}
	if(pos_head[1]>19 || pos_head[1]<0){
 80046f6:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <check_collision+0x94>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b13      	cmp	r3, #19
 80046fc:	dc03      	bgt.n	8004706 <check_collision+0x2a>
 80046fe:	4b1c      	ldr	r3, [pc, #112]	; (8004770 <check_collision+0x94>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da02      	bge.n	800470c <check_collision+0x30>
		lose = 1;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <check_collision+0x98>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==2){
 800470c:	4b18      	ldr	r3, [pc, #96]	; (8004770 <check_collision+0x94>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <check_collision+0x94>)
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	4818      	ldr	r0, [pc, #96]	; (8004778 <check_collision+0x9c>)
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d102      	bne.n	800472e <check_collision+0x52>
		lose = 1;
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <check_collision+0x98>)
 800472a:	2201      	movs	r2, #1
 800472c:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==3){
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <check_collision+0x94>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <check_collision+0x94>)
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	4810      	ldr	r0, [pc, #64]	; (8004778 <check_collision+0x9c>)
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004746:	2b03      	cmp	r3, #3
 8004748:	d102      	bne.n	8004750 <check_collision+0x74>
		lose = 1;
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <check_collision+0x98>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
	}
	if(countdown == 0){
 8004750:	4b0a      	ldr	r3, [pc, #40]	; (800477c <check_collision+0xa0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <check_collision+0x88>
		lose = 1;
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <check_collision+0x98>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
		countdown = 180;
 800475e:	4b07      	ldr	r3, [pc, #28]	; (800477c <check_collision+0xa0>)
 8004760:	22b4      	movs	r2, #180	; 0xb4
 8004762:	601a      	str	r2, [r3, #0]
	}
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	20000988 	.word	0x20000988
 8004774:	20000994 	.word	0x20000994
 8004778:	20000140 	.word	0x20000140
 800477c:	20000008 	.word	0x20000008

08004780 <wait_check>:

void wait_check(void){
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
	if(sw_down==0 && snake_speed[1]==0){
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <wait_check+0x9c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10c      	bne.n	80047a6 <wait_check+0x26>
 800478c:	4b24      	ldr	r3, [pc, #144]	; (8004820 <wait_check+0xa0>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <wait_check+0x26>
		snake_speed[0]=0;
 8004794:	4b22      	ldr	r3, [pc, #136]	; (8004820 <wait_check+0xa0>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
		snake_speed[1]=1;
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <wait_check+0xa0>)
 800479c:	2201      	movs	r2, #1
 800479e:	605a      	str	r2, [r3, #4]
		sw_down=1;
 80047a0:	4b1e      	ldr	r3, [pc, #120]	; (800481c <wait_check+0x9c>)
 80047a2:	2201      	movs	r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
	}
	if(sw_up==0 && snake_speed[1]==0){
 80047a6:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <wait_check+0xa4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <wait_check+0x4a>
 80047ae:	4b1c      	ldr	r3, [pc, #112]	; (8004820 <wait_check+0xa0>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <wait_check+0x4a>
		snake_speed[0]=0;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <wait_check+0xa0>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
		snake_speed[1]=-1;
 80047bc:	4b18      	ldr	r3, [pc, #96]	; (8004820 <wait_check+0xa0>)
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	605a      	str	r2, [r3, #4]
		sw_up=1;
 80047c4:	4b17      	ldr	r3, [pc, #92]	; (8004824 <wait_check+0xa4>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
	}
	if(sw_right==0 && snake_speed[0]==0){
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <wait_check+0xa8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10c      	bne.n	80047ec <wait_check+0x6c>
 80047d2:	4b13      	ldr	r3, [pc, #76]	; (8004820 <wait_check+0xa0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d108      	bne.n	80047ec <wait_check+0x6c>
		snake_speed[0]=1;
 80047da:	4b11      	ldr	r3, [pc, #68]	; (8004820 <wait_check+0xa0>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <wait_check+0xa0>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
		sw_right=1;
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <wait_check+0xa8>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
	}
	if(sw_left==0 && snake_speed[0]==0){
 80047ec:	4b0f      	ldr	r3, [pc, #60]	; (800482c <wait_check+0xac>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10d      	bne.n	8004810 <wait_check+0x90>
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <wait_check+0xa0>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <wait_check+0x90>
		snake_speed[0]=-1;
 80047fc:	4b08      	ldr	r3, [pc, #32]	; (8004820 <wait_check+0xa0>)
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004802:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 8004804:	4b06      	ldr	r3, [pc, #24]	; (8004820 <wait_check+0xa0>)
 8004806:	2200      	movs	r2, #0
 8004808:	605a      	str	r2, [r3, #4]
		sw_left=1;
 800480a:	4b08      	ldr	r3, [pc, #32]	; (800482c <wait_check+0xac>)
 800480c:	2201      	movs	r2, #1
 800480e:	601a      	str	r2, [r3, #0]
	}
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	2000002c 	.word	0x2000002c
 8004820:	20000020 	.word	0x20000020
 8004824:	20000028 	.word	0x20000028
 8004828:	20000030 	.word	0x20000030
 800482c:	20000034 	.word	0x20000034

08004830 <check_food>:

void check_food(void){
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	if(draw_grid[pos_head[0]][pos_head[1]]==1){
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <check_food+0x60>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <check_food+0x60>)
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	4815      	ldr	r0, [pc, #84]	; (8004894 <check_food+0x64>)
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d11d      	bne.n	800488c <check_food+0x5c>
		score++;
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <check_food+0x68>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	3301      	adds	r3, #1
 8004856:	b2da      	uxtb	r2, r3
 8004858:	4b0f      	ldr	r3, [pc, #60]	; (8004898 <check_food+0x68>)
 800485a:	701a      	strb	r2, [r3, #0]
		size_of_snake++;
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <check_food+0x6c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <check_food+0x6c>)
 8004864:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=pos_head[0];
 8004866:	4b0d      	ldr	r3, [pc, #52]	; (800489c <check_food+0x6c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3b01      	subs	r3, #1
 800486c:	4a08      	ldr	r2, [pc, #32]	; (8004890 <check_food+0x60>)
 800486e:	6812      	ldr	r2, [r2, #0]
 8004870:	490b      	ldr	r1, [pc, #44]	; (80048a0 <check_food+0x70>)
 8004872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=pos_head[1];
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <check_food+0x6c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3b01      	subs	r3, #1
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <check_food+0x60>)
 800487e:	6852      	ldr	r2, [r2, #4]
 8004880:	4907      	ldr	r1, [pc, #28]	; (80048a0 <check_food+0x70>)
 8004882:	3318      	adds	r3, #24
 8004884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		spawn_food();
 8004888:	f7ff fd74 	bl	8004374 <spawn_food>
	}
}
 800488c:	bf00      	nop
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000988 	.word	0x20000988
 8004894:	20000140 	.word	0x20000140
 8004898:	20000990 	.word	0x20000990
 800489c:	2000001c 	.word	0x2000001c
 80048a0:	200008c0 	.word	0x200008c0

080048a4 <timer_init>:

uint16_t flag_timer7 = 0;
uint16_t timer7_counter = 0;
uint16_t timer7_MUL = 0;

void timer_init(){
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80048a8:	4803      	ldr	r0, [pc, #12]	; (80048b8 <timer_init+0x14>)
 80048aa:	f005 fc4b 	bl	800a144 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80048ae:	4803      	ldr	r0, [pc, #12]	; (80048bc <timer_init+0x18>)
 80048b0:	f005 fbe0 	bl	800a074 <HAL_TIM_Base_Start>
}
 80048b4:	bf00      	nop
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000c68 	.word	0x20000c68
 80048bc:	20000c20 	.word	0x20000c20

080048c0 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80048ca:	4a08      	ldr	r2, [pc, #32]	; (80048ec <setTimer2+0x2c>)
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <setTimer2+0x2c>)
 80048d2:	881a      	ldrh	r2, [r3, #0]
 80048d4:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <setTimer2+0x30>)
 80048d6:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <setTimer2+0x34>)
 80048da:	2200      	movs	r2, #0
 80048dc:	801a      	strh	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	2000099c 	.word	0x2000099c
 80048f0:	2000099a 	.word	0x2000099a
 80048f4:	20000998 	.word	0x20000998

080048f8 <setTimer3>:

void setTimer3(uint16_t duration){
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <setTimer3+0x2c>)
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <setTimer3+0x2c>)
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <setTimer3+0x30>)
 800490e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <setTimer3+0x34>)
 8004912:	2200      	movs	r2, #0
 8004914:	801a      	strh	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	200009a2 	.word	0x200009a2
 8004928:	200009a0 	.word	0x200009a0
 800492c:	2000099e 	.word	0x2000099e

08004930 <setTimer4>:

void setTimer4(uint16_t duration){
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <setTimer4+0x2c>)
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <setTimer4+0x2c>)
 8004942:	881a      	ldrh	r2, [r3, #0]
 8004944:	4b06      	ldr	r3, [pc, #24]	; (8004960 <setTimer4+0x30>)
 8004946:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8004948:	4b06      	ldr	r3, [pc, #24]	; (8004964 <setTimer4+0x34>)
 800494a:	2200      	movs	r2, #0
 800494c:	801a      	strh	r2, [r3, #0]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	200009a8 	.word	0x200009a8
 8004960:	200009a6 	.word	0x200009a6
 8004964:	200009a4 	.word	0x200009a4

08004968 <setTimer5>:

void setTimer5(uint16_t duration){
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 8004972:	4a08      	ldr	r2, [pc, #32]	; (8004994 <setTimer5+0x2c>)
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <setTimer5+0x2c>)
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	4b06      	ldr	r3, [pc, #24]	; (8004998 <setTimer5+0x30>)
 800497e:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <setTimer5+0x34>)
 8004982:	2200      	movs	r2, #0
 8004984:	801a      	strh	r2, [r3, #0]
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	200009ae 	.word	0x200009ae
 8004998:	200009ac 	.word	0x200009ac
 800499c:	200009aa 	.word	0x200009aa

080049a0 <setTimer7>:
	timer6_MUL = duration/TIMER_CYCLE_2;
	timer6_counter = timer6_MUL;
	flag_timer6 = 0;
}

void setTimer7(uint16_t duration){
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	80fb      	strh	r3, [r7, #6]
	timer7_MUL = duration/TIMER_CYCLE_2;
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <setTimer7+0x2c>)
 80049ac:	88fb      	ldrh	r3, [r7, #6]
 80049ae:	8013      	strh	r3, [r2, #0]
	timer7_counter = timer7_MUL;
 80049b0:	4b06      	ldr	r3, [pc, #24]	; (80049cc <setTimer7+0x2c>)
 80049b2:	881a      	ldrh	r2, [r3, #0]
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <setTimer7+0x30>)
 80049b6:	801a      	strh	r2, [r3, #0]
	flag_timer7 = 0;
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <setTimer7+0x34>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	801a      	strh	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	200009ba 	.word	0x200009ba
 80049d0:	200009b8 	.word	0x200009b8
 80049d4:	200009b6 	.word	0x200009b6

080049d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d17f      	bne.n	8004aea <HAL_TIM_PeriodElapsedCallback+0x112>
		if(timer2_counter > 0){
 80049ea:	4b42      	ldr	r3, [pc, #264]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d010      	beq.n	8004a14 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80049f2:	4b40      	ldr	r3, [pc, #256]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	4b3e      	ldr	r3, [pc, #248]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80049fc:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80049fe:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004a06:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004a0c:	4b3b      	ldr	r3, [pc, #236]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004a0e:	881a      	ldrh	r2, [r3, #0]
 8004a10:	4b38      	ldr	r3, [pc, #224]	; (8004af4 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a12:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004a14:	4b3a      	ldr	r3, [pc, #232]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d010      	beq.n	8004a3e <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004a1c:	4b38      	ldr	r3, [pc, #224]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	4b36      	ldr	r3, [pc, #216]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a26:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8004a28:	4b35      	ldr	r3, [pc, #212]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a2a:	881b      	ldrh	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d106      	bne.n	8004a3e <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004a30:	4b34      	ldr	r3, [pc, #208]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004a36:	4b34      	ldr	r3, [pc, #208]	; (8004b08 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	4b31      	ldr	r3, [pc, #196]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a3c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8004a3e:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d010      	beq.n	8004a68 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004a46:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	4b2f      	ldr	r3, [pc, #188]	; (8004b0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a50:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 8004a52:	4b2e      	ldr	r3, [pc, #184]	; (8004b0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d106      	bne.n	8004a68 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8004a5a:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8004a60:	4b2c      	ldr	r3, [pc, #176]	; (8004b14 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004a62:	881a      	ldrh	r2, [r3, #0]
 8004a64:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a66:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d010      	beq.n	8004a92 <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 8004a70:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a7a:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0) {
 8004a7c:	4b26      	ldr	r3, [pc, #152]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a7e:	881b      	ldrh	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 8004a84:	4b25      	ldr	r3, [pc, #148]	; (8004b1c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 8004a8a:	4b25      	ldr	r3, [pc, #148]	; (8004b20 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004a8c:	881a      	ldrh	r2, [r3, #0]
 8004a8e:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a90:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer6_counter > 0){
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d010      	beq.n	8004abc <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer6_counter--;
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004aa4:	801a      	strh	r2, [r3, #0]
			if(timer6_counter == 0) {
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer6 = 1;
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	801a      	strh	r2, [r3, #0]
				timer6_counter = timer6_MUL;
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004aba:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer7_counter > 0){
 8004abc:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <HAL_TIM_PeriodElapsedCallback+0x10e>
			timer7_counter--;
 8004ac4:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ace:	801a      	strh	r2, [r3, #0]
			if(timer7_counter == 0) {
 8004ad0:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_TIM_PeriodElapsedCallback+0x10e>
				flag_timer7 = 1;
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	801a      	strh	r2, [r3, #0]
				timer7_counter = timer7_MUL;
 8004ade:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004ae0:	881a      	ldrh	r2, [r3, #0]
 8004ae2:	4b13      	ldr	r3, [pc, #76]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ae4:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004ae6:	f7fe fa87 	bl	8002ff8 <led7_Scan>
		//touch_Scan();
	}
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	2000099a 	.word	0x2000099a
 8004af8:	20000998 	.word	0x20000998
 8004afc:	2000099c 	.word	0x2000099c
 8004b00:	200009a0 	.word	0x200009a0
 8004b04:	2000099e 	.word	0x2000099e
 8004b08:	200009a2 	.word	0x200009a2
 8004b0c:	200009a6 	.word	0x200009a6
 8004b10:	200009a4 	.word	0x200009a4
 8004b14:	200009a8 	.word	0x200009a8
 8004b18:	200009ac 	.word	0x200009ac
 8004b1c:	200009aa 	.word	0x200009aa
 8004b20:	200009ae 	.word	0x200009ae
 8004b24:	200009b2 	.word	0x200009b2
 8004b28:	200009b0 	.word	0x200009b0
 8004b2c:	200009b4 	.word	0x200009b4
 8004b30:	200009b8 	.word	0x200009b8
 8004b34:	200009b6 	.word	0x200009b6
 8004b38:	200009ba 	.word	0x200009ba

08004b3c <delay_us>:

void delay_us (uint16_t us)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <delay_us+0x30>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004b4e:	bf00      	nop
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <delay_us+0x30>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d3f9      	bcc.n	8004b50 <delay_us+0x14>
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000c20 	.word	0x20000c20

08004b70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <MX_SPI1_Init+0x68>)
 8004b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b7a:	4b16      	ldr	r3, [pc, #88]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004b7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b82:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ba2:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004bbc:	220a      	movs	r2, #10
 8004bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004bc0:	4804      	ldr	r0, [pc, #16]	; (8004bd4 <MX_SPI1_Init+0x64>)
 8004bc2:	f004 fc1b 	bl	80093fc <HAL_SPI_Init>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004bcc:	f7fe fd42 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004bd0:	bf00      	nop
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000b80 	.word	0x20000b80
 8004bd8:	40013000 	.word	0x40013000

08004bdc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be4:	f107 0314 	add.w	r3, r7, #20
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	60da      	str	r2, [r3, #12]
 8004bf2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <HAL_SPI_MspInit+0x84>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d12b      	bne.n	8004c56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	4b18      	ldr	r3, [pc, #96]	; (8004c64 <HAL_SPI_MspInit+0x88>)
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <HAL_SPI_MspInit+0x88>)
 8004c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c0e:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <HAL_SPI_MspInit+0x88>)
 8004c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_SPI_MspInit+0x88>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <HAL_SPI_MspInit+0x88>)
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_SPI_MspInit+0x88>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004c36:	2338      	movs	r3, #56	; 0x38
 8004c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c42:	2303      	movs	r3, #3
 8004c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c46:	2305      	movs	r3, #5
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4a:	f107 0314 	add.w	r3, r7, #20
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4805      	ldr	r0, [pc, #20]	; (8004c68 <HAL_SPI_MspInit+0x8c>)
 8004c52:	f002 fdb7 	bl	80077c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004c56:	bf00      	nop
 8004c58:	3728      	adds	r7, #40	; 0x28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40013000 	.word	0x40013000
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40020400 	.word	0x40020400

08004c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c72:	2300      	movs	r3, #0
 8004c74:	607b      	str	r3, [r7, #4]
 8004c76:	4b10      	ldr	r3, [pc, #64]	; (8004cb8 <HAL_MspInit+0x4c>)
 8004c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7a:	4a0f      	ldr	r2, [pc, #60]	; (8004cb8 <HAL_MspInit+0x4c>)
 8004c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c80:	6453      	str	r3, [r2, #68]	; 0x44
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <HAL_MspInit+0x4c>)
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8a:	607b      	str	r3, [r7, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <HAL_MspInit+0x4c>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <HAL_MspInit+0x4c>)
 8004c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9e:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <HAL_MspInit+0x4c>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800

08004cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cc0:	e7fe      	b.n	8004cc0 <NMI_Handler+0x4>

08004cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cc6:	e7fe      	b.n	8004cc6 <HardFault_Handler+0x4>

08004cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ccc:	e7fe      	b.n	8004ccc <MemManage_Handler+0x4>

08004cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cd2:	e7fe      	b.n	8004cd2 <BusFault_Handler+0x4>

08004cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004cd8:	e7fe      	b.n	8004cd8 <UsageFault_Handler+0x4>

08004cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cfa:	bf00      	nop
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d08:	f001 fbf2 	bl	80064f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d0c:	bf00      	nop
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d14:	4802      	ldr	r0, [pc, #8]	; (8004d20 <TIM2_IRQHandler+0x10>)
 8004d16:	f005 fba7 	bl	800a468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000c68 	.word	0x20000c68

08004d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d28:	4802      	ldr	r0, [pc, #8]	; (8004d34 <USART1_IRQHandler+0x10>)
 8004d2a:	f006 fb07 	bl	800b33c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000e14 	.word	0x20000e14

08004d38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d3c:	4802      	ldr	r0, [pc, #8]	; (8004d48 <USART2_IRQHandler+0x10>)
 8004d3e:	f006 fafd 	bl	800b33c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d42:	bf00      	nop
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000e58 	.word	0x20000e58

08004d4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d50:	4802      	ldr	r0, [pc, #8]	; (8004d5c <DMA2_Stream0_IRQHandler+0x10>)
 8004d52:	f002 facd 	bl	80072f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000a14 	.word	0x20000a14

08004d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
	return 1;
 8004d64:	2301      	movs	r3, #1
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <_kill>:

int _kill(int pid, int sig)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d7a:	f007 fa67 	bl	800c24c <__errno>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2216      	movs	r2, #22
 8004d82:	601a      	str	r2, [r3, #0]
	return -1;
 8004d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <_exit>:

void _exit (int status)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004d98:	f04f 31ff 	mov.w	r1, #4294967295
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff ffe7 	bl	8004d70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004da2:	e7fe      	b.n	8004da2 <_exit+0x12>

08004da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e00a      	b.n	8004dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004db6:	f3af 8000 	nop.w
 8004dba:	4601      	mov	r1, r0
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	60ba      	str	r2, [r7, #8]
 8004dc2:	b2ca      	uxtb	r2, r1
 8004dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	dbf0      	blt.n	8004db6 <_read+0x12>
	}

return len;
 8004dd4:	687b      	ldr	r3, [r7, #4]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3718      	adds	r7, #24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b086      	sub	sp, #24
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	e009      	b.n	8004e04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	60ba      	str	r2, [r7, #8]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	3301      	adds	r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	dbf1      	blt.n	8004df0 <_write+0x12>
	}
	return len;
 8004e0c:	687b      	ldr	r3, [r7, #4]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <_close>:

int _close(int file)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <_isatty>:

int _isatty(int file)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
	return 1;
 8004e56:	2301      	movs	r3, #1
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e88:	4a14      	ldr	r2, [pc, #80]	; (8004edc <_sbrk+0x5c>)
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <_sbrk+0x60>)
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e94:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <_sbrk+0x64>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <_sbrk+0x64>)
 8004e9e:	4a12      	ldr	r2, [pc, #72]	; (8004ee8 <_sbrk+0x68>)
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <_sbrk+0x64>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d207      	bcs.n	8004ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004eb0:	f007 f9cc 	bl	800c24c <__errno>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	220c      	movs	r2, #12
 8004eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebe:	e009      	b.n	8004ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <_sbrk+0x64>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <_sbrk+0x64>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	4a05      	ldr	r2, [pc, #20]	; (8004ee4 <_sbrk+0x64>)
 8004ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20020000 	.word	0x20020000
 8004ee0:	00000400 	.word	0x00000400
 8004ee4:	200009bc 	.word	0x200009bc
 8004ee8:	20000eb0 	.word	0x20000eb0

08004eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <SystemInit+0x20>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <SystemInit+0x20>)
 8004ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f24:	463b      	mov	r3, r7
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	; (8004fac <MX_TIM1_Init+0x9c>)
 8004f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8004f32:	4b1d      	ldr	r3, [pc, #116]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f34:	2253      	movs	r2, #83	; 0x53
 8004f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f46:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f4c:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f58:	4813      	ldr	r0, [pc, #76]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f5a:	f005 f83b 	bl	8009fd4 <HAL_TIM_Base_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004f64:	f7fe fb76 	bl	8003654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f6e:	f107 0308 	add.w	r3, r7, #8
 8004f72:	4619      	mov	r1, r3
 8004f74:	480c      	ldr	r0, [pc, #48]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f76:	f005 fc41 	bl	800a7fc <HAL_TIM_ConfigClockSource>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004f80:	f7fe fb68 	bl	8003654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f84:	2300      	movs	r3, #0
 8004f86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f8c:	463b      	mov	r3, r7
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4805      	ldr	r0, [pc, #20]	; (8004fa8 <MX_TIM1_Init+0x98>)
 8004f92:	f006 f833 	bl	800affc <HAL_TIMEx_MasterConfigSynchronization>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d001      	beq.n	8004fa0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004f9c:	f7fe fb5a 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004fa0:	bf00      	nop
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000c20 	.word	0x20000c20
 8004fac:	40010000 	.word	0x40010000

08004fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	605a      	str	r2, [r3, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
 8004fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <MX_TIM2_Init+0x94>)
 8004fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <MX_TIM2_Init+0x94>)
 8004fd6:	f240 3247 	movw	r2, #839	; 0x347
 8004fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <MX_TIM2_Init+0x94>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004fe2:	4b18      	ldr	r3, [pc, #96]	; (8005044 <MX_TIM2_Init+0x94>)
 8004fe4:	2263      	movs	r2, #99	; 0x63
 8004fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe8:	4b16      	ldr	r3, [pc, #88]	; (8005044 <MX_TIM2_Init+0x94>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <MX_TIM2_Init+0x94>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ff4:	4813      	ldr	r0, [pc, #76]	; (8005044 <MX_TIM2_Init+0x94>)
 8004ff6:	f004 ffed 	bl	8009fd4 <HAL_TIM_Base_Init>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005000:	f7fe fb28 	bl	8003654 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800500a:	f107 0308 	add.w	r3, r7, #8
 800500e:	4619      	mov	r1, r3
 8005010:	480c      	ldr	r0, [pc, #48]	; (8005044 <MX_TIM2_Init+0x94>)
 8005012:	f005 fbf3 	bl	800a7fc <HAL_TIM_ConfigClockSource>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800501c:	f7fe fb1a 	bl	8003654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005020:	2300      	movs	r3, #0
 8005022:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005024:	2300      	movs	r3, #0
 8005026:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005028:	463b      	mov	r3, r7
 800502a:	4619      	mov	r1, r3
 800502c:	4805      	ldr	r0, [pc, #20]	; (8005044 <MX_TIM2_Init+0x94>)
 800502e:	f005 ffe5 	bl	800affc <HAL_TIMEx_MasterConfigSynchronization>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005038:	f7fe fb0c 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800503c:	bf00      	nop
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000c68 	.word	0x20000c68

08005048 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800504e:	1d3b      	adds	r3, r7, #4
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	611a      	str	r2, [r3, #16]
 800505c:	615a      	str	r2, [r3, #20]
 800505e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005060:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <MX_TIM13_Init+0x94>)
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <MX_TIM13_Init+0x98>)
 8005064:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8005066:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <MX_TIM13_Init+0x94>)
 8005068:	f240 3247 	movw	r2, #839	; 0x347
 800506c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <MX_TIM13_Init+0x94>)
 8005070:	2200      	movs	r2, #0
 8005072:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <MX_TIM13_Init+0x94>)
 8005076:	2263      	movs	r2, #99	; 0x63
 8005078:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <MX_TIM13_Init+0x94>)
 800507c:	2200      	movs	r2, #0
 800507e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005080:	4b16      	ldr	r3, [pc, #88]	; (80050dc <MX_TIM13_Init+0x94>)
 8005082:	2200      	movs	r2, #0
 8005084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005086:	4815      	ldr	r0, [pc, #84]	; (80050dc <MX_TIM13_Init+0x94>)
 8005088:	f004 ffa4 	bl	8009fd4 <HAL_TIM_Base_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8005092:	f7fe fadf 	bl	8003654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8005096:	4811      	ldr	r0, [pc, #68]	; (80050dc <MX_TIM13_Init+0x94>)
 8005098:	f005 f8c4 	bl	800a224 <HAL_TIM_PWM_Init>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80050a2:	f7fe fad7 	bl	8003654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050a6:	2360      	movs	r3, #96	; 0x60
 80050a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	2200      	movs	r2, #0
 80050ba:	4619      	mov	r1, r3
 80050bc:	4807      	ldr	r0, [pc, #28]	; (80050dc <MX_TIM13_Init+0x94>)
 80050be:	f005 fadb 	bl	800a678 <HAL_TIM_PWM_ConfigChannel>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80050c8:	f7fe fac4 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80050cc:	4803      	ldr	r0, [pc, #12]	; (80050dc <MX_TIM13_Init+0x94>)
 80050ce:	f000 f85b 	bl	8005188 <HAL_TIM_MspPostInit>

}
 80050d2:	bf00      	nop
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000bd8 	.word	0x20000bd8
 80050e0:	40001c00 	.word	0x40001c00

080050e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a22      	ldr	r2, [pc, #136]	; (800517c <HAL_TIM_Base_MspInit+0x98>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10e      	bne.n	8005114 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	4b21      	ldr	r3, [pc, #132]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	4a20      	ldr	r2, [pc, #128]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6453      	str	r3, [r2, #68]	; 0x44
 8005106:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 8005108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8005112:	e02e      	b.n	8005172 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511c:	d116      	bne.n	800514c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	4a16      	ldr	r2, [pc, #88]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 8005128:	f043 0301 	orr.w	r3, r3, #1
 800512c:	6413      	str	r3, [r2, #64]	; 0x40
 800512e:	4b14      	ldr	r3, [pc, #80]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800513a:	2200      	movs	r2, #0
 800513c:	2100      	movs	r1, #0
 800513e:	201c      	movs	r0, #28
 8005140:	f001 ff07 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005144:	201c      	movs	r0, #28
 8005146:	f001 ff20 	bl	8006f8a <HAL_NVIC_EnableIRQ>
}
 800514a:	e012      	b.n	8005172 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <HAL_TIM_Base_MspInit+0xa0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d10d      	bne.n	8005172 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 8005160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005164:	6413      	str	r3, [r2, #64]	; 0x40
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_TIM_Base_MspInit+0x9c>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	bf00      	nop
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40023800 	.word	0x40023800
 8005184:	40001c00 	.word	0x40001c00

08005188 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <HAL_TIM_MspPostInit+0x68>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d11e      	bne.n	80051e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <HAL_TIM_MspPostInit+0x6c>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	4a10      	ldr	r2, [pc, #64]	; (80051f4 <HAL_TIM_MspPostInit+0x6c>)
 80051b4:	f043 0320 	orr.w	r3, r3, #32
 80051b8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ba:	4b0e      	ldr	r3, [pc, #56]	; (80051f4 <HAL_TIM_MspPostInit+0x6c>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80051d8:	2309      	movs	r3, #9
 80051da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051dc:	f107 030c 	add.w	r3, r7, #12
 80051e0:	4619      	mov	r1, r3
 80051e2:	4805      	ldr	r0, [pc, #20]	; (80051f8 <HAL_TIM_MspPostInit+0x70>)
 80051e4:	f002 faee 	bl	80077c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80051e8:	bf00      	nop
 80051ea:	3720      	adds	r7, #32
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40001c00 	.word	0x40001c00
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40021400 	.word	0x40021400

080051fc <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	4603      	mov	r3, r0
 8005204:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800520a:	2300      	movs	r3, #0
 800520c:	73fb      	strb	r3, [r7, #15]
 800520e:	e025      	b.n	800525c <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005214:	2b00      	cmp	r3, #0
 8005216:	da06      	bge.n	8005226 <TP_Write_Byte+0x2a>
 8005218:	2201      	movs	r2, #1
 800521a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800521e:	4813      	ldr	r0, [pc, #76]	; (800526c <TP_Write_Byte+0x70>)
 8005220:	f002 fc84 	bl	8007b2c <HAL_GPIO_WritePin>
 8005224:	e005      	b.n	8005232 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800522c:	480f      	ldr	r0, [pc, #60]	; (800526c <TP_Write_Byte+0x70>)
 800522e:	f002 fc7d 	bl	8007b2c <HAL_GPIO_WritePin>
		num<<=1;
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005238:	2200      	movs	r2, #0
 800523a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800523e:	480c      	ldr	r0, [pc, #48]	; (8005270 <TP_Write_Byte+0x74>)
 8005240:	f002 fc74 	bl	8007b2c <HAL_GPIO_WritePin>
		delay_us(1);
 8005244:	2001      	movs	r0, #1
 8005246:	f7ff fc79 	bl	8004b3c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800524a:	2201      	movs	r2, #1
 800524c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005250:	4807      	ldr	r0, [pc, #28]	; (8005270 <TP_Write_Byte+0x74>)
 8005252:	f002 fc6b 	bl	8007b2c <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	3301      	adds	r3, #1
 800525a:	73fb      	strb	r3, [r7, #15]
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b07      	cmp	r3, #7
 8005260:	d9d6      	bls.n	8005210 <TP_Write_Byte+0x14>
	}
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40020800 	.word	0x40020800
 8005270:	40021800 	.word	0x40021800

08005274 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8005282:	2300      	movs	r3, #0
 8005284:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005286:	2200      	movs	r2, #0
 8005288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800528c:	482f      	ldr	r0, [pc, #188]	; (800534c <TP_Read_AD+0xd8>)
 800528e:	f002 fc4d 	bl	8007b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8005292:	2200      	movs	r2, #0
 8005294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005298:	482d      	ldr	r0, [pc, #180]	; (8005350 <TP_Read_AD+0xdc>)
 800529a:	f002 fc47 	bl	8007b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 800529e:	2200      	movs	r2, #0
 80052a0:	2180      	movs	r1, #128	; 0x80
 80052a2:	482a      	ldr	r0, [pc, #168]	; (800534c <TP_Read_AD+0xd8>)
 80052a4:	f002 fc42 	bl	8007b2c <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff ffa6 	bl	80051fc <TP_Write_Byte>
	delay_us(6);
 80052b0:	2006      	movs	r0, #6
 80052b2:	f7ff fc43 	bl	8004b3c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052bc:	4823      	ldr	r0, [pc, #140]	; (800534c <TP_Read_AD+0xd8>)
 80052be:	f002 fc35 	bl	8007b2c <HAL_GPIO_WritePin>
	delay_us(1);
 80052c2:	2001      	movs	r0, #1
 80052c4:	f7ff fc3a 	bl	8004b3c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80052c8:	2201      	movs	r2, #1
 80052ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052ce:	481f      	ldr	r0, [pc, #124]	; (800534c <TP_Read_AD+0xd8>)
 80052d0:	f002 fc2c 	bl	8007b2c <HAL_GPIO_WritePin>
	delay_us(1);
 80052d4:	2001      	movs	r0, #1
 80052d6:	f7ff fc31 	bl	8004b3c <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80052da:	2200      	movs	r2, #0
 80052dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052e0:	481a      	ldr	r0, [pc, #104]	; (800534c <TP_Read_AD+0xd8>)
 80052e2:	f002 fc23 	bl	8007b2c <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
 80052ea:	e01f      	b.n	800532c <TP_Read_AD+0xb8>
	{
		Num<<=1;
 80052ec:	89bb      	ldrh	r3, [r7, #12]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80052f2:	2200      	movs	r2, #0
 80052f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052f8:	4814      	ldr	r0, [pc, #80]	; (800534c <TP_Read_AD+0xd8>)
 80052fa:	f002 fc17 	bl	8007b2c <HAL_GPIO_WritePin>
		delay_us(1);
 80052fe:	2001      	movs	r0, #1
 8005300:	f7ff fc1c 	bl	8004b3c <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005304:	2201      	movs	r2, #1
 8005306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800530a:	4810      	ldr	r0, [pc, #64]	; (800534c <TP_Read_AD+0xd8>)
 800530c:	f002 fc0e 	bl	8007b2c <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005310:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005314:	480e      	ldr	r0, [pc, #56]	; (8005350 <TP_Read_AD+0xdc>)
 8005316:	f002 fbf1 	bl	8007afc <HAL_GPIO_ReadPin>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <TP_Read_AD+0xb2>
 8005320:	89bb      	ldrh	r3, [r7, #12]
 8005322:	3301      	adds	r3, #1
 8005324:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	3301      	adds	r3, #1
 800532a:	73fb      	strb	r3, [r7, #15]
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b0f      	cmp	r3, #15
 8005330:	d9dc      	bls.n	80052ec <TP_Read_AD+0x78>
	}
	Num>>=4;
 8005332:	89bb      	ldrh	r3, [r7, #12]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8005338:	2201      	movs	r2, #1
 800533a:	2180      	movs	r1, #128	; 0x80
 800533c:	4803      	ldr	r0, [pc, #12]	; (800534c <TP_Read_AD+0xd8>)
 800533e:	f002 fbf5 	bl	8007b2c <HAL_GPIO_WritePin>
	return(Num);
 8005342:	89bb      	ldrh	r3, [r7, #12]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40021800 	.word	0x40021800
 8005350:	40020800 	.word	0x40020800

08005354 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8005354:	b590      	push	{r4, r7, lr}
 8005356:	b089      	sub	sp, #36	; 0x24
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 800535e:	2300      	movs	r3, #0
 8005360:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8005362:	2300      	movs	r3, #0
 8005364:	83fb      	strh	r3, [r7, #30]
 8005366:	e00f      	b.n	8005388 <TP_Read_XOY+0x34>
 8005368:	8bfc      	ldrh	r4, [r7, #30]
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff ff81 	bl	8005274 <TP_Read_AD>
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	0063      	lsls	r3, r4, #1
 8005378:	f107 0120 	add.w	r1, r7, #32
 800537c:	440b      	add	r3, r1
 800537e:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005382:	8bfb      	ldrh	r3, [r7, #30]
 8005384:	3301      	adds	r3, #1
 8005386:	83fb      	strh	r3, [r7, #30]
 8005388:	8bfb      	ldrh	r3, [r7, #30]
 800538a:	2b04      	cmp	r3, #4
 800538c:	d9ec      	bls.n	8005368 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 800538e:	2300      	movs	r3, #0
 8005390:	83fb      	strh	r3, [r7, #30]
 8005392:	e03b      	b.n	800540c <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8005394:	8bfb      	ldrh	r3, [r7, #30]
 8005396:	3301      	adds	r3, #1
 8005398:	83bb      	strh	r3, [r7, #28]
 800539a:	e031      	b.n	8005400 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 800539c:	8bfb      	ldrh	r3, [r7, #30]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	f107 0220 	add.w	r2, r7, #32
 80053a4:	4413      	add	r3, r2
 80053a6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80053aa:	8bbb      	ldrh	r3, [r7, #28]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	f107 0120 	add.w	r1, r7, #32
 80053b2:	440b      	add	r3, r1
 80053b4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d91e      	bls.n	80053fa <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 80053bc:	8bfb      	ldrh	r3, [r7, #30]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	f107 0220 	add.w	r2, r7, #32
 80053c4:	4413      	add	r3, r2
 80053c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80053ca:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80053cc:	8bbb      	ldrh	r3, [r7, #28]
 80053ce:	8bfa      	ldrh	r2, [r7, #30]
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	f107 0120 	add.w	r1, r7, #32
 80053d6:	440b      	add	r3, r1
 80053d8:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80053dc:	0053      	lsls	r3, r2, #1
 80053de:	f107 0220 	add.w	r2, r7, #32
 80053e2:	4413      	add	r3, r2
 80053e4:	460a      	mov	r2, r1
 80053e6:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 80053ea:	8bbb      	ldrh	r3, [r7, #28]
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	f107 0220 	add.w	r2, r7, #32
 80053f2:	4413      	add	r3, r2
 80053f4:	8b3a      	ldrh	r2, [r7, #24]
 80053f6:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 80053fa:	8bbb      	ldrh	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	83bb      	strh	r3, [r7, #28]
 8005400:	8bbb      	ldrh	r3, [r7, #28]
 8005402:	2b04      	cmp	r3, #4
 8005404:	d9ca      	bls.n	800539c <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8005406:	8bfb      	ldrh	r3, [r7, #30]
 8005408:	3301      	adds	r3, #1
 800540a:	83fb      	strh	r3, [r7, #30]
 800540c:	8bfb      	ldrh	r3, [r7, #30]
 800540e:	2b03      	cmp	r3, #3
 8005410:	d9c0      	bls.n	8005394 <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8005412:	2300      	movs	r3, #0
 8005414:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8005416:	2301      	movs	r3, #1
 8005418:	83fb      	strh	r3, [r7, #30]
 800541a:	e00c      	b.n	8005436 <TP_Read_XOY+0xe2>
 800541c:	8bfb      	ldrh	r3, [r7, #30]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	f107 0220 	add.w	r2, r7, #32
 8005424:	4413      	add	r3, r2
 8005426:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800542a:	8b7b      	ldrh	r3, [r7, #26]
 800542c:	4413      	add	r3, r2
 800542e:	837b      	strh	r3, [r7, #26]
 8005430:	8bfb      	ldrh	r3, [r7, #30]
 8005432:	3301      	adds	r3, #1
 8005434:	83fb      	strh	r3, [r7, #30]
 8005436:	8bfb      	ldrh	r3, [r7, #30]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d9ef      	bls.n	800541c <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 800543c:	8b7b      	ldrh	r3, [r7, #26]
 800543e:	4a05      	ldr	r2, [pc, #20]	; (8005454 <TP_Read_XOY+0x100>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	833b      	strh	r3, [r7, #24]
	return temp;
 8005448:	8b3b      	ldrh	r3, [r7, #24]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3724      	adds	r7, #36	; 0x24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}
 8005452:	bf00      	nop
 8005454:	aaaaaaab 	.word	0xaaaaaaab

08005458 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <TP_Read_XY+0x3c>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff ff74 	bl	8005354 <TP_Read_XOY>
 800546c:	4603      	mov	r3, r0
 800546e:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <TP_Read_XY+0x40>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff ff6d 	bl	8005354 <TP_Read_XOY>
 800547a:	4603      	mov	r3, r0
 800547c:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	89fa      	ldrh	r2, [r7, #14]
 8005482:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	89ba      	ldrh	r2, [r7, #12]
 8005488:	801a      	strh	r2, [r3, #0]
	return 1;
 800548a:	2301      	movs	r3, #1
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000070 	.word	0x20000070
 8005498:	20000071 	.word	0x20000071

0800549c <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 80054a6:	f107 0212 	add.w	r2, r7, #18
 80054aa:	f107 0314 	add.w	r3, r7, #20
 80054ae:	4611      	mov	r1, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff ffd1 	bl	8005458 <TP_Read_XY>
 80054b6:	4603      	mov	r3, r0
 80054b8:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <TP_Read_XY2+0x28>
 80054c0:	2300      	movs	r3, #0
 80054c2:	e049      	b.n	8005558 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 80054c4:	f107 020e 	add.w	r2, r7, #14
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff ffc2 	bl	8005458 <TP_Read_XY>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <TP_Read_XY2+0x46>
 80054de:	2300      	movs	r3, #0
 80054e0:	e03a      	b.n	8005558 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 80054e2:	8a3a      	ldrh	r2, [r7, #16]
 80054e4:	8abb      	ldrh	r3, [r7, #20]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d804      	bhi.n	80054f4 <TP_Read_XY2+0x58>
 80054ea:	8a3b      	ldrh	r3, [r7, #16]
 80054ec:	3363      	adds	r3, #99	; 0x63
 80054ee:	8aba      	ldrh	r2, [r7, #20]
 80054f0:	4293      	cmp	r3, r2
 80054f2:	da08      	bge.n	8005506 <TP_Read_XY2+0x6a>
 80054f4:	8aba      	ldrh	r2, [r7, #20]
 80054f6:	8a3b      	ldrh	r3, [r7, #16]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d82c      	bhi.n	8005556 <TP_Read_XY2+0xba>
 80054fc:	8abb      	ldrh	r3, [r7, #20]
 80054fe:	3363      	adds	r3, #99	; 0x63
 8005500:	8a3a      	ldrh	r2, [r7, #16]
 8005502:	4293      	cmp	r3, r2
 8005504:	db27      	blt.n	8005556 <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8005506:	89fa      	ldrh	r2, [r7, #14]
 8005508:	8a7b      	ldrh	r3, [r7, #18]
 800550a:	429a      	cmp	r2, r3
 800550c:	d804      	bhi.n	8005518 <TP_Read_XY2+0x7c>
 800550e:	89fb      	ldrh	r3, [r7, #14]
 8005510:	3363      	adds	r3, #99	; 0x63
 8005512:	8a7a      	ldrh	r2, [r7, #18]
 8005514:	4293      	cmp	r3, r2
 8005516:	da08      	bge.n	800552a <TP_Read_XY2+0x8e>
 8005518:	8a7a      	ldrh	r2, [r7, #18]
 800551a:	89fb      	ldrh	r3, [r7, #14]
 800551c:	429a      	cmp	r2, r3
 800551e:	d81a      	bhi.n	8005556 <TP_Read_XY2+0xba>
 8005520:	8a7b      	ldrh	r3, [r7, #18]
 8005522:	3363      	adds	r3, #99	; 0x63
 8005524:	89fa      	ldrh	r2, [r7, #14]
 8005526:	4293      	cmp	r3, r2
 8005528:	db15      	blt.n	8005556 <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 800552a:	8abb      	ldrh	r3, [r7, #20]
 800552c:	461a      	mov	r2, r3
 800552e:	8a3b      	ldrh	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	0fda      	lsrs	r2, r3, #31
 8005534:	4413      	add	r3, r2
 8005536:	105b      	asrs	r3, r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 800553e:	8a7b      	ldrh	r3, [r7, #18]
 8005540:	461a      	mov	r2, r3
 8005542:	89fb      	ldrh	r3, [r7, #14]
 8005544:	4413      	add	r3, r2
 8005546:	0fda      	lsrs	r2, r3, #31
 8005548:	4413      	add	r3, r2
 800554a:	105b      	asrs	r3, r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	801a      	strh	r2, [r3, #0]
		return 1;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <TP_Read_XY2+0xbc>
	}else return 0;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b085      	sub	sp, #20
 8005564:	af02      	add	r7, sp, #8
 8005566:	4603      	mov	r3, r0
 8005568:	80fb      	strh	r3, [r7, #6]
 800556a:	460b      	mov	r3, r1
 800556c:	80bb      	strh	r3, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	3b0c      	subs	r3, #12
 8005576:	b298      	uxth	r0, r3
 8005578:	88fb      	ldrh	r3, [r7, #6]
 800557a:	330d      	adds	r3, #13
 800557c:	b29a      	uxth	r2, r3
 800557e:	88bc      	ldrh	r4, [r7, #4]
 8005580:	88b9      	ldrh	r1, [r7, #4]
 8005582:	887b      	ldrh	r3, [r7, #2]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	4623      	mov	r3, r4
 8005588:	f7fc ff95 	bl	80024b6 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 800558c:	88bb      	ldrh	r3, [r7, #4]
 800558e:	3b0c      	subs	r3, #12
 8005590:	b299      	uxth	r1, r3
 8005592:	88bb      	ldrh	r3, [r7, #4]
 8005594:	330d      	adds	r3, #13
 8005596:	b29c      	uxth	r4, r3
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	88f8      	ldrh	r0, [r7, #6]
 800559c:	887b      	ldrh	r3, [r7, #2]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	4623      	mov	r3, r4
 80055a2:	f7fc ff88 	bl	80024b6 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	3301      	adds	r3, #1
 80055aa:	b298      	uxth	r0, r3
 80055ac:	88bb      	ldrh	r3, [r7, #4]
 80055ae:	3301      	adds	r3, #1
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	4619      	mov	r1, r3
 80055b6:	f7fc ff67 	bl	8002488 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	3b01      	subs	r3, #1
 80055be:	b298      	uxth	r0, r3
 80055c0:	88bb      	ldrh	r3, [r7, #4]
 80055c2:	3301      	adds	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	4619      	mov	r1, r3
 80055ca:	f7fc ff5d 	bl	8002488 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	3301      	adds	r3, #1
 80055d2:	b298      	uxth	r0, r3
 80055d4:	88bb      	ldrh	r3, [r7, #4]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29b      	uxth	r3, r3
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	4619      	mov	r1, r3
 80055de:	f7fc ff53 	bl	8002488 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b298      	uxth	r0, r3
 80055e8:	88bb      	ldrh	r3, [r7, #4]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	887a      	ldrh	r2, [r7, #2]
 80055f0:	4619      	mov	r1, r3
 80055f2:	f7fc ff49 	bl	8002488 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 80055f6:	88f8      	ldrh	r0, [r7, #6]
 80055f8:	88b9      	ldrh	r1, [r7, #4]
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	2300      	movs	r3, #0
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2306      	movs	r3, #6
 8005602:	f7fd fbde 	bl	8002dc2 <lcd_DrawCircle>
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	bd90      	pop	{r4, r7, pc}
	...

08005610 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 800561a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800561e:	4843      	ldr	r0, [pc, #268]	; (800572c <TP_Scan+0x11c>)
 8005620:	f002 fa6c 	bl	8007afc <HAL_GPIO_ReadPin>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d157      	bne.n	80056da <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <TP_Scan+0x2a>
 8005630:	493f      	ldr	r1, [pc, #252]	; (8005730 <TP_Scan+0x120>)
 8005632:	4840      	ldr	r0, [pc, #256]	; (8005734 <TP_Scan+0x124>)
 8005634:	f7ff ff32 	bl	800549c <TP_Read_XY2>
 8005638:	e03c      	b.n	80056b4 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 800563a:	493d      	ldr	r1, [pc, #244]	; (8005730 <TP_Scan+0x120>)
 800563c:	483d      	ldr	r0, [pc, #244]	; (8005734 <TP_Scan+0x124>)
 800563e:	f7ff ff2d 	bl	800549c <TP_Read_XY2>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d035      	beq.n	80056b4 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8005648:	4b3b      	ldr	r3, [pc, #236]	; (8005738 <TP_Scan+0x128>)
 800564a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <TP_Scan+0x128>)
 8005650:	899b      	ldrh	r3, [r3, #12]
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800565a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800565e:	4b36      	ldr	r3, [pc, #216]	; (8005738 <TP_Scan+0x128>)
 8005660:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8005664:	ee07 3a90 	vmov	s15, r3
 8005668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800566c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005674:	ee17 3a90 	vmov	r3, s15
 8005678:	b29a      	uxth	r2, r3
 800567a:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <TP_Scan+0x128>)
 800567c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 800567e:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <TP_Scan+0x128>)
 8005680:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8005684:	4b2c      	ldr	r3, [pc, #176]	; (8005738 <TP_Scan+0x128>)
 8005686:	8adb      	ldrh	r3, [r3, #22]
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005690:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005694:	4b28      	ldr	r3, [pc, #160]	; (8005738 <TP_Scan+0x128>)
 8005696:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056aa:	ee17 3a90 	vmov	r3, s15
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	4b21      	ldr	r3, [pc, #132]	; (8005738 <TP_Scan+0x128>)
 80056b2:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 80056b4:	4b20      	ldr	r3, [pc, #128]	; (8005738 <TP_Scan+0x128>)
 80056b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ba:	b25b      	sxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db2a      	blt.n	8005716 <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 80056c0:	4b1d      	ldr	r3, [pc, #116]	; (8005738 <TP_Scan+0x128>)
 80056c2:	22c0      	movs	r2, #192	; 0xc0
 80056c4:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80056c8:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <TP_Scan+0x128>)
 80056ca:	899a      	ldrh	r2, [r3, #12]
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <TP_Scan+0x128>)
 80056ce:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80056d0:	4b19      	ldr	r3, [pc, #100]	; (8005738 <TP_Scan+0x128>)
 80056d2:	8ada      	ldrh	r2, [r3, #22]
 80056d4:	4b18      	ldr	r3, [pc, #96]	; (8005738 <TP_Scan+0x128>)
 80056d6:	83da      	strh	r2, [r3, #30]
 80056d8:	e01d      	b.n	8005716 <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80056da:	4b17      	ldr	r3, [pc, #92]	; (8005738 <TP_Scan+0x128>)
 80056dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e0:	b25b      	sxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	da09      	bge.n	80056fa <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 80056e6:	4b14      	ldr	r3, [pc, #80]	; (8005738 <TP_Scan+0x128>)
 80056e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <TP_Scan+0x128>)
 80056f4:	f883 2020 	strb.w	r2, [r3, #32]
 80056f8:	e00d      	b.n	8005716 <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 80056fa:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <TP_Scan+0x128>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005700:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <TP_Scan+0x128>)
 8005702:	2200      	movs	r2, #0
 8005704:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <TP_Scan+0x128>)
 8005708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800570c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <TP_Scan+0x128>)
 8005710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005714:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8005716:	4b08      	ldr	r3, [pc, #32]	; (8005738 <TP_Scan+0x128>)
 8005718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800571c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005720:	b2db      	uxtb	r3, r3
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	40020800 	.word	0x40020800
 8005730:	20000052 	.word	0x20000052
 8005734:	20000048 	.word	0x20000048
 8005738:	2000003c 	.word	0x2000003c

0800573c <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005740:	220e      	movs	r2, #14
 8005742:	4905      	ldr	r1, [pc, #20]	; (8005758 <TP_Save_Adjdata+0x1c>)
 8005744:	2000      	movs	r0, #0
 8005746:	f7fb fd8b 	bl	8001260 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 800574a:	2100      	movs	r1, #0
 800574c:	200e      	movs	r0, #14
 800574e:	f7fb fd27 	bl	80011a0 <at24c_WriteOneByte>
}
 8005752:	bf00      	nop
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000060 	.word	0x20000060

0800575c <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005762:	2300      	movs	r3, #0
 8005764:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8005766:	200e      	movs	r0, #14
 8005768:	f7fb fcfe 	bl	8001168 <at24c_ReadOneByte>
 800576c:	4603      	mov	r3, r0
 800576e:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005776:	220e      	movs	r2, #14
 8005778:	4905      	ldr	r1, [pc, #20]	; (8005790 <TP_Get_Adjdata+0x34>)
 800577a:	2000      	movs	r0, #0
 800577c:	f7fb fd51 	bl	8001222 <at24c_Read>
		return 1;
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000060 	.word	0x20000060
 8005794:	00000000 	.word	0x00000000

08005798 <touch_Adjust>:


void touch_Adjust(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	; 0x38
 800579c:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 800579e:	2300      	movs	r3, #0
 80057a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80057aa:	4b61      	ldr	r3, [pc, #388]	; (8005930 <touch_Adjust+0x198>)
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	4b60      	ldr	r3, [pc, #384]	; (8005930 <touch_Adjust+0x198>)
 80057b0:	885b      	ldrh	r3, [r3, #2]
 80057b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80057b6:	9100      	str	r1, [sp, #0]
 80057b8:	2100      	movs	r1, #0
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7fc fe2e 	bl	800241c <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 80057c0:	2300      	movs	r3, #0
 80057c2:	9302      	str	r3, [sp, #8]
 80057c4:	2310      	movs	r3, #16
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80057d2:	4a58      	ldr	r2, [pc, #352]	; (8005934 <touch_Adjust+0x19c>)
 80057d4:	2128      	movs	r1, #40	; 0x28
 80057d6:	2005      	movs	r0, #5
 80057d8:	f7fd fb60 	bl	8002e9c <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80057dc:	2300      	movs	r3, #0
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	2310      	movs	r3, #16
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80057ee:	4a52      	ldr	r2, [pc, #328]	; (8005938 <touch_Adjust+0x1a0>)
 80057f0:	2141      	movs	r1, #65	; 0x41
 80057f2:	2005      	movs	r0, #5
 80057f4:	f7fd fb52 	bl	8002e9c <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 80057f8:	2300      	movs	r3, #0
 80057fa:	9302      	str	r3, [sp, #8]
 80057fc:	2310      	movs	r3, #16
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800580a:	4a4c      	ldr	r2, [pc, #304]	; (800593c <touch_Adjust+0x1a4>)
 800580c:	215a      	movs	r1, #90	; 0x5a
 800580e:	2005      	movs	r0, #5
 8005810:	f7fd fb44 	bl	8002e9c <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8005814:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005818:	2114      	movs	r1, #20
 800581a:	2014      	movs	r0, #20
 800581c:	f7ff fea0 	bl	8005560 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005820:	4b47      	ldr	r3, [pc, #284]	; (8005940 <touch_Adjust+0x1a8>)
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005828:	4b45      	ldr	r3, [pc, #276]	; (8005940 <touch_Adjust+0x1a8>)
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8005830:	2032      	movs	r0, #50	; 0x32
 8005832:	f000 fe7d 	bl	8006530 <HAL_Delay>
		tp_dev.scan(1);
 8005836:	4b42      	ldr	r3, [pc, #264]	; (8005940 <touch_Adjust+0x1a8>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2001      	movs	r0, #1
 800583c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 800583e:	4b40      	ldr	r3, [pc, #256]	; (8005940 <touch_Adjust+0x1a8>)
 8005840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005844:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	f040 835e 	bne.w	8005f0a <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 800584e:	4b3c      	ldr	r3, [pc, #240]	; (8005940 <touch_Adjust+0x1a8>)
 8005850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005858:	b2da      	uxtb	r2, r3
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <touch_Adjust+0x1a8>)
 800585c:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8005860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005864:	4a36      	ldr	r2, [pc, #216]	; (8005940 <touch_Adjust+0x1a8>)
 8005866:	8992      	ldrh	r2, [r2, #12]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800586e:	440b      	add	r3, r1
 8005870:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8005874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005878:	4a31      	ldr	r2, [pc, #196]	; (8005940 <touch_Adjust+0x1a8>)
 800587a:	8ad2      	ldrh	r2, [r2, #22]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005882:	440b      	add	r3, r1
 8005884:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8005888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800588c:	3301      	adds	r3, #1
 800588e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 8005892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005896:	3b01      	subs	r3, #1
 8005898:	2b03      	cmp	r3, #3
 800589a:	d8c9      	bhi.n	8005830 <touch_Adjust+0x98>
 800589c:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <touch_Adjust+0x10c>)
 800589e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a2:	bf00      	nop
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058d7 	.word	0x080058d7
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005945 	.word	0x08005945
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80058b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b8:	2114      	movs	r1, #20
 80058ba:	2014      	movs	r0, #20
 80058bc:	f7ff fe50 	bl	8005560 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80058c0:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <touch_Adjust+0x198>)
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	3b14      	subs	r3, #20
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80058cc:	2114      	movs	r1, #20
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff fe46 	bl	8005560 <TP_Drow_Touch_Point>
					break;
 80058d4:	e31a      	b.n	8005f0c <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80058d6:	4b16      	ldr	r3, [pc, #88]	; (8005930 <touch_Adjust+0x198>)
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	3b14      	subs	r3, #20
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e2:	2114      	movs	r1, #20
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fe3b 	bl	8005560 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <touch_Adjust+0x198>)
 80058ec:	885b      	ldrh	r3, [r3, #2]
 80058ee:	3b14      	subs	r3, #20
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80058f6:	4619      	mov	r1, r3
 80058f8:	2014      	movs	r0, #20
 80058fa:	f7ff fe31 	bl	8005560 <TP_Drow_Touch_Point>
					break;
 80058fe:	e305      	b.n	8005f0c <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <touch_Adjust+0x198>)
 8005902:	885b      	ldrh	r3, [r3, #2]
 8005904:	3b14      	subs	r3, #20
 8005906:	b29b      	uxth	r3, r3
 8005908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590c:	4619      	mov	r1, r3
 800590e:	2014      	movs	r0, #20
 8005910:	f7ff fe26 	bl	8005560 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <touch_Adjust+0x198>)
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	3b14      	subs	r3, #20
 800591a:	b298      	uxth	r0, r3
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <touch_Adjust+0x198>)
 800591e:	885b      	ldrh	r3, [r3, #2]
 8005920:	3b14      	subs	r3, #20
 8005922:	b29b      	uxth	r3, r3
 8005924:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005928:	4619      	mov	r1, r3
 800592a:	f7ff fe19 	bl	8005560 <TP_Drow_Touch_Point>
					break;
 800592e:	e2ed      	b.n	8005f0c <touch_Adjust+0x774>
 8005930:	20000b38 	.word	0x20000b38
 8005934:	0800db40 	.word	0x0800db40
 8005938:	0800db5c 	.word	0x0800db5c
 800593c:	0800db74 	.word	0x0800db74
 8005940:	2000003c 	.word	0x2000003c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8005944:	883b      	ldrh	r3, [r7, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	88bb      	ldrh	r3, [r7, #4]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	bfb8      	it	lt
 8005950:	425b      	neglt	r3, r3
 8005952:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8005954:	887b      	ldrh	r3, [r7, #2]
 8005956:	461a      	mov	r2, r3
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	bfb8      	it	lt
 8005960:	425b      	neglt	r3, r3
 8005962:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	fb03 f303 	mul.w	r3, r3, r3
 800596a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	fb03 f303 	mul.w	r3, r3, r3
 8005972:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f7fa fdba 	bl	80004f4 <__aeabi_ui2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	ec43 2b10 	vmov	d0, r2, r3
 8005988:	f007 fe66 	bl	800d658 <sqrt>
 800598c:	ec53 2b10 	vmov	r2, r3, d0
 8005990:	4610      	mov	r0, r2
 8005992:	4619      	mov	r1, r3
 8005994:	f7fb f8d8 	bl	8000b48 <__aeabi_d2uiz>
 8005998:	4603      	mov	r3, r0
 800599a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800599c:	893b      	ldrh	r3, [r7, #8]
 800599e:	461a      	mov	r2, r3
 80059a0:	89bb      	ldrh	r3, [r7, #12]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bfb8      	it	lt
 80059a8:	425b      	neglt	r3, r3
 80059aa:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80059ac:	897b      	ldrh	r3, [r7, #10]
 80059ae:	461a      	mov	r2, r3
 80059b0:	89fb      	ldrh	r3, [r7, #14]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bfb8      	it	lt
 80059b8:	425b      	neglt	r3, r3
 80059ba:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	fb03 f303 	mul.w	r3, r3, r3
 80059c2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	fb03 f303 	mul.w	r3, r3, r3
 80059ca:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80059cc:	6a3a      	ldr	r2, [r7, #32]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fa fd8e 	bl	80004f4 <__aeabi_ui2d>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	ec43 2b10 	vmov	d0, r2, r3
 80059e0:	f007 fe3a 	bl	800d658 <sqrt>
 80059e4:	ec53 2b10 	vmov	r2, r3, d0
 80059e8:	4610      	mov	r0, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	f7fb f8ac 	bl	8000b48 <__aeabi_d2uiz>
 80059f0:	4603      	mov	r3, r0
 80059f2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80059f4:	8b7b      	ldrh	r3, [r7, #26]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059fe:	8b3b      	ldrh	r3, [r7, #24]
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a0c:	ee16 0a90 	vmov	r0, s13
 8005a10:	f7fa fd92 	bl	8000538 <__aeabi_f2d>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8005a1c:	a384      	add	r3, pc, #528	; (adr r3, 8005c30 <touch_Adjust+0x498>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a26:	f7fb f851 	bl	8000acc <__aeabi_dcmplt>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10f      	bne.n	8005a50 <touch_Adjust+0x2b8>
 8005a30:	a381      	add	r3, pc, #516	; (adr r3, 8005c38 <touch_Adjust+0x4a0>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a3a:	f7fb f865 	bl	8000b08 <__aeabi_dcmpgt>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <touch_Adjust+0x2b8>
 8005a44:	8b7b      	ldrh	r3, [r7, #26]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <touch_Adjust+0x2b8>
 8005a4a:	8b3b      	ldrh	r3, [r7, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d136      	bne.n	8005abe <touch_Adjust+0x326>
					{
						cnt=0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005a56:	4b7a      	ldr	r3, [pc, #488]	; (8005c40 <touch_Adjust+0x4a8>)
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	3b14      	subs	r3, #20
 8005a5c:	b298      	uxth	r0, r3
 8005a5e:	4b78      	ldr	r3, [pc, #480]	; (8005c40 <touch_Adjust+0x4a8>)
 8005a60:	885b      	ldrh	r3, [r3, #2]
 8005a62:	3b14      	subs	r3, #20
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f7ff fd78 	bl	8005560 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005a70:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005a74:	2114      	movs	r1, #20
 8005a76:	2014      	movs	r0, #20
 8005a78:	f7ff fd72 	bl	8005560 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	2310      	movs	r3, #16
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005a8e:	4a6d      	ldr	r2, [pc, #436]	; (8005c44 <touch_Adjust+0x4ac>)
 8005a90:	2128      	movs	r1, #40	; 0x28
 8005a92:	2005      	movs	r0, #5
 8005a94:	f7fd fa02 	bl	8002e9c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9302      	str	r3, [sp, #8]
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	9301      	str	r3, [sp, #4]
 8005aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005aaa:	4a67      	ldr	r2, [pc, #412]	; (8005c48 <touch_Adjust+0x4b0>)
 8005aac:	213c      	movs	r1, #60	; 0x3c
 8005aae:	2005      	movs	r0, #5
 8005ab0:	f7fd f9f4 	bl	8002e9c <lcd_ShowStr>
						HAL_Delay(1000);
 8005ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ab8:	f000 fd3a 	bl	8006530 <HAL_Delay>
 						continue;
 8005abc:	e226      	b.n	8005f0c <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8005abe:	883b      	ldrh	r3, [r7, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	893b      	ldrh	r3, [r7, #8]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bfb8      	it	lt
 8005aca:	425b      	neglt	r3, r3
 8005acc:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8005ace:	887b      	ldrh	r3, [r7, #2]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	bfb8      	it	lt
 8005ada:	425b      	neglt	r3, r3
 8005adc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	fb03 f303 	mul.w	r3, r3, r3
 8005ae4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	fb03 f303 	mul.w	r3, r3, r3
 8005aec:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005aee:	6a3a      	ldr	r2, [r7, #32]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fa fcfd 	bl	80004f4 <__aeabi_ui2d>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	ec43 2b10 	vmov	d0, r2, r3
 8005b02:	f007 fda9 	bl	800d658 <sqrt>
 8005b06:	ec53 2b10 	vmov	r2, r3, d0
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f7fb f81b 	bl	8000b48 <__aeabi_d2uiz>
 8005b12:	4603      	mov	r3, r0
 8005b14:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8005b16:	88bb      	ldrh	r3, [r7, #4]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	89bb      	ldrh	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfb8      	it	lt
 8005b22:	425b      	neglt	r3, r3
 8005b24:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	89fb      	ldrh	r3, [r7, #14]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	bfb8      	it	lt
 8005b32:	425b      	neglt	r3, r3
 8005b34:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	fb03 f303 	mul.w	r3, r3, r3
 8005b3c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	fb03 f303 	mul.w	r3, r3, r3
 8005b44:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7fa fcd1 	bl	80004f4 <__aeabi_ui2d>
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	ec43 2b10 	vmov	d0, r2, r3
 8005b5a:	f007 fd7d 	bl	800d658 <sqrt>
 8005b5e:	ec53 2b10 	vmov	r2, r3, d0
 8005b62:	4610      	mov	r0, r2
 8005b64:	4619      	mov	r1, r3
 8005b66:	f7fa ffef 	bl	8000b48 <__aeabi_d2uiz>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005b6e:	8b7b      	ldrh	r3, [r7, #26]
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b78:	8b3b      	ldrh	r3, [r7, #24]
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b86:	ee16 0a90 	vmov	r0, s13
 8005b8a:	f7fa fcd5 	bl	8000538 <__aeabi_f2d>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005b96:	a326      	add	r3, pc, #152	; (adr r3, 8005c30 <touch_Adjust+0x498>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ba0:	f7fa ff94 	bl	8000acc <__aeabi_dcmplt>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <touch_Adjust+0x426>
 8005baa:	a323      	add	r3, pc, #140	; (adr r3, 8005c38 <touch_Adjust+0x4a0>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb4:	f7fa ffa8 	bl	8000b08 <__aeabi_dcmpgt>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d046      	beq.n	8005c4c <touch_Adjust+0x4b4>
					{
						cnt=0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005bc4:	4b1e      	ldr	r3, [pc, #120]	; (8005c40 <touch_Adjust+0x4a8>)
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	3b14      	subs	r3, #20
 8005bca:	b298      	uxth	r0, r3
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <touch_Adjust+0x4a8>)
 8005bce:	885b      	ldrh	r3, [r3, #2]
 8005bd0:	3b14      	subs	r3, #20
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd8:	4619      	mov	r1, r3
 8005bda:	f7ff fcc1 	bl	8005560 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005bde:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005be2:	2114      	movs	r1, #20
 8005be4:	2014      	movs	r0, #20
 8005be6:	f7ff fcbb 	bl	8005560 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005bea:	2300      	movs	r3, #0
 8005bec:	9302      	str	r3, [sp, #8]
 8005bee:	2310      	movs	r3, #16
 8005bf0:	9301      	str	r3, [sp, #4]
 8005bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005bfc:	4a11      	ldr	r2, [pc, #68]	; (8005c44 <touch_Adjust+0x4ac>)
 8005bfe:	2128      	movs	r1, #40	; 0x28
 8005c00:	2005      	movs	r0, #5
 8005c02:	f7fd f94b 	bl	8002e9c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005c06:	2300      	movs	r3, #0
 8005c08:	9302      	str	r3, [sp, #8]
 8005c0a:	2310      	movs	r3, #16
 8005c0c:	9301      	str	r3, [sp, #4]
 8005c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <touch_Adjust+0x4b0>)
 8005c1a:	213c      	movs	r1, #60	; 0x3c
 8005c1c:	2005      	movs	r0, #5
 8005c1e:	f7fd f93d 	bl	8002e9c <lcd_ShowStr>
						HAL_Delay(1000);
 8005c22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c26:	f000 fc83 	bl	8006530 <HAL_Delay>
						continue;
 8005c2a:	e16f      	b.n	8005f0c <touch_Adjust+0x774>
 8005c2c:	f3af 8000 	nop.w
 8005c30:	66666666 	.word	0x66666666
 8005c34:	3fee6666 	.word	0x3fee6666
 8005c38:	cccccccd 	.word	0xcccccccd
 8005c3c:	3ff0cccc 	.word	0x3ff0cccc
 8005c40:	20000b38 	.word	0x20000b38
 8005c44:	0800db88 	.word	0x0800db88
 8005c48:	0800dba8 	.word	0x0800dba8
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8005c4c:	88bb      	ldrh	r3, [r7, #4]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bfb8      	it	lt
 8005c58:	425b      	neglt	r3, r3
 8005c5a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	897b      	ldrh	r3, [r7, #10]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bfb8      	it	lt
 8005c68:	425b      	neglt	r3, r3
 8005c6a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	fb03 f303 	mul.w	r3, r3, r3
 8005c72:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	fb03 f303 	mul.w	r3, r3, r3
 8005c7a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005c7c:	6a3a      	ldr	r2, [r7, #32]
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fa fc36 	bl	80004f4 <__aeabi_ui2d>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	ec43 2b10 	vmov	d0, r2, r3
 8005c90:	f007 fce2 	bl	800d658 <sqrt>
 8005c94:	ec53 2b10 	vmov	r2, r3, d0
 8005c98:	4610      	mov	r0, r2
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	f7fa ff54 	bl	8000b48 <__aeabi_d2uiz>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8005ca4:	883b      	ldrh	r3, [r7, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	89bb      	ldrh	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bfb8      	it	lt
 8005cb0:	425b      	neglt	r3, r3
 8005cb2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8005cb4:	887b      	ldrh	r3, [r7, #2]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bfb8      	it	lt
 8005cc0:	425b      	neglt	r3, r3
 8005cc2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	fb03 f303 	mul.w	r3, r3, r3
 8005cca:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	fb03 f303 	mul.w	r3, r3, r3
 8005cd2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005cd4:	6a3a      	ldr	r2, [r7, #32]
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fa fc0a 	bl	80004f4 <__aeabi_ui2d>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	ec43 2b10 	vmov	d0, r2, r3
 8005ce8:	f007 fcb6 	bl	800d658 <sqrt>
 8005cec:	ec53 2b10 	vmov	r2, r3, d0
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	f7fa ff28 	bl	8000b48 <__aeabi_d2uiz>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005cfc:	8b7b      	ldrh	r3, [r7, #26]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d06:	8b3b      	ldrh	r3, [r7, #24]
 8005d08:	ee07 3a90 	vmov	s15, r3
 8005d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d14:	ee16 0a90 	vmov	r0, s13
 8005d18:	f7fa fc0e 	bl	8000538 <__aeabi_f2d>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005d24:	a383      	add	r3, pc, #524	; (adr r3, 8005f34 <touch_Adjust+0x79c>)
 8005d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d2e:	f7fa fecd 	bl	8000acc <__aeabi_dcmplt>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <touch_Adjust+0x5b4>
 8005d38:	a380      	add	r3, pc, #512	; (adr r3, 8005f3c <touch_Adjust+0x7a4>)
 8005d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d42:	f7fa fee1 	bl	8000b08 <__aeabi_dcmpgt>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d036      	beq.n	8005dba <touch_Adjust+0x622>
					{
						cnt=0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005d52:	4b71      	ldr	r3, [pc, #452]	; (8005f18 <touch_Adjust+0x780>)
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	3b14      	subs	r3, #20
 8005d58:	b298      	uxth	r0, r3
 8005d5a:	4b6f      	ldr	r3, [pc, #444]	; (8005f18 <touch_Adjust+0x780>)
 8005d5c:	885b      	ldrh	r3, [r3, #2]
 8005d5e:	3b14      	subs	r3, #20
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d66:	4619      	mov	r1, r3
 8005d68:	f7ff fbfa 	bl	8005560 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005d6c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005d70:	2114      	movs	r1, #20
 8005d72:	2014      	movs	r0, #20
 8005d74:	f7ff fbf4 	bl	8005560 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9302      	str	r3, [sp, #8]
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005d8a:	4a64      	ldr	r2, [pc, #400]	; (8005f1c <touch_Adjust+0x784>)
 8005d8c:	2128      	movs	r1, #40	; 0x28
 8005d8e:	2005      	movs	r0, #5
 8005d90:	f7fd f884 	bl	8002e9c <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005d94:	2300      	movs	r3, #0
 8005d96:	9302      	str	r3, [sp, #8]
 8005d98:	2310      	movs	r3, #16
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005da6:	4a5e      	ldr	r2, [pc, #376]	; (8005f20 <touch_Adjust+0x788>)
 8005da8:	213c      	movs	r1, #60	; 0x3c
 8005daa:	2005      	movs	r0, #5
 8005dac:	f7fd f876 	bl	8002e9c <lcd_ShowStr>

						HAL_Delay(1000);
 8005db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db4:	f000 fbbc 	bl	8006530 <HAL_Delay>
 							continue;
 8005db8:	e0a8      	b.n	8005f0c <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8005dba:	4b57      	ldr	r3, [pc, #348]	; (8005f18 <touch_Adjust+0x780>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	3b28      	subs	r3, #40	; 0x28
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005dc8:	88bb      	ldrh	r3, [r7, #4]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	883b      	ldrh	r3, [r7, #0]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ddc:	4b51      	ldr	r3, [pc, #324]	; (8005f24 <touch_Adjust+0x78c>)
 8005dde:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8005de2:	4b4d      	ldr	r3, [pc, #308]	; (8005f18 <touch_Adjust+0x780>)
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dee:	4b4d      	ldr	r3, [pc, #308]	; (8005f24 <touch_Adjust+0x78c>)
 8005df0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005df4:	88bb      	ldrh	r3, [r7, #4]
 8005df6:	461a      	mov	r2, r3
 8005df8:	883b      	ldrh	r3, [r7, #0]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e18:	ee17 3a90 	vmov	r3, s15
 8005e1c:	b21a      	sxth	r2, r3
 8005e1e:	4b41      	ldr	r3, [pc, #260]	; (8005f24 <touch_Adjust+0x78c>)
 8005e20:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8005e22:	4b3d      	ldr	r3, [pc, #244]	; (8005f18 <touch_Adjust+0x780>)
 8005e24:	885b      	ldrh	r3, [r3, #2]
 8005e26:	3b28      	subs	r3, #40	; 0x28
 8005e28:	ee07 3a90 	vmov	s15, r3
 8005e2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e30:	897b      	ldrh	r3, [r7, #10]
 8005e32:	461a      	mov	r2, r3
 8005e34:	887b      	ldrh	r3, [r7, #2]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e44:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <touch_Adjust+0x78c>)
 8005e46:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8005e4a:	4b33      	ldr	r3, [pc, #204]	; (8005f18 <touch_Adjust+0x780>)
 8005e4c:	885b      	ldrh	r3, [r3, #2]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e56:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <touch_Adjust+0x78c>)
 8005e58:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005e5c:	897b      	ldrh	r3, [r7, #10]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	887b      	ldrh	r3, [r7, #2]
 8005e62:	4413      	add	r3, r2
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e80:	ee17 3a90 	vmov	r3, s15
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	4b27      	ldr	r3, [pc, #156]	; (8005f24 <touch_Adjust+0x78c>)
 8005e88:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005e8a:	4b23      	ldr	r3, [pc, #140]	; (8005f18 <touch_Adjust+0x780>)
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	3b14      	subs	r3, #20
 8005e90:	b298      	uxth	r0, r3
 8005e92:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <touch_Adjust+0x780>)
 8005e94:	885b      	ldrh	r3, [r3, #2]
 8005e96:	3b14      	subs	r3, #20
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	f7ff fb5e 	bl	8005560 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005eb6:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <touch_Adjust+0x790>)
 8005eb8:	2128      	movs	r1, #40	; 0x28
 8005eba:	2005      	movs	r0, #5
 8005ebc:	f7fc ffee 	bl	8002e9c <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9302      	str	r3, [sp, #8]
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ed2:	4a16      	ldr	r2, [pc, #88]	; (8005f2c <touch_Adjust+0x794>)
 8005ed4:	213c      	movs	r1, #60	; 0x3c
 8005ed6:	2005      	movs	r0, #5
 8005ed8:	f7fc ffe0 	bl	8002e9c <lcd_ShowStr>
					HAL_Delay(1000);
 8005edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ee0:	f000 fb26 	bl	8006530 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	9302      	str	r3, [sp, #8]
 8005ee8:	2310      	movs	r3, #16
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005ef6:	4a0e      	ldr	r2, [pc, #56]	; (8005f30 <touch_Adjust+0x798>)
 8005ef8:	2128      	movs	r1, #40	; 0x28
 8005efa:	2005      	movs	r0, #5
 8005efc:	f7fc ffce 	bl	8002e9c <lcd_ShowStr>
					TP_Save_Adjdata();
 8005f00:	f7ff fc1c 	bl	800573c <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8005f04:	f7ff fc2a 	bl	800575c <TP_Get_Adjdata>
					return;
 8005f08:	e001      	b.n	8005f0e <touch_Adjust+0x776>
			}
		}
 8005f0a:	bf00      	nop
		HAL_Delay(50);
 8005f0c:	e490      	b.n	8005830 <touch_Adjust+0x98>
 	}
}
 8005f0e:	3728      	adds	r7, #40	; 0x28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	f3af 8000 	nop.w
 8005f18:	20000b38 	.word	0x20000b38
 8005f1c:	0800db88 	.word	0x0800db88
 8005f20:	0800dba8 	.word	0x0800dba8
 8005f24:	2000003c 	.word	0x2000003c
 8005f28:	0800dbc8 	.word	0x0800dbc8
 8005f2c:	0800dbe8 	.word	0x0800dbe8
 8005f30:	0800dc08 	.word	0x0800dc08
 8005f34:	66666666 	.word	0x66666666
 8005f38:	3fee6666 	.word	0x3fee6666
 8005f3c:	cccccccd 	.word	0xcccccccd
 8005f40:	3ff0cccc 	.word	0x3ff0cccc

08005f44 <touch_init>:

void touch_init(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8005f48:	4904      	ldr	r1, [pc, #16]	; (8005f5c <touch_init+0x18>)
 8005f4a:	4805      	ldr	r0, [pc, #20]	; (8005f60 <touch_init+0x1c>)
 8005f4c:	f7ff fa84 	bl	8005458 <TP_Read_XY>
	at24c_init();
 8005f50:	f7fb f904 	bl	800115c <at24c_init>
	TP_Get_Adjdata();
 8005f54:	f7ff fc02 	bl	800575c <TP_Get_Adjdata>
}
 8005f58:	bf00      	nop
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20000052 	.word	0x20000052
 8005f60:	20000048 	.word	0x20000048

08005f64 <touch_Scan>:

void touch_Scan(){
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <touch_Scan+0x10>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	4798      	blx	r3
}
 8005f70:	bf00      	nop
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	2000003c 	.word	0x2000003c

08005f78 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8005f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f80:	4805      	ldr	r0, [pc, #20]	; (8005f98 <touch_IsTouched+0x20>)
 8005f82:	f001 fdbb 	bl	8007afc <HAL_GPIO_ReadPin>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	40020800 	.word	0x40020800

08005f9c <touch_GetX>:

uint16_t touch_GetX(){
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <touch_GetX+0x14>)
 8005fa2:	899b      	ldrh	r3, [r3, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	2000003c 	.word	0x2000003c

08005fb4 <touch_GetY>:

uint16_t touch_GetY(){
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005fb8:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <touch_GetY+0x14>)
 8005fba:	8adb      	ldrh	r3, [r3, #22]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	2000003c 	.word	0x2000003c

08005fcc <isButtonStart>:
 *      Author: Admin
 */

#include "touch_screen.h"

uint8_t isButtonStart(){
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005fd0:	f7ff ffd2 	bl	8005f78 <touch_IsTouched>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <isButtonStart+0x12>
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e018      	b.n	8006010 <isButtonStart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 200 && touch_GetY() < 300;
 8005fde:	f7ff ffdd 	bl	8005f9c <touch_GetX>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b32      	cmp	r3, #50	; 0x32
 8005fe6:	d911      	bls.n	800600c <isButtonStart+0x40>
 8005fe8:	f7ff ffd8 	bl	8005f9c <touch_GetX>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2bbd      	cmp	r3, #189	; 0xbd
 8005ff0:	d80c      	bhi.n	800600c <isButtonStart+0x40>
 8005ff2:	f7ff ffdf 	bl	8005fb4 <touch_GetY>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2bc8      	cmp	r3, #200	; 0xc8
 8005ffa:	d907      	bls.n	800600c <isButtonStart+0x40>
 8005ffc:	f7ff ffda 	bl	8005fb4 <touch_GetY>
 8006000:	4603      	mov	r3, r0
 8006002:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006006:	d201      	bcs.n	800600c <isButtonStart+0x40>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <isButtonStart+0x42>
 800600c:	2300      	movs	r3, #0
 800600e:	b2db      	uxtb	r3, r3
}
 8006010:	4618      	mov	r0, r3
 8006012:	bd80      	pop	{r7, pc}

08006014 <isButtonUp>:
uint8_t isButtonUp(){
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8006018:	f7ff ffae 	bl	8005f78 <touch_IsTouched>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <isButtonUp+0x12>
 8006022:	2300      	movs	r3, #0
 8006024:	e017      	b.n	8006056 <isButtonUp+0x42>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 210 && touch_GetY() < 250;
 8006026:	f7ff ffb9 	bl	8005f9c <touch_GetX>
 800602a:	4603      	mov	r3, r0
 800602c:	2b5a      	cmp	r3, #90	; 0x5a
 800602e:	d910      	bls.n	8006052 <isButtonUp+0x3e>
 8006030:	f7ff ffb4 	bl	8005f9c <touch_GetX>
 8006034:	4603      	mov	r3, r0
 8006036:	2b95      	cmp	r3, #149	; 0x95
 8006038:	d80b      	bhi.n	8006052 <isButtonUp+0x3e>
 800603a:	f7ff ffbb 	bl	8005fb4 <touch_GetY>
 800603e:	4603      	mov	r3, r0
 8006040:	2bd2      	cmp	r3, #210	; 0xd2
 8006042:	d906      	bls.n	8006052 <isButtonUp+0x3e>
 8006044:	f7ff ffb6 	bl	8005fb4 <touch_GetY>
 8006048:	4603      	mov	r3, r0
 800604a:	2bf9      	cmp	r3, #249	; 0xf9
 800604c:	d801      	bhi.n	8006052 <isButtonUp+0x3e>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <isButtonUp+0x40>
 8006052:	2300      	movs	r3, #0
 8006054:	b2db      	uxtb	r3, r3
}
 8006056:	4618      	mov	r0, r3
 8006058:	bd80      	pop	{r7, pc}

0800605a <isButtonDown>:
uint8_t isButtonDown(){
 800605a:	b580      	push	{r7, lr}
 800605c:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 800605e:	f7ff ff8b 	bl	8005f78 <touch_IsTouched>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <isButtonDown+0x12>
 8006068:	2300      	movs	r3, #0
 800606a:	e019      	b.n	80060a0 <isButtonDown+0x46>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 260 && touch_GetY() < 300;
 800606c:	f7ff ff96 	bl	8005f9c <touch_GetX>
 8006070:	4603      	mov	r3, r0
 8006072:	2b5a      	cmp	r3, #90	; 0x5a
 8006074:	d912      	bls.n	800609c <isButtonDown+0x42>
 8006076:	f7ff ff91 	bl	8005f9c <touch_GetX>
 800607a:	4603      	mov	r3, r0
 800607c:	2b95      	cmp	r3, #149	; 0x95
 800607e:	d80d      	bhi.n	800609c <isButtonDown+0x42>
 8006080:	f7ff ff98 	bl	8005fb4 <touch_GetY>
 8006084:	4603      	mov	r3, r0
 8006086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800608a:	d907      	bls.n	800609c <isButtonDown+0x42>
 800608c:	f7ff ff92 	bl	8005fb4 <touch_GetY>
 8006090:	4603      	mov	r3, r0
 8006092:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006096:	d201      	bcs.n	800609c <isButtonDown+0x42>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <isButtonDown+0x44>
 800609c:	2300      	movs	r3, #0
 800609e:	b2db      	uxtb	r3, r3
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <isButtonLeft>:
uint8_t isButtonLeft(){
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80060a8:	f7ff ff66 	bl	8005f78 <touch_IsTouched>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <isButtonLeft+0x12>
 80060b2:	2300      	movs	r3, #0
 80060b4:	e019      	b.n	80060ea <isButtonLeft+0x46>
	return touch_GetX() > 20 && touch_GetX() < 80 && touch_GetY() > 260 && touch_GetY() < 300;
 80060b6:	f7ff ff71 	bl	8005f9c <touch_GetX>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b14      	cmp	r3, #20
 80060be:	d912      	bls.n	80060e6 <isButtonLeft+0x42>
 80060c0:	f7ff ff6c 	bl	8005f9c <touch_GetX>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b4f      	cmp	r3, #79	; 0x4f
 80060c8:	d80d      	bhi.n	80060e6 <isButtonLeft+0x42>
 80060ca:	f7ff ff73 	bl	8005fb4 <touch_GetY>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d4:	d907      	bls.n	80060e6 <isButtonLeft+0x42>
 80060d6:	f7ff ff6d 	bl	8005fb4 <touch_GetY>
 80060da:	4603      	mov	r3, r0
 80060dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80060e0:	d201      	bcs.n	80060e6 <isButtonLeft+0x42>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <isButtonLeft+0x44>
 80060e6:	2300      	movs	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	bd80      	pop	{r7, pc}

080060ee <isButtonRight>:
uint8_t isButtonRight(){
 80060ee:	b580      	push	{r7, lr}
 80060f0:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80060f2:	f7ff ff41 	bl	8005f78 <touch_IsTouched>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <isButtonRight+0x12>
 80060fc:	2300      	movs	r3, #0
 80060fe:	e019      	b.n	8006134 <isButtonRight+0x46>
	return touch_GetX() > 160 && touch_GetX() < 220 && touch_GetY() > 260 && touch_GetY() < 300;
 8006100:	f7ff ff4c 	bl	8005f9c <touch_GetX>
 8006104:	4603      	mov	r3, r0
 8006106:	2ba0      	cmp	r3, #160	; 0xa0
 8006108:	d912      	bls.n	8006130 <isButtonRight+0x42>
 800610a:	f7ff ff47 	bl	8005f9c <touch_GetX>
 800610e:	4603      	mov	r3, r0
 8006110:	2bdb      	cmp	r3, #219	; 0xdb
 8006112:	d80d      	bhi.n	8006130 <isButtonRight+0x42>
 8006114:	f7ff ff4e 	bl	8005fb4 <touch_GetY>
 8006118:	4603      	mov	r3, r0
 800611a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800611e:	d907      	bls.n	8006130 <isButtonRight+0x42>
 8006120:	f7ff ff48 	bl	8005fb4 <touch_GetY>
 8006124:	4603      	mov	r3, r0
 8006126:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800612a:	d201      	bcs.n	8006130 <isButtonRight+0x42>
 800612c:	2301      	movs	r3, #1
 800612e:	e000      	b.n	8006132 <isButtonRight+0x44>
 8006130:	2300      	movs	r3, #0
 8006132:	b2db      	uxtb	r3, r3
}
 8006134:	4618      	mov	r0, r3
 8006136:	bd80      	pop	{r7, pc}

08006138 <isButtonRestart>:
uint8_t isButtonRestart(){
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 800613c:	f7ff ff1c 	bl	8005f78 <touch_IsTouched>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <isButtonRestart+0x12>
 8006146:	2300      	movs	r3, #0
 8006148:	e018      	b.n	800617c <isButtonRestart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 350;
 800614a:	f7ff ff27 	bl	8005f9c <touch_GetX>
 800614e:	4603      	mov	r3, r0
 8006150:	2b32      	cmp	r3, #50	; 0x32
 8006152:	d911      	bls.n	8006178 <isButtonRestart+0x40>
 8006154:	f7ff ff22 	bl	8005f9c <touch_GetX>
 8006158:	4603      	mov	r3, r0
 800615a:	2bbd      	cmp	r3, #189	; 0xbd
 800615c:	d80c      	bhi.n	8006178 <isButtonRestart+0x40>
 800615e:	f7ff ff29 	bl	8005fb4 <touch_GetY>
 8006162:	4603      	mov	r3, r0
 8006164:	2bfa      	cmp	r3, #250	; 0xfa
 8006166:	d907      	bls.n	8006178 <isButtonRestart+0x40>
 8006168:	f7ff ff24 	bl	8005fb4 <touch_GetY>
 800616c:	4603      	mov	r3, r0
 800616e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8006172:	d201      	bcs.n	8006178 <isButtonRestart+0x40>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <isButtonRestart+0x42>
 8006178:	2300      	movs	r3, #0
 800617a:	b2db      	uxtb	r3, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}

08006180 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){// khoi tao uart gui den wifi
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8006184:	2201      	movs	r2, #1
 8006186:	4903      	ldr	r1, [pc, #12]	; (8006194 <uart_init_esp+0x14>)
 8006188:	4803      	ldr	r0, [pc, #12]	; (8006198 <uart_init_esp+0x18>)
 800618a:	f005 f8a6 	bl	800b2da <HAL_UART_Receive_IT>
}
 800618e:	bf00      	nop
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	200009c1 	.word	0x200009c1
 8006198:	20000e58 	.word	0x20000e58

0800619c <uart_EspSendString>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void uart_EspSendString(uint8_t* str){// gui chuoi
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4907      	ldr	r1, [pc, #28]	; (80061c4 <uart_EspSendString+0x28>)
 80061a8:	4807      	ldr	r0, [pc, #28]	; (80061c8 <uart_EspSendString+0x2c>)
 80061aa:	f006 f983 	bl	800c4b4 <siprintf>
 80061ae:	4603      	mov	r3, r0
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	230a      	movs	r3, #10
 80061b4:	4904      	ldr	r1, [pc, #16]	; (80061c8 <uart_EspSendString+0x2c>)
 80061b6:	4805      	ldr	r0, [pc, #20]	; (80061cc <uart_EspSendString+0x30>)
 80061b8:	f004 fffd 	bl	800b1b6 <HAL_UART_Transmit>
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	0800dc20 	.word	0x0800dc20
 80061c8:	20000cb0 	.word	0x20000cb0
 80061cc:	20000e58 	.word	0x20000e58

080061d0 <HAL_UART_RxCpltCallback>:
        }
        num %= mypow(10, i-1);
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a11      	ldr	r2, [pc, #68]	; (8006224 <HAL_UART_RxCpltCallback+0x54>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d11c      	bne.n	800621c <HAL_UART_RxCpltCallback+0x4c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80061e2:	230a      	movs	r3, #10
 80061e4:	2201      	movs	r2, #1
 80061e6:	4910      	ldr	r1, [pc, #64]	; (8006228 <HAL_UART_RxCpltCallback+0x58>)
 80061e8:	4810      	ldr	r0, [pc, #64]	; (800622c <HAL_UART_RxCpltCallback+0x5c>)
 80061ea:	f004 ffe4 	bl	800b1b6 <HAL_UART_Transmit>

		// turn on the receice interrupt
		rxBuffer[rxHead] = receive_buffer1;
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <HAL_UART_RxCpltCallback+0x60>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <HAL_UART_RxCpltCallback+0x58>)
 80061f6:	7819      	ldrb	r1, [r3, #0]
 80061f8:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <HAL_UART_RxCpltCallback+0x64>)
 80061fa:	5499      	strb	r1, [r3, r2]
		rxHead = (rxHead + 1)%BUFFER_SIZE;
 80061fc:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <HAL_UART_RxCpltCallback+0x60>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	425a      	negs	r2, r3
 8006204:	b2db      	uxtb	r3, r3
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	bf58      	it	pl
 800620a:	4253      	negpl	r3, r2
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_UART_RxCpltCallback+0x60>)
 8006210:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8006212:	2201      	movs	r2, #1
 8006214:	4904      	ldr	r1, [pc, #16]	; (8006228 <HAL_UART_RxCpltCallback+0x58>)
 8006216:	4805      	ldr	r0, [pc, #20]	; (800622c <HAL_UART_RxCpltCallback+0x5c>)
 8006218:	f005 f85f 	bl	800b2da <HAL_UART_Receive_IT>
	}
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40011000 	.word	0x40011000
 8006228:	200009c0 	.word	0x200009c0
 800622c:	20000e14 	.word	0x20000e14
 8006230:	200009c2 	.word	0x200009c2
 8006234:	20000d14 	.word	0x20000d14

08006238 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800623c:	4b11      	ldr	r3, [pc, #68]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 800623e:	4a12      	ldr	r2, [pc, #72]	; (8006288 <MX_USART1_UART_Init+0x50>)
 8006240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006242:	4b10      	ldr	r3, [pc, #64]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 8006244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 800624c:	2200      	movs	r2, #0
 800624e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006250:	4b0c      	ldr	r3, [pc, #48]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 8006252:	2200      	movs	r2, #0
 8006254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006256:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 8006258:	2200      	movs	r2, #0
 800625a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 800625e:	220c      	movs	r2, #12
 8006260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 8006264:	2200      	movs	r2, #0
 8006266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 800626a:	2200      	movs	r2, #0
 800626c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800626e:	4805      	ldr	r0, [pc, #20]	; (8006284 <MX_USART1_UART_Init+0x4c>)
 8006270:	f004 ff54 	bl	800b11c <HAL_UART_Init>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800627a:	f7fd f9eb 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800627e:	bf00      	nop
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000e14 	.word	0x20000e14
 8006288:	40011000 	.word	0x40011000

0800628c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006290:	4b11      	ldr	r3, [pc, #68]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 8006292:	4a12      	ldr	r2, [pc, #72]	; (80062dc <MX_USART2_UART_Init+0x50>)
 8006294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 8006298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800629c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800629e:	4b0e      	ldr	r3, [pc, #56]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062b0:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 80062b2:	220c      	movs	r2, #12
 80062b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062b6:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80062c2:	4805      	ldr	r0, [pc, #20]	; (80062d8 <MX_USART2_UART_Init+0x4c>)
 80062c4:	f004 ff2a 	bl	800b11c <HAL_UART_Init>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80062ce:	f7fd f9c1 	bl	8003654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000e58 	.word	0x20000e58
 80062dc:	40004400 	.word	0x40004400

080062e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08c      	sub	sp, #48	; 0x30
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e8:	f107 031c 	add.w	r3, r7, #28
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	609a      	str	r2, [r3, #8]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a3a      	ldr	r2, [pc, #232]	; (80063e8 <HAL_UART_MspInit+0x108>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d135      	bne.n	800636e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <HAL_UART_MspInit+0x10c>)
 8006308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630a:	4a38      	ldr	r2, [pc, #224]	; (80063ec <HAL_UART_MspInit+0x10c>)
 800630c:	f043 0310 	orr.w	r3, r3, #16
 8006310:	6453      	str	r3, [r2, #68]	; 0x44
 8006312:	4b36      	ldr	r3, [pc, #216]	; (80063ec <HAL_UART_MspInit+0x10c>)
 8006314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	61bb      	str	r3, [r7, #24]
 800631c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	4b32      	ldr	r3, [pc, #200]	; (80063ec <HAL_UART_MspInit+0x10c>)
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	4a31      	ldr	r2, [pc, #196]	; (80063ec <HAL_UART_MspInit+0x10c>)
 8006328:	f043 0301 	orr.w	r3, r3, #1
 800632c:	6313      	str	r3, [r2, #48]	; 0x30
 800632e:	4b2f      	ldr	r3, [pc, #188]	; (80063ec <HAL_UART_MspInit+0x10c>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800633a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800633e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006340:	2302      	movs	r3, #2
 8006342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006344:	2300      	movs	r3, #0
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006348:	2303      	movs	r3, #3
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800634c:	2307      	movs	r3, #7
 800634e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006350:	f107 031c 	add.w	r3, r7, #28
 8006354:	4619      	mov	r1, r3
 8006356:	4826      	ldr	r0, [pc, #152]	; (80063f0 <HAL_UART_MspInit+0x110>)
 8006358:	f001 fa34 	bl	80077c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800635c:	2200      	movs	r2, #0
 800635e:	2100      	movs	r1, #0
 8006360:	2025      	movs	r0, #37	; 0x25
 8006362:	f000 fdf6 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006366:	2025      	movs	r0, #37	; 0x25
 8006368:	f000 fe0f 	bl	8006f8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800636c:	e038      	b.n	80063e0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a20      	ldr	r2, [pc, #128]	; (80063f4 <HAL_UART_MspInit+0x114>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d133      	bne.n	80063e0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_UART_MspInit+0x10c>)
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	4a1a      	ldr	r2, [pc, #104]	; (80063ec <HAL_UART_MspInit+0x10c>)
 8006382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006386:	6413      	str	r3, [r2, #64]	; 0x40
 8006388:	4b18      	ldr	r3, [pc, #96]	; (80063ec <HAL_UART_MspInit+0x10c>)
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	4b14      	ldr	r3, [pc, #80]	; (80063ec <HAL_UART_MspInit+0x10c>)
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	4a13      	ldr	r2, [pc, #76]	; (80063ec <HAL_UART_MspInit+0x10c>)
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	6313      	str	r3, [r2, #48]	; 0x30
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <HAL_UART_MspInit+0x10c>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063b0:	230c      	movs	r3, #12
 80063b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b4:	2302      	movs	r3, #2
 80063b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063bc:	2303      	movs	r3, #3
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063c0:	2307      	movs	r3, #7
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c4:	f107 031c 	add.w	r3, r7, #28
 80063c8:	4619      	mov	r1, r3
 80063ca:	4809      	ldr	r0, [pc, #36]	; (80063f0 <HAL_UART_MspInit+0x110>)
 80063cc:	f001 f9fa 	bl	80077c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063d0:	2200      	movs	r2, #0
 80063d2:	2100      	movs	r1, #0
 80063d4:	2026      	movs	r0, #38	; 0x26
 80063d6:	f000 fdbc 	bl	8006f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063da:	2026      	movs	r0, #38	; 0x26
 80063dc:	f000 fdd5 	bl	8006f8a <HAL_NVIC_EnableIRQ>
}
 80063e0:	bf00      	nop
 80063e2:	3730      	adds	r7, #48	; 0x30
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40011000 	.word	0x40011000
 80063ec:	40023800 	.word	0x40023800
 80063f0:	40020000 	.word	0x40020000
 80063f4:	40004400 	.word	0x40004400

080063f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80063f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063fc:	480d      	ldr	r0, [pc, #52]	; (8006434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80063fe:	490e      	ldr	r1, [pc, #56]	; (8006438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006400:	4a0e      	ldr	r2, [pc, #56]	; (800643c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006404:	e002      	b.n	800640c <LoopCopyDataInit>

08006406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800640a:	3304      	adds	r3, #4

0800640c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800640c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800640e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006410:	d3f9      	bcc.n	8006406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006412:	4a0b      	ldr	r2, [pc, #44]	; (8006440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006414:	4c0b      	ldr	r4, [pc, #44]	; (8006444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006418:	e001      	b.n	800641e <LoopFillZerobss>

0800641a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800641a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800641c:	3204      	adds	r2, #4

0800641e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800641e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006420:	d3fb      	bcc.n	800641a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006422:	f7fe fd63 	bl	8004eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006426:	f005 ff17 	bl	800c258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800642a:	f7fc feb5 	bl	8003198 <main>
  bx  lr    
 800642e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006438:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 800643c:	08010d30 	.word	0x08010d30
  ldr r2, =_sbss
 8006440:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8006444:	20000eb0 	.word	0x20000eb0

08006448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006448:	e7fe      	b.n	8006448 <ADC_IRQHandler>
	...

0800644c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006450:	4b0e      	ldr	r3, [pc, #56]	; (800648c <HAL_Init+0x40>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a0d      	ldr	r2, [pc, #52]	; (800648c <HAL_Init+0x40>)
 8006456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800645a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <HAL_Init+0x40>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0a      	ldr	r2, [pc, #40]	; (800648c <HAL_Init+0x40>)
 8006462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006468:	4b08      	ldr	r3, [pc, #32]	; (800648c <HAL_Init+0x40>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a07      	ldr	r2, [pc, #28]	; (800648c <HAL_Init+0x40>)
 800646e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006474:	2003      	movs	r0, #3
 8006476:	f000 fd61 	bl	8006f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800647a:	200f      	movs	r0, #15
 800647c:	f000 f808 	bl	8006490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006480:	f7fe fbf4 	bl	8004c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40023c00 	.word	0x40023c00

08006490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006498:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <HAL_InitTick+0x54>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <HAL_InitTick+0x58>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	4619      	mov	r1, r3
 80064a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fd79 	bl	8006fa6 <HAL_SYSTICK_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e00e      	b.n	80064dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b0f      	cmp	r3, #15
 80064c2:	d80a      	bhi.n	80064da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064c4:	2200      	movs	r2, #0
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	f000 fd41 	bl	8006f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064d0:	4a06      	ldr	r2, [pc, #24]	; (80064ec <HAL_InitTick+0x5c>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	e000      	b.n	80064dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	20000038 	.word	0x20000038
 80064e8:	20000078 	.word	0x20000078
 80064ec:	20000074 	.word	0x20000074

080064f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064f4:	4b06      	ldr	r3, [pc, #24]	; (8006510 <HAL_IncTick+0x20>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <HAL_IncTick+0x24>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4413      	add	r3, r2
 8006500:	4a04      	ldr	r2, [pc, #16]	; (8006514 <HAL_IncTick+0x24>)
 8006502:	6013      	str	r3, [r2, #0]
}
 8006504:	bf00      	nop
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	20000078 	.word	0x20000078
 8006514:	20000e9c 	.word	0x20000e9c

08006518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  return uwTick;
 800651c:	4b03      	ldr	r3, [pc, #12]	; (800652c <HAL_GetTick+0x14>)
 800651e:	681b      	ldr	r3, [r3, #0]
}
 8006520:	4618      	mov	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	20000e9c 	.word	0x20000e9c

08006530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006538:	f7ff ffee 	bl	8006518 <HAL_GetTick>
 800653c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d005      	beq.n	8006556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <HAL_Delay+0x44>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006556:	bf00      	nop
 8006558:	f7ff ffde 	bl	8006518 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d8f7      	bhi.n	8006558 <HAL_Delay+0x28>
  {
  }
}
 8006568:	bf00      	nop
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	20000078 	.word	0x20000078

08006578 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e033      	b.n	80065f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d109      	bne.n	80065aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fa fd4c 	bl	8001034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f003 0310 	and.w	r3, r3, #16
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d118      	bne.n	80065e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065be:	f023 0302 	bic.w	r3, r3, #2
 80065c2:	f043 0202 	orr.w	r2, r3, #2
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fa68 	bl	8006aa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f023 0303 	bic.w	r3, r3, #3
 80065de:	f043 0201 	orr.w	r2, r3, #1
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40
 80065e6:	e001      	b.n	80065ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_ADC_Start_DMA+0x1e>
 800661a:	2302      	movs	r3, #2
 800661c:	e0e9      	b.n	80067f2 <HAL_ADC_Start_DMA+0x1f2>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d018      	beq.n	8006666 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689a      	ldr	r2, [r3, #8]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006644:	4b6d      	ldr	r3, [pc, #436]	; (80067fc <HAL_ADC_Start_DMA+0x1fc>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a6d      	ldr	r2, [pc, #436]	; (8006800 <HAL_ADC_Start_DMA+0x200>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	0c9a      	lsrs	r2, r3, #18
 8006650:	4613      	mov	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	4413      	add	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006658:	e002      	b.n	8006660 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3b01      	subs	r3, #1
 800665e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f9      	bne.n	800665a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006674:	d107      	bne.n	8006686 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006684:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b01      	cmp	r3, #1
 8006692:	f040 80a1 	bne.w	80067d8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d4:	d106      	bne.n	80066e4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066da:	f023 0206 	bic.w	r2, r3, #6
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	645a      	str	r2, [r3, #68]	; 0x44
 80066e2:	e002      	b.n	80066ea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066f2:	4b44      	ldr	r3, [pc, #272]	; (8006804 <HAL_ADC_Start_DMA+0x204>)
 80066f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	4a43      	ldr	r2, [pc, #268]	; (8006808 <HAL_ADC_Start_DMA+0x208>)
 80066fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	4a42      	ldr	r2, [pc, #264]	; (800680c <HAL_ADC_Start_DMA+0x20c>)
 8006704:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	4a41      	ldr	r2, [pc, #260]	; (8006810 <HAL_ADC_Start_DMA+0x210>)
 800670c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006716:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006726:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006736:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	334c      	adds	r3, #76	; 0x4c
 8006742:	4619      	mov	r1, r3
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f000 fce8 	bl	800711c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f003 031f 	and.w	r3, r3, #31
 8006754:	2b00      	cmp	r3, #0
 8006756:	d12a      	bne.n	80067ae <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a2d      	ldr	r2, [pc, #180]	; (8006814 <HAL_ADC_Start_DMA+0x214>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d015      	beq.n	800678e <HAL_ADC_Start_DMA+0x18e>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a2c      	ldr	r2, [pc, #176]	; (8006818 <HAL_ADC_Start_DMA+0x218>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d105      	bne.n	8006778 <HAL_ADC_Start_DMA+0x178>
 800676c:	4b25      	ldr	r3, [pc, #148]	; (8006804 <HAL_ADC_Start_DMA+0x204>)
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f003 031f 	and.w	r3, r3, #31
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00a      	beq.n	800678e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a27      	ldr	r2, [pc, #156]	; (800681c <HAL_ADC_Start_DMA+0x21c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d136      	bne.n	80067f0 <HAL_ADC_Start_DMA+0x1f0>
 8006782:	4b20      	ldr	r3, [pc, #128]	; (8006804 <HAL_ADC_Start_DMA+0x204>)
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	d130      	bne.n	80067f0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d129      	bne.n	80067f0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	e020      	b.n	80067f0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a18      	ldr	r2, [pc, #96]	; (8006814 <HAL_ADC_Start_DMA+0x214>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d11b      	bne.n	80067f0 <HAL_ADC_Start_DMA+0x1f0>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d114      	bne.n	80067f0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067d4:	609a      	str	r2, [r3, #8]
 80067d6:	e00b      	b.n	80067f0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f043 0210 	orr.w	r2, r3, #16
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067e8:	f043 0201 	orr.w	r2, r3, #1
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000038 	.word	0x20000038
 8006800:	431bde83 	.word	0x431bde83
 8006804:	40012300 	.word	0x40012300
 8006808:	08006c99 	.word	0x08006c99
 800680c:	08006d53 	.word	0x08006d53
 8006810:	08006d6f 	.word	0x08006d6f
 8006814:	40012000 	.word	0x40012000
 8006818:	40012100 	.word	0x40012100
 800681c:	40012200 	.word	0x40012200

08006820 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x1c>
 8006874:	2302      	movs	r3, #2
 8006876:	e105      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x228>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b09      	cmp	r3, #9
 8006886:	d925      	bls.n	80068d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68d9      	ldr	r1, [r3, #12]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	4613      	mov	r3, r2
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	4413      	add	r3, r2
 800689c:	3b1e      	subs	r3, #30
 800689e:	2207      	movs	r2, #7
 80068a0:	fa02 f303 	lsl.w	r3, r2, r3
 80068a4:	43da      	mvns	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	400a      	ands	r2, r1
 80068ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68d9      	ldr	r1, [r3, #12]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	4618      	mov	r0, r3
 80068c0:	4603      	mov	r3, r0
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	4403      	add	r3, r0
 80068c6:	3b1e      	subs	r3, #30
 80068c8:	409a      	lsls	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	e022      	b.n	800691a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6919      	ldr	r1, [r3, #16]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	4613      	mov	r3, r2
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	4413      	add	r3, r2
 80068e8:	2207      	movs	r2, #7
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43da      	mvns	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	400a      	ands	r2, r1
 80068f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6919      	ldr	r1, [r3, #16]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689a      	ldr	r2, [r3, #8]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	b29b      	uxth	r3, r3
 8006908:	4618      	mov	r0, r3
 800690a:	4603      	mov	r3, r0
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	4403      	add	r3, r0
 8006910:	409a      	lsls	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b06      	cmp	r3, #6
 8006920:	d824      	bhi.n	800696c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	3b05      	subs	r3, #5
 8006934:	221f      	movs	r2, #31
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43da      	mvns	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	400a      	ands	r2, r1
 8006942:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	b29b      	uxth	r3, r3
 8006950:	4618      	mov	r0, r3
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	3b05      	subs	r3, #5
 800695e:	fa00 f203 	lsl.w	r2, r0, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	635a      	str	r2, [r3, #52]	; 0x34
 800696a:	e04c      	b.n	8006a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b0c      	cmp	r3, #12
 8006972:	d824      	bhi.n	80069be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	3b23      	subs	r3, #35	; 0x23
 8006986:	221f      	movs	r2, #31
 8006988:	fa02 f303 	lsl.w	r3, r2, r3
 800698c:	43da      	mvns	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	400a      	ands	r2, r1
 8006994:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4618      	mov	r0, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	3b23      	subs	r3, #35	; 0x23
 80069b0:	fa00 f203 	lsl.w	r2, r0, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	631a      	str	r2, [r3, #48]	; 0x30
 80069bc:	e023      	b.n	8006a06 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	4613      	mov	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	3b41      	subs	r3, #65	; 0x41
 80069d0:	221f      	movs	r2, #31
 80069d2:	fa02 f303 	lsl.w	r3, r2, r3
 80069d6:	43da      	mvns	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	400a      	ands	r2, r1
 80069de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4618      	mov	r0, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	3b41      	subs	r3, #65	; 0x41
 80069fa:	fa00 f203 	lsl.w	r2, r0, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a06:	4b22      	ldr	r3, [pc, #136]	; (8006a90 <HAL_ADC_ConfigChannel+0x234>)
 8006a08:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a21      	ldr	r2, [pc, #132]	; (8006a94 <HAL_ADC_ConfigChannel+0x238>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <HAL_ADC_ConfigChannel+0x1cc>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b12      	cmp	r3, #18
 8006a1a:	d105      	bne.n	8006a28 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <HAL_ADC_ConfigChannel+0x238>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d123      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x21e>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b10      	cmp	r3, #16
 8006a38:	d003      	beq.n	8006a42 <HAL_ADC_ConfigChannel+0x1e6>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b11      	cmp	r3, #17
 8006a40:	d11b      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b10      	cmp	r3, #16
 8006a54:	d111      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a56:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <HAL_ADC_ConfigChannel+0x23c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a10      	ldr	r2, [pc, #64]	; (8006a9c <HAL_ADC_ConfigChannel+0x240>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	0c9a      	lsrs	r2, r3, #18
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a6c:	e002      	b.n	8006a74 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f9      	bne.n	8006a6e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40012300 	.word	0x40012300
 8006a94:	40012000 	.word	0x40012000
 8006a98:	20000038 	.word	0x20000038
 8006a9c:	431bde83 	.word	0x431bde83

08006aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006aa8:	4b79      	ldr	r3, [pc, #484]	; (8006c90 <ADC_Init+0x1f0>)
 8006aaa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	431a      	orrs	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6859      	ldr	r1, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	021a      	lsls	r2, r3, #8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006af8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6859      	ldr	r1, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6899      	ldr	r1, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	4a58      	ldr	r2, [pc, #352]	; (8006c94 <ADC_Init+0x1f4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d022      	beq.n	8006b7e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b46:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6899      	ldr	r1, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6899      	ldr	r1, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	e00f      	b.n	8006b9e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0202 	bic.w	r2, r2, #2
 8006bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6899      	ldr	r1, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	7e1b      	ldrb	r3, [r3, #24]
 8006bb8:	005a      	lsls	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01b      	beq.n	8006c04 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685a      	ldr	r2, [r3, #4]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bda:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006bea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	035a      	lsls	r2, r3, #13
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
 8006c02:	e007      	b.n	8006c14 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	051a      	lsls	r2, r3, #20
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6899      	ldr	r1, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c56:	025a      	lsls	r2, r3, #9
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6899      	ldr	r1, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	029a      	lsls	r2, r3, #10
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	609a      	str	r2, [r3, #8]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40012300 	.word	0x40012300
 8006c94:	0f000001 	.word	0x0f000001

08006c98 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d13c      	bne.n	8006d2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d12b      	bne.n	8006d24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d127      	bne.n	8006d24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d006      	beq.n	8006cf0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d119      	bne.n	8006d24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0220 	bic.w	r2, r2, #32
 8006cfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	f043 0201 	orr.w	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fd7b 	bl	8006820 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d2a:	e00e      	b.n	8006d4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d003      	beq.n	8006d40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fd85 	bl	8006848 <HAL_ADC_ErrorCallback>
}
 8006d3e:	e004      	b.n	8006d4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
}
 8006d4a:	bf00      	nop
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff fd67 	bl	8006834 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2240      	movs	r2, #64	; 0x40
 8006d80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d86:	f043 0204 	orr.w	r2, r3, #4
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff fd5a 	bl	8006848 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dac:	4b0c      	ldr	r3, [pc, #48]	; (8006de0 <__NVIC_SetPriorityGrouping+0x44>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006db8:	4013      	ands	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dce:	4a04      	ldr	r2, [pc, #16]	; (8006de0 <__NVIC_SetPriorityGrouping+0x44>)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	60d3      	str	r3, [r2, #12]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	e000ed00 	.word	0xe000ed00

08006de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <__NVIC_GetPriorityGrouping+0x18>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	f003 0307 	and.w	r3, r3, #7
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	e000ed00 	.word	0xe000ed00

08006e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	db0b      	blt.n	8006e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	f003 021f 	and.w	r2, r3, #31
 8006e18:	4907      	ldr	r1, [pc, #28]	; (8006e38 <__NVIC_EnableIRQ+0x38>)
 8006e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1e:	095b      	lsrs	r3, r3, #5
 8006e20:	2001      	movs	r0, #1
 8006e22:	fa00 f202 	lsl.w	r2, r0, r2
 8006e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	e000e100 	.word	0xe000e100

08006e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	4603      	mov	r3, r0
 8006e44:	6039      	str	r1, [r7, #0]
 8006e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	db0a      	blt.n	8006e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	490c      	ldr	r1, [pc, #48]	; (8006e88 <__NVIC_SetPriority+0x4c>)
 8006e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5a:	0112      	lsls	r2, r2, #4
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	440b      	add	r3, r1
 8006e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e64:	e00a      	b.n	8006e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	4908      	ldr	r1, [pc, #32]	; (8006e8c <__NVIC_SetPriority+0x50>)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	3b04      	subs	r3, #4
 8006e74:	0112      	lsls	r2, r2, #4
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	440b      	add	r3, r1
 8006e7a:	761a      	strb	r2, [r3, #24]
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	e000e100 	.word	0xe000e100
 8006e8c:	e000ed00 	.word	0xe000ed00

08006e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b089      	sub	sp, #36	; 0x24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f1c3 0307 	rsb	r3, r3, #7
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	bf28      	it	cs
 8006eae:	2304      	movcs	r3, #4
 8006eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d902      	bls.n	8006ec0 <NVIC_EncodePriority+0x30>
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	3b03      	subs	r3, #3
 8006ebe:	e000      	b.n	8006ec2 <NVIC_EncodePriority+0x32>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ece:	43da      	mvns	r2, r3
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	401a      	ands	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee2:	43d9      	mvns	r1, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ee8:	4313      	orrs	r3, r2
         );
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3724      	adds	r7, #36	; 0x24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
	...

08006ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f08:	d301      	bcc.n	8006f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e00f      	b.n	8006f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f0e:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <SysTick_Config+0x40>)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f16:	210f      	movs	r1, #15
 8006f18:	f04f 30ff 	mov.w	r0, #4294967295
 8006f1c:	f7ff ff8e 	bl	8006e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <SysTick_Config+0x40>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f26:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <SysTick_Config+0x40>)
 8006f28:	2207      	movs	r2, #7
 8006f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	e000e010 	.word	0xe000e010

08006f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff ff29 	bl	8006d9c <__NVIC_SetPriorityGrouping>
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b086      	sub	sp, #24
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	4603      	mov	r3, r0
 8006f5a:	60b9      	str	r1, [r7, #8]
 8006f5c:	607a      	str	r2, [r7, #4]
 8006f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f64:	f7ff ff3e 	bl	8006de4 <__NVIC_GetPriorityGrouping>
 8006f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	6978      	ldr	r0, [r7, #20]
 8006f70:	f7ff ff8e 	bl	8006e90 <NVIC_EncodePriority>
 8006f74:	4602      	mov	r2, r0
 8006f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff ff5d 	bl	8006e3c <__NVIC_SetPriority>
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b082      	sub	sp, #8
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	4603      	mov	r3, r0
 8006f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7ff ff31 	bl	8006e00 <__NVIC_EnableIRQ>
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b082      	sub	sp, #8
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7ff ffa2 	bl	8006ef8 <SysTick_Config>
 8006fb4:	4603      	mov	r3, r0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fcc:	f7ff faa4 	bl	8006518 <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e099      	b.n	8007110 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ffc:	e00f      	b.n	800701e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ffe:	f7ff fa8b 	bl	8006518 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b05      	cmp	r3, #5
 800700a:	d908      	bls.n	800701e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2220      	movs	r2, #32
 8007010:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2203      	movs	r2, #3
 8007016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e078      	b.n	8007110 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d1e8      	bne.n	8006ffe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4b38      	ldr	r3, [pc, #224]	; (8007118 <HAL_DMA_Init+0x158>)
 8007038:	4013      	ands	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800704a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a1b      	ldr	r3, [r3, #32]
 8007068:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	4313      	orrs	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	2b04      	cmp	r3, #4
 8007076:	d107      	bne.n	8007088 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	4313      	orrs	r3, r2
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	d117      	bne.n	80070e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00e      	beq.n	80070e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fb01 	bl	80076cc <DMA_CheckFifoParam>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2240      	movs	r2, #64	; 0x40
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80070de:	2301      	movs	r3, #1
 80070e0:	e016      	b.n	8007110 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fab8 	bl	8007660 <DMA_CalcBaseAndBitshift>
 80070f0:	4603      	mov	r3, r0
 80070f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f8:	223f      	movs	r2, #63	; 0x3f
 80070fa:	409a      	lsls	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	f010803f 	.word	0xf010803f

0800711c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_DMA_Start_IT+0x26>
 800713e:	2302      	movs	r3, #2
 8007140:	e040      	b.n	80071c4 <HAL_DMA_Start_IT+0xa8>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b01      	cmp	r3, #1
 8007154:	d12f      	bne.n	80071b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2202      	movs	r2, #2
 800715a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa4a 	bl	8007604 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007174:	223f      	movs	r2, #63	; 0x3f
 8007176:	409a      	lsls	r2, r3
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0216 	orr.w	r2, r2, #22
 800718a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0208 	orr.w	r2, r2, #8
 80071a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	e005      	b.n	80071c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071be:	2302      	movs	r3, #2
 80071c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071da:	f7ff f99d 	bl	8006518 <HAL_GetTick>
 80071de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d008      	beq.n	80071fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2280      	movs	r2, #128	; 0x80
 80071f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e052      	b.n	80072a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 0216 	bic.w	r2, r2, #22
 800720c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695a      	ldr	r2, [r3, #20]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800721c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d103      	bne.n	800722e <HAL_DMA_Abort+0x62>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0208 	bic.w	r2, r2, #8
 800723c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0201 	bic.w	r2, r2, #1
 800724c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800724e:	e013      	b.n	8007278 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007250:	f7ff f962 	bl	8006518 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b05      	cmp	r3, #5
 800725c:	d90c      	bls.n	8007278 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2203      	movs	r2, #3
 8007268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e015      	b.n	80072a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e4      	bne.n	8007250 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728a:	223f      	movs	r2, #63	; 0x3f
 800728c:	409a      	lsls	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d004      	beq.n	80072ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2280      	movs	r2, #128	; 0x80
 80072c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e00c      	b.n	80072e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2205      	movs	r2, #5
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0201 	bic.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072fc:	4b92      	ldr	r3, [pc, #584]	; (8007548 <HAL_DMA_IRQHandler+0x258>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a92      	ldr	r2, [pc, #584]	; (800754c <HAL_DMA_IRQHandler+0x25c>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	0a9b      	lsrs	r3, r3, #10
 8007308:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731a:	2208      	movs	r2, #8
 800731c:	409a      	lsls	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4013      	ands	r3, r2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01a      	beq.n	800735c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d013      	beq.n	800735c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 0204 	bic.w	r2, r2, #4
 8007342:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007348:	2208      	movs	r2, #8
 800734a:	409a      	lsls	r2, r3
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007354:	f043 0201 	orr.w	r2, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	2201      	movs	r2, #1
 8007362:	409a      	lsls	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4013      	ands	r3, r2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d012      	beq.n	8007392 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737e:	2201      	movs	r2, #1
 8007380:	409a      	lsls	r2, r3
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	f043 0202 	orr.w	r2, r3, #2
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	2204      	movs	r2, #4
 8007398:	409a      	lsls	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4013      	ands	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d012      	beq.n	80073c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b4:	2204      	movs	r2, #4
 80073b6:	409a      	lsls	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c0:	f043 0204 	orr.w	r2, r3, #4
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073cc:	2210      	movs	r2, #16
 80073ce:	409a      	lsls	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	4013      	ands	r3, r2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d043      	beq.n	8007460 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d03c      	beq.n	8007460 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	2210      	movs	r2, #16
 80073ec:	409a      	lsls	r2, r3
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d018      	beq.n	8007432 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d108      	bne.n	8007420 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d024      	beq.n	8007460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	e01f      	b.n	8007460 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01b      	beq.n	8007460 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
 8007430:	e016      	b.n	8007460 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d107      	bne.n	8007450 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0208 	bic.w	r2, r2, #8
 800744e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007464:	2220      	movs	r2, #32
 8007466:	409a      	lsls	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4013      	ands	r3, r2
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 808e 	beq.w	800758e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8086 	beq.w	800758e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007486:	2220      	movs	r2, #32
 8007488:	409a      	lsls	r2, r3
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b05      	cmp	r3, #5
 8007498:	d136      	bne.n	8007508 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0216 	bic.w	r2, r2, #22
 80074a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	695a      	ldr	r2, [r3, #20]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <HAL_DMA_IRQHandler+0x1da>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d007      	beq.n	80074da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0208 	bic.w	r2, r2, #8
 80074d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074de:	223f      	movs	r2, #63	; 0x3f
 80074e0:	409a      	lsls	r2, r3
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d07d      	beq.n	80075fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	4798      	blx	r3
        }
        return;
 8007506:	e078      	b.n	80075fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d01c      	beq.n	8007550 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d108      	bne.n	8007536 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	2b00      	cmp	r3, #0
 800752a:	d030      	beq.n	800758e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	4798      	blx	r3
 8007534:	e02b      	b.n	800758e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d027      	beq.n	800758e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
 8007546:	e022      	b.n	800758e <HAL_DMA_IRQHandler+0x29e>
 8007548:	20000038 	.word	0x20000038
 800754c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10f      	bne.n	800757e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0210 	bic.w	r2, r2, #16
 800756c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	2b00      	cmp	r3, #0
 8007594:	d032      	beq.n	80075fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d022      	beq.n	80075e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2205      	movs	r2, #5
 80075a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0201 	bic.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3301      	adds	r3, #1
 80075be:	60bb      	str	r3, [r7, #8]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d307      	bcc.n	80075d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f2      	bne.n	80075ba <HAL_DMA_IRQHandler+0x2ca>
 80075d4:	e000      	b.n	80075d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80075d6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
 80075f8:	e000      	b.n	80075fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80075fa:	bf00      	nop
    }
  }
}
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop

08007604 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
 8007610:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007620:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b40      	cmp	r3, #64	; 0x40
 8007630:	d108      	bne.n	8007644 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007642:	e007      	b.n	8007654 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	60da      	str	r2, [r3, #12]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	3b10      	subs	r3, #16
 8007670:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <DMA_CalcBaseAndBitshift+0x64>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	091b      	lsrs	r3, r3, #4
 8007678:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800767a:	4a13      	ldr	r2, [pc, #76]	; (80076c8 <DMA_CalcBaseAndBitshift+0x68>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b03      	cmp	r3, #3
 800768c:	d909      	bls.n	80076a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007696:	f023 0303 	bic.w	r3, r3, #3
 800769a:	1d1a      	adds	r2, r3, #4
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	659a      	str	r2, [r3, #88]	; 0x58
 80076a0:	e007      	b.n	80076b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80076aa:	f023 0303 	bic.w	r3, r3, #3
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	aaaaaaab 	.word	0xaaaaaaab
 80076c8:	08010bcc 	.word	0x08010bcc

080076cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d11f      	bne.n	8007726 <DMA_CheckFifoParam+0x5a>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d856      	bhi.n	800779a <DMA_CheckFifoParam+0xce>
 80076ec:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <DMA_CheckFifoParam+0x28>)
 80076ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f2:	bf00      	nop
 80076f4:	08007705 	.word	0x08007705
 80076f8:	08007717 	.word	0x08007717
 80076fc:	08007705 	.word	0x08007705
 8007700:	0800779b 	.word	0x0800779b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d046      	beq.n	800779e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007714:	e043      	b.n	800779e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800771e:	d140      	bne.n	80077a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007724:	e03d      	b.n	80077a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772e:	d121      	bne.n	8007774 <DMA_CheckFifoParam+0xa8>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2b03      	cmp	r3, #3
 8007734:	d837      	bhi.n	80077a6 <DMA_CheckFifoParam+0xda>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <DMA_CheckFifoParam+0x70>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	0800774d 	.word	0x0800774d
 8007740:	08007753 	.word	0x08007753
 8007744:	0800774d 	.word	0x0800774d
 8007748:	08007765 	.word	0x08007765
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e030      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d025      	beq.n	80077aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007762:	e022      	b.n	80077aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800776c:	d11f      	bne.n	80077ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007772:	e01c      	b.n	80077ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b02      	cmp	r3, #2
 8007778:	d903      	bls.n	8007782 <DMA_CheckFifoParam+0xb6>
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2b03      	cmp	r3, #3
 800777e:	d003      	beq.n	8007788 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007780:	e018      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	73fb      	strb	r3, [r7, #15]
      break;
 8007786:	e015      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00e      	beq.n	80077b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
      break;
 8007798:	e00b      	b.n	80077b2 <DMA_CheckFifoParam+0xe6>
      break;
 800779a:	bf00      	nop
 800779c:	e00a      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      break;
 800779e:	bf00      	nop
 80077a0:	e008      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      break;
 80077a2:	bf00      	nop
 80077a4:	e006      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      break;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      break;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <DMA_CheckFifoParam+0xe8>
      break;
 80077b2:	bf00      	nop
    }
  } 
  
  return status; 
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop

080077c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b089      	sub	sp, #36	; 0x24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
 80077de:	e16b      	b.n	8007ab8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077e0:	2201      	movs	r2, #1
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4013      	ands	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	f040 815a 	bne.w	8007ab2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b01      	cmp	r3, #1
 8007808:	d005      	beq.n	8007816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007812:	2b02      	cmp	r3, #2
 8007814:	d130      	bne.n	8007878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	2203      	movs	r2, #3
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	43db      	mvns	r3, r3
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	4013      	ands	r3, r2
 800782c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	4313      	orrs	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800784c:	2201      	movs	r2, #1
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	fa02 f303 	lsl.w	r3, r2, r3
 8007854:	43db      	mvns	r3, r3
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	4013      	ands	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	091b      	lsrs	r3, r3, #4
 8007862:	f003 0201 	and.w	r2, r3, #1
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	fa02 f303 	lsl.w	r3, r2, r3
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	4313      	orrs	r3, r2
 8007870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b03      	cmp	r3, #3
 8007882:	d017      	beq.n	80078b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	2203      	movs	r2, #3
 8007890:	fa02 f303 	lsl.w	r3, r2, r3
 8007894:	43db      	mvns	r3, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4013      	ands	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	689a      	ldr	r2, [r3, #8]
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	fa02 f303 	lsl.w	r3, r2, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69ba      	ldr	r2, [r7, #24]
 80078b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d123      	bne.n	8007908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	08da      	lsrs	r2, r3, #3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3208      	adds	r2, #8
 80078c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	220f      	movs	r2, #15
 80078d8:	fa02 f303 	lsl.w	r3, r2, r3
 80078dc:	43db      	mvns	r3, r3
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	4013      	ands	r3, r2
 80078e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f003 0307 	and.w	r3, r3, #7
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	08da      	lsrs	r2, r3, #3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3208      	adds	r2, #8
 8007902:	69b9      	ldr	r1, [r7, #24]
 8007904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	2203      	movs	r2, #3
 8007914:	fa02 f303 	lsl.w	r3, r2, r3
 8007918:	43db      	mvns	r3, r3
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	4013      	ands	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f003 0203 	and.w	r2, r3, #3
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	4313      	orrs	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80b4 	beq.w	8007ab2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	4b60      	ldr	r3, [pc, #384]	; (8007ad0 <HAL_GPIO_Init+0x30c>)
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	4a5f      	ldr	r2, [pc, #380]	; (8007ad0 <HAL_GPIO_Init+0x30c>)
 8007954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007958:	6453      	str	r3, [r2, #68]	; 0x44
 800795a:	4b5d      	ldr	r3, [pc, #372]	; (8007ad0 <HAL_GPIO_Init+0x30c>)
 800795c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007962:	60fb      	str	r3, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007966:	4a5b      	ldr	r2, [pc, #364]	; (8007ad4 <HAL_GPIO_Init+0x310>)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	089b      	lsrs	r3, r3, #2
 800796c:	3302      	adds	r3, #2
 800796e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	220f      	movs	r2, #15
 800797e:	fa02 f303 	lsl.w	r3, r2, r3
 8007982:	43db      	mvns	r3, r3
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	4013      	ands	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a52      	ldr	r2, [pc, #328]	; (8007ad8 <HAL_GPIO_Init+0x314>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d02b      	beq.n	80079ea <HAL_GPIO_Init+0x226>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a51      	ldr	r2, [pc, #324]	; (8007adc <HAL_GPIO_Init+0x318>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d025      	beq.n	80079e6 <HAL_GPIO_Init+0x222>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a50      	ldr	r2, [pc, #320]	; (8007ae0 <HAL_GPIO_Init+0x31c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01f      	beq.n	80079e2 <HAL_GPIO_Init+0x21e>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a4f      	ldr	r2, [pc, #316]	; (8007ae4 <HAL_GPIO_Init+0x320>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d019      	beq.n	80079de <HAL_GPIO_Init+0x21a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a4e      	ldr	r2, [pc, #312]	; (8007ae8 <HAL_GPIO_Init+0x324>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <HAL_GPIO_Init+0x216>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a4d      	ldr	r2, [pc, #308]	; (8007aec <HAL_GPIO_Init+0x328>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00d      	beq.n	80079d6 <HAL_GPIO_Init+0x212>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a4c      	ldr	r2, [pc, #304]	; (8007af0 <HAL_GPIO_Init+0x32c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d007      	beq.n	80079d2 <HAL_GPIO_Init+0x20e>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a4b      	ldr	r2, [pc, #300]	; (8007af4 <HAL_GPIO_Init+0x330>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d101      	bne.n	80079ce <HAL_GPIO_Init+0x20a>
 80079ca:	2307      	movs	r3, #7
 80079cc:	e00e      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079ce:	2308      	movs	r3, #8
 80079d0:	e00c      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079d2:	2306      	movs	r3, #6
 80079d4:	e00a      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079d6:	2305      	movs	r3, #5
 80079d8:	e008      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079da:	2304      	movs	r3, #4
 80079dc:	e006      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079de:	2303      	movs	r3, #3
 80079e0:	e004      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e002      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <HAL_GPIO_Init+0x228>
 80079ea:	2300      	movs	r3, #0
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	f002 0203 	and.w	r2, r2, #3
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	4093      	lsls	r3, r2
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079fc:	4935      	ldr	r1, [pc, #212]	; (8007ad4 <HAL_GPIO_Init+0x310>)
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	089b      	lsrs	r3, r3, #2
 8007a02:	3302      	adds	r3, #2
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a0a:	4b3b      	ldr	r3, [pc, #236]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4013      	ands	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a2e:	4a32      	ldr	r2, [pc, #200]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007a34:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4013      	ands	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a58:	4a27      	ldr	r2, [pc, #156]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a5e:	4b26      	ldr	r3, [pc, #152]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	43db      	mvns	r3, r3
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a82:	4a1d      	ldr	r2, [pc, #116]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a88:	4b1b      	ldr	r3, [pc, #108]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	43db      	mvns	r3, r3
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4013      	ands	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007aac:	4a12      	ldr	r2, [pc, #72]	; (8007af8 <HAL_GPIO_Init+0x334>)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	2b0f      	cmp	r3, #15
 8007abc:	f67f ae90 	bls.w	80077e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	3724      	adds	r7, #36	; 0x24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	40013800 	.word	0x40013800
 8007ad8:	40020000 	.word	0x40020000
 8007adc:	40020400 	.word	0x40020400
 8007ae0:	40020800 	.word	0x40020800
 8007ae4:	40020c00 	.word	0x40020c00
 8007ae8:	40021000 	.word	0x40021000
 8007aec:	40021400 	.word	0x40021400
 8007af0:	40021800 	.word	0x40021800
 8007af4:	40021c00 	.word	0x40021c00
 8007af8:	40013c00 	.word	0x40013c00

08007afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	887b      	ldrh	r3, [r7, #2]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
 8007b18:	e001      	b.n	8007b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	807b      	strh	r3, [r7, #2]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b3c:	787b      	ldrb	r3, [r7, #1]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b42:	887a      	ldrh	r2, [r7, #2]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b48:	e003      	b.n	8007b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b4a:	887b      	ldrh	r3, [r7, #2]
 8007b4c:	041a      	lsls	r2, r3, #16
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	619a      	str	r2, [r3, #24]
}
 8007b52:	bf00      	nop
 8007b54:	370c      	adds	r7, #12
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	460b      	mov	r3, r1
 8007b68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b70:	887a      	ldrh	r2, [r7, #2]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4013      	ands	r3, r2
 8007b76:	041a      	lsls	r2, r3, #16
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	43d9      	mvns	r1, r3
 8007b7c:	887b      	ldrh	r3, [r7, #2]
 8007b7e:	400b      	ands	r3, r1
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	619a      	str	r2, [r3, #24]
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
	...

08007b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e12b      	b.n	8007dfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7fa fb36 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2224      	movs	r2, #36	; 0x24
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0201 	bic.w	r2, r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007bf8:	f001 fbd8 	bl	80093ac <HAL_RCC_GetPCLK1Freq>
 8007bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	4a81      	ldr	r2, [pc, #516]	; (8007e08 <HAL_I2C_Init+0x274>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d807      	bhi.n	8007c18 <HAL_I2C_Init+0x84>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4a80      	ldr	r2, [pc, #512]	; (8007e0c <HAL_I2C_Init+0x278>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	bf94      	ite	ls
 8007c10:	2301      	movls	r3, #1
 8007c12:	2300      	movhi	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	e006      	b.n	8007c26 <HAL_I2C_Init+0x92>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4a7d      	ldr	r2, [pc, #500]	; (8007e10 <HAL_I2C_Init+0x27c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	bf94      	ite	ls
 8007c20:	2301      	movls	r3, #1
 8007c22:	2300      	movhi	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e0e7      	b.n	8007dfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4a78      	ldr	r2, [pc, #480]	; (8007e14 <HAL_I2C_Init+0x280>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	0c9b      	lsrs	r3, r3, #18
 8007c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	4a6a      	ldr	r2, [pc, #424]	; (8007e08 <HAL_I2C_Init+0x274>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d802      	bhi.n	8007c68 <HAL_I2C_Init+0xd4>
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	3301      	adds	r3, #1
 8007c66:	e009      	b.n	8007c7c <HAL_I2C_Init+0xe8>
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	4a69      	ldr	r2, [pc, #420]	; (8007e18 <HAL_I2C_Init+0x284>)
 8007c74:	fba2 2303 	umull	r2, r3, r2, r3
 8007c78:	099b      	lsrs	r3, r3, #6
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	430b      	orrs	r3, r1
 8007c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	495c      	ldr	r1, [pc, #368]	; (8007e08 <HAL_I2C_Init+0x274>)
 8007c98:	428b      	cmp	r3, r1
 8007c9a:	d819      	bhi.n	8007cd0 <HAL_I2C_Init+0x13c>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	1e59      	subs	r1, r3, #1
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8007caa:	1c59      	adds	r1, r3, #1
 8007cac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007cb0:	400b      	ands	r3, r1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_I2C_Init+0x138>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	1e59      	subs	r1, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cca:	e051      	b.n	8007d70 <HAL_I2C_Init+0x1dc>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	e04f      	b.n	8007d70 <HAL_I2C_Init+0x1dc>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d111      	bne.n	8007cfc <HAL_I2C_Init+0x168>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	1e58      	subs	r0, r3, #1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6859      	ldr	r1, [r3, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	440b      	add	r3, r1
 8007ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cea:	3301      	adds	r3, #1
 8007cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2301      	moveq	r3, #1
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	e012      	b.n	8007d22 <HAL_I2C_Init+0x18e>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1e58      	subs	r0, r3, #1
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6859      	ldr	r1, [r3, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	0099      	lsls	r1, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d12:	3301      	adds	r3, #1
 8007d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2301      	moveq	r3, #1
 8007d1e:	2300      	movne	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <HAL_I2C_Init+0x196>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e022      	b.n	8007d70 <HAL_I2C_Init+0x1dc>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10e      	bne.n	8007d50 <HAL_I2C_Init+0x1bc>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	1e58      	subs	r0, r3, #1
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6859      	ldr	r1, [r3, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	440b      	add	r3, r1
 8007d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d44:	3301      	adds	r3, #1
 8007d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d4e:	e00f      	b.n	8007d70 <HAL_I2C_Init+0x1dc>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	1e58      	subs	r0, r3, #1
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6859      	ldr	r1, [r3, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	0099      	lsls	r1, r3, #2
 8007d60:	440b      	add	r3, r1
 8007d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d66:	3301      	adds	r3, #1
 8007d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d70:	6879      	ldr	r1, [r7, #4]
 8007d72:	6809      	ldr	r1, [r1, #0]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69da      	ldr	r2, [r3, #28]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	431a      	orrs	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6911      	ldr	r1, [r2, #16]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	68d2      	ldr	r2, [r2, #12]
 8007daa:	4311      	orrs	r1, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6812      	ldr	r2, [r2, #0]
 8007db0:	430b      	orrs	r3, r1
 8007db2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f042 0201 	orr.w	r2, r2, #1
 8007dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	000186a0 	.word	0x000186a0
 8007e0c:	001e847f 	.word	0x001e847f
 8007e10:	003d08ff 	.word	0x003d08ff
 8007e14:	431bde83 	.word	0x431bde83
 8007e18:	10624dd3 	.word	0x10624dd3

08007e1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	4608      	mov	r0, r1
 8007e26:	4611      	mov	r1, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	817b      	strh	r3, [r7, #10]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	813b      	strh	r3, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e36:	f7fe fb6f 	bl	8006518 <HAL_GetTick>
 8007e3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	f040 80d9 	bne.w	8007ffc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2319      	movs	r3, #25
 8007e50:	2201      	movs	r2, #1
 8007e52:	496d      	ldr	r1, [pc, #436]	; (8008008 <HAL_I2C_Mem_Write+0x1ec>)
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 fc7f 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e60:	2302      	movs	r3, #2
 8007e62:	e0cc      	b.n	8007ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_I2C_Mem_Write+0x56>
 8007e6e:	2302      	movs	r3, #2
 8007e70:	e0c5      	b.n	8007ffe <HAL_I2C_Mem_Write+0x1e2>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d007      	beq.n	8007e98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ea6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2221      	movs	r2, #33	; 0x21
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2240      	movs	r2, #64	; 0x40
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a3a      	ldr	r2, [r7, #32]
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4a4d      	ldr	r2, [pc, #308]	; (800800c <HAL_I2C_Mem_Write+0x1f0>)
 8007ed8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007eda:	88f8      	ldrh	r0, [r7, #6]
 8007edc:	893a      	ldrh	r2, [r7, #8]
 8007ede:	8979      	ldrh	r1, [r7, #10]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	4603      	mov	r3, r0
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fab6 	bl	800845c <I2C_RequestMemoryWrite>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d052      	beq.n	8007f9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e081      	b.n	8007ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fd00 	bl	8008904 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00d      	beq.n	8007f26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d107      	bne.n	8007f22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e06b      	b.n	8007ffe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	781a      	ldrb	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b04      	cmp	r3, #4
 8007f62:	d11b      	bne.n	8007f9c <HAL_I2C_Mem_Write+0x180>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d017      	beq.n	8007f9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f86:	3b01      	subs	r3, #1
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1aa      	bne.n	8007efa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fcec 	bl	8008986 <I2C_WaitOnBTFFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d107      	bne.n	8007fcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e016      	b.n	8007ffe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e000      	b.n	8007ffe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	00100002 	.word	0x00100002
 800800c:	ffff0000 	.word	0xffff0000

08008010 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08c      	sub	sp, #48	; 0x30
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	4608      	mov	r0, r1
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	4603      	mov	r3, r0
 8008020:	817b      	strh	r3, [r7, #10]
 8008022:	460b      	mov	r3, r1
 8008024:	813b      	strh	r3, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800802a:	f7fe fa75 	bl	8006518 <HAL_GetTick>
 800802e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b20      	cmp	r3, #32
 800803a:	f040 8208 	bne.w	800844e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	2319      	movs	r3, #25
 8008044:	2201      	movs	r2, #1
 8008046:	497b      	ldr	r1, [pc, #492]	; (8008234 <HAL_I2C_Mem_Read+0x224>)
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 fb85 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d001      	beq.n	8008058 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
 8008056:	e1fb      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800805e:	2b01      	cmp	r3, #1
 8008060:	d101      	bne.n	8008066 <HAL_I2C_Mem_Read+0x56>
 8008062:	2302      	movs	r3, #2
 8008064:	e1f4      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b01      	cmp	r3, #1
 800807a:	d007      	beq.n	800808c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f042 0201 	orr.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800809a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2222      	movs	r2, #34	; 0x22
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2240      	movs	r2, #64	; 0x40
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80080bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4a5b      	ldr	r2, [pc, #364]	; (8008238 <HAL_I2C_Mem_Read+0x228>)
 80080cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080ce:	88f8      	ldrh	r0, [r7, #6]
 80080d0:	893a      	ldrh	r2, [r7, #8]
 80080d2:	8979      	ldrh	r1, [r7, #10]
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4603      	mov	r3, r0
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 fa52 	bl	8008588 <I2C_RequestMemoryRead>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e1b0      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d113      	bne.n	800811e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080f6:	2300      	movs	r3, #0
 80080f8:	623b      	str	r3, [r7, #32]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	623b      	str	r3, [r7, #32]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	623b      	str	r3, [r7, #32]
 800810a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	e184      	b.n	8008428 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008122:	2b01      	cmp	r3, #1
 8008124:	d11b      	bne.n	800815e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008134:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008136:	2300      	movs	r3, #0
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	61fb      	str	r3, [r7, #28]
 800814a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	e164      	b.n	8008428 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008162:	2b02      	cmp	r3, #2
 8008164:	d11b      	bne.n	800819e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008174:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008184:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008186:	2300      	movs	r3, #0
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	61bb      	str	r3, [r7, #24]
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	e144      	b.n	8008428 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80081b4:	e138      	b.n	8008428 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	f200 80f1 	bhi.w	80083a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d123      	bne.n	8008210 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fc1b 	bl	8008a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e139      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691a      	ldr	r2, [r3, #16]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	b2d2      	uxtb	r2, r2
 80081e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081f8:	3b01      	subs	r3, #1
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008204:	b29b      	uxth	r3, r3
 8008206:	3b01      	subs	r3, #1
 8008208:	b29a      	uxth	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800820e:	e10b      	b.n	8008428 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008214:	2b02      	cmp	r3, #2
 8008216:	d14e      	bne.n	80082b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800821e:	2200      	movs	r2, #0
 8008220:	4906      	ldr	r1, [pc, #24]	; (800823c <HAL_I2C_Mem_Read+0x22c>)
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 fa98 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d008      	beq.n	8008240 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e10e      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
 8008232:	bf00      	nop
 8008234:	00100002 	.word	0x00100002
 8008238:	ffff0000 	.word	0xffff0000
 800823c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800824e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826c:	3b01      	subs	r3, #1
 800826e:	b29a      	uxth	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008278:	b29b      	uxth	r3, r3
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	b2d2      	uxtb	r2, r2
 800828e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082b4:	e0b8      	b.n	8008428 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082bc:	2200      	movs	r2, #0
 80082be:	4966      	ldr	r1, [pc, #408]	; (8008458 <HAL_I2C_Mem_Read+0x448>)
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fa49 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e0bf      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082fc:	3b01      	subs	r3, #1
 80082fe:	b29a      	uxth	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	2200      	movs	r2, #0
 800831a:	494f      	ldr	r1, [pc, #316]	; (8008458 <HAL_I2C_Mem_Read+0x448>)
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 fa1b 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e091      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800833a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691a      	ldr	r2, [r3, #16]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008358:	3b01      	subs	r3, #1
 800835a:	b29a      	uxth	r2, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008364:	b29b      	uxth	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083a0:	e042      	b.n	8008428 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fb2e 	bl	8008a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e04c      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691a      	ldr	r2, [r3, #16]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	1c5a      	adds	r2, r3, #1
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083de:	b29b      	uxth	r3, r3
 80083e0:	3b01      	subs	r3, #1
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d118      	bne.n	8008428 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841e:	b29b      	uxth	r3, r3
 8008420:	3b01      	subs	r3, #1
 8008422:	b29a      	uxth	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842c:	2b00      	cmp	r3, #0
 800842e:	f47f aec2 	bne.w	80081b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	e000      	b.n	8008450 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800844e:	2302      	movs	r3, #2
  }
}
 8008450:	4618      	mov	r0, r3
 8008452:	3728      	adds	r7, #40	; 0x28
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	00010004 	.word	0x00010004

0800845c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	461a      	mov	r2, r3
 800846a:	4603      	mov	r3, r0
 800846c:	817b      	strh	r3, [r7, #10]
 800846e:	460b      	mov	r3, r1
 8008470:	813b      	strh	r3, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	2200      	movs	r2, #0
 800848e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f960 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084ac:	d103      	bne.n	80084b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e05f      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	492d      	ldr	r1, [pc, #180]	; (8008584 <I2C_RequestMemoryWrite+0x128>)
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f998 	bl	8008806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e04c      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f8:	6a39      	ldr	r1, [r7, #32]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 fa02 	bl	8008904 <I2C_WaitOnTXEFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	2b04      	cmp	r3, #4
 800850c:	d107      	bne.n	800851e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800851c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e02b      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d105      	bne.n	8008534 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008528:	893b      	ldrh	r3, [r7, #8]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	611a      	str	r2, [r3, #16]
 8008532:	e021      	b.n	8008578 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	b2da      	uxtb	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008544:	6a39      	ldr	r1, [r7, #32]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 f9dc 	bl	8008904 <I2C_WaitOnTXEFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00d      	beq.n	800856e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	2b04      	cmp	r3, #4
 8008558:	d107      	bne.n	800856a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e005      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800856e:	893b      	ldrh	r3, [r7, #8]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	00010002 	.word	0x00010002

08008588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	4608      	mov	r0, r1
 8008592:	4611      	mov	r1, r2
 8008594:	461a      	mov	r2, r3
 8008596:	4603      	mov	r3, r0
 8008598:	817b      	strh	r3, [r7, #10]
 800859a:	460b      	mov	r3, r1
 800859c:	813b      	strh	r3, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f8c2 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e8:	d103      	bne.n	80085f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e0aa      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085f6:	897b      	ldrh	r3, [r7, #10]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	461a      	mov	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	4952      	ldr	r1, [pc, #328]	; (8008754 <I2C_RequestMemoryRead+0x1cc>)
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 f8fa 	bl	8008806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e097      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008634:	6a39      	ldr	r1, [r7, #32]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f964 	bl	8008904 <I2C_WaitOnTXEFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	2b04      	cmp	r3, #4
 8008648:	d107      	bne.n	800865a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e076      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d105      	bne.n	8008670 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008664:	893b      	ldrh	r3, [r7, #8]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	611a      	str	r2, [r3, #16]
 800866e:	e021      	b.n	80086b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008670:	893b      	ldrh	r3, [r7, #8]
 8008672:	0a1b      	lsrs	r3, r3, #8
 8008674:	b29b      	uxth	r3, r3
 8008676:	b2da      	uxtb	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800867e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008680:	6a39      	ldr	r1, [r7, #32]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f93e 	bl	8008904 <I2C_WaitOnTXEFlagUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	2b04      	cmp	r3, #4
 8008694:	d107      	bne.n	80086a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e050      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086aa:	893b      	ldrh	r3, [r7, #8]
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b6:	6a39      	ldr	r1, [r7, #32]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f923 	bl	8008904 <I2C_WaitOnTXEFlagUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00d      	beq.n	80086e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d107      	bne.n	80086dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e035      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f82b 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00d      	beq.n	8008724 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008716:	d103      	bne.n	8008720 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800871e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e013      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008724:	897b      	ldrh	r3, [r7, #10]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f043 0301 	orr.w	r3, r3, #1
 800872c:	b2da      	uxtb	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	6a3a      	ldr	r2, [r7, #32]
 8008738:	4906      	ldr	r1, [pc, #24]	; (8008754 <I2C_RequestMemoryRead+0x1cc>)
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f863 	bl	8008806 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	00010002 	.word	0x00010002

08008758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008768:	e025      	b.n	80087b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008770:	d021      	beq.n	80087b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008772:	f7fd fed1 	bl	8006518 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d302      	bcc.n	8008788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d116      	bne.n	80087b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2220      	movs	r2, #32
 8008792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	f043 0220 	orr.w	r2, r3, #32
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e023      	b.n	80087fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	0c1b      	lsrs	r3, r3, #16
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d10d      	bne.n	80087dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	43da      	mvns	r2, r3
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	4013      	ands	r3, r2
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	bf0c      	ite	eq
 80087d2:	2301      	moveq	r3, #1
 80087d4:	2300      	movne	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	461a      	mov	r2, r3
 80087da:	e00c      	b.n	80087f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	43da      	mvns	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4013      	ands	r3, r2
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	bf0c      	ite	eq
 80087ee:	2301      	moveq	r3, #1
 80087f0:	2300      	movne	r3, #0
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	79fb      	ldrb	r3, [r7, #7]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d0b6      	beq.n	800876a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
 8008812:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008814:	e051      	b.n	80088ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008824:	d123      	bne.n	800886e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008834:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800883e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2200      	movs	r2, #0
 8008844:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2220      	movs	r2, #32
 800884a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	f043 0204 	orr.w	r2, r3, #4
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e046      	b.n	80088fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008874:	d021      	beq.n	80088ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008876:	f7fd fe4f 	bl	8006518 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d302      	bcc.n	800888c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d116      	bne.n	80088ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f043 0220 	orr.w	r2, r3, #32
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e020      	b.n	80088fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	0c1b      	lsrs	r3, r3, #16
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d10c      	bne.n	80088de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	43da      	mvns	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4013      	ands	r3, r2
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf14      	ite	ne
 80088d6:	2301      	movne	r3, #1
 80088d8:	2300      	moveq	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	e00b      	b.n	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	43da      	mvns	r2, r3
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	4013      	ands	r3, r2
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bf14      	ite	ne
 80088f0:	2301      	movne	r3, #1
 80088f2:	2300      	moveq	r3, #0
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d18d      	bne.n	8008816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008910:	e02d      	b.n	800896e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f8ce 	bl	8008ab4 <I2C_IsAcknowledgeFailed>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e02d      	b.n	800897e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d021      	beq.n	800896e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800892a:	f7fd fdf5 	bl	8006518 <HAL_GetTick>
 800892e:	4602      	mov	r2, r0
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	429a      	cmp	r2, r3
 8008938:	d302      	bcc.n	8008940 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d116      	bne.n	800896e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	f043 0220 	orr.w	r2, r3, #32
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e007      	b.n	800897e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008978:	2b80      	cmp	r3, #128	; 0x80
 800897a:	d1ca      	bne.n	8008912 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008992:	e02d      	b.n	80089f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 f88d 	bl	8008ab4 <I2C_IsAcknowledgeFailed>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e02d      	b.n	8008a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d021      	beq.n	80089f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ac:	f7fd fdb4 	bl	8006518 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d302      	bcc.n	80089c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d116      	bne.n	80089f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	f043 0220 	orr.w	r2, r3, #32
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e007      	b.n	8008a00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d1ca      	bne.n	8008994 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a14:	e042      	b.n	8008a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	f003 0310 	and.w	r3, r3, #16
 8008a20:	2b10      	cmp	r3, #16
 8008a22:	d119      	bne.n	8008a58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f06f 0210 	mvn.w	r2, #16
 8008a2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e029      	b.n	8008aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a58:	f7fd fd5e 	bl	8006518 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d302      	bcc.n	8008a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d116      	bne.n	8008a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a88:	f043 0220 	orr.w	r2, r3, #32
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e007      	b.n	8008aac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa6:	2b40      	cmp	r3, #64	; 0x40
 8008aa8:	d1b5      	bne.n	8008a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aca:	d11b      	bne.n	8008b04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008ad4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	f043 0204 	orr.w	r2, r3, #4
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e000      	b.n	8008b06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e264      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d075      	beq.n	8008c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b32:	4ba3      	ldr	r3, [pc, #652]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 030c 	and.w	r3, r3, #12
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d00c      	beq.n	8008b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b3e:	4ba0      	ldr	r3, [pc, #640]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d112      	bne.n	8008b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b4a:	4b9d      	ldr	r3, [pc, #628]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b56:	d10b      	bne.n	8008b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b58:	4b99      	ldr	r3, [pc, #612]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d05b      	beq.n	8008c1c <HAL_RCC_OscConfig+0x108>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d157      	bne.n	8008c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e23f      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b78:	d106      	bne.n	8008b88 <HAL_RCC_OscConfig+0x74>
 8008b7a:	4b91      	ldr	r3, [pc, #580]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a90      	ldr	r2, [pc, #576]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	e01d      	b.n	8008bc4 <HAL_RCC_OscConfig+0xb0>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b90:	d10c      	bne.n	8008bac <HAL_RCC_OscConfig+0x98>
 8008b92:	4b8b      	ldr	r3, [pc, #556]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a8a      	ldr	r2, [pc, #552]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	4b88      	ldr	r3, [pc, #544]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a87      	ldr	r2, [pc, #540]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	e00b      	b.n	8008bc4 <HAL_RCC_OscConfig+0xb0>
 8008bac:	4b84      	ldr	r3, [pc, #528]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a83      	ldr	r2, [pc, #524]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb6:	6013      	str	r3, [r2, #0]
 8008bb8:	4b81      	ldr	r3, [pc, #516]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a80      	ldr	r2, [pc, #512]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d013      	beq.n	8008bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bcc:	f7fd fca4 	bl	8006518 <HAL_GetTick>
 8008bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bd2:	e008      	b.n	8008be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bd4:	f7fd fca0 	bl	8006518 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b64      	cmp	r3, #100	; 0x64
 8008be0:	d901      	bls.n	8008be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008be2:	2303      	movs	r3, #3
 8008be4:	e204      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008be6:	4b76      	ldr	r3, [pc, #472]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0f0      	beq.n	8008bd4 <HAL_RCC_OscConfig+0xc0>
 8008bf2:	e014      	b.n	8008c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bf4:	f7fd fc90 	bl	8006518 <HAL_GetTick>
 8008bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bfa:	e008      	b.n	8008c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bfc:	f7fd fc8c 	bl	8006518 <HAL_GetTick>
 8008c00:	4602      	mov	r2, r0
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	2b64      	cmp	r3, #100	; 0x64
 8008c08:	d901      	bls.n	8008c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e1f0      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c0e:	4b6c      	ldr	r3, [pc, #432]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1f0      	bne.n	8008bfc <HAL_RCC_OscConfig+0xe8>
 8008c1a:	e000      	b.n	8008c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d063      	beq.n	8008cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c2a:	4b65      	ldr	r3, [pc, #404]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f003 030c 	and.w	r3, r3, #12
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c36:	4b62      	ldr	r3, [pc, #392]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c3e:	2b08      	cmp	r3, #8
 8008c40:	d11c      	bne.n	8008c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c42:	4b5f      	ldr	r3, [pc, #380]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d116      	bne.n	8008c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c4e:	4b5c      	ldr	r3, [pc, #368]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_RCC_OscConfig+0x152>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d001      	beq.n	8008c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e1c4      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c66:	4b56      	ldr	r3, [pc, #344]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	00db      	lsls	r3, r3, #3
 8008c74:	4952      	ldr	r1, [pc, #328]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c7a:	e03a      	b.n	8008cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d020      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c84:	4b4f      	ldr	r3, [pc, #316]	; (8008dc4 <HAL_RCC_OscConfig+0x2b0>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8a:	f7fd fc45 	bl	8006518 <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c92:	f7fd fc41 	bl	8006518 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e1a5      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ca4:	4b46      	ldr	r3, [pc, #280]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cb0:	4b43      	ldr	r3, [pc, #268]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4940      	ldr	r1, [pc, #256]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	e015      	b.n	8008cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cc6:	4b3f      	ldr	r3, [pc, #252]	; (8008dc4 <HAL_RCC_OscConfig+0x2b0>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ccc:	f7fd fc24 	bl	8006518 <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cd2:	e008      	b.n	8008ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008cd4:	f7fd fc20 	bl	8006518 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e184      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ce6:	4b36      	ldr	r3, [pc, #216]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f0      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d030      	beq.n	8008d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d016      	beq.n	8008d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d06:	4b30      	ldr	r3, [pc, #192]	; (8008dc8 <HAL_RCC_OscConfig+0x2b4>)
 8008d08:	2201      	movs	r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d0c:	f7fd fc04 	bl	8006518 <HAL_GetTick>
 8008d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d12:	e008      	b.n	8008d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d14:	f7fd fc00 	bl	8006518 <HAL_GetTick>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	1ad3      	subs	r3, r2, r3
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d901      	bls.n	8008d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e164      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d26:	4b26      	ldr	r3, [pc, #152]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0f0      	beq.n	8008d14 <HAL_RCC_OscConfig+0x200>
 8008d32:	e015      	b.n	8008d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d34:	4b24      	ldr	r3, [pc, #144]	; (8008dc8 <HAL_RCC_OscConfig+0x2b4>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d3a:	f7fd fbed 	bl	8006518 <HAL_GetTick>
 8008d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d40:	e008      	b.n	8008d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d42:	f7fd fbe9 	bl	8006518 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d901      	bls.n	8008d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e14d      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d54:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d58:	f003 0302 	and.w	r3, r3, #2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1f0      	bne.n	8008d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 80a0 	beq.w	8008eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10f      	bne.n	8008d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60bb      	str	r3, [r7, #8]
 8008d82:	4b0f      	ldr	r3, [pc, #60]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	4a0e      	ldr	r2, [pc, #56]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d8e:	4b0c      	ldr	r3, [pc, #48]	; (8008dc0 <HAL_RCC_OscConfig+0x2ac>)
 8008d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <HAL_RCC_OscConfig+0x2b8>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d121      	bne.n	8008dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008daa:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <HAL_RCC_OscConfig+0x2b8>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a07      	ldr	r2, [pc, #28]	; (8008dcc <HAL_RCC_OscConfig+0x2b8>)
 8008db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008db6:	f7fd fbaf 	bl	8006518 <HAL_GetTick>
 8008dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dbc:	e011      	b.n	8008de2 <HAL_RCC_OscConfig+0x2ce>
 8008dbe:	bf00      	nop
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	42470000 	.word	0x42470000
 8008dc8:	42470e80 	.word	0x42470e80
 8008dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dd0:	f7fd fba2 	bl	8006518 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e106      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008de2:	4b85      	ldr	r3, [pc, #532]	; (8008ff8 <HAL_RCC_OscConfig+0x4e4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f0      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d106      	bne.n	8008e04 <HAL_RCC_OscConfig+0x2f0>
 8008df6:	4b81      	ldr	r3, [pc, #516]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfa:	4a80      	ldr	r2, [pc, #512]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	6713      	str	r3, [r2, #112]	; 0x70
 8008e02:	e01c      	b.n	8008e3e <HAL_RCC_OscConfig+0x32a>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	2b05      	cmp	r3, #5
 8008e0a:	d10c      	bne.n	8008e26 <HAL_RCC_OscConfig+0x312>
 8008e0c:	4b7b      	ldr	r3, [pc, #492]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e10:	4a7a      	ldr	r2, [pc, #488]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e12:	f043 0304 	orr.w	r3, r3, #4
 8008e16:	6713      	str	r3, [r2, #112]	; 0x70
 8008e18:	4b78      	ldr	r3, [pc, #480]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1c:	4a77      	ldr	r2, [pc, #476]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e1e:	f043 0301 	orr.w	r3, r3, #1
 8008e22:	6713      	str	r3, [r2, #112]	; 0x70
 8008e24:	e00b      	b.n	8008e3e <HAL_RCC_OscConfig+0x32a>
 8008e26:	4b75      	ldr	r3, [pc, #468]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e2a:	4a74      	ldr	r2, [pc, #464]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e2c:	f023 0301 	bic.w	r3, r3, #1
 8008e30:	6713      	str	r3, [r2, #112]	; 0x70
 8008e32:	4b72      	ldr	r3, [pc, #456]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e36:	4a71      	ldr	r2, [pc, #452]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e38:	f023 0304 	bic.w	r3, r3, #4
 8008e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d015      	beq.n	8008e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e46:	f7fd fb67 	bl	8006518 <HAL_GetTick>
 8008e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e4c:	e00a      	b.n	8008e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e4e:	f7fd fb63 	bl	8006518 <HAL_GetTick>
 8008e52:	4602      	mov	r2, r0
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d901      	bls.n	8008e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e0c5      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e64:	4b65      	ldr	r3, [pc, #404]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d0ee      	beq.n	8008e4e <HAL_RCC_OscConfig+0x33a>
 8008e70:	e014      	b.n	8008e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e72:	f7fd fb51 	bl	8006518 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e78:	e00a      	b.n	8008e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e7a:	f7fd fb4d 	bl	8006518 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e0af      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e90:	4b5a      	ldr	r3, [pc, #360]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1ee      	bne.n	8008e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d105      	bne.n	8008eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ea2:	4b56      	ldr	r3, [pc, #344]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	4a55      	ldr	r2, [pc, #340]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 809b 	beq.w	8008fee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008eb8:	4b50      	ldr	r3, [pc, #320]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 030c 	and.w	r3, r3, #12
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d05c      	beq.n	8008f7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d141      	bne.n	8008f50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ecc:	4b4c      	ldr	r3, [pc, #304]	; (8009000 <HAL_RCC_OscConfig+0x4ec>)
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ed2:	f7fd fb21 	bl	8006518 <HAL_GetTick>
 8008ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ed8:	e008      	b.n	8008eec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eda:	f7fd fb1d 	bl	8006518 <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e081      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eec:	4b43      	ldr	r3, [pc, #268]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1f0      	bne.n	8008eda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69da      	ldr	r2, [r3, #28]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a1b      	ldr	r3, [r3, #32]
 8008f00:	431a      	orrs	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f06:	019b      	lsls	r3, r3, #6
 8008f08:	431a      	orrs	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0e:	085b      	lsrs	r3, r3, #1
 8008f10:	3b01      	subs	r3, #1
 8008f12:	041b      	lsls	r3, r3, #16
 8008f14:	431a      	orrs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	061b      	lsls	r3, r3, #24
 8008f1c:	4937      	ldr	r1, [pc, #220]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f22:	4b37      	ldr	r3, [pc, #220]	; (8009000 <HAL_RCC_OscConfig+0x4ec>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f28:	f7fd faf6 	bl	8006518 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f30:	f7fd faf2 	bl	8006518 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e056      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f42:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0f0      	beq.n	8008f30 <HAL_RCC_OscConfig+0x41c>
 8008f4e:	e04e      	b.n	8008fee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f50:	4b2b      	ldr	r3, [pc, #172]	; (8009000 <HAL_RCC_OscConfig+0x4ec>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f56:	f7fd fadf 	bl	8006518 <HAL_GetTick>
 8008f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f5c:	e008      	b.n	8008f70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f5e:	f7fd fadb 	bl	8006518 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d901      	bls.n	8008f70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e03f      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f70:	4b22      	ldr	r3, [pc, #136]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1f0      	bne.n	8008f5e <HAL_RCC_OscConfig+0x44a>
 8008f7c:	e037      	b.n	8008fee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e032      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <HAL_RCC_OscConfig+0x4e8>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d028      	beq.n	8008fea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d121      	bne.n	8008fea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d11a      	bne.n	8008fea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008fba:	4013      	ands	r3, r2
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008fc0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d111      	bne.n	8008fea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd0:	085b      	lsrs	r3, r3, #1
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d107      	bne.n	8008fea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d001      	beq.n	8008fee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e000      	b.n	8008ff0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40007000 	.word	0x40007000
 8008ffc:	40023800 	.word	0x40023800
 8009000:	42470060 	.word	0x42470060

08009004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e0cc      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009018:	4b68      	ldr	r3, [pc, #416]	; (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0307 	and.w	r3, r3, #7
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d90c      	bls.n	8009040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009026:	4b65      	ldr	r3, [pc, #404]	; (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800902e:	4b63      	ldr	r3, [pc, #396]	; (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	429a      	cmp	r2, r3
 800903a:	d001      	beq.n	8009040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e0b8      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b00      	cmp	r3, #0
 800904a:	d020      	beq.n	800908e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f003 0304 	and.w	r3, r3, #4
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009058:	4b59      	ldr	r3, [pc, #356]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	4a58      	ldr	r2, [pc, #352]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800905e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0308 	and.w	r3, r3, #8
 800906c:	2b00      	cmp	r3, #0
 800906e:	d005      	beq.n	800907c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009070:	4b53      	ldr	r3, [pc, #332]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	4a52      	ldr	r2, [pc, #328]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800907a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800907c:	4b50      	ldr	r3, [pc, #320]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	494d      	ldr	r1, [pc, #308]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800908a:	4313      	orrs	r3, r2
 800908c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d044      	beq.n	8009124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d107      	bne.n	80090b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090a2:	4b47      	ldr	r3, [pc, #284]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d119      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e07f      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d003      	beq.n	80090c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d107      	bne.n	80090d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090c2:	4b3f      	ldr	r3, [pc, #252]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e06f      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090d2:	4b3b      	ldr	r3, [pc, #236]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e067      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090e2:	4b37      	ldr	r3, [pc, #220]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	f023 0203 	bic.w	r2, r3, #3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4934      	ldr	r1, [pc, #208]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090f4:	f7fd fa10 	bl	8006518 <HAL_GetTick>
 80090f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090fa:	e00a      	b.n	8009112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090fc:	f7fd fa0c 	bl	8006518 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	f241 3288 	movw	r2, #5000	; 0x1388
 800910a:	4293      	cmp	r3, r2
 800910c:	d901      	bls.n	8009112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e04f      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009112:	4b2b      	ldr	r3, [pc, #172]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 020c 	and.w	r2, r3, #12
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	429a      	cmp	r2, r3
 8009122:	d1eb      	bne.n	80090fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009124:	4b25      	ldr	r3, [pc, #148]	; (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	429a      	cmp	r2, r3
 8009130:	d20c      	bcs.n	800914c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009132:	4b22      	ldr	r3, [pc, #136]	; (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800913a:	4b20      	ldr	r3, [pc, #128]	; (80091bc <HAL_RCC_ClockConfig+0x1b8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d001      	beq.n	800914c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e032      	b.n	80091b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d008      	beq.n	800916a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009158:	4b19      	ldr	r3, [pc, #100]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	4916      	ldr	r1, [pc, #88]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	4313      	orrs	r3, r2
 8009168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0308 	and.w	r3, r3, #8
 8009172:	2b00      	cmp	r3, #0
 8009174:	d009      	beq.n	800918a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009176:	4b12      	ldr	r3, [pc, #72]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	490e      	ldr	r1, [pc, #56]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009186:	4313      	orrs	r3, r2
 8009188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800918a:	f000 f821 	bl	80091d0 <HAL_RCC_GetSysClockFreq>
 800918e:	4602      	mov	r2, r0
 8009190:	4b0b      	ldr	r3, [pc, #44]	; (80091c0 <HAL_RCC_ClockConfig+0x1bc>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	091b      	lsrs	r3, r3, #4
 8009196:	f003 030f 	and.w	r3, r3, #15
 800919a:	490a      	ldr	r1, [pc, #40]	; (80091c4 <HAL_RCC_ClockConfig+0x1c0>)
 800919c:	5ccb      	ldrb	r3, [r1, r3]
 800919e:	fa22 f303 	lsr.w	r3, r2, r3
 80091a2:	4a09      	ldr	r2, [pc, #36]	; (80091c8 <HAL_RCC_ClockConfig+0x1c4>)
 80091a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <HAL_RCC_ClockConfig+0x1c8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fd f970 	bl	8006490 <HAL_InitTick>

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	40023c00 	.word	0x40023c00
 80091c0:	40023800 	.word	0x40023800
 80091c4:	08010bb4 	.word	0x08010bb4
 80091c8:	20000038 	.word	0x20000038
 80091cc:	20000074 	.word	0x20000074

080091d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	607b      	str	r3, [r7, #4]
 80091dc:	2300      	movs	r3, #0
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	2300      	movs	r3, #0
 80091e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091e8:	4b67      	ldr	r3, [pc, #412]	; (8009388 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f003 030c 	and.w	r3, r3, #12
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d00d      	beq.n	8009210 <HAL_RCC_GetSysClockFreq+0x40>
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	f200 80bd 	bhi.w	8009374 <HAL_RCC_GetSysClockFreq+0x1a4>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <HAL_RCC_GetSysClockFreq+0x34>
 80091fe:	2b04      	cmp	r3, #4
 8009200:	d003      	beq.n	800920a <HAL_RCC_GetSysClockFreq+0x3a>
 8009202:	e0b7      	b.n	8009374 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009204:	4b61      	ldr	r3, [pc, #388]	; (800938c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009206:	60bb      	str	r3, [r7, #8]
       break;
 8009208:	e0b7      	b.n	800937a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800920a:	4b61      	ldr	r3, [pc, #388]	; (8009390 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800920c:	60bb      	str	r3, [r7, #8]
      break;
 800920e:	e0b4      	b.n	800937a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009210:	4b5d      	ldr	r3, [pc, #372]	; (8009388 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009218:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800921a:	4b5b      	ldr	r3, [pc, #364]	; (8009388 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d04d      	beq.n	80092c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009226:	4b58      	ldr	r3, [pc, #352]	; (8009388 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	099b      	lsrs	r3, r3, #6
 800922c:	461a      	mov	r2, r3
 800922e:	f04f 0300 	mov.w	r3, #0
 8009232:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009236:	f04f 0100 	mov.w	r1, #0
 800923a:	ea02 0800 	and.w	r8, r2, r0
 800923e:	ea03 0901 	and.w	r9, r3, r1
 8009242:	4640      	mov	r0, r8
 8009244:	4649      	mov	r1, r9
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	f04f 0300 	mov.w	r3, #0
 800924e:	014b      	lsls	r3, r1, #5
 8009250:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009254:	0142      	lsls	r2, r0, #5
 8009256:	4610      	mov	r0, r2
 8009258:	4619      	mov	r1, r3
 800925a:	ebb0 0008 	subs.w	r0, r0, r8
 800925e:	eb61 0109 	sbc.w	r1, r1, r9
 8009262:	f04f 0200 	mov.w	r2, #0
 8009266:	f04f 0300 	mov.w	r3, #0
 800926a:	018b      	lsls	r3, r1, #6
 800926c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009270:	0182      	lsls	r2, r0, #6
 8009272:	1a12      	subs	r2, r2, r0
 8009274:	eb63 0301 	sbc.w	r3, r3, r1
 8009278:	f04f 0000 	mov.w	r0, #0
 800927c:	f04f 0100 	mov.w	r1, #0
 8009280:	00d9      	lsls	r1, r3, #3
 8009282:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009286:	00d0      	lsls	r0, r2, #3
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	eb12 0208 	adds.w	r2, r2, r8
 8009290:	eb43 0309 	adc.w	r3, r3, r9
 8009294:	f04f 0000 	mov.w	r0, #0
 8009298:	f04f 0100 	mov.w	r1, #0
 800929c:	0259      	lsls	r1, r3, #9
 800929e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80092a2:	0250      	lsls	r0, r2, #9
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4610      	mov	r0, r2
 80092aa:	4619      	mov	r1, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	f7f7 fcb8 	bl	8000c28 <__aeabi_uldivmod>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4613      	mov	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	e04a      	b.n	8009358 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092c2:	4b31      	ldr	r3, [pc, #196]	; (8009388 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	099b      	lsrs	r3, r3, #6
 80092c8:	461a      	mov	r2, r3
 80092ca:	f04f 0300 	mov.w	r3, #0
 80092ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80092d2:	f04f 0100 	mov.w	r1, #0
 80092d6:	ea02 0400 	and.w	r4, r2, r0
 80092da:	ea03 0501 	and.w	r5, r3, r1
 80092de:	4620      	mov	r0, r4
 80092e0:	4629      	mov	r1, r5
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	014b      	lsls	r3, r1, #5
 80092ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80092f0:	0142      	lsls	r2, r0, #5
 80092f2:	4610      	mov	r0, r2
 80092f4:	4619      	mov	r1, r3
 80092f6:	1b00      	subs	r0, r0, r4
 80092f8:	eb61 0105 	sbc.w	r1, r1, r5
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	018b      	lsls	r3, r1, #6
 8009306:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800930a:	0182      	lsls	r2, r0, #6
 800930c:	1a12      	subs	r2, r2, r0
 800930e:	eb63 0301 	sbc.w	r3, r3, r1
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f04f 0100 	mov.w	r1, #0
 800931a:	00d9      	lsls	r1, r3, #3
 800931c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009320:	00d0      	lsls	r0, r2, #3
 8009322:	4602      	mov	r2, r0
 8009324:	460b      	mov	r3, r1
 8009326:	1912      	adds	r2, r2, r4
 8009328:	eb45 0303 	adc.w	r3, r5, r3
 800932c:	f04f 0000 	mov.w	r0, #0
 8009330:	f04f 0100 	mov.w	r1, #0
 8009334:	0299      	lsls	r1, r3, #10
 8009336:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800933a:	0290      	lsls	r0, r2, #10
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4610      	mov	r0, r2
 8009342:	4619      	mov	r1, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	461a      	mov	r2, r3
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	f7f7 fc6c 	bl	8000c28 <__aeabi_uldivmod>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4613      	mov	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009358:	4b0b      	ldr	r3, [pc, #44]	; (8009388 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	0c1b      	lsrs	r3, r3, #16
 800935e:	f003 0303 	and.w	r3, r3, #3
 8009362:	3301      	adds	r3, #1
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009370:	60bb      	str	r3, [r7, #8]
      break;
 8009372:	e002      	b.n	800937a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009376:	60bb      	str	r3, [r7, #8]
      break;
 8009378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800937a:	68bb      	ldr	r3, [r7, #8]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009386:	bf00      	nop
 8009388:	40023800 	.word	0x40023800
 800938c:	00f42400 	.word	0x00f42400
 8009390:	007a1200 	.word	0x007a1200

08009394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009394:	b480      	push	{r7}
 8009396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009398:	4b03      	ldr	r3, [pc, #12]	; (80093a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800939a:	681b      	ldr	r3, [r3, #0]
}
 800939c:	4618      	mov	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	20000038 	.word	0x20000038

080093ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093b0:	f7ff fff0 	bl	8009394 <HAL_RCC_GetHCLKFreq>
 80093b4:	4602      	mov	r2, r0
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	0a9b      	lsrs	r3, r3, #10
 80093bc:	f003 0307 	and.w	r3, r3, #7
 80093c0:	4903      	ldr	r1, [pc, #12]	; (80093d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093c2:	5ccb      	ldrb	r3, [r1, r3]
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	40023800 	.word	0x40023800
 80093d0:	08010bc4 	.word	0x08010bc4

080093d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80093d8:	f7ff ffdc 	bl	8009394 <HAL_RCC_GetHCLKFreq>
 80093dc:	4602      	mov	r2, r0
 80093de:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	0b5b      	lsrs	r3, r3, #13
 80093e4:	f003 0307 	and.w	r3, r3, #7
 80093e8:	4903      	ldr	r1, [pc, #12]	; (80093f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093ea:	5ccb      	ldrb	r3, [r1, r3]
 80093ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	40023800 	.word	0x40023800
 80093f8:	08010bc4 	.word	0x08010bc4

080093fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e07b      	b.n	8009506 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	2b00      	cmp	r3, #0
 8009414:	d108      	bne.n	8009428 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800941e:	d009      	beq.n	8009434 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	61da      	str	r2, [r3, #28]
 8009426:	e005      	b.n	8009434 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fb fbc4 	bl	8004bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800946a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800947c:	431a      	orrs	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	431a      	orrs	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b8:	ea42 0103 	orr.w	r1, r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	430a      	orrs	r2, r1
 80094ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	0c1b      	lsrs	r3, r3, #16
 80094d2:	f003 0104 	and.w	r1, r3, #4
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	f003 0210 	and.w	r2, r3, #16
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	69da      	ldr	r2, [r3, #28]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b088      	sub	sp, #32
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	603b      	str	r3, [r7, #0]
 800951a:	4613      	mov	r3, r2
 800951c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009528:	2b01      	cmp	r3, #1
 800952a:	d101      	bne.n	8009530 <HAL_SPI_Transmit+0x22>
 800952c:	2302      	movs	r3, #2
 800952e:	e126      	b.n	800977e <HAL_SPI_Transmit+0x270>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009538:	f7fc ffee 	bl	8006518 <HAL_GetTick>
 800953c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b01      	cmp	r3, #1
 800954c:	d002      	beq.n	8009554 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800954e:	2302      	movs	r3, #2
 8009550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009552:	e10b      	b.n	800976c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_SPI_Transmit+0x52>
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009564:	e102      	b.n	800976c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2203      	movs	r2, #3
 800956a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	88fa      	ldrh	r2, [r7, #6]
 800957e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	88fa      	ldrh	r2, [r7, #6]
 8009584:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ac:	d10f      	bne.n	80095ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b40      	cmp	r3, #64	; 0x40
 80095da:	d007      	beq.n	80095ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095f4:	d14b      	bne.n	800968e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d002      	beq.n	8009604 <HAL_SPI_Transmit+0xf6>
 80095fe:	8afb      	ldrh	r3, [r7, #22]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d13e      	bne.n	8009682 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009608:	881a      	ldrh	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009614:	1c9a      	adds	r2, r3, #2
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800961e:	b29b      	uxth	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009628:	e02b      	b.n	8009682 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b02      	cmp	r3, #2
 8009636:	d112      	bne.n	800965e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963c:	881a      	ldrh	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	1c9a      	adds	r2, r3, #2
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b01      	subs	r3, #1
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	86da      	strh	r2, [r3, #54]	; 0x36
 800965c:	e011      	b.n	8009682 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800965e:	f7fc ff5b 	bl	8006518 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d803      	bhi.n	8009676 <HAL_SPI_Transmit+0x168>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009674:	d102      	bne.n	800967c <HAL_SPI_Transmit+0x16e>
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800967c:	2303      	movs	r3, #3
 800967e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009680:	e074      	b.n	800976c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009686:	b29b      	uxth	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1ce      	bne.n	800962a <HAL_SPI_Transmit+0x11c>
 800968c:	e04c      	b.n	8009728 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d002      	beq.n	800969c <HAL_SPI_Transmit+0x18e>
 8009696:	8afb      	ldrh	r3, [r7, #22]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d140      	bne.n	800971e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	330c      	adds	r3, #12
 80096a6:	7812      	ldrb	r2, [r2, #0]
 80096a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	3b01      	subs	r3, #1
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80096c2:	e02c      	b.n	800971e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f003 0302 	and.w	r3, r3, #2
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d113      	bne.n	80096fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	330c      	adds	r3, #12
 80096dc:	7812      	ldrb	r2, [r2, #0]
 80096de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80096f8:	e011      	b.n	800971e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096fa:	f7fc ff0d 	bl	8006518 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	429a      	cmp	r2, r3
 8009708:	d803      	bhi.n	8009712 <HAL_SPI_Transmit+0x204>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009710:	d102      	bne.n	8009718 <HAL_SPI_Transmit+0x20a>
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d102      	bne.n	800971e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800971c:	e026      	b.n	800976c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009722:	b29b      	uxth	r3, r3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1cd      	bne.n	80096c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 fbcb 	bl	8009ec8 <SPI_EndRxTxTransaction>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d002      	beq.n	800973e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2220      	movs	r2, #32
 800973c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10a      	bne.n	800975c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009746:	2300      	movs	r3, #0
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	77fb      	strb	r3, [r7, #31]
 8009768:	e000      	b.n	800976c <HAL_SPI_Transmit+0x25e>
  }

error:
 800976a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800977c:	7ffb      	ldrb	r3, [r7, #31]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b088      	sub	sp, #32
 800978a:	af02      	add	r7, sp, #8
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	603b      	str	r3, [r7, #0]
 8009792:	4613      	mov	r3, r2
 8009794:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097a2:	d112      	bne.n	80097ca <HAL_SPI_Receive+0x44>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10e      	bne.n	80097ca <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2204      	movs	r2, #4
 80097b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097b4:	88fa      	ldrh	r2, [r7, #6]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	4613      	mov	r3, r2
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	68b9      	ldr	r1, [r7, #8]
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 f8f1 	bl	80099a8 <HAL_SPI_TransmitReceive>
 80097c6:	4603      	mov	r3, r0
 80097c8:	e0ea      	b.n	80099a0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d101      	bne.n	80097d8 <HAL_SPI_Receive+0x52>
 80097d4:	2302      	movs	r3, #2
 80097d6:	e0e3      	b.n	80099a0 <HAL_SPI_Receive+0x21a>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097e0:	f7fc fe9a 	bl	8006518 <HAL_GetTick>
 80097e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d002      	beq.n	80097f8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80097f2:	2302      	movs	r3, #2
 80097f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097f6:	e0ca      	b.n	800998e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <HAL_SPI_Receive+0x7e>
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d102      	bne.n	800980a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009808:	e0c1      	b.n	800998e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2204      	movs	r2, #4
 800980e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68ba      	ldr	r2, [r7, #8]
 800981c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	88fa      	ldrh	r2, [r7, #6]
 8009822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	88fa      	ldrh	r2, [r7, #6]
 8009828:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009850:	d10f      	bne.n	8009872 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009870:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987c:	2b40      	cmp	r3, #64	; 0x40
 800987e:	d007      	beq.n	8009890 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800988e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d162      	bne.n	800995e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009898:	e02e      	b.n	80098f8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d115      	bne.n	80098d4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f103 020c 	add.w	r2, r3, #12
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b4:	7812      	ldrb	r2, [r2, #0]
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80098d2:	e011      	b.n	80098f8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098d4:	f7fc fe20 	bl	8006518 <HAL_GetTick>
 80098d8:	4602      	mov	r2, r0
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d803      	bhi.n	80098ec <HAL_SPI_Receive+0x166>
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	d102      	bne.n	80098f2 <HAL_SPI_Receive+0x16c>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d102      	bne.n	80098f8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80098f6:	e04a      	b.n	800998e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1cb      	bne.n	800989a <HAL_SPI_Receive+0x114>
 8009902:	e031      	b.n	8009968 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f003 0301 	and.w	r3, r3, #1
 800990e:	2b01      	cmp	r3, #1
 8009910:	d113      	bne.n	800993a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991c:	b292      	uxth	r2, r2
 800991e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	1c9a      	adds	r2, r3, #2
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800992e:	b29b      	uxth	r3, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	b29a      	uxth	r2, r3
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009938:	e011      	b.n	800995e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800993a:	f7fc fded 	bl	8006518 <HAL_GetTick>
 800993e:	4602      	mov	r2, r0
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	1ad3      	subs	r3, r2, r3
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	429a      	cmp	r2, r3
 8009948:	d803      	bhi.n	8009952 <HAL_SPI_Receive+0x1cc>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009950:	d102      	bne.n	8009958 <HAL_SPI_Receive+0x1d2>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d102      	bne.n	800995e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800995c:	e017      	b.n	800998e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1cd      	bne.n	8009904 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 fa45 	bl	8009dfc <SPI_EndRxTransaction>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2220      	movs	r2, #32
 800997c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	75fb      	strb	r3, [r7, #23]
 800998a:	e000      	b.n	800998e <HAL_SPI_Receive+0x208>
  }

error :
 800998c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800999e:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08c      	sub	sp, #48	; 0x30
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099b6:	2301      	movs	r3, #1
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099ba:	2300      	movs	r3, #0
 80099bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d101      	bne.n	80099ce <HAL_SPI_TransmitReceive+0x26>
 80099ca:	2302      	movs	r3, #2
 80099cc:	e18a      	b.n	8009ce4 <HAL_SPI_TransmitReceive+0x33c>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099d6:	f7fc fd9f 	bl	8006518 <HAL_GetTick>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80099e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80099ec:	887b      	ldrh	r3, [r7, #2]
 80099ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d00f      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x70>
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099fe:	d107      	bne.n	8009a10 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d103      	bne.n	8009a10 <HAL_SPI_TransmitReceive+0x68>
 8009a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d003      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a10:	2302      	movs	r3, #2
 8009a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a16:	e15b      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <HAL_SPI_TransmitReceive+0x82>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <HAL_SPI_TransmitReceive+0x82>
 8009a24:	887b      	ldrh	r3, [r7, #2]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d103      	bne.n	8009a32 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a30:	e14e      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d003      	beq.n	8009a46 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2205      	movs	r2, #5
 8009a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	887a      	ldrh	r2, [r7, #2]
 8009a56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	887a      	ldrh	r2, [r7, #2]
 8009a5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	887a      	ldrh	r2, [r7, #2]
 8009a68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	887a      	ldrh	r2, [r7, #2]
 8009a6e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a86:	2b40      	cmp	r3, #64	; 0x40
 8009a88:	d007      	beq.n	8009a9a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aa2:	d178      	bne.n	8009b96 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <HAL_SPI_TransmitReceive+0x10a>
 8009aac:	8b7b      	ldrh	r3, [r7, #26]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d166      	bne.n	8009b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab6:	881a      	ldrh	r2, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac2:	1c9a      	adds	r2, r3, #2
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ad6:	e053      	b.n	8009b80 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d11b      	bne.n	8009b1e <HAL_SPI_TransmitReceive+0x176>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d016      	beq.n	8009b1e <HAL_SPI_TransmitReceive+0x176>
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d113      	bne.n	8009b1e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afa:	881a      	ldrh	r2, [r3, #0]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	1c9a      	adds	r2, r3, #2
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d119      	bne.n	8009b60 <HAL_SPI_TransmitReceive+0x1b8>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d014      	beq.n	8009b60 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	b292      	uxth	r2, r2
 8009b42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b48:	1c9a      	adds	r2, r3, #2
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	3b01      	subs	r3, #1
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b60:	f7fc fcda 	bl	8006518 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d807      	bhi.n	8009b80 <HAL_SPI_TransmitReceive+0x1d8>
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b76:	d003      	beq.n	8009b80 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009b7e:	e0a7      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d1a6      	bne.n	8009ad8 <HAL_SPI_TransmitReceive+0x130>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d1a1      	bne.n	8009ad8 <HAL_SPI_TransmitReceive+0x130>
 8009b94:	e07c      	b.n	8009c90 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d002      	beq.n	8009ba4 <HAL_SPI_TransmitReceive+0x1fc>
 8009b9e:	8b7b      	ldrh	r3, [r7, #26]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d16b      	bne.n	8009c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	330c      	adds	r3, #12
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bca:	e057      	b.n	8009c7c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0302 	and.w	r3, r3, #2
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d11c      	bne.n	8009c14 <HAL_SPI_TransmitReceive+0x26c>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d017      	beq.n	8009c14 <HAL_SPI_TransmitReceive+0x26c>
 8009be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d114      	bne.n	8009c14 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	330c      	adds	r3, #12
 8009bf4:	7812      	ldrb	r2, [r2, #0]
 8009bf6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	1c5a      	adds	r2, r3, #1
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c10:	2300      	movs	r3, #0
 8009c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d119      	bne.n	8009c56 <HAL_SPI_TransmitReceive+0x2ae>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d014      	beq.n	8009c56 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68da      	ldr	r2, [r3, #12]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c36:	b2d2      	uxtb	r2, r2
 8009c38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c52:	2301      	movs	r3, #1
 8009c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c56:	f7fc fc5f 	bl	8006518 <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d803      	bhi.n	8009c6e <HAL_SPI_TransmitReceive+0x2c6>
 8009c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6c:	d102      	bne.n	8009c74 <HAL_SPI_TransmitReceive+0x2cc>
 8009c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d103      	bne.n	8009c7c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c7a:	e029      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1a2      	bne.n	8009bcc <HAL_SPI_TransmitReceive+0x224>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d19d      	bne.n	8009bcc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 f917 	bl	8009ec8 <SPI_EndRxTxTransaction>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d006      	beq.n	8009cae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2220      	movs	r2, #32
 8009caa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009cac:	e010      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	617b      	str	r3, [r7, #20]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	617b      	str	r3, [r7, #20]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	e000      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009cce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ce0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3730      	adds	r7, #48	; 0x30
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	4613      	mov	r3, r2
 8009cfa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009cfc:	f7fc fc0c 	bl	8006518 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	4413      	add	r3, r2
 8009d0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d0c:	f7fc fc04 	bl	8006518 <HAL_GetTick>
 8009d10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d12:	4b39      	ldr	r3, [pc, #228]	; (8009df8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	015b      	lsls	r3, r3, #5
 8009d18:	0d1b      	lsrs	r3, r3, #20
 8009d1a:	69fa      	ldr	r2, [r7, #28]
 8009d1c:	fb02 f303 	mul.w	r3, r2, r3
 8009d20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d22:	e054      	b.n	8009dce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2a:	d050      	beq.n	8009dce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d2c:	f7fc fbf4 	bl	8006518 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d902      	bls.n	8009d42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d13d      	bne.n	8009dbe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d5a:	d111      	bne.n	8009d80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d64:	d004      	beq.n	8009d70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6e:	d107      	bne.n	8009d80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d88:	d10f      	bne.n	8009daa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009da8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e017      	b.n	8009dee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d101      	bne.n	8009dc8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	689a      	ldr	r2, [r3, #8]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	4013      	ands	r3, r2
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	bf0c      	ite	eq
 8009dde:	2301      	moveq	r3, #1
 8009de0:	2300      	movne	r3, #0
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	79fb      	ldrb	r3, [r7, #7]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d19b      	bne.n	8009d24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	20000038 	.word	0x20000038

08009dfc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af02      	add	r7, sp, #8
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e10:	d111      	bne.n	8009e36 <SPI_EndRxTransaction+0x3a>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e1a:	d004      	beq.n	8009e26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e24:	d107      	bne.n	8009e36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e3e:	d12a      	bne.n	8009e96 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e48:	d012      	beq.n	8009e70 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	2200      	movs	r2, #0
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f7ff ff49 	bl	8009cec <SPI_WaitFlagStateUntilTimeout>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d02d      	beq.n	8009ebc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e64:	f043 0220 	orr.w	r2, r3, #32
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e026      	b.n	8009ebe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2200      	movs	r2, #0
 8009e78:	2101      	movs	r1, #1
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7ff ff36 	bl	8009cec <SPI_WaitFlagStateUntilTimeout>
 8009e80:	4603      	mov	r3, r0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01a      	beq.n	8009ebc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f043 0220 	orr.w	r2, r3, #32
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e013      	b.n	8009ebe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	68f8      	ldr	r0, [r7, #12]
 8009ea2:	f7ff ff23 	bl	8009cec <SPI_WaitFlagStateUntilTimeout>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d007      	beq.n	8009ebc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eb0:	f043 0220 	orr.w	r2, r3, #32
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e000      	b.n	8009ebe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
	...

08009ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af02      	add	r7, sp, #8
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ed4:	4b1b      	ldr	r3, [pc, #108]	; (8009f44 <SPI_EndRxTxTransaction+0x7c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a1b      	ldr	r2, [pc, #108]	; (8009f48 <SPI_EndRxTxTransaction+0x80>)
 8009eda:	fba2 2303 	umull	r2, r3, r2, r3
 8009ede:	0d5b      	lsrs	r3, r3, #21
 8009ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ee4:	fb02 f303 	mul.w	r3, r2, r3
 8009ee8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ef2:	d112      	bne.n	8009f1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2200      	movs	r2, #0
 8009efc:	2180      	movs	r1, #128	; 0x80
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fef4 	bl	8009cec <SPI_WaitFlagStateUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d016      	beq.n	8009f38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0e:	f043 0220 	orr.w	r2, r3, #32
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009f16:	2303      	movs	r3, #3
 8009f18:	e00f      	b.n	8009f3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00a      	beq.n	8009f36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	3b01      	subs	r3, #1
 8009f24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f30:	2b80      	cmp	r3, #128	; 0x80
 8009f32:	d0f2      	beq.n	8009f1a <SPI_EndRxTxTransaction+0x52>
 8009f34:	e000      	b.n	8009f38 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f36:	bf00      	nop
  }

  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	20000038 	.word	0x20000038
 8009f48:	165e9f81 	.word	0x165e9f81

08009f4c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e034      	b.n	8009fcc <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f7f8 f80a 	bl	8001f90 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681a      	ldr	r2, [r3, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3308      	adds	r3, #8
 8009f84:	4619      	mov	r1, r3
 8009f86:	4610      	mov	r0, r2
 8009f88:	f002 f890 	bl	800c0ac <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6818      	ldr	r0, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	461a      	mov	r2, r3
 8009f96:	68b9      	ldr	r1, [r7, #8]
 8009f98:	f002 f8da 	bl	800c150 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6858      	ldr	r0, [r3, #4]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa8:	6879      	ldr	r1, [r7, #4]
 8009faa:	f002 f90f 	bl	800c1cc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	6892      	ldr	r2, [r2, #8]
 8009fb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	6892      	ldr	r2, [r2, #8]
 8009fc2:	f041 0101 	orr.w	r1, r1, #1
 8009fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e041      	b.n	800a06a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d106      	bne.n	800a000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7fb f872 	bl	80050e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3304      	adds	r3, #4
 800a010:	4619      	mov	r1, r3
 800a012:	4610      	mov	r0, r2
 800a014:	f000 fce2 	bl	800a9dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b01      	cmp	r3, #1
 800a086:	d001      	beq.n	800a08c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e046      	b.n	800a11a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a23      	ldr	r2, [pc, #140]	; (800a128 <HAL_TIM_Base_Start+0xb4>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d022      	beq.n	800a0e4 <HAL_TIM_Base_Start+0x70>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a6:	d01d      	beq.n	800a0e4 <HAL_TIM_Base_Start+0x70>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a1f      	ldr	r2, [pc, #124]	; (800a12c <HAL_TIM_Base_Start+0xb8>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d018      	beq.n	800a0e4 <HAL_TIM_Base_Start+0x70>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a1e      	ldr	r2, [pc, #120]	; (800a130 <HAL_TIM_Base_Start+0xbc>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d013      	beq.n	800a0e4 <HAL_TIM_Base_Start+0x70>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a1c      	ldr	r2, [pc, #112]	; (800a134 <HAL_TIM_Base_Start+0xc0>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d00e      	beq.n	800a0e4 <HAL_TIM_Base_Start+0x70>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a1b      	ldr	r2, [pc, #108]	; (800a138 <HAL_TIM_Base_Start+0xc4>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d009      	beq.n	800a0e4 <HAL_TIM_Base_Start+0x70>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a19      	ldr	r2, [pc, #100]	; (800a13c <HAL_TIM_Base_Start+0xc8>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d004      	beq.n	800a0e4 <HAL_TIM_Base_Start+0x70>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a18      	ldr	r2, [pc, #96]	; (800a140 <HAL_TIM_Base_Start+0xcc>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d111      	bne.n	800a108 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f003 0307 	and.w	r3, r3, #7
 800a0ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b06      	cmp	r3, #6
 800a0f4:	d010      	beq.n	800a118 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f042 0201 	orr.w	r2, r2, #1
 800a104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a106:	e007      	b.n	800a118 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0201 	orr.w	r2, r2, #1
 800a116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	40010000 	.word	0x40010000
 800a12c:	40000400 	.word	0x40000400
 800a130:	40000800 	.word	0x40000800
 800a134:	40000c00 	.word	0x40000c00
 800a138:	40010400 	.word	0x40010400
 800a13c:	40014000 	.word	0x40014000
 800a140:	40001800 	.word	0x40001800

0800a144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a152:	b2db      	uxtb	r3, r3
 800a154:	2b01      	cmp	r3, #1
 800a156:	d001      	beq.n	800a15c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e04e      	b.n	800a1fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2202      	movs	r2, #2
 800a160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0201 	orr.w	r2, r2, #1
 800a172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a23      	ldr	r2, [pc, #140]	; (800a208 <HAL_TIM_Base_Start_IT+0xc4>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d022      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0x80>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a186:	d01d      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0x80>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a1f      	ldr	r2, [pc, #124]	; (800a20c <HAL_TIM_Base_Start_IT+0xc8>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d018      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0x80>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a1e      	ldr	r2, [pc, #120]	; (800a210 <HAL_TIM_Base_Start_IT+0xcc>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d013      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0x80>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a1c      	ldr	r2, [pc, #112]	; (800a214 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d00e      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0x80>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a1b      	ldr	r2, [pc, #108]	; (800a218 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d009      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0x80>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a19      	ldr	r2, [pc, #100]	; (800a21c <HAL_TIM_Base_Start_IT+0xd8>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d004      	beq.n	800a1c4 <HAL_TIM_Base_Start_IT+0x80>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a18      	ldr	r2, [pc, #96]	; (800a220 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d111      	bne.n	800a1e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f003 0307 	and.w	r3, r3, #7
 800a1ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2b06      	cmp	r3, #6
 800a1d4:	d010      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f042 0201 	orr.w	r2, r2, #1
 800a1e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e6:	e007      	b.n	800a1f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0201 	orr.w	r2, r2, #1
 800a1f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	40010000 	.word	0x40010000
 800a20c:	40000400 	.word	0x40000400
 800a210:	40000800 	.word	0x40000800
 800a214:	40000c00 	.word	0x40000c00
 800a218:	40010400 	.word	0x40010400
 800a21c:	40014000 	.word	0x40014000
 800a220:	40001800 	.word	0x40001800

0800a224 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e041      	b.n	800a2ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f839 	bl	800a2c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3304      	adds	r3, #4
 800a260:	4619      	mov	r1, r3
 800a262:	4610      	mov	r0, r2
 800a264:	f000 fbba 	bl	800a9dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a2ca:	bf00      	nop
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d109      	bne.n	800a2fc <HAL_TIM_PWM_Start+0x24>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	bf14      	ite	ne
 800a2f4:	2301      	movne	r3, #1
 800a2f6:	2300      	moveq	r3, #0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	e022      	b.n	800a342 <HAL_TIM_PWM_Start+0x6a>
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d109      	bne.n	800a316 <HAL_TIM_PWM_Start+0x3e>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	bf14      	ite	ne
 800a30e:	2301      	movne	r3, #1
 800a310:	2300      	moveq	r3, #0
 800a312:	b2db      	uxtb	r3, r3
 800a314:	e015      	b.n	800a342 <HAL_TIM_PWM_Start+0x6a>
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d109      	bne.n	800a330 <HAL_TIM_PWM_Start+0x58>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b01      	cmp	r3, #1
 800a326:	bf14      	ite	ne
 800a328:	2301      	movne	r3, #1
 800a32a:	2300      	moveq	r3, #0
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	e008      	b.n	800a342 <HAL_TIM_PWM_Start+0x6a>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b01      	cmp	r3, #1
 800a33a:	bf14      	ite	ne
 800a33c:	2301      	movne	r3, #1
 800a33e:	2300      	moveq	r3, #0
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e07c      	b.n	800a444 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d104      	bne.n	800a35a <HAL_TIM_PWM_Start+0x82>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a358:	e013      	b.n	800a382 <HAL_TIM_PWM_Start+0xaa>
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	d104      	bne.n	800a36a <HAL_TIM_PWM_Start+0x92>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a368:	e00b      	b.n	800a382 <HAL_TIM_PWM_Start+0xaa>
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d104      	bne.n	800a37a <HAL_TIM_PWM_Start+0xa2>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a378:	e003      	b.n	800a382 <HAL_TIM_PWM_Start+0xaa>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2202      	movs	r2, #2
 800a37e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2201      	movs	r2, #1
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 fe10 	bl	800afb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a2d      	ldr	r2, [pc, #180]	; (800a44c <HAL_TIM_PWM_Start+0x174>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d004      	beq.n	800a3a4 <HAL_TIM_PWM_Start+0xcc>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a2c      	ldr	r2, [pc, #176]	; (800a450 <HAL_TIM_PWM_Start+0x178>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIM_PWM_Start+0xd0>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <HAL_TIM_PWM_Start+0xd2>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a22      	ldr	r2, [pc, #136]	; (800a44c <HAL_TIM_PWM_Start+0x174>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d022      	beq.n	800a40e <HAL_TIM_PWM_Start+0x136>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d0:	d01d      	beq.n	800a40e <HAL_TIM_PWM_Start+0x136>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a1f      	ldr	r2, [pc, #124]	; (800a454 <HAL_TIM_PWM_Start+0x17c>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d018      	beq.n	800a40e <HAL_TIM_PWM_Start+0x136>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	; (800a458 <HAL_TIM_PWM_Start+0x180>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d013      	beq.n	800a40e <HAL_TIM_PWM_Start+0x136>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a1c      	ldr	r2, [pc, #112]	; (800a45c <HAL_TIM_PWM_Start+0x184>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00e      	beq.n	800a40e <HAL_TIM_PWM_Start+0x136>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a16      	ldr	r2, [pc, #88]	; (800a450 <HAL_TIM_PWM_Start+0x178>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d009      	beq.n	800a40e <HAL_TIM_PWM_Start+0x136>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a18      	ldr	r2, [pc, #96]	; (800a460 <HAL_TIM_PWM_Start+0x188>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d004      	beq.n	800a40e <HAL_TIM_PWM_Start+0x136>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a16      	ldr	r2, [pc, #88]	; (800a464 <HAL_TIM_PWM_Start+0x18c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d111      	bne.n	800a432 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b06      	cmp	r3, #6
 800a41e:	d010      	beq.n	800a442 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f042 0201 	orr.w	r2, r2, #1
 800a42e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a430:	e007      	b.n	800a442 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0201 	orr.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40010000 	.word	0x40010000
 800a450:	40010400 	.word	0x40010400
 800a454:	40000400 	.word	0x40000400
 800a458:	40000800 	.word	0x40000800
 800a45c:	40000c00 	.word	0x40000c00
 800a460:	40014000 	.word	0x40014000
 800a464:	40001800 	.word	0x40001800

0800a468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	f003 0302 	and.w	r3, r3, #2
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d122      	bne.n	800a4c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d11b      	bne.n	800a4c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f06f 0202 	mvn.w	r2, #2
 800a494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	f003 0303 	and.w	r3, r3, #3
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 fa77 	bl	800a99e <HAL_TIM_IC_CaptureCallback>
 800a4b0:	e005      	b.n	800a4be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa69 	bl	800a98a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fa7a 	bl	800a9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	f003 0304 	and.w	r3, r3, #4
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d122      	bne.n	800a518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b04      	cmp	r3, #4
 800a4de:	d11b      	bne.n	800a518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f06f 0204 	mvn.w	r2, #4
 800a4e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2202      	movs	r2, #2
 800a4ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fa4d 	bl	800a99e <HAL_TIM_IC_CaptureCallback>
 800a504:	e005      	b.n	800a512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa3f 	bl	800a98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fa50 	bl	800a9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b08      	cmp	r3, #8
 800a524:	d122      	bne.n	800a56c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b08      	cmp	r3, #8
 800a532:	d11b      	bne.n	800a56c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f06f 0208 	mvn.w	r2, #8
 800a53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2204      	movs	r2, #4
 800a542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fa23 	bl	800a99e <HAL_TIM_IC_CaptureCallback>
 800a558:	e005      	b.n	800a566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa15 	bl	800a98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fa26 	bl	800a9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	f003 0310 	and.w	r3, r3, #16
 800a576:	2b10      	cmp	r3, #16
 800a578:	d122      	bne.n	800a5c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b10      	cmp	r3, #16
 800a586:	d11b      	bne.n	800a5c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f06f 0210 	mvn.w	r2, #16
 800a590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2208      	movs	r2, #8
 800a596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f9f9 	bl	800a99e <HAL_TIM_IC_CaptureCallback>
 800a5ac:	e005      	b.n	800a5ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f9eb 	bl	800a98a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 f9fc 	bl	800a9b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d10e      	bne.n	800a5ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d107      	bne.n	800a5ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f06f 0201 	mvn.w	r2, #1
 800a5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7fa f9f6 	bl	80049d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f6:	2b80      	cmp	r3, #128	; 0x80
 800a5f8:	d10e      	bne.n	800a618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a604:	2b80      	cmp	r3, #128	; 0x80
 800a606:	d107      	bne.n	800a618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fd78 	bl	800b108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a622:	2b40      	cmp	r3, #64	; 0x40
 800a624:	d10e      	bne.n	800a644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a630:	2b40      	cmp	r3, #64	; 0x40
 800a632:	d107      	bne.n	800a644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f9c1 	bl	800a9c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b20      	cmp	r3, #32
 800a650:	d10e      	bne.n	800a670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	f003 0320 	and.w	r3, r3, #32
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d107      	bne.n	800a670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f06f 0220 	mvn.w	r2, #32
 800a668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fd42 	bl	800b0f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b086      	sub	sp, #24
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d101      	bne.n	800a696 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a692:	2302      	movs	r3, #2
 800a694:	e0ae      	b.n	800a7f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b0c      	cmp	r3, #12
 800a6a2:	f200 809f 	bhi.w	800a7e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a6a6:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ac:	0800a6e1 	.word	0x0800a6e1
 800a6b0:	0800a7e5 	.word	0x0800a7e5
 800a6b4:	0800a7e5 	.word	0x0800a7e5
 800a6b8:	0800a7e5 	.word	0x0800a7e5
 800a6bc:	0800a721 	.word	0x0800a721
 800a6c0:	0800a7e5 	.word	0x0800a7e5
 800a6c4:	0800a7e5 	.word	0x0800a7e5
 800a6c8:	0800a7e5 	.word	0x0800a7e5
 800a6cc:	0800a763 	.word	0x0800a763
 800a6d0:	0800a7e5 	.word	0x0800a7e5
 800a6d4:	0800a7e5 	.word	0x0800a7e5
 800a6d8:	0800a7e5 	.word	0x0800a7e5
 800a6dc:	0800a7a3 	.word	0x0800a7a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68b9      	ldr	r1, [r7, #8]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fa18 	bl	800ab1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	699a      	ldr	r2, [r3, #24]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0208 	orr.w	r2, r2, #8
 800a6fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	699a      	ldr	r2, [r3, #24]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 0204 	bic.w	r2, r2, #4
 800a70a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6999      	ldr	r1, [r3, #24]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	691a      	ldr	r2, [r3, #16]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	619a      	str	r2, [r3, #24]
      break;
 800a71e:	e064      	b.n	800a7ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fa68 	bl	800abfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a73a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a74a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6999      	ldr	r1, [r3, #24]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	021a      	lsls	r2, r3, #8
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	430a      	orrs	r2, r1
 800a75e:	619a      	str	r2, [r3, #24]
      break;
 800a760:	e043      	b.n	800a7ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fabd 	bl	800ace8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69da      	ldr	r2, [r3, #28]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0208 	orr.w	r2, r2, #8
 800a77c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	69da      	ldr	r2, [r3, #28]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 0204 	bic.w	r2, r2, #4
 800a78c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69d9      	ldr	r1, [r3, #28]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	61da      	str	r2, [r3, #28]
      break;
 800a7a0:	e023      	b.n	800a7ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fb11 	bl	800add0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69da      	ldr	r2, [r3, #28]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69d9      	ldr	r1, [r3, #28]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	021a      	lsls	r2, r3, #8
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	61da      	str	r2, [r3, #28]
      break;
 800a7e2:	e002      	b.n	800a7ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a810:	2b01      	cmp	r3, #1
 800a812:	d101      	bne.n	800a818 <HAL_TIM_ConfigClockSource+0x1c>
 800a814:	2302      	movs	r3, #2
 800a816:	e0b4      	b.n	800a982 <HAL_TIM_ConfigClockSource+0x186>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2202      	movs	r2, #2
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a83e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a850:	d03e      	beq.n	800a8d0 <HAL_TIM_ConfigClockSource+0xd4>
 800a852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a856:	f200 8087 	bhi.w	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85e:	f000 8086 	beq.w	800a96e <HAL_TIM_ConfigClockSource+0x172>
 800a862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a866:	d87f      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a868:	2b70      	cmp	r3, #112	; 0x70
 800a86a:	d01a      	beq.n	800a8a2 <HAL_TIM_ConfigClockSource+0xa6>
 800a86c:	2b70      	cmp	r3, #112	; 0x70
 800a86e:	d87b      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a870:	2b60      	cmp	r3, #96	; 0x60
 800a872:	d050      	beq.n	800a916 <HAL_TIM_ConfigClockSource+0x11a>
 800a874:	2b60      	cmp	r3, #96	; 0x60
 800a876:	d877      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a878:	2b50      	cmp	r3, #80	; 0x50
 800a87a:	d03c      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0xfa>
 800a87c:	2b50      	cmp	r3, #80	; 0x50
 800a87e:	d873      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a880:	2b40      	cmp	r3, #64	; 0x40
 800a882:	d058      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0x13a>
 800a884:	2b40      	cmp	r3, #64	; 0x40
 800a886:	d86f      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a888:	2b30      	cmp	r3, #48	; 0x30
 800a88a:	d064      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0x15a>
 800a88c:	2b30      	cmp	r3, #48	; 0x30
 800a88e:	d86b      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a890:	2b20      	cmp	r3, #32
 800a892:	d060      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0x15a>
 800a894:	2b20      	cmp	r3, #32
 800a896:	d867      	bhi.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05c      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0x15a>
 800a89c:	2b10      	cmp	r3, #16
 800a89e:	d05a      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0x15a>
 800a8a0:	e062      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	6899      	ldr	r1, [r3, #8]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	f000 fb5d 	bl	800af70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a8c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68ba      	ldr	r2, [r7, #8]
 800a8cc:	609a      	str	r2, [r3, #8]
      break;
 800a8ce:	e04f      	b.n	800a970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	6899      	ldr	r1, [r3, #8]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f000 fb46 	bl	800af70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8f2:	609a      	str	r2, [r3, #8]
      break;
 800a8f4:	e03c      	b.n	800a970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	6859      	ldr	r1, [r3, #4]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	461a      	mov	r2, r3
 800a904:	f000 faba 	bl	800ae7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2150      	movs	r1, #80	; 0x50
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fb13 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a914:	e02c      	b.n	800a970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	6859      	ldr	r1, [r3, #4]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	461a      	mov	r2, r3
 800a924:	f000 fad9 	bl	800aeda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2160      	movs	r1, #96	; 0x60
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 fb03 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a934:	e01c      	b.n	800a970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6859      	ldr	r1, [r3, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	461a      	mov	r2, r3
 800a944:	f000 fa9a 	bl	800ae7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2140      	movs	r1, #64	; 0x40
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 faf3 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a954:	e00c      	b.n	800a970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4619      	mov	r1, r3
 800a960:	4610      	mov	r0, r2
 800a962:	f000 faea 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a966:	e003      	b.n	800a970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	73fb      	strb	r3, [r7, #15]
      break;
 800a96c:	e000      	b.n	800a970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a96e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a980:	7bfb      	ldrb	r3, [r7, #15]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a992:	bf00      	nop
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b083      	sub	sp, #12
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9a6:	bf00      	nop
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b083      	sub	sp, #12
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
	...

0800a9dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a40      	ldr	r2, [pc, #256]	; (800aaf0 <TIM_Base_SetConfig+0x114>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d013      	beq.n	800aa1c <TIM_Base_SetConfig+0x40>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fa:	d00f      	beq.n	800aa1c <TIM_Base_SetConfig+0x40>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a3d      	ldr	r2, [pc, #244]	; (800aaf4 <TIM_Base_SetConfig+0x118>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00b      	beq.n	800aa1c <TIM_Base_SetConfig+0x40>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a3c      	ldr	r2, [pc, #240]	; (800aaf8 <TIM_Base_SetConfig+0x11c>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d007      	beq.n	800aa1c <TIM_Base_SetConfig+0x40>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a3b      	ldr	r2, [pc, #236]	; (800aafc <TIM_Base_SetConfig+0x120>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d003      	beq.n	800aa1c <TIM_Base_SetConfig+0x40>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a3a      	ldr	r2, [pc, #232]	; (800ab00 <TIM_Base_SetConfig+0x124>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d108      	bne.n	800aa2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a2f      	ldr	r2, [pc, #188]	; (800aaf0 <TIM_Base_SetConfig+0x114>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d02b      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa3c:	d027      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a2c      	ldr	r2, [pc, #176]	; (800aaf4 <TIM_Base_SetConfig+0x118>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d023      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a2b      	ldr	r2, [pc, #172]	; (800aaf8 <TIM_Base_SetConfig+0x11c>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d01f      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a2a      	ldr	r2, [pc, #168]	; (800aafc <TIM_Base_SetConfig+0x120>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d01b      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a29      	ldr	r2, [pc, #164]	; (800ab00 <TIM_Base_SetConfig+0x124>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d017      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a28      	ldr	r2, [pc, #160]	; (800ab04 <TIM_Base_SetConfig+0x128>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d013      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a27      	ldr	r2, [pc, #156]	; (800ab08 <TIM_Base_SetConfig+0x12c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d00f      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a26      	ldr	r2, [pc, #152]	; (800ab0c <TIM_Base_SetConfig+0x130>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d00b      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a25      	ldr	r2, [pc, #148]	; (800ab10 <TIM_Base_SetConfig+0x134>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d007      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a24      	ldr	r2, [pc, #144]	; (800ab14 <TIM_Base_SetConfig+0x138>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d003      	beq.n	800aa8e <TIM_Base_SetConfig+0xb2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a23      	ldr	r2, [pc, #140]	; (800ab18 <TIM_Base_SetConfig+0x13c>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d108      	bne.n	800aaa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	689a      	ldr	r2, [r3, #8]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a0a      	ldr	r2, [pc, #40]	; (800aaf0 <TIM_Base_SetConfig+0x114>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d003      	beq.n	800aad4 <TIM_Base_SetConfig+0xf8>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a0c      	ldr	r2, [pc, #48]	; (800ab00 <TIM_Base_SetConfig+0x124>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d103      	bne.n	800aadc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	691a      	ldr	r2, [r3, #16]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	615a      	str	r2, [r3, #20]
}
 800aae2:	bf00      	nop
 800aae4:	3714      	adds	r7, #20
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr
 800aaee:	bf00      	nop
 800aaf0:	40010000 	.word	0x40010000
 800aaf4:	40000400 	.word	0x40000400
 800aaf8:	40000800 	.word	0x40000800
 800aafc:	40000c00 	.word	0x40000c00
 800ab00:	40010400 	.word	0x40010400
 800ab04:	40014000 	.word	0x40014000
 800ab08:	40014400 	.word	0x40014400
 800ab0c:	40014800 	.word	0x40014800
 800ab10:	40001800 	.word	0x40001800
 800ab14:	40001c00 	.word	0x40001c00
 800ab18:	40002000 	.word	0x40002000

0800ab1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	f023 0201 	bic.w	r2, r3, #1
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f023 0303 	bic.w	r3, r3, #3
 800ab52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f023 0302 	bic.w	r3, r3, #2
 800ab64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a20      	ldr	r2, [pc, #128]	; (800abf4 <TIM_OC1_SetConfig+0xd8>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d003      	beq.n	800ab80 <TIM_OC1_SetConfig+0x64>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a1f      	ldr	r2, [pc, #124]	; (800abf8 <TIM_OC1_SetConfig+0xdc>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d10c      	bne.n	800ab9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f023 0308 	bic.w	r3, r3, #8
 800ab86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	697a      	ldr	r2, [r7, #20]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f023 0304 	bic.w	r3, r3, #4
 800ab98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a15      	ldr	r2, [pc, #84]	; (800abf4 <TIM_OC1_SetConfig+0xd8>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <TIM_OC1_SetConfig+0x8e>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a14      	ldr	r2, [pc, #80]	; (800abf8 <TIM_OC1_SetConfig+0xdc>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d111      	bne.n	800abce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	621a      	str	r2, [r3, #32]
}
 800abe8:	bf00      	nop
 800abea:	371c      	adds	r7, #28
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	40010000 	.word	0x40010000
 800abf8:	40010400 	.word	0x40010400

0800abfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b087      	sub	sp, #28
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	f023 0210 	bic.w	r2, r3, #16
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	021b      	lsls	r3, r3, #8
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f023 0320 	bic.w	r3, r3, #32
 800ac46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	011b      	lsls	r3, r3, #4
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	4313      	orrs	r3, r2
 800ac52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a22      	ldr	r2, [pc, #136]	; (800ace0 <TIM_OC2_SetConfig+0xe4>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d003      	beq.n	800ac64 <TIM_OC2_SetConfig+0x68>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a21      	ldr	r2, [pc, #132]	; (800ace4 <TIM_OC2_SetConfig+0xe8>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d10d      	bne.n	800ac80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	011b      	lsls	r3, r3, #4
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	4313      	orrs	r3, r2
 800ac76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a17      	ldr	r2, [pc, #92]	; (800ace0 <TIM_OC2_SetConfig+0xe4>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d003      	beq.n	800ac90 <TIM_OC2_SetConfig+0x94>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a16      	ldr	r2, [pc, #88]	; (800ace4 <TIM_OC2_SetConfig+0xe8>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d113      	bne.n	800acb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	685a      	ldr	r2, [r3, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	621a      	str	r2, [r3, #32]
}
 800acd2:	bf00      	nop
 800acd4:	371c      	adds	r7, #28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	40010000 	.word	0x40010000
 800ace4:	40010400 	.word	0x40010400

0800ace8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a1b      	ldr	r3, [r3, #32]
 800ad02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	69db      	ldr	r3, [r3, #28]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0303 	bic.w	r3, r3, #3
 800ad1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	021b      	lsls	r3, r3, #8
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a21      	ldr	r2, [pc, #132]	; (800adc8 <TIM_OC3_SetConfig+0xe0>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d003      	beq.n	800ad4e <TIM_OC3_SetConfig+0x66>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a20      	ldr	r2, [pc, #128]	; (800adcc <TIM_OC3_SetConfig+0xe4>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d10d      	bne.n	800ad6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	021b      	lsls	r3, r3, #8
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a16      	ldr	r2, [pc, #88]	; (800adc8 <TIM_OC3_SetConfig+0xe0>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d003      	beq.n	800ad7a <TIM_OC3_SetConfig+0x92>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a15      	ldr	r2, [pc, #84]	; (800adcc <TIM_OC3_SetConfig+0xe4>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d113      	bne.n	800ada2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	011b      	lsls	r3, r3, #4
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	697a      	ldr	r2, [r7, #20]
 800adba:	621a      	str	r2, [r3, #32]
}
 800adbc:	bf00      	nop
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	40010000 	.word	0x40010000
 800adcc:	40010400 	.word	0x40010400

0800add0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	031b      	lsls	r3, r3, #12
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a12      	ldr	r2, [pc, #72]	; (800ae74 <TIM_OC4_SetConfig+0xa4>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d003      	beq.n	800ae38 <TIM_OC4_SetConfig+0x68>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	4a11      	ldr	r2, [pc, #68]	; (800ae78 <TIM_OC4_SetConfig+0xa8>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d109      	bne.n	800ae4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	019b      	lsls	r3, r3, #6
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	621a      	str	r2, [r3, #32]
}
 800ae66:	bf00      	nop
 800ae68:	371c      	adds	r7, #28
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40010400 	.word	0x40010400

0800ae7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b087      	sub	sp, #28
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	f023 0201 	bic.w	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f023 030a 	bic.w	r3, r3, #10
 800aeb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	621a      	str	r2, [r3, #32]
}
 800aece:	bf00      	nop
 800aed0:	371c      	adds	r7, #28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b087      	sub	sp, #28
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	f023 0210 	bic.w	r2, r3, #16
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	031b      	lsls	r3, r3, #12
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4313      	orrs	r3, r2
 800af20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	621a      	str	r2, [r3, #32]
}
 800af2e:	bf00      	nop
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	f043 0307 	orr.w	r3, r3, #7
 800af5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	609a      	str	r2, [r3, #8]
}
 800af64:	bf00      	nop
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	021a      	lsls	r2, r3, #8
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	431a      	orrs	r2, r3
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	4313      	orrs	r3, r2
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	697a      	ldr	r2, [r7, #20]
 800afa2:	609a      	str	r2, [r3, #8]
}
 800afa4:	bf00      	nop
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b087      	sub	sp, #28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	f003 031f 	and.w	r3, r3, #31
 800afc2:	2201      	movs	r2, #1
 800afc4:	fa02 f303 	lsl.w	r3, r2, r3
 800afc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6a1a      	ldr	r2, [r3, #32]
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	43db      	mvns	r3, r3
 800afd2:	401a      	ands	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6a1a      	ldr	r2, [r3, #32]
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	f003 031f 	and.w	r3, r3, #31
 800afe2:	6879      	ldr	r1, [r7, #4]
 800afe4:	fa01 f303 	lsl.w	r3, r1, r3
 800afe8:	431a      	orrs	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	621a      	str	r2, [r3, #32]
}
 800afee:	bf00      	nop
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
	...

0800affc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d101      	bne.n	800b014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b010:	2302      	movs	r3, #2
 800b012:	e05a      	b.n	800b0ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2201      	movs	r2, #1
 800b018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2202      	movs	r2, #2
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b03a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a21      	ldr	r2, [pc, #132]	; (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d022      	beq.n	800b09e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b060:	d01d      	beq.n	800b09e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a1d      	ldr	r2, [pc, #116]	; (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d018      	beq.n	800b09e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a1b      	ldr	r2, [pc, #108]	; (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d013      	beq.n	800b09e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a1a      	ldr	r2, [pc, #104]	; (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d00e      	beq.n	800b09e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a18      	ldr	r2, [pc, #96]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d009      	beq.n	800b09e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a17      	ldr	r2, [pc, #92]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d004      	beq.n	800b09e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a15      	ldr	r2, [pc, #84]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d10c      	bne.n	800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	68ba      	ldr	r2, [r7, #8]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	40010000 	.word	0x40010000
 800b0dc:	40000400 	.word	0x40000400
 800b0e0:	40000800 	.word	0x40000800
 800b0e4:	40000c00 	.word	0x40000c00
 800b0e8:	40010400 	.word	0x40010400
 800b0ec:	40014000 	.word	0x40014000
 800b0f0:	40001800 	.word	0x40001800

0800b0f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d101      	bne.n	800b12e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e03f      	b.n	800b1ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b134:	b2db      	uxtb	r3, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	d106      	bne.n	800b148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7fb f8cc 	bl	80062e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2224      	movs	r2, #36	; 0x24
 800b14c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b15e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fddb 	bl	800bd1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	695a      	ldr	r2, [r3, #20]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68da      	ldr	r2, [r3, #12]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2220      	movs	r2, #32
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2220      	movs	r2, #32
 800b1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b08a      	sub	sp, #40	; 0x28
 800b1ba:	af02      	add	r7, sp, #8
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	603b      	str	r3, [r7, #0]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	2b20      	cmp	r3, #32
 800b1d4:	d17c      	bne.n	800b2d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <HAL_UART_Transmit+0x2c>
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e075      	b.n	800b2d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d101      	bne.n	800b1f4 <HAL_UART_Transmit+0x3e>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e06e      	b.n	800b2d2 <HAL_UART_Transmit+0x11c>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2221      	movs	r2, #33	; 0x21
 800b206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b20a:	f7fb f985 	bl	8006518 <HAL_GetTick>
 800b20e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	88fa      	ldrh	r2, [r7, #6]
 800b214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	88fa      	ldrh	r2, [r7, #6]
 800b21a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b224:	d108      	bne.n	800b238 <HAL_UART_Transmit+0x82>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d104      	bne.n	800b238 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	61bb      	str	r3, [r7, #24]
 800b236:	e003      	b.n	800b240 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b248:	e02a      	b.n	800b2a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	2200      	movs	r2, #0
 800b252:	2180      	movs	r1, #128	; 0x80
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f000 fb1f 	bl	800b898 <UART_WaitOnFlagUntilTimeout>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b260:	2303      	movs	r3, #3
 800b262:	e036      	b.n	800b2d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b264:	69fb      	ldr	r3, [r7, #28]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10b      	bne.n	800b282 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	3302      	adds	r3, #2
 800b27e:	61bb      	str	r3, [r7, #24]
 800b280:	e007      	b.n	800b292 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3301      	adds	r3, #1
 800b290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b296:	b29b      	uxth	r3, r3
 800b298:	3b01      	subs	r3, #1
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1cf      	bne.n	800b24a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2140      	movs	r1, #64	; 0x40
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f000 faef 	bl	800b898 <UART_WaitOnFlagUntilTimeout>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e006      	b.n	800b2d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2220      	movs	r2, #32
 800b2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	e000      	b.n	800b2d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b2d0:	2302      	movs	r3, #2
  }
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3720      	adds	r7, #32
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	4613      	mov	r3, r2
 800b2e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b20      	cmp	r3, #32
 800b2f2:	d11d      	bne.n	800b330 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d002      	beq.n	800b300 <HAL_UART_Receive_IT+0x26>
 800b2fa:	88fb      	ldrh	r3, [r7, #6]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d101      	bne.n	800b304 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	e016      	b.n	800b332 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d101      	bne.n	800b312 <HAL_UART_Receive_IT+0x38>
 800b30e:	2302      	movs	r3, #2
 800b310:	e00f      	b.n	800b332 <HAL_UART_Receive_IT+0x58>
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2201      	movs	r2, #1
 800b316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2200      	movs	r2, #0
 800b31e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b320:	88fb      	ldrh	r3, [r7, #6]
 800b322:	461a      	mov	r2, r3
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 fb24 	bl	800b974 <UART_Start_Receive_IT>
 800b32c:	4603      	mov	r3, r0
 800b32e:	e000      	b.n	800b332 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b330:	2302      	movs	r3, #2
  }
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b0ba      	sub	sp, #232	; 0xe8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b362:	2300      	movs	r3, #0
 800b364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b368:	2300      	movs	r3, #0
 800b36a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b36e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b372:	f003 030f 	and.w	r3, r3, #15
 800b376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b37a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d10f      	bne.n	800b3a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b386:	f003 0320 	and.w	r3, r3, #32
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d009      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x66>
 800b38e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b392:	f003 0320 	and.w	r3, r3, #32
 800b396:	2b00      	cmp	r3, #0
 800b398:	d003      	beq.n	800b3a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 fc03 	bl	800bba6 <UART_Receive_IT>
      return;
 800b3a0:	e256      	b.n	800b850 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b3a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 80de 	beq.w	800b568 <HAL_UART_IRQHandler+0x22c>
 800b3ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d106      	bne.n	800b3c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 80d1 	beq.w	800b568 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ca:	f003 0301 	and.w	r3, r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <HAL_UART_IRQHandler+0xae>
 800b3d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d005      	beq.n	800b3ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3e2:	f043 0201 	orr.w	r2, r3, #1
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ee:	f003 0304 	and.w	r3, r3, #4
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00b      	beq.n	800b40e <HAL_UART_IRQHandler+0xd2>
 800b3f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b406:	f043 0202 	orr.w	r2, r3, #2
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b412:	f003 0302 	and.w	r3, r3, #2
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00b      	beq.n	800b432 <HAL_UART_IRQHandler+0xf6>
 800b41a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	d005      	beq.n	800b432 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42a:	f043 0204 	orr.w	r2, r3, #4
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b436:	f003 0308 	and.w	r3, r3, #8
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d011      	beq.n	800b462 <HAL_UART_IRQHandler+0x126>
 800b43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b442:	f003 0320 	and.w	r3, r3, #32
 800b446:	2b00      	cmp	r3, #0
 800b448:	d105      	bne.n	800b456 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b44a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	d005      	beq.n	800b462 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b45a:	f043 0208 	orr.w	r2, r3, #8
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 81ed 	beq.w	800b846 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b470:	f003 0320 	and.w	r3, r3, #32
 800b474:	2b00      	cmp	r3, #0
 800b476:	d008      	beq.n	800b48a <HAL_UART_IRQHandler+0x14e>
 800b478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b47c:	f003 0320 	and.w	r3, r3, #32
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fb8e 	bl	800bba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b494:	2b40      	cmp	r3, #64	; 0x40
 800b496:	bf0c      	ite	eq
 800b498:	2301      	moveq	r3, #1
 800b49a:	2300      	movne	r3, #0
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a6:	f003 0308 	and.w	r3, r3, #8
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d103      	bne.n	800b4b6 <HAL_UART_IRQHandler+0x17a>
 800b4ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d04f      	beq.n	800b556 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa96 	bl	800b9e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c6:	2b40      	cmp	r3, #64	; 0x40
 800b4c8:	d141      	bne.n	800b54e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3314      	adds	r3, #20
 800b4d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b4d8:	e853 3f00 	ldrex	r3, [r3]
 800b4dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3314      	adds	r3, #20
 800b4f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b4fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b502:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b50e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1d9      	bne.n	800b4ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d013      	beq.n	800b546 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b522:	4a7d      	ldr	r2, [pc, #500]	; (800b718 <HAL_UART_IRQHandler+0x3dc>)
 800b524:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fb febe 	bl	80072ac <HAL_DMA_Abort_IT>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d016      	beq.n	800b564 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b540:	4610      	mov	r0, r2
 800b542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b544:	e00e      	b.n	800b564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 f990 	bl	800b86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b54c:	e00a      	b.n	800b564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f98c 	bl	800b86c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b554:	e006      	b.n	800b564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f988 	bl	800b86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b562:	e170      	b.n	800b846 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b564:	bf00      	nop
    return;
 800b566:	e16e      	b.n	800b846 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	f040 814a 	bne.w	800b806 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b576:	f003 0310 	and.w	r3, r3, #16
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	f000 8143 	beq.w	800b806 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b584:	f003 0310 	and.w	r3, r3, #16
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 813c 	beq.w	800b806 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b58e:	2300      	movs	r3, #0
 800b590:	60bb      	str	r3, [r7, #8]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	60bb      	str	r3, [r7, #8]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	60bb      	str	r3, [r7, #8]
 800b5a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	695b      	ldr	r3, [r3, #20]
 800b5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5ae:	2b40      	cmp	r3, #64	; 0x40
 800b5b0:	f040 80b4 	bne.w	800b71c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	f000 8140 	beq.w	800b84a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	f080 8139 	bcs.w	800b84a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ea:	f000 8088 	beq.w	800b6fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	330c      	adds	r3, #12
 800b5f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5fc:	e853 3f00 	ldrex	r3, [r3]
 800b600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b60c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	330c      	adds	r3, #12
 800b616:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b61a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b61e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b626:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b62a:	e841 2300 	strex	r3, r2, [r1]
 800b62e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1d9      	bne.n	800b5ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	3314      	adds	r3, #20
 800b640:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b644:	e853 3f00 	ldrex	r3, [r3]
 800b648:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b64a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b64c:	f023 0301 	bic.w	r3, r3, #1
 800b650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3314      	adds	r3, #20
 800b65a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b65e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b662:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b664:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b666:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e1      	bne.n	800b63a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3314      	adds	r3, #20
 800b67c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b680:	e853 3f00 	ldrex	r3, [r3]
 800b684:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b68c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3314      	adds	r3, #20
 800b696:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b69a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b69c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b6a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6a2:	e841 2300 	strex	r3, r2, [r1]
 800b6a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d1e3      	bne.n	800b676 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	330c      	adds	r3, #12
 800b6c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c6:	e853 3f00 	ldrex	r3, [r3]
 800b6ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ce:	f023 0310 	bic.w	r3, r3, #16
 800b6d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	330c      	adds	r3, #12
 800b6dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b6e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b6e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6e8:	e841 2300 	strex	r3, r2, [r1]
 800b6ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e3      	bne.n	800b6bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fb fd67 	bl	80071cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b706:	b29b      	uxth	r3, r3
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f8b6 	bl	800b880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b714:	e099      	b.n	800b84a <HAL_UART_IRQHandler+0x50e>
 800b716:	bf00      	nop
 800b718:	0800baaf 	.word	0x0800baaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b724:	b29b      	uxth	r3, r3
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b730:	b29b      	uxth	r3, r3
 800b732:	2b00      	cmp	r3, #0
 800b734:	f000 808b 	beq.w	800b84e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 8086 	beq.w	800b84e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	330c      	adds	r3, #12
 800b748:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	330c      	adds	r3, #12
 800b762:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b766:	647a      	str	r2, [r7, #68]	; 0x44
 800b768:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b76c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b76e:	e841 2300 	strex	r3, r2, [r1]
 800b772:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e3      	bne.n	800b742 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	3314      	adds	r3, #20
 800b780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	e853 3f00 	ldrex	r3, [r3]
 800b788:	623b      	str	r3, [r7, #32]
   return(result);
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	f023 0301 	bic.w	r3, r3, #1
 800b790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	3314      	adds	r3, #20
 800b79a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b79e:	633a      	str	r2, [r7, #48]	; 0x30
 800b7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a6:	e841 2300 	strex	r3, r2, [r1]
 800b7aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d1e3      	bne.n	800b77a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	330c      	adds	r3, #12
 800b7c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	e853 3f00 	ldrex	r3, [r3]
 800b7ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f023 0310 	bic.w	r3, r3, #16
 800b7d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	330c      	adds	r3, #12
 800b7e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b7e4:	61fa      	str	r2, [r7, #28]
 800b7e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e8:	69b9      	ldr	r1, [r7, #24]
 800b7ea:	69fa      	ldr	r2, [r7, #28]
 800b7ec:	e841 2300 	strex	r3, r2, [r1]
 800b7f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1e3      	bne.n	800b7c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f83e 	bl	800b880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b804:	e023      	b.n	800b84e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d009      	beq.n	800b826 <HAL_UART_IRQHandler+0x4ea>
 800b812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d003      	beq.n	800b826 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f959 	bl	800bad6 <UART_Transmit_IT>
    return;
 800b824:	e014      	b.n	800b850 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00e      	beq.n	800b850 <HAL_UART_IRQHandler+0x514>
 800b832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d008      	beq.n	800b850 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f999 	bl	800bb76 <UART_EndTransmit_IT>
    return;
 800b844:	e004      	b.n	800b850 <HAL_UART_IRQHandler+0x514>
    return;
 800b846:	bf00      	nop
 800b848:	e002      	b.n	800b850 <HAL_UART_IRQHandler+0x514>
      return;
 800b84a:	bf00      	nop
 800b84c:	e000      	b.n	800b850 <HAL_UART_IRQHandler+0x514>
      return;
 800b84e:	bf00      	nop
  }
}
 800b850:	37e8      	adds	r7, #232	; 0xe8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop

0800b858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b090      	sub	sp, #64	; 0x40
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	603b      	str	r3, [r7, #0]
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8a8:	e050      	b.n	800b94c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b0:	d04c      	beq.n	800b94c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d007      	beq.n	800b8c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8b8:	f7fa fe2e 	bl	8006518 <HAL_GetTick>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d241      	bcs.n	800b94c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	e853 3f00 	ldrex	r3, [r3]
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b8e8:	637a      	str	r2, [r7, #52]	; 0x34
 800b8ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b8f0:	e841 2300 	strex	r3, r2, [r1]
 800b8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1e5      	bne.n	800b8c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	3314      	adds	r3, #20
 800b902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	e853 3f00 	ldrex	r3, [r3]
 800b90a:	613b      	str	r3, [r7, #16]
   return(result);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f023 0301 	bic.w	r3, r3, #1
 800b912:	63bb      	str	r3, [r7, #56]	; 0x38
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3314      	adds	r3, #20
 800b91a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b91c:	623a      	str	r2, [r7, #32]
 800b91e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	69f9      	ldr	r1, [r7, #28]
 800b922:	6a3a      	ldr	r2, [r7, #32]
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	61bb      	str	r3, [r7, #24]
   return(result);
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e5      	bne.n	800b8fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2220      	movs	r2, #32
 800b934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b948:	2303      	movs	r3, #3
 800b94a:	e00f      	b.n	800b96c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4013      	ands	r3, r2
 800b956:	68ba      	ldr	r2, [r7, #8]
 800b958:	429a      	cmp	r2, r3
 800b95a:	bf0c      	ite	eq
 800b95c:	2301      	moveq	r3, #1
 800b95e:	2300      	movne	r3, #0
 800b960:	b2db      	uxtb	r3, r3
 800b962:	461a      	mov	r2, r3
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	429a      	cmp	r2, r3
 800b968:	d09f      	beq.n	800b8aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b96a:	2300      	movs	r3, #0
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3740      	adds	r7, #64	; 0x40
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4613      	mov	r3, r2
 800b980:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68ba      	ldr	r2, [r7, #8]
 800b986:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	88fa      	ldrh	r2, [r7, #6]
 800b98c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	88fa      	ldrh	r2, [r7, #6]
 800b992:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2222      	movs	r2, #34	; 0x22
 800b99e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68da      	ldr	r2, [r3, #12]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9b8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	695a      	ldr	r2, [r3, #20]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f042 0201 	orr.w	r2, r2, #1
 800b9c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68da      	ldr	r2, [r3, #12]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f042 0220 	orr.w	r2, r2, #32
 800b9d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b095      	sub	sp, #84	; 0x54
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	330c      	adds	r3, #12
 800b9f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fa:	e853 3f00 	ldrex	r3, [r3]
 800b9fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	330c      	adds	r3, #12
 800ba0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba10:	643a      	str	r2, [r7, #64]	; 0x40
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba18:	e841 2300 	strex	r3, r2, [r1]
 800ba1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d1e5      	bne.n	800b9f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3314      	adds	r3, #20
 800ba2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2c:	6a3b      	ldr	r3, [r7, #32]
 800ba2e:	e853 3f00 	ldrex	r3, [r3]
 800ba32:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	f023 0301 	bic.w	r3, r3, #1
 800ba3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3314      	adds	r3, #20
 800ba42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e5      	bne.n	800ba24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d119      	bne.n	800ba94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	330c      	adds	r3, #12
 800ba66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	e853 3f00 	ldrex	r3, [r3]
 800ba6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f023 0310 	bic.w	r3, r3, #16
 800ba76:	647b      	str	r3, [r7, #68]	; 0x44
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	330c      	adds	r3, #12
 800ba7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba80:	61ba      	str	r2, [r7, #24]
 800ba82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba84:	6979      	ldr	r1, [r7, #20]
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	e841 2300 	strex	r3, r2, [r1]
 800ba8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d1e5      	bne.n	800ba60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2220      	movs	r2, #32
 800ba98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800baa2:	bf00      	nop
 800baa4:	3754      	adds	r7, #84	; 0x54
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f7ff fecf 	bl	800b86c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bace:	bf00      	nop
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b085      	sub	sp, #20
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b21      	cmp	r3, #33	; 0x21
 800bae8:	d13e      	bne.n	800bb68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf2:	d114      	bne.n	800bb1e <UART_Transmit_IT+0x48>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d110      	bne.n	800bb1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	881b      	ldrh	r3, [r3, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	1c9a      	adds	r2, r3, #2
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	621a      	str	r2, [r3, #32]
 800bb1c:	e008      	b.n	800bb30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	1c59      	adds	r1, r3, #1
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	6211      	str	r1, [r2, #32]
 800bb28:	781a      	ldrb	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10f      	bne.n	800bb64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68da      	ldr	r2, [r3, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bb52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bb62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	e000      	b.n	800bb6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bb68:	2302      	movs	r3, #2
  }
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68da      	ldr	r2, [r3, #12]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2220      	movs	r2, #32
 800bb92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff fe5e 	bl	800b858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b08c      	sub	sp, #48	; 0x30
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b22      	cmp	r3, #34	; 0x22
 800bbb8:	f040 80ab 	bne.w	800bd12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbc4:	d117      	bne.n	800bbf6 <UART_Receive_IT+0x50>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d113      	bne.n	800bbf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbe4:	b29a      	uxth	r2, r3
 800bbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbee:	1c9a      	adds	r2, r3, #2
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	629a      	str	r2, [r3, #40]	; 0x28
 800bbf4:	e026      	b.n	800bc44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc08:	d007      	beq.n	800bc1a <UART_Receive_IT+0x74>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d10a      	bne.n	800bc28 <UART_Receive_IT+0x82>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d106      	bne.n	800bc28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	e008      	b.n	800bc3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	4619      	mov	r1, r3
 800bc52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d15a      	bne.n	800bd0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68da      	ldr	r2, [r3, #12]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f022 0220 	bic.w	r2, r2, #32
 800bc66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68da      	ldr	r2, [r3, #12]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	695a      	ldr	r2, [r3, #20]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0201 	bic.w	r2, r2, #1
 800bc86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d135      	bne.n	800bd04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	330c      	adds	r3, #12
 800bca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	e853 3f00 	ldrex	r3, [r3]
 800bcac:	613b      	str	r3, [r7, #16]
   return(result);
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f023 0310 	bic.w	r3, r3, #16
 800bcb4:	627b      	str	r3, [r7, #36]	; 0x24
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	330c      	adds	r3, #12
 800bcbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcbe:	623a      	str	r2, [r7, #32]
 800bcc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc2:	69f9      	ldr	r1, [r7, #28]
 800bcc4:	6a3a      	ldr	r2, [r7, #32]
 800bcc6:	e841 2300 	strex	r3, r2, [r1]
 800bcca:	61bb      	str	r3, [r7, #24]
   return(result);
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1e5      	bne.n	800bc9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0310 	and.w	r3, r3, #16
 800bcdc:	2b10      	cmp	r3, #16
 800bcde:	d10a      	bne.n	800bcf6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bce0:	2300      	movs	r3, #0
 800bce2:	60fb      	str	r3, [r7, #12]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff fdbf 	bl	800b880 <HAL_UARTEx_RxEventCallback>
 800bd02:	e002      	b.n	800bd0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7fa fa63 	bl	80061d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e002      	b.n	800bd14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	e000      	b.n	800bd14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bd12:	2302      	movs	r3, #2
  }
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3730      	adds	r7, #48	; 0x30
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd20:	b09f      	sub	sp, #124	; 0x7c
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bd30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd32:	68d9      	ldr	r1, [r3, #12]
 800bd34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	ea40 0301 	orr.w	r3, r0, r1
 800bd3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd40:	689a      	ldr	r2, [r3, #8]
 800bd42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	431a      	orrs	r2, r3
 800bd48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	431a      	orrs	r2, r3
 800bd4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd50:	69db      	ldr	r3, [r3, #28]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bd56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bd60:	f021 010c 	bic.w	r1, r1, #12
 800bd64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd6a:	430b      	orrs	r3, r1
 800bd6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bd6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	695b      	ldr	r3, [r3, #20]
 800bd74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bd78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd7a:	6999      	ldr	r1, [r3, #24]
 800bd7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	ea40 0301 	orr.w	r3, r0, r1
 800bd84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	4bc5      	ldr	r3, [pc, #788]	; (800c0a0 <UART_SetConfig+0x384>)
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d004      	beq.n	800bd9a <UART_SetConfig+0x7e>
 800bd90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	4bc3      	ldr	r3, [pc, #780]	; (800c0a4 <UART_SetConfig+0x388>)
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d103      	bne.n	800bda2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd9a:	f7fd fb1b 	bl	80093d4 <HAL_RCC_GetPCLK2Freq>
 800bd9e:	6778      	str	r0, [r7, #116]	; 0x74
 800bda0:	e002      	b.n	800bda8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bda2:	f7fd fb03 	bl	80093ac <HAL_RCC_GetPCLK1Freq>
 800bda6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bda8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdb0:	f040 80b6 	bne.w	800bf20 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bdb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	f04f 0500 	mov.w	r5, #0
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	1891      	adds	r1, r2, r2
 800bdc2:	6439      	str	r1, [r7, #64]	; 0x40
 800bdc4:	415b      	adcs	r3, r3
 800bdc6:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bdcc:	1912      	adds	r2, r2, r4
 800bdce:	eb45 0303 	adc.w	r3, r5, r3
 800bdd2:	f04f 0000 	mov.w	r0, #0
 800bdd6:	f04f 0100 	mov.w	r1, #0
 800bdda:	00d9      	lsls	r1, r3, #3
 800bddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bde0:	00d0      	lsls	r0, r2, #3
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	1911      	adds	r1, r2, r4
 800bde8:	6639      	str	r1, [r7, #96]	; 0x60
 800bdea:	416b      	adcs	r3, r5
 800bdec:	667b      	str	r3, [r7, #100]	; 0x64
 800bdee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f04f 0300 	mov.w	r3, #0
 800bdf8:	1891      	adds	r1, r2, r2
 800bdfa:	63b9      	str	r1, [r7, #56]	; 0x38
 800bdfc:	415b      	adcs	r3, r3
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800be04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800be08:	f7f4 ff0e 	bl	8000c28 <__aeabi_uldivmod>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4ba5      	ldr	r3, [pc, #660]	; (800c0a8 <UART_SetConfig+0x38c>)
 800be12:	fba3 2302 	umull	r2, r3, r3, r2
 800be16:	095b      	lsrs	r3, r3, #5
 800be18:	011e      	lsls	r6, r3, #4
 800be1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be1c:	461c      	mov	r4, r3
 800be1e:	f04f 0500 	mov.w	r5, #0
 800be22:	4622      	mov	r2, r4
 800be24:	462b      	mov	r3, r5
 800be26:	1891      	adds	r1, r2, r2
 800be28:	6339      	str	r1, [r7, #48]	; 0x30
 800be2a:	415b      	adcs	r3, r3
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
 800be2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800be32:	1912      	adds	r2, r2, r4
 800be34:	eb45 0303 	adc.w	r3, r5, r3
 800be38:	f04f 0000 	mov.w	r0, #0
 800be3c:	f04f 0100 	mov.w	r1, #0
 800be40:	00d9      	lsls	r1, r3, #3
 800be42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be46:	00d0      	lsls	r0, r2, #3
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	1911      	adds	r1, r2, r4
 800be4e:	65b9      	str	r1, [r7, #88]	; 0x58
 800be50:	416b      	adcs	r3, r5
 800be52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	461a      	mov	r2, r3
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	1891      	adds	r1, r2, r2
 800be60:	62b9      	str	r1, [r7, #40]	; 0x28
 800be62:	415b      	adcs	r3, r3
 800be64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800be6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800be6e:	f7f4 fedb 	bl	8000c28 <__aeabi_uldivmod>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4b8c      	ldr	r3, [pc, #560]	; (800c0a8 <UART_SetConfig+0x38c>)
 800be78:	fba3 1302 	umull	r1, r3, r3, r2
 800be7c:	095b      	lsrs	r3, r3, #5
 800be7e:	2164      	movs	r1, #100	; 0x64
 800be80:	fb01 f303 	mul.w	r3, r1, r3
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	3332      	adds	r3, #50	; 0x32
 800be8a:	4a87      	ldr	r2, [pc, #540]	; (800c0a8 <UART_SetConfig+0x38c>)
 800be8c:	fba2 2303 	umull	r2, r3, r2, r3
 800be90:	095b      	lsrs	r3, r3, #5
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be98:	441e      	add	r6, r3
 800be9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be9c:	4618      	mov	r0, r3
 800be9e:	f04f 0100 	mov.w	r1, #0
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	1894      	adds	r4, r2, r2
 800bea8:	623c      	str	r4, [r7, #32]
 800beaa:	415b      	adcs	r3, r3
 800beac:	627b      	str	r3, [r7, #36]	; 0x24
 800beae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800beb2:	1812      	adds	r2, r2, r0
 800beb4:	eb41 0303 	adc.w	r3, r1, r3
 800beb8:	f04f 0400 	mov.w	r4, #0
 800bebc:	f04f 0500 	mov.w	r5, #0
 800bec0:	00dd      	lsls	r5, r3, #3
 800bec2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bec6:	00d4      	lsls	r4, r2, #3
 800bec8:	4622      	mov	r2, r4
 800beca:	462b      	mov	r3, r5
 800becc:	1814      	adds	r4, r2, r0
 800bece:	653c      	str	r4, [r7, #80]	; 0x50
 800bed0:	414b      	adcs	r3, r1
 800bed2:	657b      	str	r3, [r7, #84]	; 0x54
 800bed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	461a      	mov	r2, r3
 800beda:	f04f 0300 	mov.w	r3, #0
 800bede:	1891      	adds	r1, r2, r2
 800bee0:	61b9      	str	r1, [r7, #24]
 800bee2:	415b      	adcs	r3, r3
 800bee4:	61fb      	str	r3, [r7, #28]
 800bee6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800beea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800beee:	f7f4 fe9b 	bl	8000c28 <__aeabi_uldivmod>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4b6c      	ldr	r3, [pc, #432]	; (800c0a8 <UART_SetConfig+0x38c>)
 800bef8:	fba3 1302 	umull	r1, r3, r3, r2
 800befc:	095b      	lsrs	r3, r3, #5
 800befe:	2164      	movs	r1, #100	; 0x64
 800bf00:	fb01 f303 	mul.w	r3, r1, r3
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	00db      	lsls	r3, r3, #3
 800bf08:	3332      	adds	r3, #50	; 0x32
 800bf0a:	4a67      	ldr	r2, [pc, #412]	; (800c0a8 <UART_SetConfig+0x38c>)
 800bf0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf10:	095b      	lsrs	r3, r3, #5
 800bf12:	f003 0207 	and.w	r2, r3, #7
 800bf16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4432      	add	r2, r6
 800bf1c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf1e:	e0b9      	b.n	800c094 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf22:	461c      	mov	r4, r3
 800bf24:	f04f 0500 	mov.w	r5, #0
 800bf28:	4622      	mov	r2, r4
 800bf2a:	462b      	mov	r3, r5
 800bf2c:	1891      	adds	r1, r2, r2
 800bf2e:	6139      	str	r1, [r7, #16]
 800bf30:	415b      	adcs	r3, r3
 800bf32:	617b      	str	r3, [r7, #20]
 800bf34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf38:	1912      	adds	r2, r2, r4
 800bf3a:	eb45 0303 	adc.w	r3, r5, r3
 800bf3e:	f04f 0000 	mov.w	r0, #0
 800bf42:	f04f 0100 	mov.w	r1, #0
 800bf46:	00d9      	lsls	r1, r3, #3
 800bf48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bf4c:	00d0      	lsls	r0, r2, #3
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	eb12 0804 	adds.w	r8, r2, r4
 800bf56:	eb43 0905 	adc.w	r9, r3, r5
 800bf5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f04f 0100 	mov.w	r1, #0
 800bf64:	f04f 0200 	mov.w	r2, #0
 800bf68:	f04f 0300 	mov.w	r3, #0
 800bf6c:	008b      	lsls	r3, r1, #2
 800bf6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bf72:	0082      	lsls	r2, r0, #2
 800bf74:	4640      	mov	r0, r8
 800bf76:	4649      	mov	r1, r9
 800bf78:	f7f4 fe56 	bl	8000c28 <__aeabi_uldivmod>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4b49      	ldr	r3, [pc, #292]	; (800c0a8 <UART_SetConfig+0x38c>)
 800bf82:	fba3 2302 	umull	r2, r3, r3, r2
 800bf86:	095b      	lsrs	r3, r3, #5
 800bf88:	011e      	lsls	r6, r3, #4
 800bf8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f04f 0100 	mov.w	r1, #0
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	1894      	adds	r4, r2, r2
 800bf98:	60bc      	str	r4, [r7, #8]
 800bf9a:	415b      	adcs	r3, r3
 800bf9c:	60fb      	str	r3, [r7, #12]
 800bf9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfa2:	1812      	adds	r2, r2, r0
 800bfa4:	eb41 0303 	adc.w	r3, r1, r3
 800bfa8:	f04f 0400 	mov.w	r4, #0
 800bfac:	f04f 0500 	mov.w	r5, #0
 800bfb0:	00dd      	lsls	r5, r3, #3
 800bfb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bfb6:	00d4      	lsls	r4, r2, #3
 800bfb8:	4622      	mov	r2, r4
 800bfba:	462b      	mov	r3, r5
 800bfbc:	1814      	adds	r4, r2, r0
 800bfbe:	64bc      	str	r4, [r7, #72]	; 0x48
 800bfc0:	414b      	adcs	r3, r1
 800bfc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f04f 0100 	mov.w	r1, #0
 800bfce:	f04f 0200 	mov.w	r2, #0
 800bfd2:	f04f 0300 	mov.w	r3, #0
 800bfd6:	008b      	lsls	r3, r1, #2
 800bfd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bfdc:	0082      	lsls	r2, r0, #2
 800bfde:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800bfe2:	f7f4 fe21 	bl	8000c28 <__aeabi_uldivmod>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4b2f      	ldr	r3, [pc, #188]	; (800c0a8 <UART_SetConfig+0x38c>)
 800bfec:	fba3 1302 	umull	r1, r3, r3, r2
 800bff0:	095b      	lsrs	r3, r3, #5
 800bff2:	2164      	movs	r1, #100	; 0x64
 800bff4:	fb01 f303 	mul.w	r3, r1, r3
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	011b      	lsls	r3, r3, #4
 800bffc:	3332      	adds	r3, #50	; 0x32
 800bffe:	4a2a      	ldr	r2, [pc, #168]	; (800c0a8 <UART_SetConfig+0x38c>)
 800c000:	fba2 2303 	umull	r2, r3, r2, r3
 800c004:	095b      	lsrs	r3, r3, #5
 800c006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c00a:	441e      	add	r6, r3
 800c00c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c00e:	4618      	mov	r0, r3
 800c010:	f04f 0100 	mov.w	r1, #0
 800c014:	4602      	mov	r2, r0
 800c016:	460b      	mov	r3, r1
 800c018:	1894      	adds	r4, r2, r2
 800c01a:	603c      	str	r4, [r7, #0]
 800c01c:	415b      	adcs	r3, r3
 800c01e:	607b      	str	r3, [r7, #4]
 800c020:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c024:	1812      	adds	r2, r2, r0
 800c026:	eb41 0303 	adc.w	r3, r1, r3
 800c02a:	f04f 0400 	mov.w	r4, #0
 800c02e:	f04f 0500 	mov.w	r5, #0
 800c032:	00dd      	lsls	r5, r3, #3
 800c034:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c038:	00d4      	lsls	r4, r2, #3
 800c03a:	4622      	mov	r2, r4
 800c03c:	462b      	mov	r3, r5
 800c03e:	eb12 0a00 	adds.w	sl, r2, r0
 800c042:	eb43 0b01 	adc.w	fp, r3, r1
 800c046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f04f 0100 	mov.w	r1, #0
 800c050:	f04f 0200 	mov.w	r2, #0
 800c054:	f04f 0300 	mov.w	r3, #0
 800c058:	008b      	lsls	r3, r1, #2
 800c05a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c05e:	0082      	lsls	r2, r0, #2
 800c060:	4650      	mov	r0, sl
 800c062:	4659      	mov	r1, fp
 800c064:	f7f4 fde0 	bl	8000c28 <__aeabi_uldivmod>
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4b0e      	ldr	r3, [pc, #56]	; (800c0a8 <UART_SetConfig+0x38c>)
 800c06e:	fba3 1302 	umull	r1, r3, r3, r2
 800c072:	095b      	lsrs	r3, r3, #5
 800c074:	2164      	movs	r1, #100	; 0x64
 800c076:	fb01 f303 	mul.w	r3, r1, r3
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	011b      	lsls	r3, r3, #4
 800c07e:	3332      	adds	r3, #50	; 0x32
 800c080:	4a09      	ldr	r2, [pc, #36]	; (800c0a8 <UART_SetConfig+0x38c>)
 800c082:	fba2 2303 	umull	r2, r3, r2, r3
 800c086:	095b      	lsrs	r3, r3, #5
 800c088:	f003 020f 	and.w	r2, r3, #15
 800c08c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4432      	add	r2, r6
 800c092:	609a      	str	r2, [r3, #8]
}
 800c094:	bf00      	nop
 800c096:	377c      	adds	r7, #124	; 0x7c
 800c098:	46bd      	mov	sp, r7
 800c09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c09e:	bf00      	nop
 800c0a0:	40011000 	.word	0x40011000
 800c0a4:	40011400 	.word	0x40011400
 800c0a8:	51eb851f 	.word	0x51eb851f

0800c0ac <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	4b20      	ldr	r3, [pc, #128]	; (800c14c <FSMC_NORSRAM_Init+0xa0>)
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c0d6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c0dc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c0e2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c0e8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c0ee:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c0f4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c0fa:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800c100:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800c106:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800c10c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800c112:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800c118:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	4313      	orrs	r3, r2
 800c11e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	2b08      	cmp	r3, #8
 800c126:	d103      	bne.n	800c130 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68f9      	ldr	r1, [r7, #12]
 800c138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	fff00080 	.word	0xfff00080

0800c150 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	1c5a      	adds	r2, r3, #1
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c16a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c172:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c17e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c186:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c18e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	3b01      	subs	r3, #1
 800c196:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c198:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	695b      	ldr	r3, [r3, #20]
 800c19e:	3b02      	subs	r3, #2
 800c1a0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c1a2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	1c5a      	adds	r2, r3, #1
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6979      	ldr	r1, [r7, #20]
 800c1b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	371c      	adds	r7, #28
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
	...

0800c1cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1e4:	d122      	bne.n	800c22c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c1f0:	697a      	ldr	r2, [r7, #20]
 800c1f2:	4b15      	ldr	r3, [pc, #84]	; (800c248 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c202:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c20a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c212:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c218:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	6979      	ldr	r1, [r7, #20]
 800c226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c22a:	e005      	b.n	800c238 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	cff00000 	.word	0xcff00000

0800c24c <__errno>:
 800c24c:	4b01      	ldr	r3, [pc, #4]	; (800c254 <__errno+0x8>)
 800c24e:	6818      	ldr	r0, [r3, #0]
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	2000007c 	.word	0x2000007c

0800c258 <__libc_init_array>:
 800c258:	b570      	push	{r4, r5, r6, lr}
 800c25a:	4d0d      	ldr	r5, [pc, #52]	; (800c290 <__libc_init_array+0x38>)
 800c25c:	4c0d      	ldr	r4, [pc, #52]	; (800c294 <__libc_init_array+0x3c>)
 800c25e:	1b64      	subs	r4, r4, r5
 800c260:	10a4      	asrs	r4, r4, #2
 800c262:	2600      	movs	r6, #0
 800c264:	42a6      	cmp	r6, r4
 800c266:	d109      	bne.n	800c27c <__libc_init_array+0x24>
 800c268:	4d0b      	ldr	r5, [pc, #44]	; (800c298 <__libc_init_array+0x40>)
 800c26a:	4c0c      	ldr	r4, [pc, #48]	; (800c29c <__libc_init_array+0x44>)
 800c26c:	f001 fadc 	bl	800d828 <_init>
 800c270:	1b64      	subs	r4, r4, r5
 800c272:	10a4      	asrs	r4, r4, #2
 800c274:	2600      	movs	r6, #0
 800c276:	42a6      	cmp	r6, r4
 800c278:	d105      	bne.n	800c286 <__libc_init_array+0x2e>
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
 800c27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c280:	4798      	blx	r3
 800c282:	3601      	adds	r6, #1
 800c284:	e7ee      	b.n	800c264 <__libc_init_array+0xc>
 800c286:	f855 3b04 	ldr.w	r3, [r5], #4
 800c28a:	4798      	blx	r3
 800c28c:	3601      	adds	r6, #1
 800c28e:	e7f2      	b.n	800c276 <__libc_init_array+0x1e>
 800c290:	08010d28 	.word	0x08010d28
 800c294:	08010d28 	.word	0x08010d28
 800c298:	08010d28 	.word	0x08010d28
 800c29c:	08010d2c 	.word	0x08010d2c

0800c2a0 <malloc>:
 800c2a0:	4b02      	ldr	r3, [pc, #8]	; (800c2ac <malloc+0xc>)
 800c2a2:	4601      	mov	r1, r0
 800c2a4:	6818      	ldr	r0, [r3, #0]
 800c2a6:	f000 b85b 	b.w	800c360 <_malloc_r>
 800c2aa:	bf00      	nop
 800c2ac:	2000007c 	.word	0x2000007c

0800c2b0 <memset>:
 800c2b0:	4402      	add	r2, r0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d100      	bne.n	800c2ba <memset+0xa>
 800c2b8:	4770      	bx	lr
 800c2ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c2be:	e7f9      	b.n	800c2b4 <memset+0x4>

0800c2c0 <_free_r>:
 800c2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c2c2:	2900      	cmp	r1, #0
 800c2c4:	d048      	beq.n	800c358 <_free_r+0x98>
 800c2c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ca:	9001      	str	r0, [sp, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f1a1 0404 	sub.w	r4, r1, #4
 800c2d2:	bfb8      	it	lt
 800c2d4:	18e4      	addlt	r4, r4, r3
 800c2d6:	f000 f93d 	bl	800c554 <__malloc_lock>
 800c2da:	4a20      	ldr	r2, [pc, #128]	; (800c35c <_free_r+0x9c>)
 800c2dc:	9801      	ldr	r0, [sp, #4]
 800c2de:	6813      	ldr	r3, [r2, #0]
 800c2e0:	4615      	mov	r5, r2
 800c2e2:	b933      	cbnz	r3, 800c2f2 <_free_r+0x32>
 800c2e4:	6063      	str	r3, [r4, #4]
 800c2e6:	6014      	str	r4, [r2, #0]
 800c2e8:	b003      	add	sp, #12
 800c2ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2ee:	f000 b937 	b.w	800c560 <__malloc_unlock>
 800c2f2:	42a3      	cmp	r3, r4
 800c2f4:	d90b      	bls.n	800c30e <_free_r+0x4e>
 800c2f6:	6821      	ldr	r1, [r4, #0]
 800c2f8:	1862      	adds	r2, r4, r1
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	bf04      	itt	eq
 800c2fe:	681a      	ldreq	r2, [r3, #0]
 800c300:	685b      	ldreq	r3, [r3, #4]
 800c302:	6063      	str	r3, [r4, #4]
 800c304:	bf04      	itt	eq
 800c306:	1852      	addeq	r2, r2, r1
 800c308:	6022      	streq	r2, [r4, #0]
 800c30a:	602c      	str	r4, [r5, #0]
 800c30c:	e7ec      	b.n	800c2e8 <_free_r+0x28>
 800c30e:	461a      	mov	r2, r3
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	b10b      	cbz	r3, 800c318 <_free_r+0x58>
 800c314:	42a3      	cmp	r3, r4
 800c316:	d9fa      	bls.n	800c30e <_free_r+0x4e>
 800c318:	6811      	ldr	r1, [r2, #0]
 800c31a:	1855      	adds	r5, r2, r1
 800c31c:	42a5      	cmp	r5, r4
 800c31e:	d10b      	bne.n	800c338 <_free_r+0x78>
 800c320:	6824      	ldr	r4, [r4, #0]
 800c322:	4421      	add	r1, r4
 800c324:	1854      	adds	r4, r2, r1
 800c326:	42a3      	cmp	r3, r4
 800c328:	6011      	str	r1, [r2, #0]
 800c32a:	d1dd      	bne.n	800c2e8 <_free_r+0x28>
 800c32c:	681c      	ldr	r4, [r3, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	6053      	str	r3, [r2, #4]
 800c332:	4421      	add	r1, r4
 800c334:	6011      	str	r1, [r2, #0]
 800c336:	e7d7      	b.n	800c2e8 <_free_r+0x28>
 800c338:	d902      	bls.n	800c340 <_free_r+0x80>
 800c33a:	230c      	movs	r3, #12
 800c33c:	6003      	str	r3, [r0, #0]
 800c33e:	e7d3      	b.n	800c2e8 <_free_r+0x28>
 800c340:	6825      	ldr	r5, [r4, #0]
 800c342:	1961      	adds	r1, r4, r5
 800c344:	428b      	cmp	r3, r1
 800c346:	bf04      	itt	eq
 800c348:	6819      	ldreq	r1, [r3, #0]
 800c34a:	685b      	ldreq	r3, [r3, #4]
 800c34c:	6063      	str	r3, [r4, #4]
 800c34e:	bf04      	itt	eq
 800c350:	1949      	addeq	r1, r1, r5
 800c352:	6021      	streq	r1, [r4, #0]
 800c354:	6054      	str	r4, [r2, #4]
 800c356:	e7c7      	b.n	800c2e8 <_free_r+0x28>
 800c358:	b003      	add	sp, #12
 800c35a:	bd30      	pop	{r4, r5, pc}
 800c35c:	200009c4 	.word	0x200009c4

0800c360 <_malloc_r>:
 800c360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c362:	1ccd      	adds	r5, r1, #3
 800c364:	f025 0503 	bic.w	r5, r5, #3
 800c368:	3508      	adds	r5, #8
 800c36a:	2d0c      	cmp	r5, #12
 800c36c:	bf38      	it	cc
 800c36e:	250c      	movcc	r5, #12
 800c370:	2d00      	cmp	r5, #0
 800c372:	4606      	mov	r6, r0
 800c374:	db01      	blt.n	800c37a <_malloc_r+0x1a>
 800c376:	42a9      	cmp	r1, r5
 800c378:	d903      	bls.n	800c382 <_malloc_r+0x22>
 800c37a:	230c      	movs	r3, #12
 800c37c:	6033      	str	r3, [r6, #0]
 800c37e:	2000      	movs	r0, #0
 800c380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c382:	f000 f8e7 	bl	800c554 <__malloc_lock>
 800c386:	4921      	ldr	r1, [pc, #132]	; (800c40c <_malloc_r+0xac>)
 800c388:	680a      	ldr	r2, [r1, #0]
 800c38a:	4614      	mov	r4, r2
 800c38c:	b99c      	cbnz	r4, 800c3b6 <_malloc_r+0x56>
 800c38e:	4f20      	ldr	r7, [pc, #128]	; (800c410 <_malloc_r+0xb0>)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	b923      	cbnz	r3, 800c39e <_malloc_r+0x3e>
 800c394:	4621      	mov	r1, r4
 800c396:	4630      	mov	r0, r6
 800c398:	f000 f87c 	bl	800c494 <_sbrk_r>
 800c39c:	6038      	str	r0, [r7, #0]
 800c39e:	4629      	mov	r1, r5
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f877 	bl	800c494 <_sbrk_r>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d123      	bne.n	800c3f2 <_malloc_r+0x92>
 800c3aa:	230c      	movs	r3, #12
 800c3ac:	6033      	str	r3, [r6, #0]
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f000 f8d6 	bl	800c560 <__malloc_unlock>
 800c3b4:	e7e3      	b.n	800c37e <_malloc_r+0x1e>
 800c3b6:	6823      	ldr	r3, [r4, #0]
 800c3b8:	1b5b      	subs	r3, r3, r5
 800c3ba:	d417      	bmi.n	800c3ec <_malloc_r+0x8c>
 800c3bc:	2b0b      	cmp	r3, #11
 800c3be:	d903      	bls.n	800c3c8 <_malloc_r+0x68>
 800c3c0:	6023      	str	r3, [r4, #0]
 800c3c2:	441c      	add	r4, r3
 800c3c4:	6025      	str	r5, [r4, #0]
 800c3c6:	e004      	b.n	800c3d2 <_malloc_r+0x72>
 800c3c8:	6863      	ldr	r3, [r4, #4]
 800c3ca:	42a2      	cmp	r2, r4
 800c3cc:	bf0c      	ite	eq
 800c3ce:	600b      	streq	r3, [r1, #0]
 800c3d0:	6053      	strne	r3, [r2, #4]
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f000 f8c4 	bl	800c560 <__malloc_unlock>
 800c3d8:	f104 000b 	add.w	r0, r4, #11
 800c3dc:	1d23      	adds	r3, r4, #4
 800c3de:	f020 0007 	bic.w	r0, r0, #7
 800c3e2:	1ac2      	subs	r2, r0, r3
 800c3e4:	d0cc      	beq.n	800c380 <_malloc_r+0x20>
 800c3e6:	1a1b      	subs	r3, r3, r0
 800c3e8:	50a3      	str	r3, [r4, r2]
 800c3ea:	e7c9      	b.n	800c380 <_malloc_r+0x20>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	6864      	ldr	r4, [r4, #4]
 800c3f0:	e7cc      	b.n	800c38c <_malloc_r+0x2c>
 800c3f2:	1cc4      	adds	r4, r0, #3
 800c3f4:	f024 0403 	bic.w	r4, r4, #3
 800c3f8:	42a0      	cmp	r0, r4
 800c3fa:	d0e3      	beq.n	800c3c4 <_malloc_r+0x64>
 800c3fc:	1a21      	subs	r1, r4, r0
 800c3fe:	4630      	mov	r0, r6
 800c400:	f000 f848 	bl	800c494 <_sbrk_r>
 800c404:	3001      	adds	r0, #1
 800c406:	d1dd      	bne.n	800c3c4 <_malloc_r+0x64>
 800c408:	e7cf      	b.n	800c3aa <_malloc_r+0x4a>
 800c40a:	bf00      	nop
 800c40c:	200009c4 	.word	0x200009c4
 800c410:	200009c8 	.word	0x200009c8

0800c414 <rand>:
 800c414:	4b17      	ldr	r3, [pc, #92]	; (800c474 <rand+0x60>)
 800c416:	b510      	push	{r4, lr}
 800c418:	681c      	ldr	r4, [r3, #0]
 800c41a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c41c:	b9b3      	cbnz	r3, 800c44c <rand+0x38>
 800c41e:	2018      	movs	r0, #24
 800c420:	f7ff ff3e 	bl	800c2a0 <malloc>
 800c424:	63a0      	str	r0, [r4, #56]	; 0x38
 800c426:	b928      	cbnz	r0, 800c434 <rand+0x20>
 800c428:	4602      	mov	r2, r0
 800c42a:	4b13      	ldr	r3, [pc, #76]	; (800c478 <rand+0x64>)
 800c42c:	4813      	ldr	r0, [pc, #76]	; (800c47c <rand+0x68>)
 800c42e:	214e      	movs	r1, #78	; 0x4e
 800c430:	f000 f860 	bl	800c4f4 <__assert_func>
 800c434:	4a12      	ldr	r2, [pc, #72]	; (800c480 <rand+0x6c>)
 800c436:	4b13      	ldr	r3, [pc, #76]	; (800c484 <rand+0x70>)
 800c438:	e9c0 2300 	strd	r2, r3, [r0]
 800c43c:	4b12      	ldr	r3, [pc, #72]	; (800c488 <rand+0x74>)
 800c43e:	6083      	str	r3, [r0, #8]
 800c440:	230b      	movs	r3, #11
 800c442:	8183      	strh	r3, [r0, #12]
 800c444:	2201      	movs	r2, #1
 800c446:	2300      	movs	r3, #0
 800c448:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c44c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c44e:	480f      	ldr	r0, [pc, #60]	; (800c48c <rand+0x78>)
 800c450:	690a      	ldr	r2, [r1, #16]
 800c452:	694b      	ldr	r3, [r1, #20]
 800c454:	4c0e      	ldr	r4, [pc, #56]	; (800c490 <rand+0x7c>)
 800c456:	4350      	muls	r0, r2
 800c458:	fb04 0003 	mla	r0, r4, r3, r0
 800c45c:	fba2 3404 	umull	r3, r4, r2, r4
 800c460:	1c5a      	adds	r2, r3, #1
 800c462:	4404      	add	r4, r0
 800c464:	f144 0000 	adc.w	r0, r4, #0
 800c468:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c46c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c470:	bd10      	pop	{r4, pc}
 800c472:	bf00      	nop
 800c474:	2000007c 	.word	0x2000007c
 800c478:	08010bd8 	.word	0x08010bd8
 800c47c:	08010bef 	.word	0x08010bef
 800c480:	abcd330e 	.word	0xabcd330e
 800c484:	e66d1234 	.word	0xe66d1234
 800c488:	0005deec 	.word	0x0005deec
 800c48c:	5851f42d 	.word	0x5851f42d
 800c490:	4c957f2d 	.word	0x4c957f2d

0800c494 <_sbrk_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4d06      	ldr	r5, [pc, #24]	; (800c4b0 <_sbrk_r+0x1c>)
 800c498:	2300      	movs	r3, #0
 800c49a:	4604      	mov	r4, r0
 800c49c:	4608      	mov	r0, r1
 800c49e:	602b      	str	r3, [r5, #0]
 800c4a0:	f7f8 fcee 	bl	8004e80 <_sbrk>
 800c4a4:	1c43      	adds	r3, r0, #1
 800c4a6:	d102      	bne.n	800c4ae <_sbrk_r+0x1a>
 800c4a8:	682b      	ldr	r3, [r5, #0]
 800c4aa:	b103      	cbz	r3, 800c4ae <_sbrk_r+0x1a>
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	bd38      	pop	{r3, r4, r5, pc}
 800c4b0:	20000ea0 	.word	0x20000ea0

0800c4b4 <siprintf>:
 800c4b4:	b40e      	push	{r1, r2, r3}
 800c4b6:	b500      	push	{lr}
 800c4b8:	b09c      	sub	sp, #112	; 0x70
 800c4ba:	ab1d      	add	r3, sp, #116	; 0x74
 800c4bc:	9002      	str	r0, [sp, #8]
 800c4be:	9006      	str	r0, [sp, #24]
 800c4c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4c4:	4809      	ldr	r0, [pc, #36]	; (800c4ec <siprintf+0x38>)
 800c4c6:	9107      	str	r1, [sp, #28]
 800c4c8:	9104      	str	r1, [sp, #16]
 800c4ca:	4909      	ldr	r1, [pc, #36]	; (800c4f0 <siprintf+0x3c>)
 800c4cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d0:	9105      	str	r1, [sp, #20]
 800c4d2:	6800      	ldr	r0, [r0, #0]
 800c4d4:	9301      	str	r3, [sp, #4]
 800c4d6:	a902      	add	r1, sp, #8
 800c4d8:	f000 f8a4 	bl	800c624 <_svfiprintf_r>
 800c4dc:	9b02      	ldr	r3, [sp, #8]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	701a      	strb	r2, [r3, #0]
 800c4e2:	b01c      	add	sp, #112	; 0x70
 800c4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4e8:	b003      	add	sp, #12
 800c4ea:	4770      	bx	lr
 800c4ec:	2000007c 	.word	0x2000007c
 800c4f0:	ffff0208 	.word	0xffff0208

0800c4f4 <__assert_func>:
 800c4f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c4f6:	4614      	mov	r4, r2
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	4b09      	ldr	r3, [pc, #36]	; (800c520 <__assert_func+0x2c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4605      	mov	r5, r0
 800c500:	68d8      	ldr	r0, [r3, #12]
 800c502:	b14c      	cbz	r4, 800c518 <__assert_func+0x24>
 800c504:	4b07      	ldr	r3, [pc, #28]	; (800c524 <__assert_func+0x30>)
 800c506:	9100      	str	r1, [sp, #0]
 800c508:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c50c:	4906      	ldr	r1, [pc, #24]	; (800c528 <__assert_func+0x34>)
 800c50e:	462b      	mov	r3, r5
 800c510:	f000 f80e 	bl	800c530 <fiprintf>
 800c514:	f000 fd34 	bl	800cf80 <abort>
 800c518:	4b04      	ldr	r3, [pc, #16]	; (800c52c <__assert_func+0x38>)
 800c51a:	461c      	mov	r4, r3
 800c51c:	e7f3      	b.n	800c506 <__assert_func+0x12>
 800c51e:	bf00      	nop
 800c520:	2000007c 	.word	0x2000007c
 800c524:	08010c4e 	.word	0x08010c4e
 800c528:	08010c5b 	.word	0x08010c5b
 800c52c:	08010c89 	.word	0x08010c89

0800c530 <fiprintf>:
 800c530:	b40e      	push	{r1, r2, r3}
 800c532:	b503      	push	{r0, r1, lr}
 800c534:	4601      	mov	r1, r0
 800c536:	ab03      	add	r3, sp, #12
 800c538:	4805      	ldr	r0, [pc, #20]	; (800c550 <fiprintf+0x20>)
 800c53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53e:	6800      	ldr	r0, [r0, #0]
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	f000 f999 	bl	800c878 <_vfiprintf_r>
 800c546:	b002      	add	sp, #8
 800c548:	f85d eb04 	ldr.w	lr, [sp], #4
 800c54c:	b003      	add	sp, #12
 800c54e:	4770      	bx	lr
 800c550:	2000007c 	.word	0x2000007c

0800c554 <__malloc_lock>:
 800c554:	4801      	ldr	r0, [pc, #4]	; (800c55c <__malloc_lock+0x8>)
 800c556:	f000 bed3 	b.w	800d300 <__retarget_lock_acquire_recursive>
 800c55a:	bf00      	nop
 800c55c:	20000ea8 	.word	0x20000ea8

0800c560 <__malloc_unlock>:
 800c560:	4801      	ldr	r0, [pc, #4]	; (800c568 <__malloc_unlock+0x8>)
 800c562:	f000 bece 	b.w	800d302 <__retarget_lock_release_recursive>
 800c566:	bf00      	nop
 800c568:	20000ea8 	.word	0x20000ea8

0800c56c <__ssputs_r>:
 800c56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c570:	688e      	ldr	r6, [r1, #8]
 800c572:	429e      	cmp	r6, r3
 800c574:	4682      	mov	sl, r0
 800c576:	460c      	mov	r4, r1
 800c578:	4690      	mov	r8, r2
 800c57a:	461f      	mov	r7, r3
 800c57c:	d838      	bhi.n	800c5f0 <__ssputs_r+0x84>
 800c57e:	898a      	ldrh	r2, [r1, #12]
 800c580:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c584:	d032      	beq.n	800c5ec <__ssputs_r+0x80>
 800c586:	6825      	ldr	r5, [r4, #0]
 800c588:	6909      	ldr	r1, [r1, #16]
 800c58a:	eba5 0901 	sub.w	r9, r5, r1
 800c58e:	6965      	ldr	r5, [r4, #20]
 800c590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c598:	3301      	adds	r3, #1
 800c59a:	444b      	add	r3, r9
 800c59c:	106d      	asrs	r5, r5, #1
 800c59e:	429d      	cmp	r5, r3
 800c5a0:	bf38      	it	cc
 800c5a2:	461d      	movcc	r5, r3
 800c5a4:	0553      	lsls	r3, r2, #21
 800c5a6:	d531      	bpl.n	800c60c <__ssputs_r+0xa0>
 800c5a8:	4629      	mov	r1, r5
 800c5aa:	f7ff fed9 	bl	800c360 <_malloc_r>
 800c5ae:	4606      	mov	r6, r0
 800c5b0:	b950      	cbnz	r0, 800c5c8 <__ssputs_r+0x5c>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	f8ca 3000 	str.w	r3, [sl]
 800c5b8:	89a3      	ldrh	r3, [r4, #12]
 800c5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c8:	6921      	ldr	r1, [r4, #16]
 800c5ca:	464a      	mov	r2, r9
 800c5cc:	f000 fefe 	bl	800d3cc <memcpy>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	6126      	str	r6, [r4, #16]
 800c5de:	6165      	str	r5, [r4, #20]
 800c5e0:	444e      	add	r6, r9
 800c5e2:	eba5 0509 	sub.w	r5, r5, r9
 800c5e6:	6026      	str	r6, [r4, #0]
 800c5e8:	60a5      	str	r5, [r4, #8]
 800c5ea:	463e      	mov	r6, r7
 800c5ec:	42be      	cmp	r6, r7
 800c5ee:	d900      	bls.n	800c5f2 <__ssputs_r+0x86>
 800c5f0:	463e      	mov	r6, r7
 800c5f2:	4632      	mov	r2, r6
 800c5f4:	6820      	ldr	r0, [r4, #0]
 800c5f6:	4641      	mov	r1, r8
 800c5f8:	f000 fef6 	bl	800d3e8 <memmove>
 800c5fc:	68a3      	ldr	r3, [r4, #8]
 800c5fe:	6822      	ldr	r2, [r4, #0]
 800c600:	1b9b      	subs	r3, r3, r6
 800c602:	4432      	add	r2, r6
 800c604:	60a3      	str	r3, [r4, #8]
 800c606:	6022      	str	r2, [r4, #0]
 800c608:	2000      	movs	r0, #0
 800c60a:	e7db      	b.n	800c5c4 <__ssputs_r+0x58>
 800c60c:	462a      	mov	r2, r5
 800c60e:	f000 ff05 	bl	800d41c <_realloc_r>
 800c612:	4606      	mov	r6, r0
 800c614:	2800      	cmp	r0, #0
 800c616:	d1e1      	bne.n	800c5dc <__ssputs_r+0x70>
 800c618:	6921      	ldr	r1, [r4, #16]
 800c61a:	4650      	mov	r0, sl
 800c61c:	f7ff fe50 	bl	800c2c0 <_free_r>
 800c620:	e7c7      	b.n	800c5b2 <__ssputs_r+0x46>
	...

0800c624 <_svfiprintf_r>:
 800c624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c628:	4698      	mov	r8, r3
 800c62a:	898b      	ldrh	r3, [r1, #12]
 800c62c:	061b      	lsls	r3, r3, #24
 800c62e:	b09d      	sub	sp, #116	; 0x74
 800c630:	4607      	mov	r7, r0
 800c632:	460d      	mov	r5, r1
 800c634:	4614      	mov	r4, r2
 800c636:	d50e      	bpl.n	800c656 <_svfiprintf_r+0x32>
 800c638:	690b      	ldr	r3, [r1, #16]
 800c63a:	b963      	cbnz	r3, 800c656 <_svfiprintf_r+0x32>
 800c63c:	2140      	movs	r1, #64	; 0x40
 800c63e:	f7ff fe8f 	bl	800c360 <_malloc_r>
 800c642:	6028      	str	r0, [r5, #0]
 800c644:	6128      	str	r0, [r5, #16]
 800c646:	b920      	cbnz	r0, 800c652 <_svfiprintf_r+0x2e>
 800c648:	230c      	movs	r3, #12
 800c64a:	603b      	str	r3, [r7, #0]
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	e0d1      	b.n	800c7f6 <_svfiprintf_r+0x1d2>
 800c652:	2340      	movs	r3, #64	; 0x40
 800c654:	616b      	str	r3, [r5, #20]
 800c656:	2300      	movs	r3, #0
 800c658:	9309      	str	r3, [sp, #36]	; 0x24
 800c65a:	2320      	movs	r3, #32
 800c65c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c660:	f8cd 800c 	str.w	r8, [sp, #12]
 800c664:	2330      	movs	r3, #48	; 0x30
 800c666:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c810 <_svfiprintf_r+0x1ec>
 800c66a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c66e:	f04f 0901 	mov.w	r9, #1
 800c672:	4623      	mov	r3, r4
 800c674:	469a      	mov	sl, r3
 800c676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c67a:	b10a      	cbz	r2, 800c680 <_svfiprintf_r+0x5c>
 800c67c:	2a25      	cmp	r2, #37	; 0x25
 800c67e:	d1f9      	bne.n	800c674 <_svfiprintf_r+0x50>
 800c680:	ebba 0b04 	subs.w	fp, sl, r4
 800c684:	d00b      	beq.n	800c69e <_svfiprintf_r+0x7a>
 800c686:	465b      	mov	r3, fp
 800c688:	4622      	mov	r2, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	4638      	mov	r0, r7
 800c68e:	f7ff ff6d 	bl	800c56c <__ssputs_r>
 800c692:	3001      	adds	r0, #1
 800c694:	f000 80aa 	beq.w	800c7ec <_svfiprintf_r+0x1c8>
 800c698:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c69a:	445a      	add	r2, fp
 800c69c:	9209      	str	r2, [sp, #36]	; 0x24
 800c69e:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 80a2 	beq.w	800c7ec <_svfiprintf_r+0x1c8>
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6b2:	f10a 0a01 	add.w	sl, sl, #1
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	9307      	str	r3, [sp, #28]
 800c6ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6be:	931a      	str	r3, [sp, #104]	; 0x68
 800c6c0:	4654      	mov	r4, sl
 800c6c2:	2205      	movs	r2, #5
 800c6c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c8:	4851      	ldr	r0, [pc, #324]	; (800c810 <_svfiprintf_r+0x1ec>)
 800c6ca:	f7f3 fd81 	bl	80001d0 <memchr>
 800c6ce:	9a04      	ldr	r2, [sp, #16]
 800c6d0:	b9d8      	cbnz	r0, 800c70a <_svfiprintf_r+0xe6>
 800c6d2:	06d0      	lsls	r0, r2, #27
 800c6d4:	bf44      	itt	mi
 800c6d6:	2320      	movmi	r3, #32
 800c6d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6dc:	0711      	lsls	r1, r2, #28
 800c6de:	bf44      	itt	mi
 800c6e0:	232b      	movmi	r3, #43	; 0x2b
 800c6e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ec:	d015      	beq.n	800c71a <_svfiprintf_r+0xf6>
 800c6ee:	9a07      	ldr	r2, [sp, #28]
 800c6f0:	4654      	mov	r4, sl
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	f04f 0c0a 	mov.w	ip, #10
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6fe:	3b30      	subs	r3, #48	; 0x30
 800c700:	2b09      	cmp	r3, #9
 800c702:	d94e      	bls.n	800c7a2 <_svfiprintf_r+0x17e>
 800c704:	b1b0      	cbz	r0, 800c734 <_svfiprintf_r+0x110>
 800c706:	9207      	str	r2, [sp, #28]
 800c708:	e014      	b.n	800c734 <_svfiprintf_r+0x110>
 800c70a:	eba0 0308 	sub.w	r3, r0, r8
 800c70e:	fa09 f303 	lsl.w	r3, r9, r3
 800c712:	4313      	orrs	r3, r2
 800c714:	9304      	str	r3, [sp, #16]
 800c716:	46a2      	mov	sl, r4
 800c718:	e7d2      	b.n	800c6c0 <_svfiprintf_r+0x9c>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	1d19      	adds	r1, r3, #4
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	9103      	str	r1, [sp, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	bfbb      	ittet	lt
 800c726:	425b      	neglt	r3, r3
 800c728:	f042 0202 	orrlt.w	r2, r2, #2
 800c72c:	9307      	strge	r3, [sp, #28]
 800c72e:	9307      	strlt	r3, [sp, #28]
 800c730:	bfb8      	it	lt
 800c732:	9204      	strlt	r2, [sp, #16]
 800c734:	7823      	ldrb	r3, [r4, #0]
 800c736:	2b2e      	cmp	r3, #46	; 0x2e
 800c738:	d10c      	bne.n	800c754 <_svfiprintf_r+0x130>
 800c73a:	7863      	ldrb	r3, [r4, #1]
 800c73c:	2b2a      	cmp	r3, #42	; 0x2a
 800c73e:	d135      	bne.n	800c7ac <_svfiprintf_r+0x188>
 800c740:	9b03      	ldr	r3, [sp, #12]
 800c742:	1d1a      	adds	r2, r3, #4
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	9203      	str	r2, [sp, #12]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bfb8      	it	lt
 800c74c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c750:	3402      	adds	r4, #2
 800c752:	9305      	str	r3, [sp, #20]
 800c754:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c820 <_svfiprintf_r+0x1fc>
 800c758:	7821      	ldrb	r1, [r4, #0]
 800c75a:	2203      	movs	r2, #3
 800c75c:	4650      	mov	r0, sl
 800c75e:	f7f3 fd37 	bl	80001d0 <memchr>
 800c762:	b140      	cbz	r0, 800c776 <_svfiprintf_r+0x152>
 800c764:	2340      	movs	r3, #64	; 0x40
 800c766:	eba0 000a 	sub.w	r0, r0, sl
 800c76a:	fa03 f000 	lsl.w	r0, r3, r0
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	4303      	orrs	r3, r0
 800c772:	3401      	adds	r4, #1
 800c774:	9304      	str	r3, [sp, #16]
 800c776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c77a:	4826      	ldr	r0, [pc, #152]	; (800c814 <_svfiprintf_r+0x1f0>)
 800c77c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c780:	2206      	movs	r2, #6
 800c782:	f7f3 fd25 	bl	80001d0 <memchr>
 800c786:	2800      	cmp	r0, #0
 800c788:	d038      	beq.n	800c7fc <_svfiprintf_r+0x1d8>
 800c78a:	4b23      	ldr	r3, [pc, #140]	; (800c818 <_svfiprintf_r+0x1f4>)
 800c78c:	bb1b      	cbnz	r3, 800c7d6 <_svfiprintf_r+0x1b2>
 800c78e:	9b03      	ldr	r3, [sp, #12]
 800c790:	3307      	adds	r3, #7
 800c792:	f023 0307 	bic.w	r3, r3, #7
 800c796:	3308      	adds	r3, #8
 800c798:	9303      	str	r3, [sp, #12]
 800c79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c79c:	4433      	add	r3, r6
 800c79e:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a0:	e767      	b.n	800c672 <_svfiprintf_r+0x4e>
 800c7a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	2001      	movs	r0, #1
 800c7aa:	e7a5      	b.n	800c6f8 <_svfiprintf_r+0xd4>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	3401      	adds	r4, #1
 800c7b0:	9305      	str	r3, [sp, #20]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	f04f 0c0a 	mov.w	ip, #10
 800c7b8:	4620      	mov	r0, r4
 800c7ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7be:	3a30      	subs	r2, #48	; 0x30
 800c7c0:	2a09      	cmp	r2, #9
 800c7c2:	d903      	bls.n	800c7cc <_svfiprintf_r+0x1a8>
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d0c5      	beq.n	800c754 <_svfiprintf_r+0x130>
 800c7c8:	9105      	str	r1, [sp, #20]
 800c7ca:	e7c3      	b.n	800c754 <_svfiprintf_r+0x130>
 800c7cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e7f0      	b.n	800c7b8 <_svfiprintf_r+0x194>
 800c7d6:	ab03      	add	r3, sp, #12
 800c7d8:	9300      	str	r3, [sp, #0]
 800c7da:	462a      	mov	r2, r5
 800c7dc:	4b0f      	ldr	r3, [pc, #60]	; (800c81c <_svfiprintf_r+0x1f8>)
 800c7de:	a904      	add	r1, sp, #16
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	f3af 8000 	nop.w
 800c7e6:	1c42      	adds	r2, r0, #1
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	d1d6      	bne.n	800c79a <_svfiprintf_r+0x176>
 800c7ec:	89ab      	ldrh	r3, [r5, #12]
 800c7ee:	065b      	lsls	r3, r3, #25
 800c7f0:	f53f af2c 	bmi.w	800c64c <_svfiprintf_r+0x28>
 800c7f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f6:	b01d      	add	sp, #116	; 0x74
 800c7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7fc:	ab03      	add	r3, sp, #12
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	462a      	mov	r2, r5
 800c802:	4b06      	ldr	r3, [pc, #24]	; (800c81c <_svfiprintf_r+0x1f8>)
 800c804:	a904      	add	r1, sp, #16
 800c806:	4638      	mov	r0, r7
 800c808:	f000 f9d4 	bl	800cbb4 <_printf_i>
 800c80c:	e7eb      	b.n	800c7e6 <_svfiprintf_r+0x1c2>
 800c80e:	bf00      	nop
 800c810:	08010c8a 	.word	0x08010c8a
 800c814:	08010c94 	.word	0x08010c94
 800c818:	00000000 	.word	0x00000000
 800c81c:	0800c56d 	.word	0x0800c56d
 800c820:	08010c90 	.word	0x08010c90

0800c824 <__sfputc_r>:
 800c824:	6893      	ldr	r3, [r2, #8]
 800c826:	3b01      	subs	r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	b410      	push	{r4}
 800c82c:	6093      	str	r3, [r2, #8]
 800c82e:	da08      	bge.n	800c842 <__sfputc_r+0x1e>
 800c830:	6994      	ldr	r4, [r2, #24]
 800c832:	42a3      	cmp	r3, r4
 800c834:	db01      	blt.n	800c83a <__sfputc_r+0x16>
 800c836:	290a      	cmp	r1, #10
 800c838:	d103      	bne.n	800c842 <__sfputc_r+0x1e>
 800c83a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c83e:	f000 badf 	b.w	800ce00 <__swbuf_r>
 800c842:	6813      	ldr	r3, [r2, #0]
 800c844:	1c58      	adds	r0, r3, #1
 800c846:	6010      	str	r0, [r2, #0]
 800c848:	7019      	strb	r1, [r3, #0]
 800c84a:	4608      	mov	r0, r1
 800c84c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <__sfputs_r>:
 800c852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c854:	4606      	mov	r6, r0
 800c856:	460f      	mov	r7, r1
 800c858:	4614      	mov	r4, r2
 800c85a:	18d5      	adds	r5, r2, r3
 800c85c:	42ac      	cmp	r4, r5
 800c85e:	d101      	bne.n	800c864 <__sfputs_r+0x12>
 800c860:	2000      	movs	r0, #0
 800c862:	e007      	b.n	800c874 <__sfputs_r+0x22>
 800c864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c868:	463a      	mov	r2, r7
 800c86a:	4630      	mov	r0, r6
 800c86c:	f7ff ffda 	bl	800c824 <__sfputc_r>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d1f3      	bne.n	800c85c <__sfputs_r+0xa>
 800c874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c878 <_vfiprintf_r>:
 800c878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c87c:	460d      	mov	r5, r1
 800c87e:	b09d      	sub	sp, #116	; 0x74
 800c880:	4614      	mov	r4, r2
 800c882:	4698      	mov	r8, r3
 800c884:	4606      	mov	r6, r0
 800c886:	b118      	cbz	r0, 800c890 <_vfiprintf_r+0x18>
 800c888:	6983      	ldr	r3, [r0, #24]
 800c88a:	b90b      	cbnz	r3, 800c890 <_vfiprintf_r+0x18>
 800c88c:	f000 fc9a 	bl	800d1c4 <__sinit>
 800c890:	4b89      	ldr	r3, [pc, #548]	; (800cab8 <_vfiprintf_r+0x240>)
 800c892:	429d      	cmp	r5, r3
 800c894:	d11b      	bne.n	800c8ce <_vfiprintf_r+0x56>
 800c896:	6875      	ldr	r5, [r6, #4]
 800c898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c89a:	07d9      	lsls	r1, r3, #31
 800c89c:	d405      	bmi.n	800c8aa <_vfiprintf_r+0x32>
 800c89e:	89ab      	ldrh	r3, [r5, #12]
 800c8a0:	059a      	lsls	r2, r3, #22
 800c8a2:	d402      	bmi.n	800c8aa <_vfiprintf_r+0x32>
 800c8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8a6:	f000 fd2b 	bl	800d300 <__retarget_lock_acquire_recursive>
 800c8aa:	89ab      	ldrh	r3, [r5, #12]
 800c8ac:	071b      	lsls	r3, r3, #28
 800c8ae:	d501      	bpl.n	800c8b4 <_vfiprintf_r+0x3c>
 800c8b0:	692b      	ldr	r3, [r5, #16]
 800c8b2:	b9eb      	cbnz	r3, 800c8f0 <_vfiprintf_r+0x78>
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f000 faf4 	bl	800cea4 <__swsetup_r>
 800c8bc:	b1c0      	cbz	r0, 800c8f0 <_vfiprintf_r+0x78>
 800c8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8c0:	07dc      	lsls	r4, r3, #31
 800c8c2:	d50e      	bpl.n	800c8e2 <_vfiprintf_r+0x6a>
 800c8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8c8:	b01d      	add	sp, #116	; 0x74
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ce:	4b7b      	ldr	r3, [pc, #492]	; (800cabc <_vfiprintf_r+0x244>)
 800c8d0:	429d      	cmp	r5, r3
 800c8d2:	d101      	bne.n	800c8d8 <_vfiprintf_r+0x60>
 800c8d4:	68b5      	ldr	r5, [r6, #8]
 800c8d6:	e7df      	b.n	800c898 <_vfiprintf_r+0x20>
 800c8d8:	4b79      	ldr	r3, [pc, #484]	; (800cac0 <_vfiprintf_r+0x248>)
 800c8da:	429d      	cmp	r5, r3
 800c8dc:	bf08      	it	eq
 800c8de:	68f5      	ldreq	r5, [r6, #12]
 800c8e0:	e7da      	b.n	800c898 <_vfiprintf_r+0x20>
 800c8e2:	89ab      	ldrh	r3, [r5, #12]
 800c8e4:	0598      	lsls	r0, r3, #22
 800c8e6:	d4ed      	bmi.n	800c8c4 <_vfiprintf_r+0x4c>
 800c8e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ea:	f000 fd0a 	bl	800d302 <__retarget_lock_release_recursive>
 800c8ee:	e7e9      	b.n	800c8c4 <_vfiprintf_r+0x4c>
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8f4:	2320      	movs	r3, #32
 800c8f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8fe:	2330      	movs	r3, #48	; 0x30
 800c900:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cac4 <_vfiprintf_r+0x24c>
 800c904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c908:	f04f 0901 	mov.w	r9, #1
 800c90c:	4623      	mov	r3, r4
 800c90e:	469a      	mov	sl, r3
 800c910:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c914:	b10a      	cbz	r2, 800c91a <_vfiprintf_r+0xa2>
 800c916:	2a25      	cmp	r2, #37	; 0x25
 800c918:	d1f9      	bne.n	800c90e <_vfiprintf_r+0x96>
 800c91a:	ebba 0b04 	subs.w	fp, sl, r4
 800c91e:	d00b      	beq.n	800c938 <_vfiprintf_r+0xc0>
 800c920:	465b      	mov	r3, fp
 800c922:	4622      	mov	r2, r4
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f7ff ff93 	bl	800c852 <__sfputs_r>
 800c92c:	3001      	adds	r0, #1
 800c92e:	f000 80aa 	beq.w	800ca86 <_vfiprintf_r+0x20e>
 800c932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c934:	445a      	add	r2, fp
 800c936:	9209      	str	r2, [sp, #36]	; 0x24
 800c938:	f89a 3000 	ldrb.w	r3, [sl]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 80a2 	beq.w	800ca86 <_vfiprintf_r+0x20e>
 800c942:	2300      	movs	r3, #0
 800c944:	f04f 32ff 	mov.w	r2, #4294967295
 800c948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c94c:	f10a 0a01 	add.w	sl, sl, #1
 800c950:	9304      	str	r3, [sp, #16]
 800c952:	9307      	str	r3, [sp, #28]
 800c954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c958:	931a      	str	r3, [sp, #104]	; 0x68
 800c95a:	4654      	mov	r4, sl
 800c95c:	2205      	movs	r2, #5
 800c95e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c962:	4858      	ldr	r0, [pc, #352]	; (800cac4 <_vfiprintf_r+0x24c>)
 800c964:	f7f3 fc34 	bl	80001d0 <memchr>
 800c968:	9a04      	ldr	r2, [sp, #16]
 800c96a:	b9d8      	cbnz	r0, 800c9a4 <_vfiprintf_r+0x12c>
 800c96c:	06d1      	lsls	r1, r2, #27
 800c96e:	bf44      	itt	mi
 800c970:	2320      	movmi	r3, #32
 800c972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c976:	0713      	lsls	r3, r2, #28
 800c978:	bf44      	itt	mi
 800c97a:	232b      	movmi	r3, #43	; 0x2b
 800c97c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c980:	f89a 3000 	ldrb.w	r3, [sl]
 800c984:	2b2a      	cmp	r3, #42	; 0x2a
 800c986:	d015      	beq.n	800c9b4 <_vfiprintf_r+0x13c>
 800c988:	9a07      	ldr	r2, [sp, #28]
 800c98a:	4654      	mov	r4, sl
 800c98c:	2000      	movs	r0, #0
 800c98e:	f04f 0c0a 	mov.w	ip, #10
 800c992:	4621      	mov	r1, r4
 800c994:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c998:	3b30      	subs	r3, #48	; 0x30
 800c99a:	2b09      	cmp	r3, #9
 800c99c:	d94e      	bls.n	800ca3c <_vfiprintf_r+0x1c4>
 800c99e:	b1b0      	cbz	r0, 800c9ce <_vfiprintf_r+0x156>
 800c9a0:	9207      	str	r2, [sp, #28]
 800c9a2:	e014      	b.n	800c9ce <_vfiprintf_r+0x156>
 800c9a4:	eba0 0308 	sub.w	r3, r0, r8
 800c9a8:	fa09 f303 	lsl.w	r3, r9, r3
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	9304      	str	r3, [sp, #16]
 800c9b0:	46a2      	mov	sl, r4
 800c9b2:	e7d2      	b.n	800c95a <_vfiprintf_r+0xe2>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	1d19      	adds	r1, r3, #4
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	9103      	str	r1, [sp, #12]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	bfbb      	ittet	lt
 800c9c0:	425b      	neglt	r3, r3
 800c9c2:	f042 0202 	orrlt.w	r2, r2, #2
 800c9c6:	9307      	strge	r3, [sp, #28]
 800c9c8:	9307      	strlt	r3, [sp, #28]
 800c9ca:	bfb8      	it	lt
 800c9cc:	9204      	strlt	r2, [sp, #16]
 800c9ce:	7823      	ldrb	r3, [r4, #0]
 800c9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800c9d2:	d10c      	bne.n	800c9ee <_vfiprintf_r+0x176>
 800c9d4:	7863      	ldrb	r3, [r4, #1]
 800c9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9d8:	d135      	bne.n	800ca46 <_vfiprintf_r+0x1ce>
 800c9da:	9b03      	ldr	r3, [sp, #12]
 800c9dc:	1d1a      	adds	r2, r3, #4
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	9203      	str	r2, [sp, #12]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	bfb8      	it	lt
 800c9e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9ea:	3402      	adds	r4, #2
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cad4 <_vfiprintf_r+0x25c>
 800c9f2:	7821      	ldrb	r1, [r4, #0]
 800c9f4:	2203      	movs	r2, #3
 800c9f6:	4650      	mov	r0, sl
 800c9f8:	f7f3 fbea 	bl	80001d0 <memchr>
 800c9fc:	b140      	cbz	r0, 800ca10 <_vfiprintf_r+0x198>
 800c9fe:	2340      	movs	r3, #64	; 0x40
 800ca00:	eba0 000a 	sub.w	r0, r0, sl
 800ca04:	fa03 f000 	lsl.w	r0, r3, r0
 800ca08:	9b04      	ldr	r3, [sp, #16]
 800ca0a:	4303      	orrs	r3, r0
 800ca0c:	3401      	adds	r4, #1
 800ca0e:	9304      	str	r3, [sp, #16]
 800ca10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca14:	482c      	ldr	r0, [pc, #176]	; (800cac8 <_vfiprintf_r+0x250>)
 800ca16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca1a:	2206      	movs	r2, #6
 800ca1c:	f7f3 fbd8 	bl	80001d0 <memchr>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d03f      	beq.n	800caa4 <_vfiprintf_r+0x22c>
 800ca24:	4b29      	ldr	r3, [pc, #164]	; (800cacc <_vfiprintf_r+0x254>)
 800ca26:	bb1b      	cbnz	r3, 800ca70 <_vfiprintf_r+0x1f8>
 800ca28:	9b03      	ldr	r3, [sp, #12]
 800ca2a:	3307      	adds	r3, #7
 800ca2c:	f023 0307 	bic.w	r3, r3, #7
 800ca30:	3308      	adds	r3, #8
 800ca32:	9303      	str	r3, [sp, #12]
 800ca34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca36:	443b      	add	r3, r7
 800ca38:	9309      	str	r3, [sp, #36]	; 0x24
 800ca3a:	e767      	b.n	800c90c <_vfiprintf_r+0x94>
 800ca3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca40:	460c      	mov	r4, r1
 800ca42:	2001      	movs	r0, #1
 800ca44:	e7a5      	b.n	800c992 <_vfiprintf_r+0x11a>
 800ca46:	2300      	movs	r3, #0
 800ca48:	3401      	adds	r4, #1
 800ca4a:	9305      	str	r3, [sp, #20]
 800ca4c:	4619      	mov	r1, r3
 800ca4e:	f04f 0c0a 	mov.w	ip, #10
 800ca52:	4620      	mov	r0, r4
 800ca54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca58:	3a30      	subs	r2, #48	; 0x30
 800ca5a:	2a09      	cmp	r2, #9
 800ca5c:	d903      	bls.n	800ca66 <_vfiprintf_r+0x1ee>
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d0c5      	beq.n	800c9ee <_vfiprintf_r+0x176>
 800ca62:	9105      	str	r1, [sp, #20]
 800ca64:	e7c3      	b.n	800c9ee <_vfiprintf_r+0x176>
 800ca66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e7f0      	b.n	800ca52 <_vfiprintf_r+0x1da>
 800ca70:	ab03      	add	r3, sp, #12
 800ca72:	9300      	str	r3, [sp, #0]
 800ca74:	462a      	mov	r2, r5
 800ca76:	4b16      	ldr	r3, [pc, #88]	; (800cad0 <_vfiprintf_r+0x258>)
 800ca78:	a904      	add	r1, sp, #16
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f3af 8000 	nop.w
 800ca80:	4607      	mov	r7, r0
 800ca82:	1c78      	adds	r0, r7, #1
 800ca84:	d1d6      	bne.n	800ca34 <_vfiprintf_r+0x1bc>
 800ca86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca88:	07d9      	lsls	r1, r3, #31
 800ca8a:	d405      	bmi.n	800ca98 <_vfiprintf_r+0x220>
 800ca8c:	89ab      	ldrh	r3, [r5, #12]
 800ca8e:	059a      	lsls	r2, r3, #22
 800ca90:	d402      	bmi.n	800ca98 <_vfiprintf_r+0x220>
 800ca92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca94:	f000 fc35 	bl	800d302 <__retarget_lock_release_recursive>
 800ca98:	89ab      	ldrh	r3, [r5, #12]
 800ca9a:	065b      	lsls	r3, r3, #25
 800ca9c:	f53f af12 	bmi.w	800c8c4 <_vfiprintf_r+0x4c>
 800caa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caa2:	e711      	b.n	800c8c8 <_vfiprintf_r+0x50>
 800caa4:	ab03      	add	r3, sp, #12
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	462a      	mov	r2, r5
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <_vfiprintf_r+0x258>)
 800caac:	a904      	add	r1, sp, #16
 800caae:	4630      	mov	r0, r6
 800cab0:	f000 f880 	bl	800cbb4 <_printf_i>
 800cab4:	e7e4      	b.n	800ca80 <_vfiprintf_r+0x208>
 800cab6:	bf00      	nop
 800cab8:	08010ce0 	.word	0x08010ce0
 800cabc:	08010d00 	.word	0x08010d00
 800cac0:	08010cc0 	.word	0x08010cc0
 800cac4:	08010c8a 	.word	0x08010c8a
 800cac8:	08010c94 	.word	0x08010c94
 800cacc:	00000000 	.word	0x00000000
 800cad0:	0800c853 	.word	0x0800c853
 800cad4:	08010c90 	.word	0x08010c90

0800cad8 <_printf_common>:
 800cad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cadc:	4616      	mov	r6, r2
 800cade:	4699      	mov	r9, r3
 800cae0:	688a      	ldr	r2, [r1, #8]
 800cae2:	690b      	ldr	r3, [r1, #16]
 800cae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cae8:	4293      	cmp	r3, r2
 800caea:	bfb8      	it	lt
 800caec:	4613      	movlt	r3, r2
 800caee:	6033      	str	r3, [r6, #0]
 800caf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800caf4:	4607      	mov	r7, r0
 800caf6:	460c      	mov	r4, r1
 800caf8:	b10a      	cbz	r2, 800cafe <_printf_common+0x26>
 800cafa:	3301      	adds	r3, #1
 800cafc:	6033      	str	r3, [r6, #0]
 800cafe:	6823      	ldr	r3, [r4, #0]
 800cb00:	0699      	lsls	r1, r3, #26
 800cb02:	bf42      	ittt	mi
 800cb04:	6833      	ldrmi	r3, [r6, #0]
 800cb06:	3302      	addmi	r3, #2
 800cb08:	6033      	strmi	r3, [r6, #0]
 800cb0a:	6825      	ldr	r5, [r4, #0]
 800cb0c:	f015 0506 	ands.w	r5, r5, #6
 800cb10:	d106      	bne.n	800cb20 <_printf_common+0x48>
 800cb12:	f104 0a19 	add.w	sl, r4, #25
 800cb16:	68e3      	ldr	r3, [r4, #12]
 800cb18:	6832      	ldr	r2, [r6, #0]
 800cb1a:	1a9b      	subs	r3, r3, r2
 800cb1c:	42ab      	cmp	r3, r5
 800cb1e:	dc26      	bgt.n	800cb6e <_printf_common+0x96>
 800cb20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb24:	1e13      	subs	r3, r2, #0
 800cb26:	6822      	ldr	r2, [r4, #0]
 800cb28:	bf18      	it	ne
 800cb2a:	2301      	movne	r3, #1
 800cb2c:	0692      	lsls	r2, r2, #26
 800cb2e:	d42b      	bmi.n	800cb88 <_printf_common+0xb0>
 800cb30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb34:	4649      	mov	r1, r9
 800cb36:	4638      	mov	r0, r7
 800cb38:	47c0      	blx	r8
 800cb3a:	3001      	adds	r0, #1
 800cb3c:	d01e      	beq.n	800cb7c <_printf_common+0xa4>
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	68e5      	ldr	r5, [r4, #12]
 800cb42:	6832      	ldr	r2, [r6, #0]
 800cb44:	f003 0306 	and.w	r3, r3, #6
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	bf08      	it	eq
 800cb4c:	1aad      	subeq	r5, r5, r2
 800cb4e:	68a3      	ldr	r3, [r4, #8]
 800cb50:	6922      	ldr	r2, [r4, #16]
 800cb52:	bf0c      	ite	eq
 800cb54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cb58:	2500      	movne	r5, #0
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	bfc4      	itt	gt
 800cb5e:	1a9b      	subgt	r3, r3, r2
 800cb60:	18ed      	addgt	r5, r5, r3
 800cb62:	2600      	movs	r6, #0
 800cb64:	341a      	adds	r4, #26
 800cb66:	42b5      	cmp	r5, r6
 800cb68:	d11a      	bne.n	800cba0 <_printf_common+0xc8>
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	e008      	b.n	800cb80 <_printf_common+0xa8>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	4652      	mov	r2, sl
 800cb72:	4649      	mov	r1, r9
 800cb74:	4638      	mov	r0, r7
 800cb76:	47c0      	blx	r8
 800cb78:	3001      	adds	r0, #1
 800cb7a:	d103      	bne.n	800cb84 <_printf_common+0xac>
 800cb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb84:	3501      	adds	r5, #1
 800cb86:	e7c6      	b.n	800cb16 <_printf_common+0x3e>
 800cb88:	18e1      	adds	r1, r4, r3
 800cb8a:	1c5a      	adds	r2, r3, #1
 800cb8c:	2030      	movs	r0, #48	; 0x30
 800cb8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb92:	4422      	add	r2, r4
 800cb94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb9c:	3302      	adds	r3, #2
 800cb9e:	e7c7      	b.n	800cb30 <_printf_common+0x58>
 800cba0:	2301      	movs	r3, #1
 800cba2:	4622      	mov	r2, r4
 800cba4:	4649      	mov	r1, r9
 800cba6:	4638      	mov	r0, r7
 800cba8:	47c0      	blx	r8
 800cbaa:	3001      	adds	r0, #1
 800cbac:	d0e6      	beq.n	800cb7c <_printf_common+0xa4>
 800cbae:	3601      	adds	r6, #1
 800cbb0:	e7d9      	b.n	800cb66 <_printf_common+0x8e>
	...

0800cbb4 <_printf_i>:
 800cbb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb8:	460c      	mov	r4, r1
 800cbba:	4691      	mov	r9, r2
 800cbbc:	7e27      	ldrb	r7, [r4, #24]
 800cbbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cbc0:	2f78      	cmp	r7, #120	; 0x78
 800cbc2:	4680      	mov	r8, r0
 800cbc4:	469a      	mov	sl, r3
 800cbc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbca:	d807      	bhi.n	800cbdc <_printf_i+0x28>
 800cbcc:	2f62      	cmp	r7, #98	; 0x62
 800cbce:	d80a      	bhi.n	800cbe6 <_printf_i+0x32>
 800cbd0:	2f00      	cmp	r7, #0
 800cbd2:	f000 80d8 	beq.w	800cd86 <_printf_i+0x1d2>
 800cbd6:	2f58      	cmp	r7, #88	; 0x58
 800cbd8:	f000 80a3 	beq.w	800cd22 <_printf_i+0x16e>
 800cbdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cbe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cbe4:	e03a      	b.n	800cc5c <_printf_i+0xa8>
 800cbe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cbea:	2b15      	cmp	r3, #21
 800cbec:	d8f6      	bhi.n	800cbdc <_printf_i+0x28>
 800cbee:	a001      	add	r0, pc, #4	; (adr r0, 800cbf4 <_printf_i+0x40>)
 800cbf0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cbf4:	0800cc4d 	.word	0x0800cc4d
 800cbf8:	0800cc61 	.word	0x0800cc61
 800cbfc:	0800cbdd 	.word	0x0800cbdd
 800cc00:	0800cbdd 	.word	0x0800cbdd
 800cc04:	0800cbdd 	.word	0x0800cbdd
 800cc08:	0800cbdd 	.word	0x0800cbdd
 800cc0c:	0800cc61 	.word	0x0800cc61
 800cc10:	0800cbdd 	.word	0x0800cbdd
 800cc14:	0800cbdd 	.word	0x0800cbdd
 800cc18:	0800cbdd 	.word	0x0800cbdd
 800cc1c:	0800cbdd 	.word	0x0800cbdd
 800cc20:	0800cd6d 	.word	0x0800cd6d
 800cc24:	0800cc91 	.word	0x0800cc91
 800cc28:	0800cd4f 	.word	0x0800cd4f
 800cc2c:	0800cbdd 	.word	0x0800cbdd
 800cc30:	0800cbdd 	.word	0x0800cbdd
 800cc34:	0800cd8f 	.word	0x0800cd8f
 800cc38:	0800cbdd 	.word	0x0800cbdd
 800cc3c:	0800cc91 	.word	0x0800cc91
 800cc40:	0800cbdd 	.word	0x0800cbdd
 800cc44:	0800cbdd 	.word	0x0800cbdd
 800cc48:	0800cd57 	.word	0x0800cd57
 800cc4c:	680b      	ldr	r3, [r1, #0]
 800cc4e:	1d1a      	adds	r2, r3, #4
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	600a      	str	r2, [r1, #0]
 800cc54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cc58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e0a3      	b.n	800cda8 <_printf_i+0x1f4>
 800cc60:	6825      	ldr	r5, [r4, #0]
 800cc62:	6808      	ldr	r0, [r1, #0]
 800cc64:	062e      	lsls	r6, r5, #24
 800cc66:	f100 0304 	add.w	r3, r0, #4
 800cc6a:	d50a      	bpl.n	800cc82 <_printf_i+0xce>
 800cc6c:	6805      	ldr	r5, [r0, #0]
 800cc6e:	600b      	str	r3, [r1, #0]
 800cc70:	2d00      	cmp	r5, #0
 800cc72:	da03      	bge.n	800cc7c <_printf_i+0xc8>
 800cc74:	232d      	movs	r3, #45	; 0x2d
 800cc76:	426d      	negs	r5, r5
 800cc78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc7c:	485e      	ldr	r0, [pc, #376]	; (800cdf8 <_printf_i+0x244>)
 800cc7e:	230a      	movs	r3, #10
 800cc80:	e019      	b.n	800ccb6 <_printf_i+0x102>
 800cc82:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cc86:	6805      	ldr	r5, [r0, #0]
 800cc88:	600b      	str	r3, [r1, #0]
 800cc8a:	bf18      	it	ne
 800cc8c:	b22d      	sxthne	r5, r5
 800cc8e:	e7ef      	b.n	800cc70 <_printf_i+0xbc>
 800cc90:	680b      	ldr	r3, [r1, #0]
 800cc92:	6825      	ldr	r5, [r4, #0]
 800cc94:	1d18      	adds	r0, r3, #4
 800cc96:	6008      	str	r0, [r1, #0]
 800cc98:	0628      	lsls	r0, r5, #24
 800cc9a:	d501      	bpl.n	800cca0 <_printf_i+0xec>
 800cc9c:	681d      	ldr	r5, [r3, #0]
 800cc9e:	e002      	b.n	800cca6 <_printf_i+0xf2>
 800cca0:	0669      	lsls	r1, r5, #25
 800cca2:	d5fb      	bpl.n	800cc9c <_printf_i+0xe8>
 800cca4:	881d      	ldrh	r5, [r3, #0]
 800cca6:	4854      	ldr	r0, [pc, #336]	; (800cdf8 <_printf_i+0x244>)
 800cca8:	2f6f      	cmp	r7, #111	; 0x6f
 800ccaa:	bf0c      	ite	eq
 800ccac:	2308      	moveq	r3, #8
 800ccae:	230a      	movne	r3, #10
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ccb6:	6866      	ldr	r6, [r4, #4]
 800ccb8:	60a6      	str	r6, [r4, #8]
 800ccba:	2e00      	cmp	r6, #0
 800ccbc:	bfa2      	ittt	ge
 800ccbe:	6821      	ldrge	r1, [r4, #0]
 800ccc0:	f021 0104 	bicge.w	r1, r1, #4
 800ccc4:	6021      	strge	r1, [r4, #0]
 800ccc6:	b90d      	cbnz	r5, 800cccc <_printf_i+0x118>
 800ccc8:	2e00      	cmp	r6, #0
 800ccca:	d04d      	beq.n	800cd68 <_printf_i+0x1b4>
 800cccc:	4616      	mov	r6, r2
 800ccce:	fbb5 f1f3 	udiv	r1, r5, r3
 800ccd2:	fb03 5711 	mls	r7, r3, r1, r5
 800ccd6:	5dc7      	ldrb	r7, [r0, r7]
 800ccd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ccdc:	462f      	mov	r7, r5
 800ccde:	42bb      	cmp	r3, r7
 800cce0:	460d      	mov	r5, r1
 800cce2:	d9f4      	bls.n	800ccce <_printf_i+0x11a>
 800cce4:	2b08      	cmp	r3, #8
 800cce6:	d10b      	bne.n	800cd00 <_printf_i+0x14c>
 800cce8:	6823      	ldr	r3, [r4, #0]
 800ccea:	07df      	lsls	r7, r3, #31
 800ccec:	d508      	bpl.n	800cd00 <_printf_i+0x14c>
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	6861      	ldr	r1, [r4, #4]
 800ccf2:	4299      	cmp	r1, r3
 800ccf4:	bfde      	ittt	le
 800ccf6:	2330      	movle	r3, #48	; 0x30
 800ccf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ccfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cd00:	1b92      	subs	r2, r2, r6
 800cd02:	6122      	str	r2, [r4, #16]
 800cd04:	f8cd a000 	str.w	sl, [sp]
 800cd08:	464b      	mov	r3, r9
 800cd0a:	aa03      	add	r2, sp, #12
 800cd0c:	4621      	mov	r1, r4
 800cd0e:	4640      	mov	r0, r8
 800cd10:	f7ff fee2 	bl	800cad8 <_printf_common>
 800cd14:	3001      	adds	r0, #1
 800cd16:	d14c      	bne.n	800cdb2 <_printf_i+0x1fe>
 800cd18:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1c:	b004      	add	sp, #16
 800cd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd22:	4835      	ldr	r0, [pc, #212]	; (800cdf8 <_printf_i+0x244>)
 800cd24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd28:	6823      	ldr	r3, [r4, #0]
 800cd2a:	680e      	ldr	r6, [r1, #0]
 800cd2c:	061f      	lsls	r7, r3, #24
 800cd2e:	f856 5b04 	ldr.w	r5, [r6], #4
 800cd32:	600e      	str	r6, [r1, #0]
 800cd34:	d514      	bpl.n	800cd60 <_printf_i+0x1ac>
 800cd36:	07d9      	lsls	r1, r3, #31
 800cd38:	bf44      	itt	mi
 800cd3a:	f043 0320 	orrmi.w	r3, r3, #32
 800cd3e:	6023      	strmi	r3, [r4, #0]
 800cd40:	b91d      	cbnz	r5, 800cd4a <_printf_i+0x196>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	f023 0320 	bic.w	r3, r3, #32
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	2310      	movs	r3, #16
 800cd4c:	e7b0      	b.n	800ccb0 <_printf_i+0xfc>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	f043 0320 	orr.w	r3, r3, #32
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	2378      	movs	r3, #120	; 0x78
 800cd58:	4828      	ldr	r0, [pc, #160]	; (800cdfc <_printf_i+0x248>)
 800cd5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cd5e:	e7e3      	b.n	800cd28 <_printf_i+0x174>
 800cd60:	065e      	lsls	r6, r3, #25
 800cd62:	bf48      	it	mi
 800cd64:	b2ad      	uxthmi	r5, r5
 800cd66:	e7e6      	b.n	800cd36 <_printf_i+0x182>
 800cd68:	4616      	mov	r6, r2
 800cd6a:	e7bb      	b.n	800cce4 <_printf_i+0x130>
 800cd6c:	680b      	ldr	r3, [r1, #0]
 800cd6e:	6826      	ldr	r6, [r4, #0]
 800cd70:	6960      	ldr	r0, [r4, #20]
 800cd72:	1d1d      	adds	r5, r3, #4
 800cd74:	600d      	str	r5, [r1, #0]
 800cd76:	0635      	lsls	r5, r6, #24
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	d501      	bpl.n	800cd80 <_printf_i+0x1cc>
 800cd7c:	6018      	str	r0, [r3, #0]
 800cd7e:	e002      	b.n	800cd86 <_printf_i+0x1d2>
 800cd80:	0671      	lsls	r1, r6, #25
 800cd82:	d5fb      	bpl.n	800cd7c <_printf_i+0x1c8>
 800cd84:	8018      	strh	r0, [r3, #0]
 800cd86:	2300      	movs	r3, #0
 800cd88:	6123      	str	r3, [r4, #16]
 800cd8a:	4616      	mov	r6, r2
 800cd8c:	e7ba      	b.n	800cd04 <_printf_i+0x150>
 800cd8e:	680b      	ldr	r3, [r1, #0]
 800cd90:	1d1a      	adds	r2, r3, #4
 800cd92:	600a      	str	r2, [r1, #0]
 800cd94:	681e      	ldr	r6, [r3, #0]
 800cd96:	6862      	ldr	r2, [r4, #4]
 800cd98:	2100      	movs	r1, #0
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f7f3 fa18 	bl	80001d0 <memchr>
 800cda0:	b108      	cbz	r0, 800cda6 <_printf_i+0x1f2>
 800cda2:	1b80      	subs	r0, r0, r6
 800cda4:	6060      	str	r0, [r4, #4]
 800cda6:	6863      	ldr	r3, [r4, #4]
 800cda8:	6123      	str	r3, [r4, #16]
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdb0:	e7a8      	b.n	800cd04 <_printf_i+0x150>
 800cdb2:	6923      	ldr	r3, [r4, #16]
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	4649      	mov	r1, r9
 800cdb8:	4640      	mov	r0, r8
 800cdba:	47d0      	blx	sl
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d0ab      	beq.n	800cd18 <_printf_i+0x164>
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	079b      	lsls	r3, r3, #30
 800cdc4:	d413      	bmi.n	800cdee <_printf_i+0x23a>
 800cdc6:	68e0      	ldr	r0, [r4, #12]
 800cdc8:	9b03      	ldr	r3, [sp, #12]
 800cdca:	4298      	cmp	r0, r3
 800cdcc:	bfb8      	it	lt
 800cdce:	4618      	movlt	r0, r3
 800cdd0:	e7a4      	b.n	800cd1c <_printf_i+0x168>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	4649      	mov	r1, r9
 800cdd8:	4640      	mov	r0, r8
 800cdda:	47d0      	blx	sl
 800cddc:	3001      	adds	r0, #1
 800cdde:	d09b      	beq.n	800cd18 <_printf_i+0x164>
 800cde0:	3501      	adds	r5, #1
 800cde2:	68e3      	ldr	r3, [r4, #12]
 800cde4:	9903      	ldr	r1, [sp, #12]
 800cde6:	1a5b      	subs	r3, r3, r1
 800cde8:	42ab      	cmp	r3, r5
 800cdea:	dcf2      	bgt.n	800cdd2 <_printf_i+0x21e>
 800cdec:	e7eb      	b.n	800cdc6 <_printf_i+0x212>
 800cdee:	2500      	movs	r5, #0
 800cdf0:	f104 0619 	add.w	r6, r4, #25
 800cdf4:	e7f5      	b.n	800cde2 <_printf_i+0x22e>
 800cdf6:	bf00      	nop
 800cdf8:	08010c9b 	.word	0x08010c9b
 800cdfc:	08010cac 	.word	0x08010cac

0800ce00 <__swbuf_r>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	460e      	mov	r6, r1
 800ce04:	4614      	mov	r4, r2
 800ce06:	4605      	mov	r5, r0
 800ce08:	b118      	cbz	r0, 800ce12 <__swbuf_r+0x12>
 800ce0a:	6983      	ldr	r3, [r0, #24]
 800ce0c:	b90b      	cbnz	r3, 800ce12 <__swbuf_r+0x12>
 800ce0e:	f000 f9d9 	bl	800d1c4 <__sinit>
 800ce12:	4b21      	ldr	r3, [pc, #132]	; (800ce98 <__swbuf_r+0x98>)
 800ce14:	429c      	cmp	r4, r3
 800ce16:	d12b      	bne.n	800ce70 <__swbuf_r+0x70>
 800ce18:	686c      	ldr	r4, [r5, #4]
 800ce1a:	69a3      	ldr	r3, [r4, #24]
 800ce1c:	60a3      	str	r3, [r4, #8]
 800ce1e:	89a3      	ldrh	r3, [r4, #12]
 800ce20:	071a      	lsls	r2, r3, #28
 800ce22:	d52f      	bpl.n	800ce84 <__swbuf_r+0x84>
 800ce24:	6923      	ldr	r3, [r4, #16]
 800ce26:	b36b      	cbz	r3, 800ce84 <__swbuf_r+0x84>
 800ce28:	6923      	ldr	r3, [r4, #16]
 800ce2a:	6820      	ldr	r0, [r4, #0]
 800ce2c:	1ac0      	subs	r0, r0, r3
 800ce2e:	6963      	ldr	r3, [r4, #20]
 800ce30:	b2f6      	uxtb	r6, r6
 800ce32:	4283      	cmp	r3, r0
 800ce34:	4637      	mov	r7, r6
 800ce36:	dc04      	bgt.n	800ce42 <__swbuf_r+0x42>
 800ce38:	4621      	mov	r1, r4
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	f000 f92e 	bl	800d09c <_fflush_r>
 800ce40:	bb30      	cbnz	r0, 800ce90 <__swbuf_r+0x90>
 800ce42:	68a3      	ldr	r3, [r4, #8]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	60a3      	str	r3, [r4, #8]
 800ce48:	6823      	ldr	r3, [r4, #0]
 800ce4a:	1c5a      	adds	r2, r3, #1
 800ce4c:	6022      	str	r2, [r4, #0]
 800ce4e:	701e      	strb	r6, [r3, #0]
 800ce50:	6963      	ldr	r3, [r4, #20]
 800ce52:	3001      	adds	r0, #1
 800ce54:	4283      	cmp	r3, r0
 800ce56:	d004      	beq.n	800ce62 <__swbuf_r+0x62>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	07db      	lsls	r3, r3, #31
 800ce5c:	d506      	bpl.n	800ce6c <__swbuf_r+0x6c>
 800ce5e:	2e0a      	cmp	r6, #10
 800ce60:	d104      	bne.n	800ce6c <__swbuf_r+0x6c>
 800ce62:	4621      	mov	r1, r4
 800ce64:	4628      	mov	r0, r5
 800ce66:	f000 f919 	bl	800d09c <_fflush_r>
 800ce6a:	b988      	cbnz	r0, 800ce90 <__swbuf_r+0x90>
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce70:	4b0a      	ldr	r3, [pc, #40]	; (800ce9c <__swbuf_r+0x9c>)
 800ce72:	429c      	cmp	r4, r3
 800ce74:	d101      	bne.n	800ce7a <__swbuf_r+0x7a>
 800ce76:	68ac      	ldr	r4, [r5, #8]
 800ce78:	e7cf      	b.n	800ce1a <__swbuf_r+0x1a>
 800ce7a:	4b09      	ldr	r3, [pc, #36]	; (800cea0 <__swbuf_r+0xa0>)
 800ce7c:	429c      	cmp	r4, r3
 800ce7e:	bf08      	it	eq
 800ce80:	68ec      	ldreq	r4, [r5, #12]
 800ce82:	e7ca      	b.n	800ce1a <__swbuf_r+0x1a>
 800ce84:	4621      	mov	r1, r4
 800ce86:	4628      	mov	r0, r5
 800ce88:	f000 f80c 	bl	800cea4 <__swsetup_r>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d0cb      	beq.n	800ce28 <__swbuf_r+0x28>
 800ce90:	f04f 37ff 	mov.w	r7, #4294967295
 800ce94:	e7ea      	b.n	800ce6c <__swbuf_r+0x6c>
 800ce96:	bf00      	nop
 800ce98:	08010ce0 	.word	0x08010ce0
 800ce9c:	08010d00 	.word	0x08010d00
 800cea0:	08010cc0 	.word	0x08010cc0

0800cea4 <__swsetup_r>:
 800cea4:	4b32      	ldr	r3, [pc, #200]	; (800cf70 <__swsetup_r+0xcc>)
 800cea6:	b570      	push	{r4, r5, r6, lr}
 800cea8:	681d      	ldr	r5, [r3, #0]
 800ceaa:	4606      	mov	r6, r0
 800ceac:	460c      	mov	r4, r1
 800ceae:	b125      	cbz	r5, 800ceba <__swsetup_r+0x16>
 800ceb0:	69ab      	ldr	r3, [r5, #24]
 800ceb2:	b913      	cbnz	r3, 800ceba <__swsetup_r+0x16>
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f000 f985 	bl	800d1c4 <__sinit>
 800ceba:	4b2e      	ldr	r3, [pc, #184]	; (800cf74 <__swsetup_r+0xd0>)
 800cebc:	429c      	cmp	r4, r3
 800cebe:	d10f      	bne.n	800cee0 <__swsetup_r+0x3c>
 800cec0:	686c      	ldr	r4, [r5, #4]
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cec8:	0719      	lsls	r1, r3, #28
 800ceca:	d42c      	bmi.n	800cf26 <__swsetup_r+0x82>
 800cecc:	06dd      	lsls	r5, r3, #27
 800cece:	d411      	bmi.n	800cef4 <__swsetup_r+0x50>
 800ced0:	2309      	movs	r3, #9
 800ced2:	6033      	str	r3, [r6, #0]
 800ced4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	f04f 30ff 	mov.w	r0, #4294967295
 800cede:	e03e      	b.n	800cf5e <__swsetup_r+0xba>
 800cee0:	4b25      	ldr	r3, [pc, #148]	; (800cf78 <__swsetup_r+0xd4>)
 800cee2:	429c      	cmp	r4, r3
 800cee4:	d101      	bne.n	800ceea <__swsetup_r+0x46>
 800cee6:	68ac      	ldr	r4, [r5, #8]
 800cee8:	e7eb      	b.n	800cec2 <__swsetup_r+0x1e>
 800ceea:	4b24      	ldr	r3, [pc, #144]	; (800cf7c <__swsetup_r+0xd8>)
 800ceec:	429c      	cmp	r4, r3
 800ceee:	bf08      	it	eq
 800cef0:	68ec      	ldreq	r4, [r5, #12]
 800cef2:	e7e6      	b.n	800cec2 <__swsetup_r+0x1e>
 800cef4:	0758      	lsls	r0, r3, #29
 800cef6:	d512      	bpl.n	800cf1e <__swsetup_r+0x7a>
 800cef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cefa:	b141      	cbz	r1, 800cf0e <__swsetup_r+0x6a>
 800cefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf00:	4299      	cmp	r1, r3
 800cf02:	d002      	beq.n	800cf0a <__swsetup_r+0x66>
 800cf04:	4630      	mov	r0, r6
 800cf06:	f7ff f9db 	bl	800c2c0 <_free_r>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	6363      	str	r3, [r4, #52]	; 0x34
 800cf0e:	89a3      	ldrh	r3, [r4, #12]
 800cf10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf14:	81a3      	strh	r3, [r4, #12]
 800cf16:	2300      	movs	r3, #0
 800cf18:	6063      	str	r3, [r4, #4]
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	6023      	str	r3, [r4, #0]
 800cf1e:	89a3      	ldrh	r3, [r4, #12]
 800cf20:	f043 0308 	orr.w	r3, r3, #8
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	6923      	ldr	r3, [r4, #16]
 800cf28:	b94b      	cbnz	r3, 800cf3e <__swsetup_r+0x9a>
 800cf2a:	89a3      	ldrh	r3, [r4, #12]
 800cf2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf34:	d003      	beq.n	800cf3e <__swsetup_r+0x9a>
 800cf36:	4621      	mov	r1, r4
 800cf38:	4630      	mov	r0, r6
 800cf3a:	f000 fa07 	bl	800d34c <__smakebuf_r>
 800cf3e:	89a0      	ldrh	r0, [r4, #12]
 800cf40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf44:	f010 0301 	ands.w	r3, r0, #1
 800cf48:	d00a      	beq.n	800cf60 <__swsetup_r+0xbc>
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60a3      	str	r3, [r4, #8]
 800cf4e:	6963      	ldr	r3, [r4, #20]
 800cf50:	425b      	negs	r3, r3
 800cf52:	61a3      	str	r3, [r4, #24]
 800cf54:	6923      	ldr	r3, [r4, #16]
 800cf56:	b943      	cbnz	r3, 800cf6a <__swsetup_r+0xc6>
 800cf58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf5c:	d1ba      	bne.n	800ced4 <__swsetup_r+0x30>
 800cf5e:	bd70      	pop	{r4, r5, r6, pc}
 800cf60:	0781      	lsls	r1, r0, #30
 800cf62:	bf58      	it	pl
 800cf64:	6963      	ldrpl	r3, [r4, #20]
 800cf66:	60a3      	str	r3, [r4, #8]
 800cf68:	e7f4      	b.n	800cf54 <__swsetup_r+0xb0>
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	e7f7      	b.n	800cf5e <__swsetup_r+0xba>
 800cf6e:	bf00      	nop
 800cf70:	2000007c 	.word	0x2000007c
 800cf74:	08010ce0 	.word	0x08010ce0
 800cf78:	08010d00 	.word	0x08010d00
 800cf7c:	08010cc0 	.word	0x08010cc0

0800cf80 <abort>:
 800cf80:	b508      	push	{r3, lr}
 800cf82:	2006      	movs	r0, #6
 800cf84:	f000 fa98 	bl	800d4b8 <raise>
 800cf88:	2001      	movs	r0, #1
 800cf8a:	f7f7 ff01 	bl	8004d90 <_exit>
	...

0800cf90 <__sflush_r>:
 800cf90:	898a      	ldrh	r2, [r1, #12]
 800cf92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf96:	4605      	mov	r5, r0
 800cf98:	0710      	lsls	r0, r2, #28
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	d458      	bmi.n	800d050 <__sflush_r+0xc0>
 800cf9e:	684b      	ldr	r3, [r1, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	dc05      	bgt.n	800cfb0 <__sflush_r+0x20>
 800cfa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dc02      	bgt.n	800cfb0 <__sflush_r+0x20>
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfb2:	2e00      	cmp	r6, #0
 800cfb4:	d0f9      	beq.n	800cfaa <__sflush_r+0x1a>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cfbc:	682f      	ldr	r7, [r5, #0]
 800cfbe:	602b      	str	r3, [r5, #0]
 800cfc0:	d032      	beq.n	800d028 <__sflush_r+0x98>
 800cfc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cfc4:	89a3      	ldrh	r3, [r4, #12]
 800cfc6:	075a      	lsls	r2, r3, #29
 800cfc8:	d505      	bpl.n	800cfd6 <__sflush_r+0x46>
 800cfca:	6863      	ldr	r3, [r4, #4]
 800cfcc:	1ac0      	subs	r0, r0, r3
 800cfce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfd0:	b10b      	cbz	r3, 800cfd6 <__sflush_r+0x46>
 800cfd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfd4:	1ac0      	subs	r0, r0, r3
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	4602      	mov	r2, r0
 800cfda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfdc:	6a21      	ldr	r1, [r4, #32]
 800cfde:	4628      	mov	r0, r5
 800cfe0:	47b0      	blx	r6
 800cfe2:	1c43      	adds	r3, r0, #1
 800cfe4:	89a3      	ldrh	r3, [r4, #12]
 800cfe6:	d106      	bne.n	800cff6 <__sflush_r+0x66>
 800cfe8:	6829      	ldr	r1, [r5, #0]
 800cfea:	291d      	cmp	r1, #29
 800cfec:	d82c      	bhi.n	800d048 <__sflush_r+0xb8>
 800cfee:	4a2a      	ldr	r2, [pc, #168]	; (800d098 <__sflush_r+0x108>)
 800cff0:	40ca      	lsrs	r2, r1
 800cff2:	07d6      	lsls	r6, r2, #31
 800cff4:	d528      	bpl.n	800d048 <__sflush_r+0xb8>
 800cff6:	2200      	movs	r2, #0
 800cff8:	6062      	str	r2, [r4, #4]
 800cffa:	04d9      	lsls	r1, r3, #19
 800cffc:	6922      	ldr	r2, [r4, #16]
 800cffe:	6022      	str	r2, [r4, #0]
 800d000:	d504      	bpl.n	800d00c <__sflush_r+0x7c>
 800d002:	1c42      	adds	r2, r0, #1
 800d004:	d101      	bne.n	800d00a <__sflush_r+0x7a>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	b903      	cbnz	r3, 800d00c <__sflush_r+0x7c>
 800d00a:	6560      	str	r0, [r4, #84]	; 0x54
 800d00c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d00e:	602f      	str	r7, [r5, #0]
 800d010:	2900      	cmp	r1, #0
 800d012:	d0ca      	beq.n	800cfaa <__sflush_r+0x1a>
 800d014:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d018:	4299      	cmp	r1, r3
 800d01a:	d002      	beq.n	800d022 <__sflush_r+0x92>
 800d01c:	4628      	mov	r0, r5
 800d01e:	f7ff f94f 	bl	800c2c0 <_free_r>
 800d022:	2000      	movs	r0, #0
 800d024:	6360      	str	r0, [r4, #52]	; 0x34
 800d026:	e7c1      	b.n	800cfac <__sflush_r+0x1c>
 800d028:	6a21      	ldr	r1, [r4, #32]
 800d02a:	2301      	movs	r3, #1
 800d02c:	4628      	mov	r0, r5
 800d02e:	47b0      	blx	r6
 800d030:	1c41      	adds	r1, r0, #1
 800d032:	d1c7      	bne.n	800cfc4 <__sflush_r+0x34>
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0c4      	beq.n	800cfc4 <__sflush_r+0x34>
 800d03a:	2b1d      	cmp	r3, #29
 800d03c:	d001      	beq.n	800d042 <__sflush_r+0xb2>
 800d03e:	2b16      	cmp	r3, #22
 800d040:	d101      	bne.n	800d046 <__sflush_r+0xb6>
 800d042:	602f      	str	r7, [r5, #0]
 800d044:	e7b1      	b.n	800cfaa <__sflush_r+0x1a>
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d04c:	81a3      	strh	r3, [r4, #12]
 800d04e:	e7ad      	b.n	800cfac <__sflush_r+0x1c>
 800d050:	690f      	ldr	r7, [r1, #16]
 800d052:	2f00      	cmp	r7, #0
 800d054:	d0a9      	beq.n	800cfaa <__sflush_r+0x1a>
 800d056:	0793      	lsls	r3, r2, #30
 800d058:	680e      	ldr	r6, [r1, #0]
 800d05a:	bf08      	it	eq
 800d05c:	694b      	ldreq	r3, [r1, #20]
 800d05e:	600f      	str	r7, [r1, #0]
 800d060:	bf18      	it	ne
 800d062:	2300      	movne	r3, #0
 800d064:	eba6 0807 	sub.w	r8, r6, r7
 800d068:	608b      	str	r3, [r1, #8]
 800d06a:	f1b8 0f00 	cmp.w	r8, #0
 800d06e:	dd9c      	ble.n	800cfaa <__sflush_r+0x1a>
 800d070:	6a21      	ldr	r1, [r4, #32]
 800d072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d074:	4643      	mov	r3, r8
 800d076:	463a      	mov	r2, r7
 800d078:	4628      	mov	r0, r5
 800d07a:	47b0      	blx	r6
 800d07c:	2800      	cmp	r0, #0
 800d07e:	dc06      	bgt.n	800d08e <__sflush_r+0xfe>
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d086:	81a3      	strh	r3, [r4, #12]
 800d088:	f04f 30ff 	mov.w	r0, #4294967295
 800d08c:	e78e      	b.n	800cfac <__sflush_r+0x1c>
 800d08e:	4407      	add	r7, r0
 800d090:	eba8 0800 	sub.w	r8, r8, r0
 800d094:	e7e9      	b.n	800d06a <__sflush_r+0xda>
 800d096:	bf00      	nop
 800d098:	20400001 	.word	0x20400001

0800d09c <_fflush_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	690b      	ldr	r3, [r1, #16]
 800d0a0:	4605      	mov	r5, r0
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	b913      	cbnz	r3, 800d0ac <_fflush_r+0x10>
 800d0a6:	2500      	movs	r5, #0
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	b118      	cbz	r0, 800d0b6 <_fflush_r+0x1a>
 800d0ae:	6983      	ldr	r3, [r0, #24]
 800d0b0:	b90b      	cbnz	r3, 800d0b6 <_fflush_r+0x1a>
 800d0b2:	f000 f887 	bl	800d1c4 <__sinit>
 800d0b6:	4b14      	ldr	r3, [pc, #80]	; (800d108 <_fflush_r+0x6c>)
 800d0b8:	429c      	cmp	r4, r3
 800d0ba:	d11b      	bne.n	800d0f4 <_fflush_r+0x58>
 800d0bc:	686c      	ldr	r4, [r5, #4]
 800d0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d0ef      	beq.n	800d0a6 <_fflush_r+0xa>
 800d0c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d0c8:	07d0      	lsls	r0, r2, #31
 800d0ca:	d404      	bmi.n	800d0d6 <_fflush_r+0x3a>
 800d0cc:	0599      	lsls	r1, r3, #22
 800d0ce:	d402      	bmi.n	800d0d6 <_fflush_r+0x3a>
 800d0d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0d2:	f000 f915 	bl	800d300 <__retarget_lock_acquire_recursive>
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	4621      	mov	r1, r4
 800d0da:	f7ff ff59 	bl	800cf90 <__sflush_r>
 800d0de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0e0:	07da      	lsls	r2, r3, #31
 800d0e2:	4605      	mov	r5, r0
 800d0e4:	d4e0      	bmi.n	800d0a8 <_fflush_r+0xc>
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	059b      	lsls	r3, r3, #22
 800d0ea:	d4dd      	bmi.n	800d0a8 <_fflush_r+0xc>
 800d0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0ee:	f000 f908 	bl	800d302 <__retarget_lock_release_recursive>
 800d0f2:	e7d9      	b.n	800d0a8 <_fflush_r+0xc>
 800d0f4:	4b05      	ldr	r3, [pc, #20]	; (800d10c <_fflush_r+0x70>)
 800d0f6:	429c      	cmp	r4, r3
 800d0f8:	d101      	bne.n	800d0fe <_fflush_r+0x62>
 800d0fa:	68ac      	ldr	r4, [r5, #8]
 800d0fc:	e7df      	b.n	800d0be <_fflush_r+0x22>
 800d0fe:	4b04      	ldr	r3, [pc, #16]	; (800d110 <_fflush_r+0x74>)
 800d100:	429c      	cmp	r4, r3
 800d102:	bf08      	it	eq
 800d104:	68ec      	ldreq	r4, [r5, #12]
 800d106:	e7da      	b.n	800d0be <_fflush_r+0x22>
 800d108:	08010ce0 	.word	0x08010ce0
 800d10c:	08010d00 	.word	0x08010d00
 800d110:	08010cc0 	.word	0x08010cc0

0800d114 <std>:
 800d114:	2300      	movs	r3, #0
 800d116:	b510      	push	{r4, lr}
 800d118:	4604      	mov	r4, r0
 800d11a:	e9c0 3300 	strd	r3, r3, [r0]
 800d11e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d122:	6083      	str	r3, [r0, #8]
 800d124:	8181      	strh	r1, [r0, #12]
 800d126:	6643      	str	r3, [r0, #100]	; 0x64
 800d128:	81c2      	strh	r2, [r0, #14]
 800d12a:	6183      	str	r3, [r0, #24]
 800d12c:	4619      	mov	r1, r3
 800d12e:	2208      	movs	r2, #8
 800d130:	305c      	adds	r0, #92	; 0x5c
 800d132:	f7ff f8bd 	bl	800c2b0 <memset>
 800d136:	4b05      	ldr	r3, [pc, #20]	; (800d14c <std+0x38>)
 800d138:	6263      	str	r3, [r4, #36]	; 0x24
 800d13a:	4b05      	ldr	r3, [pc, #20]	; (800d150 <std+0x3c>)
 800d13c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d13e:	4b05      	ldr	r3, [pc, #20]	; (800d154 <std+0x40>)
 800d140:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d142:	4b05      	ldr	r3, [pc, #20]	; (800d158 <std+0x44>)
 800d144:	6224      	str	r4, [r4, #32]
 800d146:	6323      	str	r3, [r4, #48]	; 0x30
 800d148:	bd10      	pop	{r4, pc}
 800d14a:	bf00      	nop
 800d14c:	0800d4f1 	.word	0x0800d4f1
 800d150:	0800d513 	.word	0x0800d513
 800d154:	0800d54b 	.word	0x0800d54b
 800d158:	0800d56f 	.word	0x0800d56f

0800d15c <_cleanup_r>:
 800d15c:	4901      	ldr	r1, [pc, #4]	; (800d164 <_cleanup_r+0x8>)
 800d15e:	f000 b8af 	b.w	800d2c0 <_fwalk_reent>
 800d162:	bf00      	nop
 800d164:	0800d09d 	.word	0x0800d09d

0800d168 <__sfmoreglue>:
 800d168:	b570      	push	{r4, r5, r6, lr}
 800d16a:	1e4a      	subs	r2, r1, #1
 800d16c:	2568      	movs	r5, #104	; 0x68
 800d16e:	4355      	muls	r5, r2
 800d170:	460e      	mov	r6, r1
 800d172:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d176:	f7ff f8f3 	bl	800c360 <_malloc_r>
 800d17a:	4604      	mov	r4, r0
 800d17c:	b140      	cbz	r0, 800d190 <__sfmoreglue+0x28>
 800d17e:	2100      	movs	r1, #0
 800d180:	e9c0 1600 	strd	r1, r6, [r0]
 800d184:	300c      	adds	r0, #12
 800d186:	60a0      	str	r0, [r4, #8]
 800d188:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d18c:	f7ff f890 	bl	800c2b0 <memset>
 800d190:	4620      	mov	r0, r4
 800d192:	bd70      	pop	{r4, r5, r6, pc}

0800d194 <__sfp_lock_acquire>:
 800d194:	4801      	ldr	r0, [pc, #4]	; (800d19c <__sfp_lock_acquire+0x8>)
 800d196:	f000 b8b3 	b.w	800d300 <__retarget_lock_acquire_recursive>
 800d19a:	bf00      	nop
 800d19c:	20000eac 	.word	0x20000eac

0800d1a0 <__sfp_lock_release>:
 800d1a0:	4801      	ldr	r0, [pc, #4]	; (800d1a8 <__sfp_lock_release+0x8>)
 800d1a2:	f000 b8ae 	b.w	800d302 <__retarget_lock_release_recursive>
 800d1a6:	bf00      	nop
 800d1a8:	20000eac 	.word	0x20000eac

0800d1ac <__sinit_lock_acquire>:
 800d1ac:	4801      	ldr	r0, [pc, #4]	; (800d1b4 <__sinit_lock_acquire+0x8>)
 800d1ae:	f000 b8a7 	b.w	800d300 <__retarget_lock_acquire_recursive>
 800d1b2:	bf00      	nop
 800d1b4:	20000ea7 	.word	0x20000ea7

0800d1b8 <__sinit_lock_release>:
 800d1b8:	4801      	ldr	r0, [pc, #4]	; (800d1c0 <__sinit_lock_release+0x8>)
 800d1ba:	f000 b8a2 	b.w	800d302 <__retarget_lock_release_recursive>
 800d1be:	bf00      	nop
 800d1c0:	20000ea7 	.word	0x20000ea7

0800d1c4 <__sinit>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	4604      	mov	r4, r0
 800d1c8:	f7ff fff0 	bl	800d1ac <__sinit_lock_acquire>
 800d1cc:	69a3      	ldr	r3, [r4, #24]
 800d1ce:	b11b      	cbz	r3, 800d1d8 <__sinit+0x14>
 800d1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1d4:	f7ff bff0 	b.w	800d1b8 <__sinit_lock_release>
 800d1d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d1dc:	6523      	str	r3, [r4, #80]	; 0x50
 800d1de:	4b13      	ldr	r3, [pc, #76]	; (800d22c <__sinit+0x68>)
 800d1e0:	4a13      	ldr	r2, [pc, #76]	; (800d230 <__sinit+0x6c>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d1e6:	42a3      	cmp	r3, r4
 800d1e8:	bf04      	itt	eq
 800d1ea:	2301      	moveq	r3, #1
 800d1ec:	61a3      	streq	r3, [r4, #24]
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f000 f820 	bl	800d234 <__sfp>
 800d1f4:	6060      	str	r0, [r4, #4]
 800d1f6:	4620      	mov	r0, r4
 800d1f8:	f000 f81c 	bl	800d234 <__sfp>
 800d1fc:	60a0      	str	r0, [r4, #8]
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 f818 	bl	800d234 <__sfp>
 800d204:	2200      	movs	r2, #0
 800d206:	60e0      	str	r0, [r4, #12]
 800d208:	2104      	movs	r1, #4
 800d20a:	6860      	ldr	r0, [r4, #4]
 800d20c:	f7ff ff82 	bl	800d114 <std>
 800d210:	68a0      	ldr	r0, [r4, #8]
 800d212:	2201      	movs	r2, #1
 800d214:	2109      	movs	r1, #9
 800d216:	f7ff ff7d 	bl	800d114 <std>
 800d21a:	68e0      	ldr	r0, [r4, #12]
 800d21c:	2202      	movs	r2, #2
 800d21e:	2112      	movs	r1, #18
 800d220:	f7ff ff78 	bl	800d114 <std>
 800d224:	2301      	movs	r3, #1
 800d226:	61a3      	str	r3, [r4, #24]
 800d228:	e7d2      	b.n	800d1d0 <__sinit+0xc>
 800d22a:	bf00      	nop
 800d22c:	08010bd4 	.word	0x08010bd4
 800d230:	0800d15d 	.word	0x0800d15d

0800d234 <__sfp>:
 800d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d236:	4607      	mov	r7, r0
 800d238:	f7ff ffac 	bl	800d194 <__sfp_lock_acquire>
 800d23c:	4b1e      	ldr	r3, [pc, #120]	; (800d2b8 <__sfp+0x84>)
 800d23e:	681e      	ldr	r6, [r3, #0]
 800d240:	69b3      	ldr	r3, [r6, #24]
 800d242:	b913      	cbnz	r3, 800d24a <__sfp+0x16>
 800d244:	4630      	mov	r0, r6
 800d246:	f7ff ffbd 	bl	800d1c4 <__sinit>
 800d24a:	3648      	adds	r6, #72	; 0x48
 800d24c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d250:	3b01      	subs	r3, #1
 800d252:	d503      	bpl.n	800d25c <__sfp+0x28>
 800d254:	6833      	ldr	r3, [r6, #0]
 800d256:	b30b      	cbz	r3, 800d29c <__sfp+0x68>
 800d258:	6836      	ldr	r6, [r6, #0]
 800d25a:	e7f7      	b.n	800d24c <__sfp+0x18>
 800d25c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d260:	b9d5      	cbnz	r5, 800d298 <__sfp+0x64>
 800d262:	4b16      	ldr	r3, [pc, #88]	; (800d2bc <__sfp+0x88>)
 800d264:	60e3      	str	r3, [r4, #12]
 800d266:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d26a:	6665      	str	r5, [r4, #100]	; 0x64
 800d26c:	f000 f847 	bl	800d2fe <__retarget_lock_init_recursive>
 800d270:	f7ff ff96 	bl	800d1a0 <__sfp_lock_release>
 800d274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d27c:	6025      	str	r5, [r4, #0]
 800d27e:	61a5      	str	r5, [r4, #24]
 800d280:	2208      	movs	r2, #8
 800d282:	4629      	mov	r1, r5
 800d284:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d288:	f7ff f812 	bl	800c2b0 <memset>
 800d28c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d290:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d294:	4620      	mov	r0, r4
 800d296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d298:	3468      	adds	r4, #104	; 0x68
 800d29a:	e7d9      	b.n	800d250 <__sfp+0x1c>
 800d29c:	2104      	movs	r1, #4
 800d29e:	4638      	mov	r0, r7
 800d2a0:	f7ff ff62 	bl	800d168 <__sfmoreglue>
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	6030      	str	r0, [r6, #0]
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1d5      	bne.n	800d258 <__sfp+0x24>
 800d2ac:	f7ff ff78 	bl	800d1a0 <__sfp_lock_release>
 800d2b0:	230c      	movs	r3, #12
 800d2b2:	603b      	str	r3, [r7, #0]
 800d2b4:	e7ee      	b.n	800d294 <__sfp+0x60>
 800d2b6:	bf00      	nop
 800d2b8:	08010bd4 	.word	0x08010bd4
 800d2bc:	ffff0001 	.word	0xffff0001

0800d2c0 <_fwalk_reent>:
 800d2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2c4:	4606      	mov	r6, r0
 800d2c6:	4688      	mov	r8, r1
 800d2c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d2cc:	2700      	movs	r7, #0
 800d2ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d2d2:	f1b9 0901 	subs.w	r9, r9, #1
 800d2d6:	d505      	bpl.n	800d2e4 <_fwalk_reent+0x24>
 800d2d8:	6824      	ldr	r4, [r4, #0]
 800d2da:	2c00      	cmp	r4, #0
 800d2dc:	d1f7      	bne.n	800d2ce <_fwalk_reent+0xe>
 800d2de:	4638      	mov	r0, r7
 800d2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2e4:	89ab      	ldrh	r3, [r5, #12]
 800d2e6:	2b01      	cmp	r3, #1
 800d2e8:	d907      	bls.n	800d2fa <_fwalk_reent+0x3a>
 800d2ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	d003      	beq.n	800d2fa <_fwalk_reent+0x3a>
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	47c0      	blx	r8
 800d2f8:	4307      	orrs	r7, r0
 800d2fa:	3568      	adds	r5, #104	; 0x68
 800d2fc:	e7e9      	b.n	800d2d2 <_fwalk_reent+0x12>

0800d2fe <__retarget_lock_init_recursive>:
 800d2fe:	4770      	bx	lr

0800d300 <__retarget_lock_acquire_recursive>:
 800d300:	4770      	bx	lr

0800d302 <__retarget_lock_release_recursive>:
 800d302:	4770      	bx	lr

0800d304 <__swhatbuf_r>:
 800d304:	b570      	push	{r4, r5, r6, lr}
 800d306:	460e      	mov	r6, r1
 800d308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d30c:	2900      	cmp	r1, #0
 800d30e:	b096      	sub	sp, #88	; 0x58
 800d310:	4614      	mov	r4, r2
 800d312:	461d      	mov	r5, r3
 800d314:	da07      	bge.n	800d326 <__swhatbuf_r+0x22>
 800d316:	2300      	movs	r3, #0
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	89b3      	ldrh	r3, [r6, #12]
 800d31c:	061a      	lsls	r2, r3, #24
 800d31e:	d410      	bmi.n	800d342 <__swhatbuf_r+0x3e>
 800d320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d324:	e00e      	b.n	800d344 <__swhatbuf_r+0x40>
 800d326:	466a      	mov	r2, sp
 800d328:	f000 f948 	bl	800d5bc <_fstat_r>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	dbf2      	blt.n	800d316 <__swhatbuf_r+0x12>
 800d330:	9a01      	ldr	r2, [sp, #4]
 800d332:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d336:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d33a:	425a      	negs	r2, r3
 800d33c:	415a      	adcs	r2, r3
 800d33e:	602a      	str	r2, [r5, #0]
 800d340:	e7ee      	b.n	800d320 <__swhatbuf_r+0x1c>
 800d342:	2340      	movs	r3, #64	; 0x40
 800d344:	2000      	movs	r0, #0
 800d346:	6023      	str	r3, [r4, #0]
 800d348:	b016      	add	sp, #88	; 0x58
 800d34a:	bd70      	pop	{r4, r5, r6, pc}

0800d34c <__smakebuf_r>:
 800d34c:	898b      	ldrh	r3, [r1, #12]
 800d34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d350:	079d      	lsls	r5, r3, #30
 800d352:	4606      	mov	r6, r0
 800d354:	460c      	mov	r4, r1
 800d356:	d507      	bpl.n	800d368 <__smakebuf_r+0x1c>
 800d358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	6123      	str	r3, [r4, #16]
 800d360:	2301      	movs	r3, #1
 800d362:	6163      	str	r3, [r4, #20]
 800d364:	b002      	add	sp, #8
 800d366:	bd70      	pop	{r4, r5, r6, pc}
 800d368:	ab01      	add	r3, sp, #4
 800d36a:	466a      	mov	r2, sp
 800d36c:	f7ff ffca 	bl	800d304 <__swhatbuf_r>
 800d370:	9900      	ldr	r1, [sp, #0]
 800d372:	4605      	mov	r5, r0
 800d374:	4630      	mov	r0, r6
 800d376:	f7fe fff3 	bl	800c360 <_malloc_r>
 800d37a:	b948      	cbnz	r0, 800d390 <__smakebuf_r+0x44>
 800d37c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d380:	059a      	lsls	r2, r3, #22
 800d382:	d4ef      	bmi.n	800d364 <__smakebuf_r+0x18>
 800d384:	f023 0303 	bic.w	r3, r3, #3
 800d388:	f043 0302 	orr.w	r3, r3, #2
 800d38c:	81a3      	strh	r3, [r4, #12]
 800d38e:	e7e3      	b.n	800d358 <__smakebuf_r+0xc>
 800d390:	4b0d      	ldr	r3, [pc, #52]	; (800d3c8 <__smakebuf_r+0x7c>)
 800d392:	62b3      	str	r3, [r6, #40]	; 0x28
 800d394:	89a3      	ldrh	r3, [r4, #12]
 800d396:	6020      	str	r0, [r4, #0]
 800d398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d39c:	81a3      	strh	r3, [r4, #12]
 800d39e:	9b00      	ldr	r3, [sp, #0]
 800d3a0:	6163      	str	r3, [r4, #20]
 800d3a2:	9b01      	ldr	r3, [sp, #4]
 800d3a4:	6120      	str	r0, [r4, #16]
 800d3a6:	b15b      	cbz	r3, 800d3c0 <__smakebuf_r+0x74>
 800d3a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3ac:	4630      	mov	r0, r6
 800d3ae:	f000 f917 	bl	800d5e0 <_isatty_r>
 800d3b2:	b128      	cbz	r0, 800d3c0 <__smakebuf_r+0x74>
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f023 0303 	bic.w	r3, r3, #3
 800d3ba:	f043 0301 	orr.w	r3, r3, #1
 800d3be:	81a3      	strh	r3, [r4, #12]
 800d3c0:	89a0      	ldrh	r0, [r4, #12]
 800d3c2:	4305      	orrs	r5, r0
 800d3c4:	81a5      	strh	r5, [r4, #12]
 800d3c6:	e7cd      	b.n	800d364 <__smakebuf_r+0x18>
 800d3c8:	0800d15d 	.word	0x0800d15d

0800d3cc <memcpy>:
 800d3cc:	440a      	add	r2, r1
 800d3ce:	4291      	cmp	r1, r2
 800d3d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3d4:	d100      	bne.n	800d3d8 <memcpy+0xc>
 800d3d6:	4770      	bx	lr
 800d3d8:	b510      	push	{r4, lr}
 800d3da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3e2:	4291      	cmp	r1, r2
 800d3e4:	d1f9      	bne.n	800d3da <memcpy+0xe>
 800d3e6:	bd10      	pop	{r4, pc}

0800d3e8 <memmove>:
 800d3e8:	4288      	cmp	r0, r1
 800d3ea:	b510      	push	{r4, lr}
 800d3ec:	eb01 0402 	add.w	r4, r1, r2
 800d3f0:	d902      	bls.n	800d3f8 <memmove+0x10>
 800d3f2:	4284      	cmp	r4, r0
 800d3f4:	4623      	mov	r3, r4
 800d3f6:	d807      	bhi.n	800d408 <memmove+0x20>
 800d3f8:	1e43      	subs	r3, r0, #1
 800d3fa:	42a1      	cmp	r1, r4
 800d3fc:	d008      	beq.n	800d410 <memmove+0x28>
 800d3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d402:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d406:	e7f8      	b.n	800d3fa <memmove+0x12>
 800d408:	4402      	add	r2, r0
 800d40a:	4601      	mov	r1, r0
 800d40c:	428a      	cmp	r2, r1
 800d40e:	d100      	bne.n	800d412 <memmove+0x2a>
 800d410:	bd10      	pop	{r4, pc}
 800d412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d41a:	e7f7      	b.n	800d40c <memmove+0x24>

0800d41c <_realloc_r>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	4607      	mov	r7, r0
 800d420:	4614      	mov	r4, r2
 800d422:	460e      	mov	r6, r1
 800d424:	b921      	cbnz	r1, 800d430 <_realloc_r+0x14>
 800d426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d42a:	4611      	mov	r1, r2
 800d42c:	f7fe bf98 	b.w	800c360 <_malloc_r>
 800d430:	b922      	cbnz	r2, 800d43c <_realloc_r+0x20>
 800d432:	f7fe ff45 	bl	800c2c0 <_free_r>
 800d436:	4625      	mov	r5, r4
 800d438:	4628      	mov	r0, r5
 800d43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d43c:	f000 f8f2 	bl	800d624 <_malloc_usable_size_r>
 800d440:	42a0      	cmp	r0, r4
 800d442:	d20f      	bcs.n	800d464 <_realloc_r+0x48>
 800d444:	4621      	mov	r1, r4
 800d446:	4638      	mov	r0, r7
 800d448:	f7fe ff8a 	bl	800c360 <_malloc_r>
 800d44c:	4605      	mov	r5, r0
 800d44e:	2800      	cmp	r0, #0
 800d450:	d0f2      	beq.n	800d438 <_realloc_r+0x1c>
 800d452:	4631      	mov	r1, r6
 800d454:	4622      	mov	r2, r4
 800d456:	f7ff ffb9 	bl	800d3cc <memcpy>
 800d45a:	4631      	mov	r1, r6
 800d45c:	4638      	mov	r0, r7
 800d45e:	f7fe ff2f 	bl	800c2c0 <_free_r>
 800d462:	e7e9      	b.n	800d438 <_realloc_r+0x1c>
 800d464:	4635      	mov	r5, r6
 800d466:	e7e7      	b.n	800d438 <_realloc_r+0x1c>

0800d468 <_raise_r>:
 800d468:	291f      	cmp	r1, #31
 800d46a:	b538      	push	{r3, r4, r5, lr}
 800d46c:	4604      	mov	r4, r0
 800d46e:	460d      	mov	r5, r1
 800d470:	d904      	bls.n	800d47c <_raise_r+0x14>
 800d472:	2316      	movs	r3, #22
 800d474:	6003      	str	r3, [r0, #0]
 800d476:	f04f 30ff 	mov.w	r0, #4294967295
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d47e:	b112      	cbz	r2, 800d486 <_raise_r+0x1e>
 800d480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d484:	b94b      	cbnz	r3, 800d49a <_raise_r+0x32>
 800d486:	4620      	mov	r0, r4
 800d488:	f000 f830 	bl	800d4ec <_getpid_r>
 800d48c:	462a      	mov	r2, r5
 800d48e:	4601      	mov	r1, r0
 800d490:	4620      	mov	r0, r4
 800d492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d496:	f000 b817 	b.w	800d4c8 <_kill_r>
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d00a      	beq.n	800d4b4 <_raise_r+0x4c>
 800d49e:	1c59      	adds	r1, r3, #1
 800d4a0:	d103      	bne.n	800d4aa <_raise_r+0x42>
 800d4a2:	2316      	movs	r3, #22
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	e7e7      	b.n	800d47a <_raise_r+0x12>
 800d4aa:	2400      	movs	r4, #0
 800d4ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	4798      	blx	r3
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e7e0      	b.n	800d47a <_raise_r+0x12>

0800d4b8 <raise>:
 800d4b8:	4b02      	ldr	r3, [pc, #8]	; (800d4c4 <raise+0xc>)
 800d4ba:	4601      	mov	r1, r0
 800d4bc:	6818      	ldr	r0, [r3, #0]
 800d4be:	f7ff bfd3 	b.w	800d468 <_raise_r>
 800d4c2:	bf00      	nop
 800d4c4:	2000007c 	.word	0x2000007c

0800d4c8 <_kill_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4d07      	ldr	r5, [pc, #28]	; (800d4e8 <_kill_r+0x20>)
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f7f7 fc4b 	bl	8004d70 <_kill>
 800d4da:	1c43      	adds	r3, r0, #1
 800d4dc:	d102      	bne.n	800d4e4 <_kill_r+0x1c>
 800d4de:	682b      	ldr	r3, [r5, #0]
 800d4e0:	b103      	cbz	r3, 800d4e4 <_kill_r+0x1c>
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000ea0 	.word	0x20000ea0

0800d4ec <_getpid_r>:
 800d4ec:	f7f7 bc38 	b.w	8004d60 <_getpid>

0800d4f0 <__sread>:
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f8:	f000 f89c 	bl	800d634 <_read_r>
 800d4fc:	2800      	cmp	r0, #0
 800d4fe:	bfab      	itete	ge
 800d500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d502:	89a3      	ldrhlt	r3, [r4, #12]
 800d504:	181b      	addge	r3, r3, r0
 800d506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d50a:	bfac      	ite	ge
 800d50c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d50e:	81a3      	strhlt	r3, [r4, #12]
 800d510:	bd10      	pop	{r4, pc}

0800d512 <__swrite>:
 800d512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d516:	461f      	mov	r7, r3
 800d518:	898b      	ldrh	r3, [r1, #12]
 800d51a:	05db      	lsls	r3, r3, #23
 800d51c:	4605      	mov	r5, r0
 800d51e:	460c      	mov	r4, r1
 800d520:	4616      	mov	r6, r2
 800d522:	d505      	bpl.n	800d530 <__swrite+0x1e>
 800d524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d528:	2302      	movs	r3, #2
 800d52a:	2200      	movs	r2, #0
 800d52c:	f000 f868 	bl	800d600 <_lseek_r>
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d53a:	81a3      	strh	r3, [r4, #12]
 800d53c:	4632      	mov	r2, r6
 800d53e:	463b      	mov	r3, r7
 800d540:	4628      	mov	r0, r5
 800d542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d546:	f000 b817 	b.w	800d578 <_write_r>

0800d54a <__sseek>:
 800d54a:	b510      	push	{r4, lr}
 800d54c:	460c      	mov	r4, r1
 800d54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d552:	f000 f855 	bl	800d600 <_lseek_r>
 800d556:	1c43      	adds	r3, r0, #1
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	bf15      	itete	ne
 800d55c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d55e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d566:	81a3      	strheq	r3, [r4, #12]
 800d568:	bf18      	it	ne
 800d56a:	81a3      	strhne	r3, [r4, #12]
 800d56c:	bd10      	pop	{r4, pc}

0800d56e <__sclose>:
 800d56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d572:	f000 b813 	b.w	800d59c <_close_r>
	...

0800d578 <_write_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4d07      	ldr	r5, [pc, #28]	; (800d598 <_write_r+0x20>)
 800d57c:	4604      	mov	r4, r0
 800d57e:	4608      	mov	r0, r1
 800d580:	4611      	mov	r1, r2
 800d582:	2200      	movs	r2, #0
 800d584:	602a      	str	r2, [r5, #0]
 800d586:	461a      	mov	r2, r3
 800d588:	f7f7 fc29 	bl	8004dde <_write>
 800d58c:	1c43      	adds	r3, r0, #1
 800d58e:	d102      	bne.n	800d596 <_write_r+0x1e>
 800d590:	682b      	ldr	r3, [r5, #0]
 800d592:	b103      	cbz	r3, 800d596 <_write_r+0x1e>
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	bd38      	pop	{r3, r4, r5, pc}
 800d598:	20000ea0 	.word	0x20000ea0

0800d59c <_close_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4d06      	ldr	r5, [pc, #24]	; (800d5b8 <_close_r+0x1c>)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	602b      	str	r3, [r5, #0]
 800d5a8:	f7f7 fc35 	bl	8004e16 <_close>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	d102      	bne.n	800d5b6 <_close_r+0x1a>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	b103      	cbz	r3, 800d5b6 <_close_r+0x1a>
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	20000ea0 	.word	0x20000ea0

0800d5bc <_fstat_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	; (800d5dc <_fstat_r+0x20>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f7f7 fc30 	bl	8004e2e <_fstat>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d102      	bne.n	800d5d8 <_fstat_r+0x1c>
 800d5d2:	682b      	ldr	r3, [r5, #0]
 800d5d4:	b103      	cbz	r3, 800d5d8 <_fstat_r+0x1c>
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	bf00      	nop
 800d5dc:	20000ea0 	.word	0x20000ea0

0800d5e0 <_isatty_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4d06      	ldr	r5, [pc, #24]	; (800d5fc <_isatty_r+0x1c>)
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	602b      	str	r3, [r5, #0]
 800d5ec:	f7f7 fc2f 	bl	8004e4e <_isatty>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_isatty_r+0x1a>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_isatty_r+0x1a>
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	20000ea0 	.word	0x20000ea0

0800d600 <_lseek_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	4d07      	ldr	r5, [pc, #28]	; (800d620 <_lseek_r+0x20>)
 800d604:	4604      	mov	r4, r0
 800d606:	4608      	mov	r0, r1
 800d608:	4611      	mov	r1, r2
 800d60a:	2200      	movs	r2, #0
 800d60c:	602a      	str	r2, [r5, #0]
 800d60e:	461a      	mov	r2, r3
 800d610:	f7f7 fc28 	bl	8004e64 <_lseek>
 800d614:	1c43      	adds	r3, r0, #1
 800d616:	d102      	bne.n	800d61e <_lseek_r+0x1e>
 800d618:	682b      	ldr	r3, [r5, #0]
 800d61a:	b103      	cbz	r3, 800d61e <_lseek_r+0x1e>
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	bd38      	pop	{r3, r4, r5, pc}
 800d620:	20000ea0 	.word	0x20000ea0

0800d624 <_malloc_usable_size_r>:
 800d624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d628:	1f18      	subs	r0, r3, #4
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	bfbc      	itt	lt
 800d62e:	580b      	ldrlt	r3, [r1, r0]
 800d630:	18c0      	addlt	r0, r0, r3
 800d632:	4770      	bx	lr

0800d634 <_read_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4d07      	ldr	r5, [pc, #28]	; (800d654 <_read_r+0x20>)
 800d638:	4604      	mov	r4, r0
 800d63a:	4608      	mov	r0, r1
 800d63c:	4611      	mov	r1, r2
 800d63e:	2200      	movs	r2, #0
 800d640:	602a      	str	r2, [r5, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	f7f7 fbae 	bl	8004da4 <_read>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_read_r+0x1e>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_read_r+0x1e>
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	20000ea0 	.word	0x20000ea0

0800d658 <sqrt>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	ed2d 8b02 	vpush	{d8}
 800d65e:	ec55 4b10 	vmov	r4, r5, d0
 800d662:	f000 f82d 	bl	800d6c0 <__ieee754_sqrt>
 800d666:	4b15      	ldr	r3, [pc, #84]	; (800d6bc <sqrt+0x64>)
 800d668:	eeb0 8a40 	vmov.f32	s16, s0
 800d66c:	eef0 8a60 	vmov.f32	s17, s1
 800d670:	f993 3000 	ldrsb.w	r3, [r3]
 800d674:	3301      	adds	r3, #1
 800d676:	d019      	beq.n	800d6ac <sqrt+0x54>
 800d678:	4622      	mov	r2, r4
 800d67a:	462b      	mov	r3, r5
 800d67c:	4620      	mov	r0, r4
 800d67e:	4629      	mov	r1, r5
 800d680:	f7f3 fa4c 	bl	8000b1c <__aeabi_dcmpun>
 800d684:	b990      	cbnz	r0, 800d6ac <sqrt+0x54>
 800d686:	2200      	movs	r2, #0
 800d688:	2300      	movs	r3, #0
 800d68a:	4620      	mov	r0, r4
 800d68c:	4629      	mov	r1, r5
 800d68e:	f7f3 fa1d 	bl	8000acc <__aeabi_dcmplt>
 800d692:	b158      	cbz	r0, 800d6ac <sqrt+0x54>
 800d694:	f7fe fdda 	bl	800c24c <__errno>
 800d698:	2321      	movs	r3, #33	; 0x21
 800d69a:	6003      	str	r3, [r0, #0]
 800d69c:	2200      	movs	r2, #0
 800d69e:	2300      	movs	r3, #0
 800d6a0:	4610      	mov	r0, r2
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	f7f3 f8ca 	bl	800083c <__aeabi_ddiv>
 800d6a8:	ec41 0b18 	vmov	d8, r0, r1
 800d6ac:	eeb0 0a48 	vmov.f32	s0, s16
 800d6b0:	eef0 0a68 	vmov.f32	s1, s17
 800d6b4:	ecbd 8b02 	vpop	{d8}
 800d6b8:	bd38      	pop	{r3, r4, r5, pc}
 800d6ba:	bf00      	nop
 800d6bc:	200000e0 	.word	0x200000e0

0800d6c0 <__ieee754_sqrt>:
 800d6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c4:	ec55 4b10 	vmov	r4, r5, d0
 800d6c8:	4e56      	ldr	r6, [pc, #344]	; (800d824 <__ieee754_sqrt+0x164>)
 800d6ca:	43ae      	bics	r6, r5
 800d6cc:	ee10 0a10 	vmov	r0, s0
 800d6d0:	ee10 3a10 	vmov	r3, s0
 800d6d4:	4629      	mov	r1, r5
 800d6d6:	462a      	mov	r2, r5
 800d6d8:	d110      	bne.n	800d6fc <__ieee754_sqrt+0x3c>
 800d6da:	ee10 2a10 	vmov	r2, s0
 800d6de:	462b      	mov	r3, r5
 800d6e0:	f7f2 ff82 	bl	80005e8 <__aeabi_dmul>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	f7f2 fdc6 	bl	800027c <__adddf3>
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	460d      	mov	r5, r1
 800d6f4:	ec45 4b10 	vmov	d0, r4, r5
 800d6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6fc:	2d00      	cmp	r5, #0
 800d6fe:	dc10      	bgt.n	800d722 <__ieee754_sqrt+0x62>
 800d700:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d704:	4330      	orrs	r0, r6
 800d706:	d0f5      	beq.n	800d6f4 <__ieee754_sqrt+0x34>
 800d708:	b15d      	cbz	r5, 800d722 <__ieee754_sqrt+0x62>
 800d70a:	ee10 2a10 	vmov	r2, s0
 800d70e:	462b      	mov	r3, r5
 800d710:	ee10 0a10 	vmov	r0, s0
 800d714:	f7f2 fdb0 	bl	8000278 <__aeabi_dsub>
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	f7f3 f88e 	bl	800083c <__aeabi_ddiv>
 800d720:	e7e6      	b.n	800d6f0 <__ieee754_sqrt+0x30>
 800d722:	1509      	asrs	r1, r1, #20
 800d724:	d076      	beq.n	800d814 <__ieee754_sqrt+0x154>
 800d726:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d72a:	07ce      	lsls	r6, r1, #31
 800d72c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d730:	bf5e      	ittt	pl
 800d732:	0fda      	lsrpl	r2, r3, #31
 800d734:	005b      	lslpl	r3, r3, #1
 800d736:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d73a:	0fda      	lsrs	r2, r3, #31
 800d73c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d740:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d744:	2000      	movs	r0, #0
 800d746:	106d      	asrs	r5, r5, #1
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	f04f 0e16 	mov.w	lr, #22
 800d74e:	4684      	mov	ip, r0
 800d750:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d754:	eb0c 0401 	add.w	r4, ip, r1
 800d758:	4294      	cmp	r4, r2
 800d75a:	bfde      	ittt	le
 800d75c:	1b12      	suble	r2, r2, r4
 800d75e:	eb04 0c01 	addle.w	ip, r4, r1
 800d762:	1840      	addle	r0, r0, r1
 800d764:	0052      	lsls	r2, r2, #1
 800d766:	f1be 0e01 	subs.w	lr, lr, #1
 800d76a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d76e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d772:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d776:	d1ed      	bne.n	800d754 <__ieee754_sqrt+0x94>
 800d778:	4671      	mov	r1, lr
 800d77a:	2720      	movs	r7, #32
 800d77c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d780:	4562      	cmp	r2, ip
 800d782:	eb04 060e 	add.w	r6, r4, lr
 800d786:	dc02      	bgt.n	800d78e <__ieee754_sqrt+0xce>
 800d788:	d113      	bne.n	800d7b2 <__ieee754_sqrt+0xf2>
 800d78a:	429e      	cmp	r6, r3
 800d78c:	d811      	bhi.n	800d7b2 <__ieee754_sqrt+0xf2>
 800d78e:	2e00      	cmp	r6, #0
 800d790:	eb06 0e04 	add.w	lr, r6, r4
 800d794:	da43      	bge.n	800d81e <__ieee754_sqrt+0x15e>
 800d796:	f1be 0f00 	cmp.w	lr, #0
 800d79a:	db40      	blt.n	800d81e <__ieee754_sqrt+0x15e>
 800d79c:	f10c 0801 	add.w	r8, ip, #1
 800d7a0:	eba2 020c 	sub.w	r2, r2, ip
 800d7a4:	429e      	cmp	r6, r3
 800d7a6:	bf88      	it	hi
 800d7a8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d7ac:	1b9b      	subs	r3, r3, r6
 800d7ae:	4421      	add	r1, r4
 800d7b0:	46c4      	mov	ip, r8
 800d7b2:	0052      	lsls	r2, r2, #1
 800d7b4:	3f01      	subs	r7, #1
 800d7b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d7ba:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d7be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d7c2:	d1dd      	bne.n	800d780 <__ieee754_sqrt+0xc0>
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	d006      	beq.n	800d7d6 <__ieee754_sqrt+0x116>
 800d7c8:	1c4c      	adds	r4, r1, #1
 800d7ca:	bf13      	iteet	ne
 800d7cc:	3101      	addne	r1, #1
 800d7ce:	3001      	addeq	r0, #1
 800d7d0:	4639      	moveq	r1, r7
 800d7d2:	f021 0101 	bicne.w	r1, r1, #1
 800d7d6:	1043      	asrs	r3, r0, #1
 800d7d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d7dc:	0849      	lsrs	r1, r1, #1
 800d7de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d7e2:	07c2      	lsls	r2, r0, #31
 800d7e4:	bf48      	it	mi
 800d7e6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d7ea:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	463d      	mov	r5, r7
 800d7f2:	e77f      	b.n	800d6f4 <__ieee754_sqrt+0x34>
 800d7f4:	0ada      	lsrs	r2, r3, #11
 800d7f6:	3815      	subs	r0, #21
 800d7f8:	055b      	lsls	r3, r3, #21
 800d7fa:	2a00      	cmp	r2, #0
 800d7fc:	d0fa      	beq.n	800d7f4 <__ieee754_sqrt+0x134>
 800d7fe:	02d7      	lsls	r7, r2, #11
 800d800:	d50a      	bpl.n	800d818 <__ieee754_sqrt+0x158>
 800d802:	f1c1 0420 	rsb	r4, r1, #32
 800d806:	fa23 f404 	lsr.w	r4, r3, r4
 800d80a:	1e4d      	subs	r5, r1, #1
 800d80c:	408b      	lsls	r3, r1
 800d80e:	4322      	orrs	r2, r4
 800d810:	1b41      	subs	r1, r0, r5
 800d812:	e788      	b.n	800d726 <__ieee754_sqrt+0x66>
 800d814:	4608      	mov	r0, r1
 800d816:	e7f0      	b.n	800d7fa <__ieee754_sqrt+0x13a>
 800d818:	0052      	lsls	r2, r2, #1
 800d81a:	3101      	adds	r1, #1
 800d81c:	e7ef      	b.n	800d7fe <__ieee754_sqrt+0x13e>
 800d81e:	46e0      	mov	r8, ip
 800d820:	e7be      	b.n	800d7a0 <__ieee754_sqrt+0xe0>
 800d822:	bf00      	nop
 800d824:	7ff00000 	.word	0x7ff00000

0800d828 <_init>:
 800d828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82a:	bf00      	nop
 800d82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d82e:	bc08      	pop	{r3}
 800d830:	469e      	mov	lr, r3
 800d832:	4770      	bx	lr

0800d834 <_fini>:
 800d834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d836:	bf00      	nop
 800d838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d83a:	bc08      	pop	{r3}
 800d83c:	469e      	mov	lr, r3
 800d83e:	4770      	bx	lr
