
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d16c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003490  0800d2fc  0800d2fc  0000e2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801078c  0801078c  000120e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801078c  0801078c  0001178c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010794  08010794  000120e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010794  08010794  00011794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010798  08010798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0801079c  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000120e8  2**0
                  CONTENTS
 10 .bss          00000ed0  200000e8  200000e8  000120e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000fb8  20000fb8  000120e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000120e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2de  00000000  00000000  00012118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fbf  00000000  00000000  0002e3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  000333b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001429  00000000  00000000  00034de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e63  00000000  00000000  00036209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026757  00000000  00000000  0005f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e235a  00000000  00000000  000857c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00167b1d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076e8  00000000  00000000  00167b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d2e4 	.word	0x0800d2e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	0800d2e4 	.word	0x0800d2e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96a 	b.w	8000e74 <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d14e      	bne.n	8000c62 <__udivmoddi4+0xaa>
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	458c      	cmp	ip, r1
 8000bc8:	4686      	mov	lr, r0
 8000bca:	fab2 f282 	clz	r2, r2
 8000bce:	d962      	bls.n	8000c96 <__udivmoddi4+0xde>
 8000bd0:	b14a      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd2:	f1c2 0320 	rsb	r3, r2, #32
 8000bd6:	4091      	lsls	r1, r2
 8000bd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f f68c 	uxth.w	r6, ip
 8000bee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb04 f106 	mul.w	r1, r4, r6
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x64>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c0e:	f080 8112 	bcs.w	8000e36 <__udivmoddi4+0x27e>
 8000c12:	4299      	cmp	r1, r3
 8000c14:	f240 810f 	bls.w	8000e36 <__udivmoddi4+0x27e>
 8000c18:	3c02      	subs	r4, #2
 8000c1a:	4463      	add	r3, ip
 8000c1c:	1a59      	subs	r1, r3, r1
 8000c1e:	fa1f f38e 	uxth.w	r3, lr
 8000c22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c26:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f606 	mul.w	r6, r0, r6
 8000c32:	429e      	cmp	r6, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x94>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c3e:	f080 80fc 	bcs.w	8000e3a <__udivmoddi4+0x282>
 8000c42:	429e      	cmp	r6, r3
 8000c44:	f240 80f9 	bls.w	8000e3a <__udivmoddi4+0x282>
 8000c48:	4463      	add	r3, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa6>
 8000c56:	40d3      	lsrs	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xba>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb4>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x150>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xcc>
 8000c7e:	4290      	cmp	r0, r2
 8000c80:	f0c0 80f0 	bcc.w	8000e64 <__udivmoddi4+0x2ac>
 8000c84:	1a86      	subs	r6, r0, r2
 8000c86:	eb64 0303 	sbc.w	r3, r4, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d0e6      	beq.n	8000c5e <__udivmoddi4+0xa6>
 8000c90:	e9c5 6300 	strd	r6, r3, [r5]
 8000c94:	e7e3      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x204>
 8000c9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ca0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca4:	fa1f f78c 	uxth.w	r7, ip
 8000ca8:	2101      	movs	r1, #1
 8000caa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cba:	fb07 f006 	mul.w	r0, r7, r6
 8000cbe:	4298      	cmp	r0, r3
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x11c>
 8000cc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x11a>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000cd2:	4626      	mov	r6, r4
 8000cd4:	1a1c      	subs	r4, r3, r0
 8000cd6:	fa1f f38e 	uxth.w	r3, lr
 8000cda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cde:	fb08 4410 	mls	r4, r8, r0, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb00 f707 	mul.w	r7, r0, r7
 8000cea:	429f      	cmp	r7, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x148>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x146>
 8000cf8:	429f      	cmp	r7, r3
 8000cfa:	f200 80b0 	bhi.w	8000e5e <__udivmoddi4+0x2a6>
 8000cfe:	4620      	mov	r0, r4
 8000d00:	1bdb      	subs	r3, r3, r7
 8000d02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x9c>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d18:	fa04 f301 	lsl.w	r3, r4, r1
 8000d1c:	ea43 030c 	orr.w	r3, r3, ip
 8000d20:	40f4      	lsrs	r4, r6
 8000d22:	fa00 f801 	lsl.w	r8, r0, r1
 8000d26:	0c38      	lsrs	r0, r7, #16
 8000d28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d30:	fa1f fc87 	uxth.w	ip, r7
 8000d34:	fb00 441e 	mls	r4, r0, lr, r4
 8000d38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d90a      	bls.n	8000d5e <__udivmoddi4+0x1a6>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d4e:	f080 8084 	bcs.w	8000e5a <__udivmoddi4+0x2a2>
 8000d52:	45a1      	cmp	r9, r4
 8000d54:	f240 8081 	bls.w	8000e5a <__udivmoddi4+0x2a2>
 8000d58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d5c:	443c      	add	r4, r7
 8000d5e:	eba4 0409 	sub.w	r4, r4, r9
 8000d62:	fa1f f983 	uxth.w	r9, r3
 8000d66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1d2>
 8000d7a:	193c      	adds	r4, r7, r4
 8000d7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d80:	d267      	bcs.n	8000e52 <__udivmoddi4+0x29a>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d965      	bls.n	8000e52 <__udivmoddi4+0x29a>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d92:	eba4 040c 	sub.w	r4, r4, ip
 8000d96:	429c      	cmp	r4, r3
 8000d98:	46ce      	mov	lr, r9
 8000d9a:	469c      	mov	ip, r3
 8000d9c:	d351      	bcc.n	8000e42 <__udivmoddi4+0x28a>
 8000d9e:	d04e      	beq.n	8000e3e <__udivmoddi4+0x286>
 8000da0:	b155      	cbz	r5, 8000db8 <__udivmoddi4+0x200>
 8000da2:	ebb8 030e 	subs.w	r3, r8, lr
 8000da6:	eb64 040c 	sbc.w	r4, r4, ip
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	40cb      	lsrs	r3, r1
 8000db0:	431e      	orrs	r6, r3
 8000db2:	40cc      	lsrs	r4, r1
 8000db4:	e9c5 6400 	strd	r6, r4, [r5]
 8000db8:	2100      	movs	r1, #0
 8000dba:	e750      	b.n	8000c5e <__udivmoddi4+0xa6>
 8000dbc:	f1c2 0320 	rsb	r3, r2, #32
 8000dc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	430c      	orrs	r4, r1
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd8:	fa1f f78c 	uxth.w	r7, ip
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3110 	mls	r1, r8, r0, r3
 8000de4:	0c23      	lsrs	r3, r4, #16
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f107 	mul.w	r1, r0, r7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x24c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dfa:	d22c      	bcs.n	8000e56 <__udivmoddi4+0x29e>
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d92a      	bls.n	8000e56 <__udivmoddi4+0x29e>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e14:	fb01 f307 	mul.w	r3, r1, r7
 8000e18:	42a3      	cmp	r3, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x276>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e24:	d213      	bcs.n	8000e4e <__udivmoddi4+0x296>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d911      	bls.n	8000e4e <__udivmoddi4+0x296>
 8000e2a:	3902      	subs	r1, #2
 8000e2c:	4464      	add	r4, ip
 8000e2e:	1ae4      	subs	r4, r4, r3
 8000e30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e34:	e739      	b.n	8000caa <__udivmoddi4+0xf2>
 8000e36:	4604      	mov	r4, r0
 8000e38:	e6f0      	b.n	8000c1c <__udivmoddi4+0x64>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e706      	b.n	8000c4c <__udivmoddi4+0x94>
 8000e3e:	45c8      	cmp	r8, r9
 8000e40:	d2ae      	bcs.n	8000da0 <__udivmoddi4+0x1e8>
 8000e42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e4a:	3801      	subs	r0, #1
 8000e4c:	e7a8      	b.n	8000da0 <__udivmoddi4+0x1e8>
 8000e4e:	4631      	mov	r1, r6
 8000e50:	e7ed      	b.n	8000e2e <__udivmoddi4+0x276>
 8000e52:	4603      	mov	r3, r0
 8000e54:	e799      	b.n	8000d8a <__udivmoddi4+0x1d2>
 8000e56:	4630      	mov	r0, r6
 8000e58:	e7d4      	b.n	8000e04 <__udivmoddi4+0x24c>
 8000e5a:	46d6      	mov	lr, sl
 8000e5c:	e77f      	b.n	8000d5e <__udivmoddi4+0x1a6>
 8000e5e:	4463      	add	r3, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e74d      	b.n	8000d00 <__udivmoddi4+0x148>
 8000e64:	4606      	mov	r6, r0
 8000e66:	4623      	mov	r3, r4
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e70f      	b.n	8000c8c <__udivmoddi4+0xd4>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	e730      	b.n	8000cd4 <__udivmoddi4+0x11c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f84 <MX_ADC1_Init+0x10c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e90:	4b3b      	ldr	r3, [pc, #236]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e96:	4b3a      	ldr	r3, [pc, #232]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ea8:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb0:	4b33      	ldr	r3, [pc, #204]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb6:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eb8:	4a33      	ldr	r2, [pc, #204]	@ (8000f88 <MX_ADC1_Init+0x110>)
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebc:	4b30      	ldr	r3, [pc, #192]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed6:	482a      	ldr	r0, [pc, #168]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ed8:	f005 fa46 	bl	8006368 <HAL_ADC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ee2:	f002 fb65 	bl	80035b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4822      	ldr	r0, [pc, #136]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000ef8:	f005 fa7a 	bl	80063f0 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f02:	f002 fb55 	bl	80035b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f06:	2309      	movs	r3, #9
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4619      	mov	r1, r3
 8000f12:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f14:	f005 fa6c 	bl	80063f0 <HAL_ADC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f1e:	f002 fb47 	bl	80035b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f22:	230a      	movs	r3, #10
 8000f24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f26:	2303      	movs	r3, #3
 8000f28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4814      	ldr	r0, [pc, #80]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f30:	f005 fa5e 	bl	80063f0 <HAL_ADC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f3a:	f002 fb39 	bl	80035b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f3e:	230b      	movs	r3, #11
 8000f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f4c:	f005 fa50 	bl	80063f0 <HAL_ADC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f56:	f002 fb2b 	bl	80035b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <MX_ADC1_Init+0x108>)
 8000f68:	f005 fa42 	bl	80063f0 <HAL_ADC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f72:	f002 fb1d 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000104 	.word	0x20000104
 8000f84:	40012000 	.word	0x40012000
 8000f88:	0f000001 	.word	0x0f000001

08000f8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	@ 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a3c      	ldr	r2, [pc, #240]	@ (800109c <HAL_ADC_MspInit+0x110>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d171      	bne.n	8001092 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	4a3a      	ldr	r2, [pc, #232]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fbe:	4b38      	ldr	r3, [pc, #224]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b34      	ldr	r3, [pc, #208]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a33      	ldr	r2, [pc, #204]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b31      	ldr	r3, [pc, #196]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_ADC_MspInit+0x114>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001002:	2307      	movs	r3, #7
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001006:	2303      	movs	r3, #3
 8001008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	@ (80010a4 <HAL_ADC_MspInit+0x118>)
 8001016:	f006 f897 	bl	8007148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	481e      	ldr	r0, [pc, #120]	@ (80010a8 <HAL_ADC_MspInit+0x11c>)
 800102e:	f006 f88b 	bl	8007148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	@ (80010b0 <HAL_ADC_MspInit+0x124>)
 8001036:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800104c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001050:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001058:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001060:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001068:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001076:	480d      	ldr	r0, [pc, #52]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 8001078:	f005 fcea 	bl	8006a50 <HAL_DMA_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001082:	f002 fa95 	bl	80035b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108a:	639a      	str	r2, [r3, #56]	@ 0x38
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_ADC_MspInit+0x120>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	@ 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020400 	.word	0x40020400
 80010ac:	2000014c 	.word	0x2000014c
 80010b0:	40026410 	.word	0x40026410

080010b4 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	at24c_Check();
 80010b8:	f000 f83c 	bl	8001134 <at24c_Check>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af04      	add	r7, sp, #16
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	230a      	movs	r3, #10
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	2301      	movs	r3, #1
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	f107 030f 	add.w	r3, r7, #15
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2310      	movs	r3, #16
 80010e0:	21a0      	movs	r1, #160	@ 0xa0
 80010e2:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <at24c_ReadOneByte+0x34>)
 80010e4:	f006 fc56 	bl	8007994 <HAL_I2C_Mem_Read>
	return temp;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000254 	.word	0x20000254

080010f8 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af04      	add	r7, sp, #16
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	4613      	mov	r3, r2
 8001106:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	230a      	movs	r3, #10
 800110c:	9302      	str	r3, [sp, #8]
 800110e:	2301      	movs	r3, #1
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	1d7b      	adds	r3, r7, #5
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2310      	movs	r3, #16
 8001118:	21a0      	movs	r1, #160	@ 0xa0
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <at24c_WriteOneByte+0x38>)
 800111c:	f006 fb40 	bl	80077a0 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001120:	2005      	movs	r0, #5
 8001122:	f005 f8fd 	bl	8006320 <HAL_Delay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000254 	.word	0x20000254

08001134 <at24c_Check>:

uint8_t at24c_Check(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 800113a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800113e:	f7ff ffbf 	bl	80010c0 <at24c_ReadOneByte>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b55      	cmp	r3, #85	@ 0x55
 800114a:	d101      	bne.n	8001150 <at24c_Check+0x1c>
 800114c:	2300      	movs	r3, #0
 800114e:	e010      	b.n	8001172 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001150:	2155      	movs	r1, #85	@ 0x55
 8001152:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001156:	f7ff ffcf 	bl	80010f8 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 800115a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800115e:	f7ff ffaf 	bl	80010c0 <at24c_ReadOneByte>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b55      	cmp	r3, #85	@ 0x55
 800116a:	d101      	bne.n	8001170 <at24c_Check+0x3c>
 800116c:	2300      	movs	r3, #0
 800116e:	e000      	b.n	8001172 <at24c_Check+0x3e>
	}
	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800117a:	b590      	push	{r4, r7, lr}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	6039      	str	r1, [r7, #0]
 8001184:	80fb      	strh	r3, [r7, #6]
 8001186:	4613      	mov	r3, r2
 8001188:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800118a:	e00d      	b.n	80011a8 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	80fa      	strh	r2, [r7, #6]
 8001192:	683c      	ldr	r4, [r7, #0]
 8001194:	1c62      	adds	r2, r4, #1
 8001196:	603a      	str	r2, [r7, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff91 	bl	80010c0 <at24c_ReadOneByte>
 800119e:	4603      	mov	r3, r0
 80011a0:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1ee      	bne.n	800118c <at24c_Read+0x12>
	}
}
 80011ae:	bf00      	nop
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}

080011b8 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	80fb      	strh	r3, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011c8:	e00c      	b.n	80011e4 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff90 	bl	80010f8 <at24c_WriteOneByte>
		WriteAddr++;
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	3301      	adds	r3, #1
 80011dc:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	80ba      	strh	r2, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ed      	bne.n	80011ca <at24c_Write+0x12>
	}
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2108      	movs	r1, #8
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <button_init+0x14>)
 8001202:	f006 f955 	bl	80074b0 <HAL_GPIO_WritePin>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020c00 	.word	0x40020c00

08001210 <button_Scan>:

void button_Scan(){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2108      	movs	r1, #8
 800121a:	482f      	ldr	r0, [pc, #188]	@ (80012d8 <button_Scan+0xc8>)
 800121c:	f006 f948 	bl	80074b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	2108      	movs	r1, #8
 8001224:	482c      	ldr	r0, [pc, #176]	@ (80012d8 <button_Scan+0xc8>)
 8001226:	f006 f943 	bl	80074b0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800122a:	230a      	movs	r3, #10
 800122c:	2202      	movs	r2, #2
 800122e:	492b      	ldr	r1, [pc, #172]	@ (80012dc <button_Scan+0xcc>)
 8001230:	482b      	ldr	r0, [pc, #172]	@ (80012e0 <button_Scan+0xd0>)
 8001232:	f007 ff8e 	bl	8009152 <HAL_SPI_Receive>
	  int button_index = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800123a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800123e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	e03f      	b.n	80012c6 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db06      	blt.n	800125a <button_Scan+0x4a>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b03      	cmp	r3, #3
 8001250:	dc03      	bgt.n	800125a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3304      	adds	r3, #4
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e018      	b.n	800128c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b03      	cmp	r3, #3
 800125e:	dd07      	ble.n	8001270 <button_Scan+0x60>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b07      	cmp	r3, #7
 8001264:	dc04      	bgt.n	8001270 <button_Scan+0x60>
			  button_index = 7 - i;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f1c3 0307 	rsb	r3, r3, #7
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	e00d      	b.n	800128c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b07      	cmp	r3, #7
 8001274:	dd06      	ble.n	8001284 <button_Scan+0x74>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0b      	cmp	r3, #11
 800127a:	dc03      	bgt.n	8001284 <button_Scan+0x74>
			  button_index = i + 4;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3304      	adds	r3, #4
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	e003      	b.n	800128c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f1c3 0317 	rsb	r3, r3, #23
 800128a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <button_Scan+0xcc>)
 800128e:	881a      	ldrh	r2, [r3, #0]
 8001290:	897b      	ldrh	r3, [r7, #10]
 8001292:	4013      	ands	r3, r2
 8001294:	b29b      	uxth	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <button_Scan+0x96>
 800129a:	4a12      	ldr	r2, [pc, #72]	@ (80012e4 <button_Scan+0xd4>)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2100      	movs	r1, #0
 80012a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012a4:	e009      	b.n	80012ba <button_Scan+0xaa>
		  else button_count[button_index]++;
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <button_Scan+0xd4>)
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ae:	3301      	adds	r3, #1
 80012b0:	b299      	uxth	r1, r3
 80012b2:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <button_Scan+0xd4>)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80012ba:	897b      	ldrh	r3, [r7, #10]
 80012bc:	085b      	lsrs	r3, r3, #1
 80012be:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	ddbc      	ble.n	8001246 <button_Scan+0x36>
	  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	200001cc 	.word	0x200001cc
 80012e0:	20000b40 	.word	0x20000b40
 80012e4:	200001ac 	.word	0x200001ac

080012e8 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4802      	ldr	r0, [pc, #8]	@ (80012f8 <buzzer_init+0x10>)
 80012f0:	f008 fcd8 	bl	8009ca4 <HAL_TIM_PWM_Start>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000c2c 	.word	0x20000c2c

080012fc <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 8001306:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <buzzer_SetVolume+0x28>)
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <buzzer_SetVolume+0x28>)
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <buzzer_SetVolume+0x2c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200001ce 	.word	0x200001ce
 8001328:	20000c2c 	.word	0x20000c2c

0800132c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_DMA_Init+0x3c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <MX_DMA_Init+0x3c>)
 800133c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_DMA_Init+0x3c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2038      	movs	r0, #56	@ 0x38
 8001354:	f005 fb45 	bl	80069e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001358:	2038      	movs	r0, #56	@ 0x38
 800135a:	f005 fb5e 	bl	8006a1a <HAL_NVIC_EnableIRQ>

}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <fsm_mode>:
int colon = 0;
int send_flag = 0;

struct player *leaderboard = NULL;

void fsm_mode(){
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	switch(mode){
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <fsm_mode+0x70>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d82e      	bhi.n	80013d6 <fsm_mode+0x6a>
 8001378:	a201      	add	r2, pc, #4	@ (adr r2, 8001380 <fsm_mode+0x14>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	08001391 	.word	0x08001391
 8001384:	0800139f 	.word	0x0800139f
 8001388:	080013b1 	.word	0x080013b1
 800138c:	080013c3 	.word	0x080013c3
	case NORMAL:
		wall = 0;
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <fsm_mode+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
		walls = 0;
 8001396:	4b13      	ldr	r3, [pc, #76]	@ (80013e4 <fsm_mode+0x78>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
		break;
 800139c:	e01b      	b.n	80013d6 <fsm_mode+0x6a>
	case WALL:
		wall = 1;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <fsm_mode+0x74>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
		walls = 0;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <fsm_mode+0x78>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
		spawn_wall();
 80013aa:	f002 fed5 	bl	8004158 <spawn_wall>
		break;
 80013ae:	e012      	b.n	80013d6 <fsm_mode+0x6a>
	case WALLS:
		wall = 1;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <fsm_mode+0x74>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
		walls = 1;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	@ (80013e4 <fsm_mode+0x78>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
		spawn_wall();
 80013bc:	f002 fecc 	bl	8004158 <spawn_wall>
		break;
 80013c0:	e009      	b.n	80013d6 <fsm_mode+0x6a>
	case TIMER:
		wall = 0;
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <fsm_mode+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
		walls = 0;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <fsm_mode+0x78>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
		countdown = 180;
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <fsm_mode+0x7c>)
 80013d0:	22b4      	movs	r2, #180	@ 0xb4
 80013d2:	601a      	str	r2, [r3, #0]
		break;
 80013d4:	bf00      	nop
	}
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001d8 	.word	0x200001d8
 80013e0:	200001e0 	.word	0x200001e0
 80013e4:	200001e4 	.word	0x200001e4
 80013e8:	20000008 	.word	0x20000008

080013ec <fsm_buzzer>:

void fsm_buzzer(){// gui canh bao do am > 70% loa bao hieu moi 1 giay, tan so 0.5Hz
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	switch (buzzer_flag) {
 80013f0:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <fsm_buzzer+0x58>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <fsm_buzzer+0x12>
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d012      	beq.n	8001422 <fsm_buzzer+0x36>
				buzzer_flag = BUZZER_OFF;
			}
			buzzer_SetVolume(50);
			break;
		default:
			break;
 80013fc:	e020      	b.n	8001440 <fsm_buzzer+0x54>
			if(flag_timer7 == 1){
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <fsm_buzzer+0x5c>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d109      	bne.n	800141a <fsm_buzzer+0x2e>
				uart_EspSendString("Humidity is higher than 70%\n/");
 8001406:	4811      	ldr	r0, [pc, #68]	@ (800144c <fsm_buzzer+0x60>)
 8001408:	f004 fdc0 	bl	8005f8c <uart_EspSendString>
				setTimer7(1000);
 800140c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001410:	f003 f9c4 	bl	800479c <setTimer7>
				buzzer_flag = BUZZER_ON;
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <fsm_buzzer+0x58>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(0);
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff ff6e 	bl	80012fc <buzzer_SetVolume>
			break;
 8001420:	e00e      	b.n	8001440 <fsm_buzzer+0x54>
			if(flag_timer7 == 1){
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <fsm_buzzer+0x5c>)
 8001424:	881b      	ldrh	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d106      	bne.n	8001438 <fsm_buzzer+0x4c>
				setTimer7(1000);
 800142a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800142e:	f003 f9b5 	bl	800479c <setTimer7>
				buzzer_flag = BUZZER_OFF;
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <fsm_buzzer+0x58>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(50);
 8001438:	2032      	movs	r0, #50	@ 0x32
 800143a:	f7ff ff5f 	bl	80012fc <buzzer_SetVolume>
			break;
 800143e:	bf00      	nop
	}
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200001ec 	.word	0x200001ec
 8001448:	20000b3a 	.word	0x20000b3a
 800144c:	0800d2fc 	.word	0x0800d2fc

08001450 <fsm_send_buzzer>:

void fsm_send_buzzer(){
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	switch (buzzer_check) {
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <fsm_send_buzzer+0x24>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <fsm_send_buzzer+0x12>
 800145c:	2b01      	cmp	r3, #1
 800145e:	d004      	beq.n	800146a <fsm_send_buzzer+0x1a>
			break;
		case 1:
			fsm_buzzer();
			break;
		default:
			break;
 8001460:	e006      	b.n	8001470 <fsm_send_buzzer+0x20>
			buzzer_SetVolume(0);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff ff4a 	bl	80012fc <buzzer_SetVolume>
			break;
 8001468:	e002      	b.n	8001470 <fsm_send_buzzer+0x20>
			fsm_buzzer();
 800146a:	f7ff ffbf 	bl	80013ec <fsm_buzzer>
			break;
 800146e:	bf00      	nop
	}
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200001f0 	.word	0x200001f0

08001478 <enter_ID>:

void enter_ID(){//nhap id nguoi choi
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	if(button_count[0] == 1)
 800147c:	4b4d      	ldr	r3, [pc, #308]	@ (80015b4 <enter_ID+0x13c>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <enter_ID+0x1e>
		ID = ID*10+1;
 8001484:	4b4c      	ldr	r3, [pc, #304]	@ (80015b8 <enter_ID+0x140>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	3301      	adds	r3, #1
 8001492:	4a49      	ldr	r2, [pc, #292]	@ (80015b8 <enter_ID+0x140>)
 8001494:	6013      	str	r3, [r2, #0]
	if(button_count[1] == 1)
 8001496:	4b47      	ldr	r3, [pc, #284]	@ (80015b4 <enter_ID+0x13c>)
 8001498:	885b      	ldrh	r3, [r3, #2]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d108      	bne.n	80014b0 <enter_ID+0x38>
		ID = ID*10+2;
 800149e:	4b46      	ldr	r3, [pc, #280]	@ (80015b8 <enter_ID+0x140>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	3302      	adds	r3, #2
 80014ac:	4a42      	ldr	r2, [pc, #264]	@ (80015b8 <enter_ID+0x140>)
 80014ae:	6013      	str	r3, [r2, #0]
	if(button_count[2] == 1)
 80014b0:	4b40      	ldr	r3, [pc, #256]	@ (80015b4 <enter_ID+0x13c>)
 80014b2:	889b      	ldrh	r3, [r3, #4]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <enter_ID+0x52>
		ID = ID*10+3;
 80014b8:	4b3f      	ldr	r3, [pc, #252]	@ (80015b8 <enter_ID+0x140>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	3303      	adds	r3, #3
 80014c6:	4a3c      	ldr	r2, [pc, #240]	@ (80015b8 <enter_ID+0x140>)
 80014c8:	6013      	str	r3, [r2, #0]
	if(button_count[4] == 1)
 80014ca:	4b3a      	ldr	r3, [pc, #232]	@ (80015b4 <enter_ID+0x13c>)
 80014cc:	891b      	ldrh	r3, [r3, #8]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <enter_ID+0x6c>
		ID = ID*10+4;
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <enter_ID+0x140>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	4613      	mov	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3304      	adds	r3, #4
 80014e0:	4a35      	ldr	r2, [pc, #212]	@ (80015b8 <enter_ID+0x140>)
 80014e2:	6013      	str	r3, [r2, #0]
	if(button_count[5] == 1)
 80014e4:	4b33      	ldr	r3, [pc, #204]	@ (80015b4 <enter_ID+0x13c>)
 80014e6:	895b      	ldrh	r3, [r3, #10]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d108      	bne.n	80014fe <enter_ID+0x86>
		ID = ID*10+5;
 80014ec:	4b32      	ldr	r3, [pc, #200]	@ (80015b8 <enter_ID+0x140>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	3305      	adds	r3, #5
 80014fa:	4a2f      	ldr	r2, [pc, #188]	@ (80015b8 <enter_ID+0x140>)
 80014fc:	6013      	str	r3, [r2, #0]
	if(button_count[6] == 1)
 80014fe:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <enter_ID+0x13c>)
 8001500:	899b      	ldrh	r3, [r3, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <enter_ID+0xa0>
		ID = ID*10+6;
 8001506:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <enter_ID+0x140>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	3306      	adds	r3, #6
 8001514:	4a28      	ldr	r2, [pc, #160]	@ (80015b8 <enter_ID+0x140>)
 8001516:	6013      	str	r3, [r2, #0]
	if(button_count[8] == 1)
 8001518:	4b26      	ldr	r3, [pc, #152]	@ (80015b4 <enter_ID+0x13c>)
 800151a:	8a1b      	ldrh	r3, [r3, #16]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d108      	bne.n	8001532 <enter_ID+0xba>
		ID = ID*10+7;
 8001520:	4b25      	ldr	r3, [pc, #148]	@ (80015b8 <enter_ID+0x140>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	3307      	adds	r3, #7
 800152e:	4a22      	ldr	r2, [pc, #136]	@ (80015b8 <enter_ID+0x140>)
 8001530:	6013      	str	r3, [r2, #0]
	if(button_count[9] == 1)
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <enter_ID+0x13c>)
 8001534:	8a5b      	ldrh	r3, [r3, #18]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d108      	bne.n	800154c <enter_ID+0xd4>
		ID = ID*10+8;
 800153a:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <enter_ID+0x140>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	3308      	adds	r3, #8
 8001548:	4a1b      	ldr	r2, [pc, #108]	@ (80015b8 <enter_ID+0x140>)
 800154a:	6013      	str	r3, [r2, #0]
	if(button_count[10] == 1)
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <enter_ID+0x13c>)
 800154e:	8a9b      	ldrh	r3, [r3, #20]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d108      	bne.n	8001566 <enter_ID+0xee>
		ID = ID*10+9;
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <enter_ID+0x140>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	3309      	adds	r3, #9
 8001562:	4a15      	ldr	r2, [pc, #84]	@ (80015b8 <enter_ID+0x140>)
 8001564:	6013      	str	r3, [r2, #0]
	if(button_count[13] == 1)
 8001566:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <enter_ID+0x13c>)
 8001568:	8b5b      	ldrh	r3, [r3, #26]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <enter_ID+0x108>
		ID = ID*10;
 800156e:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <enter_ID+0x140>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	461a      	mov	r2, r3
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <enter_ID+0x140>)
 800157e:	601a      	str	r2, [r3, #0]
	if(ID > 9999)
 8001580:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <enter_ID+0x140>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001588:	4293      	cmp	r3, r2
 800158a:	dd0e      	ble.n	80015aa <enter_ID+0x132>
		ID = ID % 10;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <enter_ID+0x140>)
 800158e:	6819      	ldr	r1, [r3, #0]
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <enter_ID+0x144>)
 8001592:	fb83 2301 	smull	r2, r3, r3, r1
 8001596:	109a      	asrs	r2, r3, #2
 8001598:	17cb      	asrs	r3, r1, #31
 800159a:	1ad2      	subs	r2, r2, r3
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	1aca      	subs	r2, r1, r3
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <enter_ID+0x140>)
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	200001ac 	.word	0x200001ac
 80015b8:	200001d4 	.word	0x200001d4
 80015bc:	66666667 	.word	0x66666667

080015c0 <change_mode>:

void change_mode(){// doi che do choi
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 80015c6:	4b78      	ldr	r3, [pc, #480]	@ (80017a8 <change_mode+0x1e8>)
 80015c8:	8b1b      	ldrh	r3, [r3, #24]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d11c      	bne.n	8001608 <change_mode+0x48>
		lcd_Clear(BLACK);
 80015ce:	2000      	movs	r0, #0
 80015d0:	f000 ffee 	bl	80025b0 <lcd_Clear>
		lcd_Fill(50, 200, 190, 300, GREEN);
 80015d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80015de:	22be      	movs	r2, #190	@ 0xbe
 80015e0:	21c8      	movs	r1, #200	@ 0xc8
 80015e2:	2032      	movs	r0, #50	@ 0x32
 80015e4:	f001 f816 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 80015e8:	2301      	movs	r3, #1
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2318      	movs	r3, #24
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	4a6d      	ldr	r2, [pc, #436]	@ (80017ac <change_mode+0x1ec>)
 80015f8:	21eb      	movs	r1, #235	@ 0xeb
 80015fa:	205a      	movs	r0, #90	@ 0x5a
 80015fc:	f001 fcc2 	bl	8002f84 <lcd_ShowStr>
		status = INIT;
 8001600:	4b6b      	ldr	r3, [pc, #428]	@ (80017b0 <change_mode+0x1f0>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
		return;
 8001606:	e0cc      	b.n	80017a2 <change_mode+0x1e2>
	}
	lcd_ShowStr(0, 10, "1. NORMAL", WHITE, BLACK, 16, 0);
 8001608:	2300      	movs	r3, #0
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2310      	movs	r3, #16
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2300      	movs	r3, #0
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001618:	4a66      	ldr	r2, [pc, #408]	@ (80017b4 <change_mode+0x1f4>)
 800161a:	210a      	movs	r1, #10
 800161c:	2000      	movs	r0, #0
 800161e:	f001 fcb1 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. WALL", WHITE, BLACK, 16, 0);
 8001622:	2300      	movs	r3, #0
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	2310      	movs	r3, #16
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2300      	movs	r3, #0
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001632:	4a61      	ldr	r2, [pc, #388]	@ (80017b8 <change_mode+0x1f8>)
 8001634:	211e      	movs	r1, #30
 8001636:	2000      	movs	r0, #0
 8001638:	f001 fca4 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. WALLS", WHITE, BLACK, 16, 0);
 800163c:	2300      	movs	r3, #0
 800163e:	9302      	str	r3, [sp, #8]
 8001640:	2310      	movs	r3, #16
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2300      	movs	r3, #0
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800164c:	4a5b      	ldr	r2, [pc, #364]	@ (80017bc <change_mode+0x1fc>)
 800164e:	2132      	movs	r1, #50	@ 0x32
 8001650:	2000      	movs	r0, #0
 8001652:	f001 fc97 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(0, 70, "4. TIMER", WHITE, BLACK, 16, 0);
 8001656:	2300      	movs	r3, #0
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	2310      	movs	r3, #16
 800165c:	9301      	str	r3, [sp, #4]
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001666:	4a56      	ldr	r2, [pc, #344]	@ (80017c0 <change_mode+0x200>)
 8001668:	2146      	movs	r1, #70	@ 0x46
 800166a:	2000      	movs	r0, #0
 800166c:	f001 fc8a 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(0, 90, "E. EXIT", WHITE, BLACK, 16, 0);
 8001670:	2300      	movs	r3, #0
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2310      	movs	r3, #16
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001680:	4a50      	ldr	r2, [pc, #320]	@ (80017c4 <change_mode+0x204>)
 8001682:	215a      	movs	r1, #90	@ 0x5a
 8001684:	2000      	movs	r0, #0
 8001686:	f001 fc7d 	bl	8002f84 <lcd_ShowStr>

	if(button_count[0] == 1){
 800168a:	4b47      	ldr	r3, [pc, #284]	@ (80017a8 <change_mode+0x1e8>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d11e      	bne.n	80016d0 <change_mode+0x110>
		mode = NORMAL;
 8001692:	4b4d      	ldr	r3, [pc, #308]	@ (80017c8 <change_mode+0x208>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001698:	2000      	movs	r0, #0
 800169a:	f000 ff89 	bl	80025b0 <lcd_Clear>
		status = INIT;
 800169e:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <change_mode+0x1f0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 80016a4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80016ae:	22be      	movs	r2, #190	@ 0xbe
 80016b0:	21c8      	movs	r1, #200	@ 0xc8
 80016b2:	2032      	movs	r0, #50	@ 0x32
 80016b4:	f000 ffae 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 80016b8:	2301      	movs	r3, #1
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	2318      	movs	r3, #24
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2300      	movs	r3, #0
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	4a39      	ldr	r2, [pc, #228]	@ (80017ac <change_mode+0x1ec>)
 80016c8:	21eb      	movs	r1, #235	@ 0xeb
 80016ca:	205a      	movs	r0, #90	@ 0x5a
 80016cc:	f001 fc5a 	bl	8002f84 <lcd_ShowStr>
	}
	if(button_count[1] == 1){
 80016d0:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <change_mode+0x1e8>)
 80016d2:	885b      	ldrh	r3, [r3, #2]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d11e      	bne.n	8001716 <change_mode+0x156>
		mode = WALL;
 80016d8:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <change_mode+0x208>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 ff66 	bl	80025b0 <lcd_Clear>
		status = INIT;
 80016e4:	4b32      	ldr	r3, [pc, #200]	@ (80017b0 <change_mode+0x1f0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 80016ea:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80016f4:	22be      	movs	r2, #190	@ 0xbe
 80016f6:	21c8      	movs	r1, #200	@ 0xc8
 80016f8:	2032      	movs	r0, #50	@ 0x32
 80016fa:	f000 ff8b 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 80016fe:	2301      	movs	r3, #1
 8001700:	9302      	str	r3, [sp, #8]
 8001702:	2318      	movs	r3, #24
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	2300      	movs	r3, #0
 800170c:	4a27      	ldr	r2, [pc, #156]	@ (80017ac <change_mode+0x1ec>)
 800170e:	21eb      	movs	r1, #235	@ 0xeb
 8001710:	205a      	movs	r0, #90	@ 0x5a
 8001712:	f001 fc37 	bl	8002f84 <lcd_ShowStr>
	}
	if(button_count[2] == 1){
 8001716:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <change_mode+0x1e8>)
 8001718:	889b      	ldrh	r3, [r3, #4]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d11e      	bne.n	800175c <change_mode+0x19c>
		mode = WALLS;
 800171e:	4b2a      	ldr	r3, [pc, #168]	@ (80017c8 <change_mode+0x208>)
 8001720:	2202      	movs	r2, #2
 8001722:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001724:	2000      	movs	r0, #0
 8001726:	f000 ff43 	bl	80025b0 <lcd_Clear>
		status = INIT;
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <change_mode+0x1f0>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 8001730:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800173a:	22be      	movs	r2, #190	@ 0xbe
 800173c:	21c8      	movs	r1, #200	@ 0xc8
 800173e:	2032      	movs	r0, #50	@ 0x32
 8001740:	f000 ff68 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 8001744:	2301      	movs	r3, #1
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2318      	movs	r3, #24
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	2300      	movs	r3, #0
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2300      	movs	r3, #0
 8001752:	4a16      	ldr	r2, [pc, #88]	@ (80017ac <change_mode+0x1ec>)
 8001754:	21eb      	movs	r1, #235	@ 0xeb
 8001756:	205a      	movs	r0, #90	@ 0x5a
 8001758:	f001 fc14 	bl	8002f84 <lcd_ShowStr>
	}
	if(button_count[4] == 1){
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <change_mode+0x1e8>)
 800175e:	891b      	ldrh	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d11e      	bne.n	80017a2 <change_mode+0x1e2>
		mode = TIMER;
 8001764:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <change_mode+0x208>)
 8001766:	2203      	movs	r2, #3
 8001768:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 ff20 	bl	80025b0 <lcd_Clear>
		status = INIT;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <change_mode+0x1f0>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 8001776:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001780:	22be      	movs	r2, #190	@ 0xbe
 8001782:	21c8      	movs	r1, #200	@ 0xc8
 8001784:	2032      	movs	r0, #50	@ 0x32
 8001786:	f000 ff45 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 800178a:	2301      	movs	r3, #1
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2318      	movs	r3, #24
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2300      	movs	r3, #0
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <change_mode+0x1ec>)
 800179a:	21eb      	movs	r1, #235	@ 0xeb
 800179c:	205a      	movs	r0, #90	@ 0x5a
 800179e:	f001 fbf1 	bl	8002f84 <lcd_ShowStr>
	}
}
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001ac 	.word	0x200001ac
 80017ac:	0800d31c 	.word	0x0800d31c
 80017b0:	200001d0 	.word	0x200001d0
 80017b4:	0800d324 	.word	0x0800d324
 80017b8:	0800d330 	.word	0x0800d330
 80017bc:	0800d338 	.word	0x0800d338
 80017c0:	0800d344 	.word	0x0800d344
 80017c4:	0800d350 	.word	0x0800d350
 80017c8:	200001d8 	.word	0x200001d8

080017cc <change_speed>:

void change_speed(){// doi toc do ran
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 80017d2:	4b61      	ldr	r3, [pc, #388]	@ (8001958 <change_speed+0x18c>)
 80017d4:	8b1b      	ldrh	r3, [r3, #24]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d11c      	bne.n	8001814 <change_speed+0x48>
		lcd_Clear(BLACK);
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 fee8 	bl	80025b0 <lcd_Clear>
		status = INIT;
 80017e0:	4b5e      	ldr	r3, [pc, #376]	@ (800195c <change_speed+0x190>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 80017e6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80017f0:	22be      	movs	r2, #190	@ 0xbe
 80017f2:	21c8      	movs	r1, #200	@ 0xc8
 80017f4:	2032      	movs	r0, #50	@ 0x32
 80017f6:	f000 ff0d 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 80017fa:	2301      	movs	r3, #1
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	2318      	movs	r3, #24
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	2300      	movs	r3, #0
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2300      	movs	r3, #0
 8001808:	4a55      	ldr	r2, [pc, #340]	@ (8001960 <change_speed+0x194>)
 800180a:	21eb      	movs	r1, #235	@ 0xeb
 800180c:	205a      	movs	r0, #90	@ 0x5a
 800180e:	f001 fbb9 	bl	8002f84 <lcd_ShowStr>
		return;
 8001812:	e09e      	b.n	8001952 <change_speed+0x186>
	}
	lcd_ShowStr(0, 10, "1. EASY", WHITE, BLACK, 16, 0);
 8001814:	2300      	movs	r3, #0
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	2310      	movs	r3, #16
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2300      	movs	r3, #0
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001824:	4a4f      	ldr	r2, [pc, #316]	@ (8001964 <change_speed+0x198>)
 8001826:	210a      	movs	r1, #10
 8001828:	2000      	movs	r0, #0
 800182a:	f001 fbab 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. MEDIUM", WHITE, BLACK, 16, 0);
 800182e:	2300      	movs	r3, #0
 8001830:	9302      	str	r3, [sp, #8]
 8001832:	2310      	movs	r3, #16
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	2300      	movs	r3, #0
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800183e:	4a4a      	ldr	r2, [pc, #296]	@ (8001968 <change_speed+0x19c>)
 8001840:	211e      	movs	r1, #30
 8001842:	2000      	movs	r0, #0
 8001844:	f001 fb9e 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. HARD", WHITE, BLACK, 16, 0);
 8001848:	2300      	movs	r3, #0
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2310      	movs	r3, #16
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001858:	4a44      	ldr	r2, [pc, #272]	@ (800196c <change_speed+0x1a0>)
 800185a:	2132      	movs	r1, #50	@ 0x32
 800185c:	2000      	movs	r0, #0
 800185e:	f001 fb91 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(0, 70, "E. EXIT", WHITE, BLACK, 16, 0);
 8001862:	2300      	movs	r3, #0
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2310      	movs	r3, #16
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2300      	movs	r3, #0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001872:	4a3f      	ldr	r2, [pc, #252]	@ (8001970 <change_speed+0x1a4>)
 8001874:	2146      	movs	r1, #70	@ 0x46
 8001876:	2000      	movs	r0, #0
 8001878:	f001 fb84 	bl	8002f84 <lcd_ShowStr>

	if(button_count[0] == 1){
 800187c:	4b36      	ldr	r3, [pc, #216]	@ (8001958 <change_speed+0x18c>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d11f      	bne.n	80018c4 <change_speed+0xf8>
		speed = 1000;
 8001884:	4b3b      	ldr	r3, [pc, #236]	@ (8001974 <change_speed+0x1a8>)
 8001886:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800188a:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800188c:	2000      	movs	r0, #0
 800188e:	f000 fe8f 	bl	80025b0 <lcd_Clear>
		status = INIT;
 8001892:	4b32      	ldr	r3, [pc, #200]	@ (800195c <change_speed+0x190>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 8001898:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80018a2:	22be      	movs	r2, #190	@ 0xbe
 80018a4:	21c8      	movs	r1, #200	@ 0xc8
 80018a6:	2032      	movs	r0, #50	@ 0x32
 80018a8:	f000 feb4 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 80018ac:	2301      	movs	r3, #1
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	2318      	movs	r3, #24
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	2300      	movs	r3, #0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	4a29      	ldr	r2, [pc, #164]	@ (8001960 <change_speed+0x194>)
 80018bc:	21eb      	movs	r1, #235	@ 0xeb
 80018be:	205a      	movs	r0, #90	@ 0x5a
 80018c0:	f001 fb60 	bl	8002f84 <lcd_ShowStr>
	}
	if(button_count[1] == 1){
 80018c4:	4b24      	ldr	r3, [pc, #144]	@ (8001958 <change_speed+0x18c>)
 80018c6:	885b      	ldrh	r3, [r3, #2]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d11f      	bne.n	800190c <change_speed+0x140>
		speed = 500;
 80018cc:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <change_speed+0x1a8>)
 80018ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018d2:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 80018d4:	2000      	movs	r0, #0
 80018d6:	f000 fe6b 	bl	80025b0 <lcd_Clear>
		status = INIT;
 80018da:	4b20      	ldr	r3, [pc, #128]	@ (800195c <change_speed+0x190>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 80018e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80018ea:	22be      	movs	r2, #190	@ 0xbe
 80018ec:	21c8      	movs	r1, #200	@ 0xc8
 80018ee:	2032      	movs	r0, #50	@ 0x32
 80018f0:	f000 fe90 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 80018f4:	2301      	movs	r3, #1
 80018f6:	9302      	str	r3, [sp, #8]
 80018f8:	2318      	movs	r3, #24
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	2300      	movs	r3, #0
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	4a17      	ldr	r2, [pc, #92]	@ (8001960 <change_speed+0x194>)
 8001904:	21eb      	movs	r1, #235	@ 0xeb
 8001906:	205a      	movs	r0, #90	@ 0x5a
 8001908:	f001 fb3c 	bl	8002f84 <lcd_ShowStr>
	}
	if(button_count[2] == 1){
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <change_speed+0x18c>)
 800190e:	889b      	ldrh	r3, [r3, #4]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d11e      	bne.n	8001952 <change_speed+0x186>
		speed = 100;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <change_speed+0x1a8>)
 8001916:	2264      	movs	r2, #100	@ 0x64
 8001918:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800191a:	2000      	movs	r0, #0
 800191c:	f000 fe48 	bl	80025b0 <lcd_Clear>
		status = INIT;
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <change_speed+0x190>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 8001926:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001930:	22be      	movs	r2, #190	@ 0xbe
 8001932:	21c8      	movs	r1, #200	@ 0xc8
 8001934:	2032      	movs	r0, #50	@ 0x32
 8001936:	f000 fe6d 	bl	8002614 <lcd_Fill>
		lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 800193a:	2301      	movs	r3, #1
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	2318      	movs	r3, #24
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <change_speed+0x194>)
 800194a:	21eb      	movs	r1, #235	@ 0xeb
 800194c:	205a      	movs	r0, #90	@ 0x5a
 800194e:	f001 fb19 	bl	8002f84 <lcd_ShowStr>
	}
}
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200001ac 	.word	0x200001ac
 800195c:	200001d0 	.word	0x200001d0
 8001960:	0800d31c 	.word	0x0800d31c
 8001964:	0800d358 	.word	0x0800d358
 8001968:	0800d360 	.word	0x0800d360
 800196c:	0800d36c 	.word	0x0800d36c
 8001970:	0800d350 	.word	0x0800d350
 8001974:	20000000 	.word	0x20000000

08001978 <displayLeaderBoard>:

void displayLeaderBoard(struct player *head){
 8001978:	b580      	push	{r7, lr}
 800197a:	b0a2      	sub	sp, #136	@ 0x88
 800197c:	af04      	add	r7, sp, #16
 800197e:	6078      	str	r0, [r7, #4]
	struct player *temp = head;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	677b      	str	r3, [r7, #116]	@ 0x74
	int count_leaderboard = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	673b      	str	r3, [r7, #112]	@ 0x70
	uart_EspSendString("Leaderboard :\n");
 8001988:	4847      	ldr	r0, [pc, #284]	@ (8001aa8 <displayLeaderBoard+0x130>)
 800198a:	f004 faff 	bl	8005f8c <uart_EspSendString>
	while(temp != NULL){
 800198e:	e04c      	b.n	8001a2a <displayLeaderBoard+0xb2>
		if(count_leaderboard < 7){
 8001990:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001992:	2b06      	cmp	r3, #6
 8001994:	dc4d      	bgt.n	8001a32 <displayLeaderBoard+0xba>
		char res[100];
		if(temp->player_mode == NORMAL)
 8001996:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <displayLeaderBoard+0x40>
			sprintf(res, "#%d ID: %d, score: %d, mode : NORMAL\n", count_leaderboard, temp->player_ID, temp->player_score);
 800199e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f107 000c 	add.w	r0, r7, #12
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	4613      	mov	r3, r2
 80019ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019b0:	493e      	ldr	r1, [pc, #248]	@ (8001aac <displayLeaderBoard+0x134>)
 80019b2:	f00a fb93 	bl	800c0dc <siprintf>
 80019b6:	e02d      	b.n	8001a14 <displayLeaderBoard+0x9c>
		else if(temp->player_mode == WALL)
 80019b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d10c      	bne.n	80019da <displayLeaderBoard+0x62>
			sprintf(res, "#%d ID: %d, score: %d, mode : WALL\n", count_leaderboard, temp->player_ID, temp->player_score);
 80019c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f107 000c 	add.w	r0, r7, #12
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4613      	mov	r3, r2
 80019d0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019d2:	4937      	ldr	r1, [pc, #220]	@ (8001ab0 <displayLeaderBoard+0x138>)
 80019d4:	f00a fb82 	bl	800c0dc <siprintf>
 80019d8:	e01c      	b.n	8001a14 <displayLeaderBoard+0x9c>
		else if(temp->player_mode == WALLS)
 80019da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d10c      	bne.n	80019fc <displayLeaderBoard+0x84>
			sprintf(res, "#%d ID: %d, score: %d, mode : WALLS\n", count_leaderboard, temp->player_ID, temp->player_score);
 80019e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f107 000c 	add.w	r0, r7, #12
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80019f4:	492f      	ldr	r1, [pc, #188]	@ (8001ab4 <displayLeaderBoard+0x13c>)
 80019f6:	f00a fb71 	bl	800c0dc <siprintf>
 80019fa:	e00b      	b.n	8001a14 <displayLeaderBoard+0x9c>
		else
			sprintf(res, "#%d ID: %d, score: %d, mode : TIMER\n", count_leaderboard, temp->player_ID, temp->player_score);
 80019fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f107 000c 	add.w	r0, r7, #12
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001a0e:	492a      	ldr	r1, [pc, #168]	@ (8001ab8 <displayLeaderBoard+0x140>)
 8001a10:	f00a fb64 	bl	800c0dc <siprintf>
		uart_EspSendString(res);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 fab7 	bl	8005f8c <uart_EspSendString>
		count_leaderboard++;
 8001a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a20:	3301      	adds	r3, #1
 8001a22:	673b      	str	r3, [r7, #112]	@ 0x70
		temp = temp -> next;
 8001a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	677b      	str	r3, [r7, #116]	@ 0x74
	while(temp != NULL){
 8001a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1af      	bne.n	8001990 <displayLeaderBoard+0x18>
 8001a30:	e000      	b.n	8001a34 <displayLeaderBoard+0xbc>
		}else
			break;
 8001a32:	bf00      	nop
	}
	uart_EspSendString("/");
 8001a34:	4821      	ldr	r0, [pc, #132]	@ (8001abc <displayLeaderBoard+0x144>)
 8001a36:	f004 faa9 	bl	8005f8c <uart_EspSendString>

	temp = head;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	677b      	str	r3, [r7, #116]	@ 0x74
	count_leaderboard = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	673b      	str	r3, [r7, #112]	@ 0x70
	lcd_ShowStr(10, 10, "ID", WHITE, BLACK, 24, 0);
 8001a42:	2300      	movs	r3, #0
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2318      	movs	r3, #24
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a52:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <displayLeaderBoard+0x148>)
 8001a54:	210a      	movs	r1, #10
 8001a56:	200a      	movs	r0, #10
 8001a58:	f001 fa94 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(50, 10, "SCORE", WHITE, BLACK, 24, 0);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2318      	movs	r3, #24
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2300      	movs	r3, #0
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <displayLeaderBoard+0x14c>)
 8001a6e:	210a      	movs	r1, #10
 8001a70:	2032      	movs	r0, #50	@ 0x32
 8001a72:	f001 fa87 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(120, 10, "MODE", WHITE, BLACK, 24, 0);
 8001a76:	2300      	movs	r3, #0
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	2318      	movs	r3, #24
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a86:	4a10      	ldr	r2, [pc, #64]	@ (8001ac8 <displayLeaderBoard+0x150>)
 8001a88:	210a      	movs	r1, #10
 8001a8a:	2078      	movs	r0, #120	@ 0x78
 8001a8c:	f001 fa7a 	bl	8002f84 <lcd_ShowStr>
	while(temp != NULL && count_leaderboard < 11){
 8001a90:	bf00      	nop
 8001a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <displayLeaderBoard+0x126>
 8001a98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	ddf9      	ble.n	8001a92 <displayLeaderBoard+0x11a>

	}
}
 8001a9e:	bf00      	nop
 8001aa0:	3778      	adds	r7, #120	@ 0x78
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	0800d374 	.word	0x0800d374
 8001aac:	0800d384 	.word	0x0800d384
 8001ab0:	0800d3ac 	.word	0x0800d3ac
 8001ab4:	0800d3d0 	.word	0x0800d3d0
 8001ab8:	0800d3f8 	.word	0x0800d3f8
 8001abc:	0800d420 	.word	0x0800d420
 8001ac0:	0800d424 	.word	0x0800d424
 8001ac4:	0800d428 	.word	0x0800d428
 8001ac8:	0800d430 	.word	0x0800d430

08001acc <fsm_machine>:

void fsm_machine(){
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b09f      	sub	sp, #124	@ 0x7c
 8001ad0:	af04      	add	r7, sp, #16
	switch (status) {
 8001ad2:	4b4f      	ldr	r3, [pc, #316]	@ (8001c10 <fsm_machine+0x144>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	f200 8274 	bhi.w	8001fc4 <fsm_machine+0x4f8>
 8001adc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae4 <fsm_machine+0x18>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001b4d 	.word	0x08001b4d
 8001ae8:	08001be7 	.word	0x08001be7
 8001aec:	08001f35 	.word	0x08001f35
 8001af0:	08001b41 	.word	0x08001b41
 8001af4:	08001b47 	.word	0x08001b47
 8001af8:	08001afd 	.word	0x08001afd
	case DISPLAY_LEADERBOARD:
//		displayLeaderBoard(leaderboard);
		if(button_count[12] == 1){
 8001afc:	4b45      	ldr	r3, [pc, #276]	@ (8001c14 <fsm_machine+0x148>)
 8001afe:	8b1b      	ldrh	r3, [r3, #24]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	f040 8261 	bne.w	8001fc8 <fsm_machine+0x4fc>
			lcd_Clear(BLACK);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 fd52 	bl	80025b0 <lcd_Clear>
			lcd_Fill(50, 200, 190, 300, GREEN);
 8001b0c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001b16:	22be      	movs	r2, #190	@ 0xbe
 8001b18:	21c8      	movs	r1, #200	@ 0xc8
 8001b1a:	2032      	movs	r0, #50	@ 0x32
 8001b1c:	f000 fd7a 	bl	8002614 <lcd_Fill>
			lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 8001b20:	2301      	movs	r3, #1
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	2318      	movs	r3, #24
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c18 <fsm_machine+0x14c>)
 8001b30:	21eb      	movs	r1, #235	@ 0xeb
 8001b32:	205a      	movs	r0, #90	@ 0x5a
 8001b34:	f001 fa26 	bl	8002f84 <lcd_ShowStr>
			status = INIT;
 8001b38:	4b35      	ldr	r3, [pc, #212]	@ (8001c10 <fsm_machine+0x144>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
		}
		break;
 8001b3e:	e243      	b.n	8001fc8 <fsm_machine+0x4fc>
	case CHANGE_MODE:
		change_mode();
 8001b40:	f7ff fd3e 	bl	80015c0 <change_mode>
		break;
 8001b44:	e247      	b.n	8001fd6 <fsm_machine+0x50a>
	case CHANGE_SPEED:
		change_speed();
 8001b46:	f7ff fe41 	bl	80017cc <change_speed>
		break;
 8001b4a:	e244      	b.n	8001fd6 <fsm_machine+0x50a>
	case INIT:
		screen_init();
 8001b4c:	f001 fd36 	bl	80035bc <screen_init>
		enter_ID();
 8001b50:	f7ff fc92 	bl	8001478 <enter_ID>
		//test_Adc();

		if(button_count[14] == 1){
 8001b54:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <fsm_machine+0x148>)
 8001b56:	8b9b      	ldrh	r3, [r3, #28]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <fsm_machine+0x9c>
			lcd_Clear(BLACK);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 fd27 	bl	80025b0 <lcd_Clear>
			status = CHANGE_MODE;
 8001b62:	4b2b      	ldr	r3, [pc, #172]	@ (8001c10 <fsm_machine+0x144>)
 8001b64:	2203      	movs	r2, #3
 8001b66:	601a      	str	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8001b68:	4b2a      	ldr	r3, [pc, #168]	@ (8001c14 <fsm_machine+0x148>)
 8001b6a:	8b1b      	ldrh	r3, [r3, #24]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d105      	bne.n	8001b7c <fsm_machine+0xb0>
			lcd_Clear(BLACK);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f000 fd1d 	bl	80025b0 <lcd_Clear>
			status = CHANGE_SPEED;
 8001b76:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <fsm_machine+0x144>)
 8001b78:	2204      	movs	r2, #4
 8001b7a:	601a      	str	r2, [r3, #0]
		}
		if(button_count[15] == 1){
 8001b7c:	4b25      	ldr	r3, [pc, #148]	@ (8001c14 <fsm_machine+0x148>)
 8001b7e:	8bdb      	ldrh	r3, [r3, #30]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10a      	bne.n	8001b9a <fsm_machine+0xce>
			lcd_Clear(BLACK);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f000 fd13 	bl	80025b0 <lcd_Clear>
			displayLeaderBoard(leaderboard);
 8001b8a:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <fsm_machine+0x150>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fef2 	bl	8001978 <displayLeaderBoard>
			status = DISPLAY_LEADERBOARD;
 8001b94:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <fsm_machine+0x144>)
 8001b96:	2205      	movs	r2, #5
 8001b98:	601a      	str	r2, [r3, #0]
		}

		if(isButtonStart()){
 8001b9a:	f004 f90f 	bl	8005dbc <isButtonStart>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 8213 	beq.w	8001fcc <fsm_machine+0x500>
			status = PLAY;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <fsm_machine+0x144>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//gui len Wifi
 8001bac:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <fsm_machine+0x154>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <fsm_machine+0x158>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	1d38      	adds	r0, r7, #4
 8001bb6:	491c      	ldr	r1, [pc, #112]	@ (8001c28 <fsm_machine+0x15c>)
 8001bb8:	f00a fa90 	bl	800c0dc <siprintf>
			uart_EspSendString(res);
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f9e4 	bl	8005f8c <uart_EspSendString>
			count = 0;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	@ (8001c2c <fsm_machine+0x160>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 fcf0 	bl	80025b0 <lcd_Clear>
			re_init();
 8001bd0:	f002 fa4c 	bl	800406c <re_init>
			screen_play();
 8001bd4:	f001 fde0 	bl	8003798 <screen_play>
			fsm_mode();
 8001bd8:	f7ff fbc8 	bl	800136c <fsm_mode>
			setTimer4(1000);
 8001bdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001be0:	f002 fda4 	bl	800472c <setTimer4>
		}
		break;
 8001be4:	e1f2      	b.n	8001fcc <fsm_machine+0x500>
	case PLAY:
		if(flag_timer4 == 1){
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <fsm_machine+0x164>)
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	f040 80b5 	bne.w	8001d5a <fsm_machine+0x28e>
			setTimer4(1000);
 8001bf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bf4:	f002 fd9a 	bl	800472c <setTimer4>
			if(colon == 0){
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <fsm_machine+0x168>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d11b      	bne.n	8001c38 <fsm_machine+0x16c>
				led7_SetColon(1);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f001 fb1d 	bl	8003240 <led7_SetColon>
				colon = 1;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <fsm_machine+0x168>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	e01a      	b.n	8001c44 <fsm_machine+0x178>
 8001c0e:	bf00      	nop
 8001c10:	200001d0 	.word	0x200001d0
 8001c14:	200001ac 	.word	0x200001ac
 8001c18:	0800d31c 	.word	0x0800d31c
 8001c1c:	200001fc 	.word	0x200001fc
 8001c20:	200001d4 	.word	0x200001d4
 8001c24:	20000004 	.word	0x20000004
 8001c28:	0800d438 	.word	0x0800d438
 8001c2c:	200001dc 	.word	0x200001dc
 8001c30:	20000b28 	.word	0x20000b28
 8001c34:	200001f4 	.word	0x200001f4
			}else{
				led7_SetColon(0);
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f001 fb01 	bl	8003240 <led7_SetColon>
				colon = 0;
 8001c3e:	4ba4      	ldr	r3, [pc, #656]	@ (8001ed0 <fsm_machine+0x404>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
			}
			count++;
 8001c44:	4ba3      	ldr	r3, [pc, #652]	@ (8001ed4 <fsm_machine+0x408>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	4aa2      	ldr	r2, [pc, #648]	@ (8001ed4 <fsm_machine+0x408>)
 8001c4c:	6013      	str	r3, [r2, #0]
			timer = count;
 8001c4e:	4ba1      	ldr	r3, [pc, #644]	@ (8001ed4 <fsm_machine+0x408>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4aa1      	ldr	r2, [pc, #644]	@ (8001ed8 <fsm_machine+0x40c>)
 8001c54:	6013      	str	r3, [r2, #0]
			if(wall == 1){
 8001c56:	4ba1      	ldr	r3, [pc, #644]	@ (8001edc <fsm_machine+0x410>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d115      	bne.n	8001c8a <fsm_machine+0x1be>
				if(count%5 == 0){
 8001c5e:	4b9d      	ldr	r3, [pc, #628]	@ (8001ed4 <fsm_machine+0x408>)
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	4b9f      	ldr	r3, [pc, #636]	@ (8001ee0 <fsm_machine+0x414>)
 8001c64:	fb83 2301 	smull	r2, r3, r3, r1
 8001c68:	105a      	asrs	r2, r3, #1
 8001c6a:	17cb      	asrs	r3, r1, #31
 8001c6c:	1ad2      	subs	r2, r2, r3
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	1aca      	subs	r2, r1, r3
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	d107      	bne.n	8001c8a <fsm_machine+0x1be>
					if(walls == 0){
 8001c7a:	4b9a      	ldr	r3, [pc, #616]	@ (8001ee4 <fsm_machine+0x418>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <fsm_machine+0x1ba>
						delete_wall();
 8001c82:	f002 f8bb 	bl	8003dfc <delete_wall>
					}
					spawn_wall();
 8001c86:	f002 fa67 	bl	8004158 <spawn_wall>
				}
			}
			if(mode == TIMER){
 8001c8a:	4b97      	ldr	r3, [pc, #604]	@ (8001ee8 <fsm_machine+0x41c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d108      	bne.n	8001ca4 <fsm_machine+0x1d8>
				countdown--;
 8001c92:	4b96      	ldr	r3, [pc, #600]	@ (8001eec <fsm_machine+0x420>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	4a94      	ldr	r2, [pc, #592]	@ (8001eec <fsm_machine+0x420>)
 8001c9a:	6013      	str	r3, [r2, #0]
				timer = countdown;
 8001c9c:	4b93      	ldr	r3, [pc, #588]	@ (8001eec <fsm_machine+0x420>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a8d      	ldr	r2, [pc, #564]	@ (8001ed8 <fsm_machine+0x40c>)
 8001ca2:	6013      	str	r3, [r2, #0]
			}
			led7_SetDigit((timer%60)%10, 3, 0);
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <fsm_machine+0x40c>)
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	4b91      	ldr	r3, [pc, #580]	@ (8001ef0 <fsm_machine+0x424>)
 8001caa:	fb83 2301 	smull	r2, r3, r3, r1
 8001cae:	440b      	add	r3, r1
 8001cb0:	115a      	asrs	r2, r3, #5
 8001cb2:	17cb      	asrs	r3, r1, #31
 8001cb4:	1ad2      	subs	r2, r2, r3
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	1a9b      	subs	r3, r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	1aca      	subs	r2, r1, r3
 8001cc0:	4b87      	ldr	r3, [pc, #540]	@ (8001ee0 <fsm_machine+0x414>)
 8001cc2:	fb83 1302 	smull	r1, r3, r3, r2
 8001cc6:	1099      	asrs	r1, r3, #2
 8001cc8:	17d3      	asrs	r3, r2, #31
 8001cca:	1ac8      	subs	r0, r1, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4403      	add	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	1ad0      	subs	r0, r2, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2103      	movs	r1, #3
 8001cda:	f001 fa8d 	bl	80031f8 <led7_SetDigit>
			led7_SetDigit((timer%60)/10, 2, 0);
 8001cde:	4b7e      	ldr	r3, [pc, #504]	@ (8001ed8 <fsm_machine+0x40c>)
 8001ce0:	6819      	ldr	r1, [r3, #0]
 8001ce2:	4b83      	ldr	r3, [pc, #524]	@ (8001ef0 <fsm_machine+0x424>)
 8001ce4:	fb83 2301 	smull	r2, r3, r3, r1
 8001ce8:	440b      	add	r3, r1
 8001cea:	115a      	asrs	r2, r3, #5
 8001cec:	17cb      	asrs	r3, r1, #31
 8001cee:	1ad2      	subs	r2, r2, r3
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	1aca      	subs	r2, r1, r3
 8001cfa:	4b79      	ldr	r3, [pc, #484]	@ (8001ee0 <fsm_machine+0x414>)
 8001cfc:	fb83 1302 	smull	r1, r3, r3, r2
 8001d00:	1099      	asrs	r1, r3, #2
 8001d02:	17d3      	asrs	r3, r2, #31
 8001d04:	1acb      	subs	r3, r1, r3
 8001d06:	2200      	movs	r2, #0
 8001d08:	2102      	movs	r1, #2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f001 fa74 	bl	80031f8 <led7_SetDigit>
			led7_SetDigit((timer/60)%10, 1, 0);
 8001d10:	4b71      	ldr	r3, [pc, #452]	@ (8001ed8 <fsm_machine+0x40c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a76      	ldr	r2, [pc, #472]	@ (8001ef0 <fsm_machine+0x424>)
 8001d16:	fb82 1203 	smull	r1, r2, r2, r3
 8001d1a:	441a      	add	r2, r3
 8001d1c:	1152      	asrs	r2, r2, #5
 8001d1e:	17db      	asrs	r3, r3, #31
 8001d20:	1ad2      	subs	r2, r2, r3
 8001d22:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <fsm_machine+0x414>)
 8001d24:	fb83 1302 	smull	r1, r3, r3, r2
 8001d28:	1099      	asrs	r1, r3, #2
 8001d2a:	17d3      	asrs	r3, r2, #31
 8001d2c:	1ac8      	subs	r0, r1, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4403      	add	r3, r0
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	1ad0      	subs	r0, r2, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	f001 fa5c 	bl	80031f8 <led7_SetDigit>
			led7_SetDigit((timer/60)/10, 0, 0);
 8001d40:	4b65      	ldr	r3, [pc, #404]	@ (8001ed8 <fsm_machine+0x40c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6b      	ldr	r2, [pc, #428]	@ (8001ef4 <fsm_machine+0x428>)
 8001d46:	fb82 1203 	smull	r1, r2, r2, r3
 8001d4a:	1192      	asrs	r2, r2, #6
 8001d4c:	17db      	asrs	r3, r3, #31
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f001 fa4f 	bl	80031f8 <led7_SetDigit>
		}
		if(isButtonUp()){
 8001d5a:	f004 f853 	bl	8005e04 <isButtonUp>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <fsm_machine+0x2b0>
			sw_up = 0;
 8001d64:	4b64      	ldr	r3, [pc, #400]	@ (8001ef8 <fsm_machine+0x42c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001d6a:	4b64      	ldr	r3, [pc, #400]	@ (8001efc <fsm_machine+0x430>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001d70:	4b63      	ldr	r3, [pc, #396]	@ (8001f00 <fsm_machine+0x434>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001d76:	4b63      	ldr	r3, [pc, #396]	@ (8001f04 <fsm_machine+0x438>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonDown()){
 8001d7c:	f004 f865 	bl	8005e4a <isButtonDown>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <fsm_machine+0x2d2>
			sw_up = 1;
 8001d86:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef8 <fsm_machine+0x42c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
			sw_down = 0;
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001efc <fsm_machine+0x430>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001d92:	4b5b      	ldr	r3, [pc, #364]	@ (8001f00 <fsm_machine+0x434>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001d98:	4b5a      	ldr	r3, [pc, #360]	@ (8001f04 <fsm_machine+0x438>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonLeft()){
 8001d9e:	f004 f879 	bl	8005e94 <isButtonLeft>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <fsm_machine+0x2f4>
			sw_up = 1;
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <fsm_machine+0x42c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001dae:	4b53      	ldr	r3, [pc, #332]	@ (8001efc <fsm_machine+0x430>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
			sw_left = 0;
 8001db4:	4b52      	ldr	r3, [pc, #328]	@ (8001f00 <fsm_machine+0x434>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001dba:	4b52      	ldr	r3, [pc, #328]	@ (8001f04 <fsm_machine+0x438>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonRight()){
 8001dc0:	f004 f88d 	bl	8005ede <isButtonRight>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <fsm_machine+0x316>
			sw_up = 1;
 8001dca:	4b4b      	ldr	r3, [pc, #300]	@ (8001ef8 <fsm_machine+0x42c>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	@ (8001efc <fsm_machine+0x430>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001f00 <fsm_machine+0x434>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
			sw_right = 0;
 8001ddc:	4b49      	ldr	r3, [pc, #292]	@ (8001f04 <fsm_machine+0x438>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		wait_check();
 8001de2:	f002 fb95 	bl	8004510 <wait_check>
		update_grid();
 8001de6:	f001 ff6b 	bl	8003cc0 <update_grid>
		if(flag_timer3 == 1){
 8001dea:	4b47      	ldr	r3, [pc, #284]	@ (8001f08 <fsm_machine+0x43c>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10b      	bne.n	8001e0a <fsm_machine+0x33e>
			//wait_check();
			setTimer3(speed);
 8001df2:	4b46      	ldr	r3, [pc, #280]	@ (8001f0c <fsm_machine+0x440>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f002 fc7b 	bl	80046f4 <setTimer3>
			move_snake();
 8001dfe:	f002 f85d 	bl	8003ebc <move_snake>
			//check_food();
			//check_collision();
			screen_score();
 8001e02:	f001 fcff 	bl	8003804 <screen_score>
			update_grid();
 8001e06:	f001 ff5b 	bl	8003cc0 <update_grid>
		}
		if(lose == 1){
 8001e0a:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <fsm_machine+0x444>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	f040 80de 	bne.w	8001fd0 <fsm_machine+0x504>
			status = GAME_OVER;
 8001e14:	4b3f      	ldr	r3, [pc, #252]	@ (8001f14 <fsm_machine+0x448>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	601a      	str	r2, [r3, #0]
			addPlayer(&leaderboard, ID, score, mode);
 8001e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f18 <fsm_machine+0x44c>)
 8001e1c:	6819      	ldr	r1, [r3, #0]
 8001e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001f1c <fsm_machine+0x450>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <fsm_machine+0x41c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	483d      	ldr	r0, [pc, #244]	@ (8001f20 <fsm_machine+0x454>)
 8001e2a:	f001 f90f 	bl	800304c <addPlayer>
			send_flag = 1;
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <fsm_machine+0x458>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d was game over\nScore : %d\nTime : %d:%d %c", ID, score, count/60, count%60, sec);//STM32 -> wifi
 8001e34:	4b38      	ldr	r3, [pc, #224]	@ (8001f18 <fsm_machine+0x44c>)
 8001e36:	681d      	ldr	r5, [r3, #0]
 8001e38:	4b38      	ldr	r3, [pc, #224]	@ (8001f1c <fsm_machine+0x450>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461e      	mov	r6, r3
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <fsm_machine+0x408>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef0 <fsm_machine+0x424>)
 8001e44:	fb82 1203 	smull	r1, r2, r2, r3
 8001e48:	441a      	add	r2, r3
 8001e4a:	1152      	asrs	r2, r2, #5
 8001e4c:	17db      	asrs	r3, r3, #31
 8001e4e:	1ad0      	subs	r0, r2, r3
 8001e50:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <fsm_machine+0x408>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <fsm_machine+0x424>)
 8001e56:	fb83 1302 	smull	r1, r3, r3, r2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	1159      	asrs	r1, r3, #5
 8001e5e:	17d3      	asrs	r3, r2, #31
 8001e60:	1ac9      	subs	r1, r1, r3
 8001e62:	460b      	mov	r3, r1
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	1a5b      	subs	r3, r3, r1
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	1ad1      	subs	r1, r2, r3
 8001e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <fsm_machine+0x45c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	1d3c      	adds	r4, r7, #4
 8001e72:	9302      	str	r3, [sp, #8]
 8001e74:	9101      	str	r1, [sp, #4]
 8001e76:	9000      	str	r0, [sp, #0]
 8001e78:	4633      	mov	r3, r6
 8001e7a:	462a      	mov	r2, r5
 8001e7c:	492b      	ldr	r1, [pc, #172]	@ (8001f2c <fsm_machine+0x460>)
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f00a f92c 	bl	800c0dc <siprintf>
			uart_EspSendString(res);
 8001e84:	1d3b      	adds	r3, r7, #4
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 f880 	bl	8005f8c <uart_EspSendString>
			send_flag =0;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <fsm_machine+0x458>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f000 fb8c 	bl	80025b0 <lcd_Clear>
			lcd_Fill(50, 250, 190, 300, GREEN);
 8001e98:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001ea2:	22be      	movs	r2, #190	@ 0xbe
 8001ea4:	21fa      	movs	r1, #250	@ 0xfa
 8001ea6:	2032      	movs	r0, #50	@ 0x32
 8001ea8:	f000 fbb4 	bl	8002614 <lcd_Fill>
			lcd_ShowStr(80,260,"RESTART",BLACK,BLACK,24,1);
 8001eac:	2301      	movs	r3, #1
 8001eae:	9302      	str	r3, [sp, #8]
 8001eb0:	2318      	movs	r3, #24
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	4a1d      	ldr	r2, [pc, #116]	@ (8001f30 <fsm_machine+0x464>)
 8001ebc:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001ec0:	2050      	movs	r0, #80	@ 0x50
 8001ec2:	f001 f85f 	bl	8002f84 <lcd_ShowStr>
			lose = 0;
 8001ec6:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <fsm_machine+0x444>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
		}
		break;
 8001ecc:	e080      	b.n	8001fd0 <fsm_machine+0x504>
 8001ece:	bf00      	nop
 8001ed0:	200001f4 	.word	0x200001f4
 8001ed4:	200001dc 	.word	0x200001dc
 8001ed8:	200001e8 	.word	0x200001e8
 8001edc:	200001e0 	.word	0x200001e0
 8001ee0:	66666667 	.word	0x66666667
 8001ee4:	200001e4 	.word	0x200001e4
 8001ee8:	200001d8 	.word	0x200001d8
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	88888889 	.word	0x88888889
 8001ef4:	1b4e81b5 	.word	0x1b4e81b5
 8001ef8:	20000028 	.word	0x20000028
 8001efc:	2000002c 	.word	0x2000002c
 8001f00:	20000034 	.word	0x20000034
 8001f04:	20000030 	.word	0x20000030
 8001f08:	20000b22 	.word	0x20000b22
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000b18 	.word	0x20000b18
 8001f14:	200001d0 	.word	0x200001d0
 8001f18:	200001d4 	.word	0x200001d4
 8001f1c:	20000b14 	.word	0x20000b14
 8001f20:	200001fc 	.word	0x200001fc
 8001f24:	200001f8 	.word	0x200001f8
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	0800d44c 	.word	0x0800d44c
 8001f30:	0800d478 	.word	0x0800d478
	case GAME_OVER:
		enter_ID();
 8001f34:	f7ff faa0 	bl	8001478 <enter_ID>
		screen_game_over();
 8001f38:	f001 fc8c 	bl	8003854 <screen_game_over>
		if(button_count[14] == 1){
 8001f3c:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <fsm_machine+0x514>)
 8001f3e:	8b9b      	ldrh	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <fsm_machine+0x484>
			lcd_Clear(BLACK);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 fb33 	bl	80025b0 <lcd_Clear>
			status = CHANGE_MODE;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <fsm_machine+0x518>)
 8001f4c:	2203      	movs	r2, #3
 8001f4e:	601a      	str	r2, [r3, #0]
		}

		if(button_count[12] == 1){
 8001f50:	4b23      	ldr	r3, [pc, #140]	@ (8001fe0 <fsm_machine+0x514>)
 8001f52:	8b1b      	ldrh	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <fsm_machine+0x498>
			lcd_Clear(BLACK);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 fb29 	bl	80025b0 <lcd_Clear>
			status = CHANGE_SPEED;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <fsm_machine+0x518>)
 8001f60:	2204      	movs	r2, #4
 8001f62:	601a      	str	r2, [r3, #0]
		}

		if(button_count[15] == 1){
 8001f64:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <fsm_machine+0x514>)
 8001f66:	8bdb      	ldrh	r3, [r3, #30]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10a      	bne.n	8001f82 <fsm_machine+0x4b6>
			lcd_Clear(BLACK);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f000 fb1f 	bl	80025b0 <lcd_Clear>
			displayLeaderBoard(leaderboard);
 8001f72:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe8 <fsm_machine+0x51c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fcfe 	bl	8001978 <displayLeaderBoard>
			status = DISPLAY_LEADERBOARD;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <fsm_machine+0x518>)
 8001f7e:	2205      	movs	r2, #5
 8001f80:	601a      	str	r2, [r3, #0]
		}

		if(isButtonRestart()){
 8001f82:	f003 ffd1 	bl	8005f28 <isButtonRestart>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <fsm_machine+0x508>
//			status = INIT;
//			lcd_Clear(BLACK);
//			re_init();
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//STM32->Wifi
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <fsm_machine+0x520>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <fsm_machine+0x524>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	1d38      	adds	r0, r7, #4
 8001f96:	4917      	ldr	r1, [pc, #92]	@ (8001ff4 <fsm_machine+0x528>)
 8001f98:	f00a f8a0 	bl	800c0dc <siprintf>
			uart_EspSendString(res);
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 fff4 	bl	8005f8c <uart_EspSendString>
			count = 0;
 8001fa4:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <fsm_machine+0x52c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
			status = PLAY;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <fsm_machine+0x518>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 fafd 	bl	80025b0 <lcd_Clear>
			re_init();
 8001fb6:	f002 f859 	bl	800406c <re_init>
			screen_play();
 8001fba:	f001 fbed 	bl	8003798 <screen_play>
			fsm_mode();
 8001fbe:	f7ff f9d5 	bl	800136c <fsm_mode>
		}
		break;
 8001fc2:	e007      	b.n	8001fd4 <fsm_machine+0x508>
	default:
		break;
 8001fc4:	bf00      	nop
 8001fc6:	e006      	b.n	8001fd6 <fsm_machine+0x50a>
		break;
 8001fc8:	bf00      	nop
 8001fca:	e004      	b.n	8001fd6 <fsm_machine+0x50a>
		break;
 8001fcc:	bf00      	nop
 8001fce:	e002      	b.n	8001fd6 <fsm_machine+0x50a>
		break;
 8001fd0:	bf00      	nop
 8001fd2:	e000      	b.n	8001fd6 <fsm_machine+0x50a>
		break;
 8001fd4:	bf00      	nop
	}
}
 8001fd6:	bf00      	nop
 8001fd8:	376c      	adds	r7, #108	@ 0x6c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200001ac 	.word	0x200001ac
 8001fe4:	200001d0 	.word	0x200001d0
 8001fe8:	200001fc 	.word	0x200001fc
 8001fec:	200001d4 	.word	0x200001d4
 8001ff0:	20000004 	.word	0x20000004
 8001ff4:	0800d438 	.word	0x0800d438
 8001ff8:	200001dc 	.word	0x200001dc

08001ffc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08e      	sub	sp, #56	@ 0x38
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	615a      	str	r2, [r3, #20]
 8002014:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8002016:	463b      	mov	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
 8002024:	615a      	str	r2, [r3, #20]
 8002026:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002028:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <MX_FSMC_Init+0xec>)
 800202a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800202e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002032:	4a2e      	ldr	r2, [pc, #184]	@ (80020ec <MX_FSMC_Init+0xf0>)
 8002034:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002036:	4b2c      	ldr	r3, [pc, #176]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800203c:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <MX_FSMC_Init+0xec>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002048:	4b27      	ldr	r3, [pc, #156]	@ (80020e8 <MX_FSMC_Init+0xec>)
 800204a:	2210      	movs	r2, #16
 800204c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800204e:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800205a:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <MX_FSMC_Init+0xec>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002060:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002062:	2200      	movs	r2, #0
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002068:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800206c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800206e:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002070:	2200      	movs	r2, #0
 8002072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002074:	4b1c      	ldr	r3, [pc, #112]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002076:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800207c:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <MX_FSMC_Init+0xec>)
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <MX_FSMC_Init+0xec>)
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002088:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <MX_FSMC_Init+0xec>)
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800208e:	230f      	movs	r3, #15
 8002090:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8002092:	230f      	movs	r3, #15
 8002094:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8002096:	233c      	movs	r3, #60	@ 0x3c
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800209e:	2310      	movs	r3, #16
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80020a2:	2311      	movs	r3, #17
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80020aa:	2308      	movs	r3, #8
 80020ac:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80020ae:	230f      	movs	r3, #15
 80020b0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80020b2:	2309      	movs	r3, #9
 80020b4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80020ba:	2310      	movs	r3, #16
 80020bc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80020be:	2311      	movs	r3, #17
 80020c0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80020c6:	463a      	mov	r2, r7
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	@ (80020e8 <MX_FSMC_Init+0xec>)
 80020d0:	f007 fc22 	bl	8009918 <HAL_SRAM_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80020da:	f001 fa69 	bl	80035b0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80020de:	bf00      	nop
 80020e0:	3738      	adds	r7, #56	@ 0x38
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000200 	.word	0x20000200
 80020ec:	a0000104 	.word	0xa0000104

080020f0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <HAL_FSMC_MspInit+0x88>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d131      	bne.n	8002170 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800210c:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <HAL_FSMC_MspInit+0x88>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_FSMC_MspInit+0x8c>)
 8002118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800211a:	4a18      	ldr	r2, [pc, #96]	@ (800217c <HAL_FSMC_MspInit+0x8c>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6393      	str	r3, [r2, #56]	@ 0x38
 8002122:	4b16      	ldr	r3, [pc, #88]	@ (800217c <HAL_FSMC_MspInit+0x8c>)
 8002124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800212e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8002132:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002134:	2302      	movs	r3, #2
 8002136:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002140:	230c      	movs	r3, #12
 8002142:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	4619      	mov	r1, r3
 8002148:	480d      	ldr	r0, [pc, #52]	@ (8002180 <HAL_FSMC_MspInit+0x90>)
 800214a:	f004 fffd 	bl	8007148 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800214e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8002152:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002160:	230c      	movs	r3, #12
 8002162:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4619      	mov	r1, r3
 8002168:	4806      	ldr	r0, [pc, #24]	@ (8002184 <HAL_FSMC_MspInit+0x94>)
 800216a:	f004 ffed 	bl	8007148 <HAL_GPIO_Init>
 800216e:	e000      	b.n	8002172 <HAL_FSMC_MspInit+0x82>
    return;
 8002170:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	20000250 	.word	0x20000250
 800217c:	40023800 	.word	0x40023800
 8002180:	40021000 	.word	0x40021000
 8002184:	40020c00 	.word	0x40020c00

08002188 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002190:	f7ff ffae 	bl	80020f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	@ 0x38
 80021a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
 80021b6:	4b7e      	ldr	r3, [pc, #504]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	4a7d      	ldr	r2, [pc, #500]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021c2:	4b7b      	ldr	r3, [pc, #492]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	4b77      	ldr	r3, [pc, #476]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	4a76      	ldr	r2, [pc, #472]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021d8:	f043 0304 	orr.w	r3, r3, #4
 80021dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021de:	4b74      	ldr	r3, [pc, #464]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	4b70      	ldr	r3, [pc, #448]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f2:	4a6f      	ldr	r2, [pc, #444]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021f4:	f043 0320 	orr.w	r3, r3, #32
 80021f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021fa:	4b6d      	ldr	r3, [pc, #436]	@ (80023b0 <MX_GPIO_Init+0x214>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	4b69      	ldr	r3, [pc, #420]	@ (80023b0 <MX_GPIO_Init+0x214>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a68      	ldr	r2, [pc, #416]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b66      	ldr	r3, [pc, #408]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b62      	ldr	r3, [pc, #392]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4a61      	ldr	r2, [pc, #388]	@ (80023b0 <MX_GPIO_Init+0x214>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4b5f      	ldr	r3, [pc, #380]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b5b      	ldr	r3, [pc, #364]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a5a      	ldr	r2, [pc, #360]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b58      	ldr	r3, [pc, #352]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b54      	ldr	r3, [pc, #336]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a53      	ldr	r2, [pc, #332]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b51      	ldr	r3, [pc, #324]	@ (80023b0 <MX_GPIO_Init+0x214>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b4d      	ldr	r3, [pc, #308]	@ (80023b0 <MX_GPIO_Init+0x214>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a4c      	ldr	r2, [pc, #304]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b4a      	ldr	r3, [pc, #296]	@ (80023b0 <MX_GPIO_Init+0x214>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	2170      	movs	r1, #112	@ 0x70
 8002296:	4847      	ldr	r0, [pc, #284]	@ (80023b4 <MX_GPIO_Init+0x218>)
 8002298:	f005 f90a 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800229c:	2200      	movs	r2, #0
 800229e:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 80022a2:	4845      	ldr	r0, [pc, #276]	@ (80023b8 <MX_GPIO_Init+0x21c>)
 80022a4:	f005 f904 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80022ae:	4843      	ldr	r0, [pc, #268]	@ (80023bc <MX_GPIO_Init+0x220>)
 80022b0:	f005 f8fe 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80022b4:	2200      	movs	r2, #0
 80022b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ba:	4841      	ldr	r0, [pc, #260]	@ (80023c0 <MX_GPIO_Init+0x224>)
 80022bc:	f005 f8f8 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2108      	movs	r1, #8
 80022c4:	483f      	ldr	r0, [pc, #252]	@ (80023c4 <MX_GPIO_Init+0x228>)
 80022c6:	f005 f8f3 	bl	80074b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80022ca:	2370      	movs	r3, #112	@ 0x70
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	4834      	ldr	r0, [pc, #208]	@ (80023b4 <MX_GPIO_Init+0x218>)
 80022e2:	f004 ff31 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80022e6:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022fc:	4619      	mov	r1, r3
 80022fe:	482e      	ldr	r0, [pc, #184]	@ (80023b8 <MX_GPIO_Init+0x21c>)
 8002300:	f004 ff22 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8002304:	23c0      	movs	r3, #192	@ 0xc0
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	4619      	mov	r1, r3
 8002316:	482a      	ldr	r0, [pc, #168]	@ (80023c0 <MX_GPIO_Init+0x224>)
 8002318:	f004 ff16 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800231c:	2330      	movs	r3, #48	@ 0x30
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	4822      	ldr	r0, [pc, #136]	@ (80023b8 <MX_GPIO_Init+0x21c>)
 8002330:	f004 ff0a 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002334:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800234a:	4619      	mov	r1, r3
 800234c:	481b      	ldr	r0, [pc, #108]	@ (80023bc <MX_GPIO_Init+0x220>)
 800234e:	f004 fefb 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8002352:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235c:	2301      	movs	r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002364:	4619      	mov	r1, r3
 8002366:	4814      	ldr	r0, [pc, #80]	@ (80023b8 <MX_GPIO_Init+0x21c>)
 8002368:	f004 feee 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800236c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	480e      	ldr	r0, [pc, #56]	@ (80023c0 <MX_GPIO_Init+0x224>)
 8002386:	f004 fedf 	bl	8007148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800238a:	2308      	movs	r3, #8
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239e:	4619      	mov	r1, r3
 80023a0:	4808      	ldr	r0, [pc, #32]	@ (80023c4 <MX_GPIO_Init+0x228>)
 80023a2:	f004 fed1 	bl	8007148 <HAL_GPIO_Init>

}
 80023a6:	bf00      	nop
 80023a8:	3738      	adds	r7, #56	@ 0x38
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40020800 	.word	0x40020800
 80023bc:	40021800 	.word	0x40021800
 80023c0:	40020000 	.word	0x40020000
 80023c4:	40020c00 	.word	0x40020c00

080023c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023cc:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023ce:	4a13      	ldr	r2, [pc, #76]	@ (800241c <MX_I2C1_Init+0x54>)
 80023d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023d4:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <MX_I2C1_Init+0x58>)
 80023d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023de:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023f2:	4b09      	ldr	r3, [pc, #36]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <MX_I2C1_Init+0x50>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <MX_I2C1_Init+0x50>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002404:	4804      	ldr	r0, [pc, #16]	@ (8002418 <MX_I2C1_Init+0x50>)
 8002406:	f005 f887 	bl	8007518 <HAL_I2C_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002410:	f001 f8ce 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000254 	.word	0x20000254
 800241c:	40005400 	.word	0x40005400
 8002420:	000186a0 	.word	0x000186a0

08002424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_I2C_MspInit+0x84>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d12b      	bne.n	800249e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <HAL_I2C_MspInit+0x88>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <HAL_I2C_MspInit+0x88>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <HAL_I2C_MspInit+0x88>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002462:	23c0      	movs	r3, #192	@ 0xc0
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002466:	2312      	movs	r3, #18
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002472:	2304      	movs	r3, #4
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	480c      	ldr	r0, [pc, #48]	@ (80024b0 <HAL_I2C_MspInit+0x8c>)
 800247e:	f004 fe63 	bl	8007148 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_I2C_MspInit+0x88>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_I2C_MspInit+0x88>)
 800248c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_I2C_MspInit+0x88>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	@ 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40005400 	.word	0x40005400
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020400 	.word	0x40020400

080024b4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80024be:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <LCD_WR_REG+0x1c>)
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	8013      	strh	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	600ffffe 	.word	0x600ffffe

080024d4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80024de:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <LCD_WR_DATA+0x1c>)
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	8053      	strh	r3, [r2, #2]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	600ffffe 	.word	0x600ffffe

080024f4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <LCD_RD_DATA+0x20>)
 80024fc:	885b      	ldrh	r3, [r3, #2]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	b29b      	uxth	r3, r3
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	600ffffe 	.word	0x600ffffe

08002518 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4604      	mov	r4, r0
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4623      	mov	r3, r4
 8002528:	80fb      	strh	r3, [r7, #6]
 800252a:	4603      	mov	r3, r0
 800252c:	80bb      	strh	r3, [r7, #4]
 800252e:	460b      	mov	r3, r1
 8002530:	807b      	strh	r3, [r7, #2]
 8002532:	4613      	mov	r3, r2
 8002534:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002536:	202a      	movs	r0, #42	@ 0x2a
 8002538:	f7ff ffbc 	bl	80024b4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff ffc6 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	b29b      	uxth	r3, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ffc0 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	b29b      	uxth	r3, r3
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ffba 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	b29b      	uxth	r3, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ffb4 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800256c:	202b      	movs	r0, #43	@ 0x2b
 800256e:	f7ff ffa1 	bl	80024b4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002572:	88bb      	ldrh	r3, [r7, #4]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b29b      	uxth	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ffab 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800257e:	88bb      	ldrh	r3, [r7, #4]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ffa5 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800258a:	883b      	ldrh	r3, [r7, #0]
 800258c:	0a1b      	lsrs	r3, r3, #8
 800258e:	b29b      	uxth	r3, r3
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff ff9f 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002596:	883b      	ldrh	r3, [r7, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	b29b      	uxth	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff99 	bl	80024d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80025a2:	202c      	movs	r0, #44	@ 0x2c
 80025a4:	f7ff ff86 	bl	80024b4 <LCD_WR_REG>
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd90      	pop	{r4, r7, pc}

080025b0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <lcd_Clear+0x60>)
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <lcd_Clear+0x60>)
 80025c4:	885b      	ldrh	r3, [r3, #2]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7ff ffa3 	bl	8002518 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	81fb      	strh	r3, [r7, #14]
 80025d6:	e011      	b.n	80025fc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80025d8:	2300      	movs	r3, #0
 80025da:	81bb      	strh	r3, [r7, #12]
 80025dc:	e006      	b.n	80025ec <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff77 	bl	80024d4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80025e6:	89bb      	ldrh	r3, [r7, #12]
 80025e8:	3301      	adds	r3, #1
 80025ea:	81bb      	strh	r3, [r7, #12]
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <lcd_Clear+0x60>)
 80025ee:	885b      	ldrh	r3, [r3, #2]
 80025f0:	89ba      	ldrh	r2, [r7, #12]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3f3      	bcc.n	80025de <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	3301      	adds	r3, #1
 80025fa:	81fb      	strh	r3, [r7, #14]
 80025fc:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <lcd_Clear+0x60>)
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	89fa      	ldrh	r2, [r7, #14]
 8002602:	429a      	cmp	r2, r3
 8002604:	d3e8      	bcc.n	80025d8 <lcd_Clear+0x28>
		}
	}
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	200002a8 	.word	0x200002a8

08002614 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	4604      	mov	r4, r0
 800261c:	4608      	mov	r0, r1
 800261e:	4611      	mov	r1, r2
 8002620:	461a      	mov	r2, r3
 8002622:	4623      	mov	r3, r4
 8002624:	80fb      	strh	r3, [r7, #6]
 8002626:	4603      	mov	r3, r0
 8002628:	80bb      	strh	r3, [r7, #4]
 800262a:	460b      	mov	r3, r1
 800262c:	807b      	strh	r3, [r7, #2]
 800262e:	4613      	mov	r3, r2
 8002630:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	883b      	ldrh	r3, [r7, #0]
 800263a:	3b01      	subs	r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	88b9      	ldrh	r1, [r7, #4]
 8002640:	88f8      	ldrh	r0, [r7, #6]
 8002642:	f7ff ff69 	bl	8002518 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002646:	88bb      	ldrh	r3, [r7, #4]
 8002648:	81fb      	strh	r3, [r7, #14]
 800264a:	e010      	b.n	800266e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800264c:	88fb      	ldrh	r3, [r7, #6]
 800264e:	81bb      	strh	r3, [r7, #12]
 8002650:	e006      	b.n	8002660 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002652:	8c3b      	ldrh	r3, [r7, #32]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff3d 	bl	80024d4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800265a:	89bb      	ldrh	r3, [r7, #12]
 800265c:	3301      	adds	r3, #1
 800265e:	81bb      	strh	r3, [r7, #12]
 8002660:	89ba      	ldrh	r2, [r7, #12]
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	429a      	cmp	r2, r3
 8002666:	d3f4      	bcc.n	8002652 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002668:	89fb      	ldrh	r3, [r7, #14]
 800266a:	3301      	adds	r3, #1
 800266c:	81fb      	strh	r3, [r7, #14]
 800266e:	89fa      	ldrh	r2, [r7, #14]
 8002670:	883b      	ldrh	r3, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d3ea      	bcc.n	800264c <lcd_Fill+0x38>
		}
	}
}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bd90      	pop	{r4, r7, pc}

08002680 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
 800268a:	460b      	mov	r3, r1
 800268c:	80bb      	strh	r3, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	88b9      	ldrh	r1, [r7, #4]
 8002698:	88f8      	ldrh	r0, [r7, #6]
 800269a:	f7ff ff3d 	bl	8002518 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff17 	bl	80024d4 <LCD_WR_DATA>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80026ae:	b590      	push	{r4, r7, lr}
 80026b0:	b08d      	sub	sp, #52	@ 0x34
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4604      	mov	r4, r0
 80026b6:	4608      	mov	r0, r1
 80026b8:	4611      	mov	r1, r2
 80026ba:	461a      	mov	r2, r3
 80026bc:	4623      	mov	r3, r4
 80026be:	80fb      	strh	r3, [r7, #6]
 80026c0:	4603      	mov	r3, r0
 80026c2:	80bb      	strh	r3, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
 80026c8:	4613      	mov	r3, r2
 80026ca:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80026dc:	883a      	ldrh	r2, [r7, #0]
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80026e8:	88bb      	ldrh	r3, [r7, #4]
 80026ea:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dd02      	ble.n	80026f8 <lcd_DrawLine+0x4a>
 80026f2:	2301      	movs	r3, #1
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e00b      	b.n	8002710 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d102      	bne.n	8002704 <lcd_DrawLine+0x56>
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	e005      	b.n	8002710 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	425b      	negs	r3, r3
 800270e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	dd02      	ble.n	800271c <lcd_DrawLine+0x6e>
 8002716:	2301      	movs	r3, #1
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	e00b      	b.n	8002734 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d102      	bne.n	8002728 <lcd_DrawLine+0x7a>
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e005      	b.n	8002734 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002728:	f04f 33ff 	mov.w	r3, #4294967295
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	425b      	negs	r3, r3
 8002732:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	429a      	cmp	r2, r3
 800273a:	dd02      	ble.n	8002742 <lcd_DrawLine+0x94>
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	61bb      	str	r3, [r7, #24]
 8002740:	e001      	b.n	8002746 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002746:	2300      	movs	r3, #0
 8002748:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800274a:	e02b      	b.n	80027a4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	b29b      	uxth	r3, r3
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	b291      	uxth	r1, r2
 8002754:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff91 	bl	8002680 <lcd_DrawPoint>
		xerr+=delta_x;
 800275e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	4413      	add	r3, r2
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8002766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 800276e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	429a      	cmp	r2, r3
 8002774:	dd07      	ble.n	8002786 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8002776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	429a      	cmp	r2, r3
 800278c:	dd07      	ble.n	800279e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800278e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 800279e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80027a0:	3301      	adds	r3, #1
 80027a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80027a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dacf      	bge.n	800274c <lcd_DrawLine+0x9e>
		}
	}
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3734      	adds	r7, #52	@ 0x34
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd90      	pop	{r4, r7, pc}
	...

080027b8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4604      	mov	r4, r0
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	80fb      	strh	r3, [r7, #6]
 80027ca:	4603      	mov	r3, r0
 80027cc:	80bb      	strh	r3, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
 80027d2:	4613      	mov	r3, r2
 80027d4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80027de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	08db      	lsrs	r3, r3, #3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	bf14      	ite	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	2300      	moveq	r3, #0
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	4413      	add	r3, r2
 8002802:	b29a      	uxth	r2, r3
 8002804:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002808:	b29b      	uxth	r3, r3
 800280a:	fb12 f303 	smulbb	r3, r2, r3
 800280e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	3b20      	subs	r3, #32
 8002814:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	b29a      	uxth	r2, r3
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	4413      	add	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29c      	uxth	r4, r3
 8002824:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002828:	b29a      	uxth	r2, r3
 800282a:	88bb      	ldrh	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29b      	uxth	r3, r3
 8002834:	88b9      	ldrh	r1, [r7, #4]
 8002836:	88f8      	ldrh	r0, [r7, #6]
 8002838:	4622      	mov	r2, r4
 800283a:	f7ff fe6d 	bl	8002518 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800283e:	2300      	movs	r3, #0
 8002840:	827b      	strh	r3, [r7, #18]
 8002842:	e07a      	b.n	800293a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002844:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002848:	2b0c      	cmp	r3, #12
 800284a:	d028      	beq.n	800289e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800284c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002850:	2b10      	cmp	r3, #16
 8002852:	d108      	bne.n	8002866 <lcd_ShowChar+0xae>
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	8a7b      	ldrh	r3, [r7, #18]
 8002858:	493c      	ldr	r1, [pc, #240]	@ (800294c <lcd_ShowChar+0x194>)
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	440a      	add	r2, r1
 800285e:	4413      	add	r3, r2
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	75fb      	strb	r3, [r7, #23]
 8002864:	e01b      	b.n	800289e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002866:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800286a:	2b18      	cmp	r3, #24
 800286c:	d10b      	bne.n	8002886 <lcd_ShowChar+0xce>
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	8a79      	ldrh	r1, [r7, #18]
 8002872:	4837      	ldr	r0, [pc, #220]	@ (8002950 <lcd_ShowChar+0x198>)
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	4403      	add	r3, r0
 800287e:	440b      	add	r3, r1
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	75fb      	strb	r3, [r7, #23]
 8002884:	e00b      	b.n	800289e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002886:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800288a:	2b20      	cmp	r3, #32
 800288c:	d15a      	bne.n	8002944 <lcd_ShowChar+0x18c>
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	8a7b      	ldrh	r3, [r7, #18]
 8002892:	4930      	ldr	r1, [pc, #192]	@ (8002954 <lcd_ShowChar+0x19c>)
 8002894:	0192      	lsls	r2, r2, #6
 8002896:	440a      	add	r2, r1
 8002898:	4413      	add	r3, r2
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800289e:	2300      	movs	r3, #0
 80028a0:	75bb      	strb	r3, [r7, #22]
 80028a2:	e044      	b.n	800292e <lcd_ShowChar+0x176>
		{
			if(!mode)
 80028a4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d120      	bne.n	80028ee <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80028ac:	7dfa      	ldrb	r2, [r7, #23]
 80028ae:	7dbb      	ldrb	r3, [r7, #22]
 80028b0:	fa42 f303 	asr.w	r3, r2, r3
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <lcd_ShowChar+0x10e>
 80028bc:	883b      	ldrh	r3, [r7, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fe08 	bl	80024d4 <LCD_WR_DATA>
 80028c4:	e003      	b.n	80028ce <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80028c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fe03 	bl	80024d4 <LCD_WR_DATA>
				m++;
 80028ce:	7d7b      	ldrb	r3, [r7, #21]
 80028d0:	3301      	adds	r3, #1
 80028d2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80028d4:	7d7b      	ldrb	r3, [r7, #21]
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80028dc:	fb01 f202 	mul.w	r2, r1, r2
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d11f      	bne.n	8002928 <lcd_ShowChar+0x170>
				{
					m=0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	757b      	strb	r3, [r7, #21]
					break;
 80028ec:	e022      	b.n	8002934 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80028ee:	7dfa      	ldrb	r2, [r7, #23]
 80028f0:	7dbb      	ldrb	r3, [r7, #22]
 80028f2:	fa42 f303 	asr.w	r3, r2, r3
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <lcd_ShowChar+0x152>
 80028fe:	883a      	ldrh	r2, [r7, #0]
 8002900:	88b9      	ldrh	r1, [r7, #4]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff febb 	bl	8002680 <lcd_DrawPoint>
				x++;
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	3301      	adds	r3, #1
 800290e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	8a3b      	ldrh	r3, [r7, #16]
 8002914:	1ad2      	subs	r2, r2, r3
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	429a      	cmp	r2, r3
 800291a:	d105      	bne.n	8002928 <lcd_ShowChar+0x170>
				{
					x=x0;
 800291c:	8a3b      	ldrh	r3, [r7, #16]
 800291e:	80fb      	strh	r3, [r7, #6]
					y++;
 8002920:	88bb      	ldrh	r3, [r7, #4]
 8002922:	3301      	adds	r3, #1
 8002924:	80bb      	strh	r3, [r7, #4]
					break;
 8002926:	e005      	b.n	8002934 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002928:	7dbb      	ldrb	r3, [r7, #22]
 800292a:	3301      	adds	r3, #1
 800292c:	75bb      	strb	r3, [r7, #22]
 800292e:	7dbb      	ldrb	r3, [r7, #22]
 8002930:	2b07      	cmp	r3, #7
 8002932:	d9b7      	bls.n	80028a4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002934:	8a7b      	ldrh	r3, [r7, #18]
 8002936:	3301      	adds	r3, #1
 8002938:	827b      	strh	r3, [r7, #18]
 800293a:	8a7a      	ldrh	r2, [r7, #18]
 800293c:	89bb      	ldrh	r3, [r7, #12]
 800293e:	429a      	cmp	r2, r3
 8002940:	d380      	bcc.n	8002844 <lcd_ShowChar+0x8c>
 8002942:	e000      	b.n	8002946 <lcd_ShowChar+0x18e>
		else return;
 8002944:	bf00      	nop
				}
			}
		}
	}
}
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bd90      	pop	{r4, r7, pc}
 800294c:	0800d70c 	.word	0x0800d70c
 8002950:	0800dcfc 	.word	0x0800dcfc
 8002954:	0800eecc 	.word	0x0800eecc

08002958 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	460a      	mov	r2, r1
 8002962:	71fb      	strb	r3, [r7, #7]
 8002964:	4613      	mov	r3, r2
 8002966:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002968:	2301      	movs	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800296c:	e004      	b.n	8002978 <mypow+0x20>
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	fb02 f303 	mul.w	r3, r2, r3
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	79bb      	ldrb	r3, [r7, #6]
 800297a:	1e5a      	subs	r2, r3, #1
 800297c:	71ba      	strb	r2, [r7, #6]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f5      	bne.n	800296e <mypow+0x16>
	return result;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b089      	sub	sp, #36	@ 0x24
 8002994:	af04      	add	r7, sp, #16
 8002996:	4604      	mov	r4, r0
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	80fb      	strh	r3, [r7, #6]
 80029a2:	4603      	mov	r3, r0
 80029a4:	80bb      	strh	r3, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	807b      	strh	r3, [r7, #2]
 80029aa:	4613      	mov	r3, r2
 80029ac:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80029b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029b6:	085b      	lsrs	r3, r3, #1
 80029b8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
 80029be:	e059      	b.n	8002a74 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80029c0:	887c      	ldrh	r4, [r7, #2]
 80029c2:	787a      	ldrb	r2, [r7, #1]
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4619      	mov	r1, r3
 80029d0:	200a      	movs	r0, #10
 80029d2:	f7ff ffc1 	bl	8002958 <mypow>
 80029d6:	4603      	mov	r3, r0
 80029d8:	fbb4 f1f3 	udiv	r1, r4, r3
 80029dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002a88 <lcd_ShowIntNum+0xf8>)
 80029de:	fba3 2301 	umull	r2, r3, r3, r1
 80029e2:	08da      	lsrs	r2, r3, #3
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	1aca      	subs	r2, r1, r3
 80029ee:	4613      	mov	r3, r2
 80029f0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80029f2:	7bbb      	ldrb	r3, [r7, #14]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d121      	bne.n	8002a3c <lcd_ShowIntNum+0xac>
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	787b      	ldrb	r3, [r7, #1]
 80029fc:	3b01      	subs	r3, #1
 80029fe:	429a      	cmp	r2, r3
 8002a00:	da1c      	bge.n	8002a3c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002a02:	7b3b      	ldrb	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d117      	bne.n	8002a38 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	7b7b      	ldrb	r3, [r7, #13]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	fb12 f303 	smulbb	r3, r2, r3
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	4413      	add	r3, r2
 8002a1a:	b298      	uxth	r0, r3
 8002a1c:	8c3a      	ldrh	r2, [r7, #32]
 8002a1e:	88b9      	ldrh	r1, [r7, #4]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9302      	str	r3, [sp, #8]
 8002a24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	2220      	movs	r2, #32
 8002a32:	f7ff fec1 	bl	80027b8 <lcd_ShowChar>
				continue;
 8002a36:	e01a      	b.n	8002a6e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	7b7b      	ldrb	r3, [r7, #13]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	fb12 f303 	smulbb	r3, r2, r3
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b298      	uxth	r0, r3
 8002a50:	7b3b      	ldrb	r3, [r7, #12]
 8002a52:	3330      	adds	r3, #48	@ 0x30
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	8c3c      	ldrh	r4, [r7, #32]
 8002a58:	88b9      	ldrh	r1, [r7, #4]
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9302      	str	r3, [sp, #8]
 8002a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4623      	mov	r3, r4
 8002a6a:	f7ff fea5 	bl	80027b8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	3301      	adds	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	787b      	ldrb	r3, [r7, #1]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3a1      	bcc.n	80029c0 <lcd_ShowIntNum+0x30>
	}
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd90      	pop	{r4, r7, pc}
 8002a86:	bf00      	nop
 8002a88:	cccccccd 	.word	0xcccccccd

08002a8c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <lcd_SetDir+0x44>)
 8002aa8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002aac:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <lcd_SetDir+0x44>)
 8002ab0:	22f0      	movs	r2, #240	@ 0xf0
 8002ab2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002ab4:	e006      	b.n	8002ac4 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <lcd_SetDir+0x44>)
 8002ab8:	22f0      	movs	r2, #240	@ 0xf0
 8002aba:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <lcd_SetDir+0x44>)
 8002abe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002ac2:	805a      	strh	r2, [r3, #2]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	200002a8 	.word	0x200002a8

08002ad4 <lcd_init>:


void lcd_init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002ade:	48aa      	ldr	r0, [pc, #680]	@ (8002d88 <lcd_init+0x2b4>)
 8002ae0:	f004 fce6 	bl	80074b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002ae4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ae8:	f003 fc1a 	bl	8006320 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002aec:	2201      	movs	r2, #1
 8002aee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002af2:	48a5      	ldr	r0, [pc, #660]	@ (8002d88 <lcd_init+0x2b4>)
 8002af4:	f004 fcdc 	bl	80074b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002af8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002afc:	f003 fc10 	bl	8006320 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff ffc3 	bl	8002a8c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002b06:	20d3      	movs	r0, #211	@ 0xd3
 8002b08:	f7ff fcd4 	bl	80024b4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002b0c:	f7ff fcf2 	bl	80024f4 <LCD_RD_DATA>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b9d      	ldr	r3, [pc, #628]	@ (8002d8c <lcd_init+0x2b8>)
 8002b16:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002b18:	f7ff fcec 	bl	80024f4 <LCD_RD_DATA>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b9a      	ldr	r3, [pc, #616]	@ (8002d8c <lcd_init+0x2b8>)
 8002b22:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002b24:	f7ff fce6 	bl	80024f4 <LCD_RD_DATA>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4b97      	ldr	r3, [pc, #604]	@ (8002d8c <lcd_init+0x2b8>)
 8002b2e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002b30:	4b96      	ldr	r3, [pc, #600]	@ (8002d8c <lcd_init+0x2b8>)
 8002b32:	889b      	ldrh	r3, [r3, #4]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	4b94      	ldr	r3, [pc, #592]	@ (8002d8c <lcd_init+0x2b8>)
 8002b3a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002b3c:	f7ff fcda 	bl	80024f4 <LCD_RD_DATA>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b91      	ldr	r3, [pc, #580]	@ (8002d8c <lcd_init+0x2b8>)
 8002b46:	889b      	ldrh	r3, [r3, #4]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	4b8f      	ldr	r3, [pc, #572]	@ (8002d8c <lcd_init+0x2b8>)
 8002b4e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002b50:	20cf      	movs	r0, #207	@ 0xcf
 8002b52:	f7ff fcaf 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7ff fcbc 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002b5c:	20c1      	movs	r0, #193	@ 0xc1
 8002b5e:	f7ff fcb9 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002b62:	2030      	movs	r0, #48	@ 0x30
 8002b64:	f7ff fcb6 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002b68:	20ed      	movs	r0, #237	@ 0xed
 8002b6a:	f7ff fca3 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002b6e:	2064      	movs	r0, #100	@ 0x64
 8002b70:	f7ff fcb0 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002b74:	2003      	movs	r0, #3
 8002b76:	f7ff fcad 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002b7a:	2012      	movs	r0, #18
 8002b7c:	f7ff fcaa 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002b80:	2081      	movs	r0, #129	@ 0x81
 8002b82:	f7ff fca7 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002b86:	20e8      	movs	r0, #232	@ 0xe8
 8002b88:	f7ff fc94 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002b8c:	2085      	movs	r0, #133	@ 0x85
 8002b8e:	f7ff fca1 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002b92:	2010      	movs	r0, #16
 8002b94:	f7ff fc9e 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002b98:	207a      	movs	r0, #122	@ 0x7a
 8002b9a:	f7ff fc9b 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002b9e:	20cb      	movs	r0, #203	@ 0xcb
 8002ba0:	f7ff fc88 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002ba4:	2039      	movs	r0, #57	@ 0x39
 8002ba6:	f7ff fc95 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002baa:	202c      	movs	r0, #44	@ 0x2c
 8002bac:	f7ff fc92 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7ff fc8f 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002bb6:	2034      	movs	r0, #52	@ 0x34
 8002bb8:	f7ff fc8c 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	f7ff fc89 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002bc2:	20f7      	movs	r0, #247	@ 0xf7
 8002bc4:	f7ff fc76 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002bc8:	2020      	movs	r0, #32
 8002bca:	f7ff fc83 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002bce:	20ea      	movs	r0, #234	@ 0xea
 8002bd0:	f7ff fc70 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7ff fc7d 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7ff fc7a 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002be0:	20c0      	movs	r0, #192	@ 0xc0
 8002be2:	f7ff fc67 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002be6:	201b      	movs	r0, #27
 8002be8:	f7ff fc74 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002bec:	20c1      	movs	r0, #193	@ 0xc1
 8002bee:	f7ff fc61 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7ff fc6e 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002bf8:	20c5      	movs	r0, #197	@ 0xc5
 8002bfa:	f7ff fc5b 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002bfe:	2030      	movs	r0, #48	@ 0x30
 8002c00:	f7ff fc68 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002c04:	2030      	movs	r0, #48	@ 0x30
 8002c06:	f7ff fc65 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002c0a:	20c7      	movs	r0, #199	@ 0xc7
 8002c0c:	f7ff fc52 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002c10:	20b7      	movs	r0, #183	@ 0xb7
 8002c12:	f7ff fc5f 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002c16:	2036      	movs	r0, #54	@ 0x36
 8002c18:	f7ff fc4c 	bl	80024b4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002c1c:	2008      	movs	r0, #8
 8002c1e:	f7ff fc59 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002c22:	203a      	movs	r0, #58	@ 0x3a
 8002c24:	f7ff fc46 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002c28:	2055      	movs	r0, #85	@ 0x55
 8002c2a:	f7ff fc53 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002c2e:	20b1      	movs	r0, #177	@ 0xb1
 8002c30:	f7ff fc40 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7ff fc4d 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002c3a:	201a      	movs	r0, #26
 8002c3c:	f7ff fc4a 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002c40:	20b6      	movs	r0, #182	@ 0xb6
 8002c42:	f7ff fc37 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002c46:	200a      	movs	r0, #10
 8002c48:	f7ff fc44 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002c4c:	20a2      	movs	r0, #162	@ 0xa2
 8002c4e:	f7ff fc41 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002c52:	20f2      	movs	r0, #242	@ 0xf2
 8002c54:	f7ff fc2e 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7ff fc3b 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002c5e:	2026      	movs	r0, #38	@ 0x26
 8002c60:	f7ff fc28 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002c64:	2001      	movs	r0, #1
 8002c66:	f7ff fc35 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002c6a:	20e0      	movs	r0, #224	@ 0xe0
 8002c6c:	f7ff fc22 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002c70:	200f      	movs	r0, #15
 8002c72:	f7ff fc2f 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002c76:	202a      	movs	r0, #42	@ 0x2a
 8002c78:	f7ff fc2c 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002c7c:	2028      	movs	r0, #40	@ 0x28
 8002c7e:	f7ff fc29 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002c82:	2008      	movs	r0, #8
 8002c84:	f7ff fc26 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002c88:	200e      	movs	r0, #14
 8002c8a:	f7ff fc23 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002c8e:	2008      	movs	r0, #8
 8002c90:	f7ff fc20 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002c94:	2054      	movs	r0, #84	@ 0x54
 8002c96:	f7ff fc1d 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002c9a:	20a9      	movs	r0, #169	@ 0xa9
 8002c9c:	f7ff fc1a 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002ca0:	2043      	movs	r0, #67	@ 0x43
 8002ca2:	f7ff fc17 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002ca6:	200a      	movs	r0, #10
 8002ca8:	f7ff fc14 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002cac:	200f      	movs	r0, #15
 8002cae:	f7ff fc11 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f7ff fc0e 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7ff fc0b 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f7ff fc08 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7ff fc05 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002cca:	20e1      	movs	r0, #225	@ 0xe1
 8002ccc:	f7ff fbf2 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7ff fbff 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002cd6:	2015      	movs	r0, #21
 8002cd8:	f7ff fbfc 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002cdc:	2017      	movs	r0, #23
 8002cde:	f7ff fbf9 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002ce2:	2007      	movs	r0, #7
 8002ce4:	f7ff fbf6 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002ce8:	2011      	movs	r0, #17
 8002cea:	f7ff fbf3 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002cee:	2006      	movs	r0, #6
 8002cf0:	f7ff fbf0 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002cf4:	202b      	movs	r0, #43	@ 0x2b
 8002cf6:	f7ff fbed 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002cfa:	2056      	movs	r0, #86	@ 0x56
 8002cfc:	f7ff fbea 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002d00:	203c      	movs	r0, #60	@ 0x3c
 8002d02:	f7ff fbe7 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002d06:	2005      	movs	r0, #5
 8002d08:	f7ff fbe4 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002d0c:	2010      	movs	r0, #16
 8002d0e:	f7ff fbe1 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002d12:	200f      	movs	r0, #15
 8002d14:	f7ff fbde 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002d18:	203f      	movs	r0, #63	@ 0x3f
 8002d1a:	f7ff fbdb 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002d1e:	203f      	movs	r0, #63	@ 0x3f
 8002d20:	f7ff fbd8 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002d24:	200f      	movs	r0, #15
 8002d26:	f7ff fbd5 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002d2a:	202b      	movs	r0, #43	@ 0x2b
 8002d2c:	f7ff fbc2 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f7ff fbcf 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7ff fbcc 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7ff fbc9 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002d42:	203f      	movs	r0, #63	@ 0x3f
 8002d44:	f7ff fbc6 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002d48:	202a      	movs	r0, #42	@ 0x2a
 8002d4a:	f7ff fbb3 	bl	80024b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7ff fbc0 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7ff fbbd 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002d5a:	2000      	movs	r0, #0
 8002d5c:	f7ff fbba 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002d60:	20ef      	movs	r0, #239	@ 0xef
 8002d62:	f7ff fbb7 	bl	80024d4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002d66:	2011      	movs	r0, #17
 8002d68:	f7ff fba4 	bl	80024b4 <LCD_WR_REG>
	HAL_Delay(120);
 8002d6c:	2078      	movs	r0, #120	@ 0x78
 8002d6e:	f003 fad7 	bl	8006320 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002d72:	2029      	movs	r0, #41	@ 0x29
 8002d74:	f7ff fb9e 	bl	80024b4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d7e:	4804      	ldr	r0, [pc, #16]	@ (8002d90 <lcd_init+0x2bc>)
 8002d80:	f004 fb96 	bl	80074b0 <HAL_GPIO_WritePin>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	200002a8 	.word	0x200002a8
 8002d90:	40020000 	.word	0x40020000

08002d94 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b298      	uxth	r0, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4413      	add	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	8b3a      	ldrh	r2, [r7, #24]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f7ff fc5f 	bl	8002680 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	b298      	uxth	r0, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	8b3a      	ldrh	r2, [r7, #24]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7ff fc4f 	bl	8002680 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	b298      	uxth	r0, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	8b3a      	ldrh	r2, [r7, #24]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f7ff fc3f 	bl	8002680 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	b298      	uxth	r0, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	8b3a      	ldrh	r2, [r7, #24]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f7ff fc2f 	bl	8002680 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b298      	uxth	r0, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	8b3a      	ldrh	r2, [r7, #24]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f7ff fc1f 	bl	8002680 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b298      	uxth	r0, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8b3a      	ldrh	r2, [r7, #24]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7ff fc0f 	bl	8002680 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	b298      	uxth	r0, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	8b3a      	ldrh	r2, [r7, #24]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7ff fbff 	bl	8002680 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	b298      	uxth	r0, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	8b3a      	ldrh	r2, [r7, #24]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7ff fbef 	bl	8002680 <lcd_DrawPoint>
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b08a      	sub	sp, #40	@ 0x28
 8002eae:	af02      	add	r7, sp, #8
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	f1c3 0303 	rsb	r3, r3, #3
 8002eca:	613b      	str	r3, [r7, #16]


	if (fill)
 8002ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d04f      	beq.n	8002f72 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002ed2:	e029      	b.n	8002f28 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e00a      	b.n	8002ef0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff ff55 	bl	8002d94 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	3301      	adds	r3, #1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697a      	ldr	r2, [r7, #20]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	ddf0      	ble.n	8002eda <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da06      	bge.n	8002f0c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	009a      	lsls	r2, r3, #2
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	3306      	adds	r3, #6
 8002f08:	613b      	str	r3, [r7, #16]
 8002f0a:	e00a      	b.n	8002f22 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	009a      	lsls	r2, r3, #2
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	330a      	adds	r3, #10
 8002f1a:	613b      	str	r3, [r7, #16]
				y--;
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3301      	adds	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	ddd1      	ble.n	8002ed4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002f30:	e023      	b.n	8002f7a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	69fa      	ldr	r2, [r7, #28]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff ff29 	bl	8002d94 <_draw_circle_8>
			if (d < 0) {
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da06      	bge.n	8002f56 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	009a      	lsls	r2, r3, #2
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	3306      	adds	r3, #6
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e00a      	b.n	8002f6c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	009a      	lsls	r2, r3, #2
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	330a      	adds	r3, #10
 8002f64:	613b      	str	r3, [r7, #16]
				y--;
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	61bb      	str	r3, [r7, #24]
			x++;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	dddb      	ble.n	8002f32 <lcd_DrawCircle+0x88>
}
 8002f7a:	bf00      	nop
 8002f7c:	3720      	adds	r7, #32
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b08b      	sub	sp, #44	@ 0x2c
 8002f88:	af04      	add	r7, sp, #16
 8002f8a:	60ba      	str	r2, [r7, #8]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	81fb      	strh	r3, [r7, #14]
 8002f92:	460b      	mov	r3, r1
 8002f94:	81bb      	strh	r3, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002fa2:	e048      	b.n	8003036 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d145      	bne.n	8003036 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002faa:	89fa      	ldrh	r2, [r7, #14]
 8002fac:	4b26      	ldr	r3, [pc, #152]	@ (8003048 <lcd_ShowStr+0xc4>)
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002fb6:	085b      	lsrs	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	1acb      	subs	r3, r1, r3
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dc3f      	bgt.n	8003040 <lcd_ShowStr+0xbc>
 8002fc0:	89ba      	ldrh	r2, [r7, #12]
 8002fc2:	4b21      	ldr	r3, [pc, #132]	@ (8003048 <lcd_ShowStr+0xc4>)
 8002fc4:	885b      	ldrh	r3, [r3, #2]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002fcc:	1acb      	subs	r3, r1, r3
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	dc36      	bgt.n	8003040 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b80      	cmp	r3, #128	@ 0x80
 8002fd8:	d902      	bls.n	8002fe0 <lcd_ShowStr+0x5c>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
 8002fde:	e02a      	b.n	8003036 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b0d      	cmp	r3, #13
 8002fe6:	d10b      	bne.n	8003000 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002fe8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	89bb      	ldrh	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002ff4:	8abb      	ldrh	r3, [r7, #20]
 8002ff6:	81fb      	strh	r3, [r7, #14]
					str++;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	e017      	b.n	8003030 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	88fc      	ldrh	r4, [r7, #6]
 8003006:	89b9      	ldrh	r1, [r7, #12]
 8003008:	89f8      	ldrh	r0, [r7, #14]
 800300a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003014:	9301      	str	r3, [sp, #4]
 8003016:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	4623      	mov	r3, r4
 800301c:	f7ff fbcc 	bl	80027b8 <lcd_ShowChar>
					x+=sizey/2;
 8003020:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	4413      	add	r3, r2
 800302e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	3301      	adds	r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1b2      	bne.n	8002fa4 <lcd_ShowStr+0x20>
 800303e:	e000      	b.n	8003042 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003040:	bf00      	nop
			}
		}
	}
}
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	200002a8 	.word	0x200002a8

0800304c <addPlayer>:
 *  Created on: Dec 28, 2023
 *      Author: Windows
 */
#include "leaderboard.h"

void addPlayer(struct player **head, int ID, int score, int mode){
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
    struct player *newPlayer = (struct player *)malloc(sizeof(struct player));
 800305a:	2010      	movs	r0, #16
 800305c:	f008 fe88 	bl	800bd70 <malloc>
 8003060:	4603      	mov	r3, r0
 8003062:	613b      	str	r3, [r7, #16]
    if (newPlayer == NULL) {
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d036      	beq.n	80030d8 <addPlayer+0x8c>
        return;
    }
    newPlayer->player_ID = ID;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	601a      	str	r2, [r3, #0]
    newPlayer->player_score = score;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	605a      	str	r2, [r3, #4]
    newPlayer->player_mode = mode;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	609a      	str	r2, [r3, #8]
    newPlayer->next = NULL;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]

    if (*head == NULL || score > (*head)->player_score) {
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <addPlayer+0x4a>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	429a      	cmp	r2, r3
 8003094:	dd07      	ble.n	80030a6 <addPlayer+0x5a>
        newPlayer->next = *head;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	60da      	str	r2, [r3, #12]
        *head = newPlayer;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	e019      	b.n	80030da <addPlayer+0x8e>
    } else {
        struct player *current = *head;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 80030ac:	e002      	b.n	80030b4 <addPlayer+0x68>
            current = current->next;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <addPlayer+0x7c>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	ddf2      	ble.n	80030ae <addPlayer+0x62>
        }
        newPlayer->next = current->next;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	60da      	str	r2, [r3, #12]
        current->next = newPlayer;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	e000      	b.n	80030da <addPlayer+0x8e>
        return;
 80030d8:	bf00      	nop
    }
}
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <led7_Scan>:

void led7_init(){//khoi tao
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){//quet led
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80030e4:	4b3f      	ldr	r3, [pc, #252]	@ (80031e4 <led7_Scan+0x104>)
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <led7_Scan+0x104>)
 80030ee:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80030f0:	4b3d      	ldr	r3, [pc, #244]	@ (80031e8 <led7_Scan+0x108>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3d      	ldr	r2, [pc, #244]	@ (80031ec <led7_Scan+0x10c>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	b21a      	sxth	r2, r3
 80030fc:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <led7_Scan+0x104>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	b21b      	sxth	r3, r3
 8003102:	4313      	orrs	r3, r2
 8003104:	b21b      	sxth	r3, r3
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <led7_Scan+0x104>)
 800310a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800310c:	4b36      	ldr	r3, [pc, #216]	@ (80031e8 <led7_Scan+0x108>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d847      	bhi.n	80031a4 <led7_Scan+0xc4>
 8003114:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <led7_Scan+0x3c>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	0800312d 	.word	0x0800312d
 8003120:	0800314b 	.word	0x0800314b
 8003124:	08003169 	.word	0x08003169
 8003128:	08003187 	.word	0x08003187
	case 0:
		spi_buffer |= 0x00b0;
 800312c:	4b2d      	ldr	r3, [pc, #180]	@ (80031e4 <led7_Scan+0x104>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003134:	b29a      	uxth	r2, r3
 8003136:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <led7_Scan+0x104>)
 8003138:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800313a:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <led7_Scan+0x104>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003142:	b29a      	uxth	r2, r3
 8003144:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <led7_Scan+0x104>)
 8003146:	801a      	strh	r2, [r3, #0]
		break;
 8003148:	e02d      	b.n	80031a6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800314a:	4b26      	ldr	r3, [pc, #152]	@ (80031e4 <led7_Scan+0x104>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8003152:	b29a      	uxth	r2, r3
 8003154:	4b23      	ldr	r3, [pc, #140]	@ (80031e4 <led7_Scan+0x104>)
 8003156:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8003158:	4b22      	ldr	r3, [pc, #136]	@ (80031e4 <led7_Scan+0x104>)
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	f023 0320 	bic.w	r3, r3, #32
 8003160:	b29a      	uxth	r2, r3
 8003162:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <led7_Scan+0x104>)
 8003164:	801a      	strh	r2, [r3, #0]
		break;
 8003166:	e01e      	b.n	80031a6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8003168:	4b1e      	ldr	r3, [pc, #120]	@ (80031e4 <led7_Scan+0x104>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <led7_Scan+0x104>)
 8003174:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8003176:	4b1b      	ldr	r3, [pc, #108]	@ (80031e4 <led7_Scan+0x104>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	f023 0310 	bic.w	r3, r3, #16
 800317e:	b29a      	uxth	r2, r3
 8003180:	4b18      	ldr	r3, [pc, #96]	@ (80031e4 <led7_Scan+0x104>)
 8003182:	801a      	strh	r2, [r3, #0]
		break;
 8003184:	e00f      	b.n	80031a6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8003186:	4b17      	ldr	r3, [pc, #92]	@ (80031e4 <led7_Scan+0x104>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800318e:	b29a      	uxth	r2, r3
 8003190:	4b14      	ldr	r3, [pc, #80]	@ (80031e4 <led7_Scan+0x104>)
 8003192:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <led7_Scan+0x104>)
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800319c:	b29a      	uxth	r2, r3
 800319e:	4b11      	ldr	r3, [pc, #68]	@ (80031e4 <led7_Scan+0x104>)
 80031a0:	801a      	strh	r2, [r3, #0]
		break;
 80031a2:	e000      	b.n	80031a6 <led7_Scan+0xc6>
	default:
		break;
 80031a4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <led7_Scan+0x108>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	425a      	negs	r2, r3
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	f002 0203 	and.w	r2, r2, #3
 80031b6:	bf58      	it	pl
 80031b8:	4253      	negpl	r3, r2
 80031ba:	4a0b      	ldr	r2, [pc, #44]	@ (80031e8 <led7_Scan+0x108>)
 80031bc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2140      	movs	r1, #64	@ 0x40
 80031c2:	480b      	ldr	r0, [pc, #44]	@ (80031f0 <led7_Scan+0x110>)
 80031c4:	f004 f974 	bl	80074b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80031c8:	2301      	movs	r3, #1
 80031ca:	2202      	movs	r2, #2
 80031cc:	4905      	ldr	r1, [pc, #20]	@ (80031e4 <led7_Scan+0x104>)
 80031ce:	4809      	ldr	r0, [pc, #36]	@ (80031f4 <led7_Scan+0x114>)
 80031d0:	f005 fe83 	bl	8008eda <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80031d4:	2201      	movs	r2, #1
 80031d6:	2140      	movs	r1, #64	@ 0x40
 80031d8:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <led7_Scan+0x110>)
 80031da:	f004 f969 	bl	80074b0 <HAL_GPIO_WritePin>
}
 80031de:	bf00      	nop
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000001a 	.word	0x2000001a
 80031e8:	200002b0 	.word	0x200002b0
 80031ec:	2000000c 	.word	0x2000000c
 80031f0:	40021800 	.word	0x40021800
 80031f4:	20000b40 	.word	0x20000b40

080031f8 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){//set so cho led
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	4613      	mov	r3, r2
 8003204:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	db0e      	blt.n	800322a <led7_SetDigit+0x32>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b09      	cmp	r3, #9
 8003210:	dc0b      	bgt.n	800322a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8003212:	4a09      	ldr	r2, [pc, #36]	@ (8003238 <led7_SetDigit+0x40>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	781a      	ldrb	r2, [r3, #0]
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	b2d9      	uxtb	r1, r3
 8003220:	4a06      	ldr	r2, [pc, #24]	@ (800323c <led7_SetDigit+0x44>)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4413      	add	r3, r2
 8003226:	460a      	mov	r2, r1
 8003228:	701a      	strb	r2, [r3, #0]
	}
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000010 	.word	0x20000010
 800323c:	2000000c 	.word	0x2000000c

08003240 <led7_SetColon>:

void led7_SetColon(uint8_t status){// :
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d107      	bne.n	8003260 <led7_SetColon+0x20>
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <led7_SetColon+0x3c>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	f023 0308 	bic.w	r3, r3, #8
 8003258:	b29a      	uxth	r2, r3
 800325a:	4b08      	ldr	r3, [pc, #32]	@ (800327c <led7_SetColon+0x3c>)
 800325c:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800325e:	e006      	b.n	800326e <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <led7_SetColon+0x3c>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f043 0308 	orr.w	r3, r3, #8
 8003268:	b29a      	uxth	r2, r3
 800326a:	4b04      	ldr	r3, [pc, #16]	@ (800327c <led7_SetColon+0x3c>)
 800326c:	801a      	strh	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000001a 	.word	0x2000001a

08003280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003284:	f002 ffda 	bl	800623c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003288:	f000 f862 	bl	8003350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800328c:	f7fe ff86 	bl	800219c <MX_GPIO_Init>
  MX_TIM2_Init();
 8003290:	f001 fd92 	bl	8004db8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003294:	f001 fb6a 	bl	800496c <MX_SPI1_Init>
  MX_FSMC_Init();
 8003298:	f7fe feb0 	bl	8001ffc <MX_FSMC_Init>
  MX_I2C1_Init();
 800329c:	f7ff f894 	bl	80023c8 <MX_I2C1_Init>
  MX_TIM13_Init();
 80032a0:	f001 fdd6 	bl	8004e50 <MX_TIM13_Init>
  MX_DMA_Init();
 80032a4:	f7fe f842 	bl	800132c <MX_DMA_Init>
  MX_ADC1_Init();
 80032a8:	f7fd fde6 	bl	8000e78 <MX_ADC1_Init>
  MX_TIM1_Init();
 80032ac:	f001 fd34 	bl	8004d18 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80032b0:	f002 feba 	bl	8006028 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80032b4:	f002 fee2 	bl	800607c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80032b8:	f000 f8b4 	bl	8003424 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 //touch_Adjust();
 setTimer3(100);
 80032bc:	2064      	movs	r0, #100	@ 0x64
 80032be:	f001 fa19 	bl	80046f4 <setTimer3>
 setTimer5(10);
 80032c2:	200a      	movs	r0, #10
 80032c4:	f001 fa4e 	bl	8004764 <setTimer5>
 setTimer7(10);
 80032c8:	200a      	movs	r0, #10
 80032ca:	f001 fa67 	bl	800479c <setTimer7>
	  /*if(touch_IsTouched() && draw_Status == DRAW){
            //draw a point at the touch position
		  lcd_DrawPoint(touch_GetX(), touch_GetY(), RED);
	  }*/
	  // 50ms task
	  while(!flag_timer2);
 80032ce:	bf00      	nop
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <main+0xc0>)
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0fb      	beq.n	80032d0 <main+0x50>
	  flag_timer2 = 0;
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <main+0xc0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	801a      	strh	r2, [r3, #0]
	  touch_Scan();
 80032de:	f002 fd39 	bl	8005d54 <touch_Scan>
	  button_Scan();
 80032e2:	f7fd ff95 	bl	8001210 <button_Scan>
	  if(flag_timer5 == 1){
 80032e6:	4b17      	ldr	r3, [pc, #92]	@ (8003344 <main+0xc4>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <main+0x7a>
		  sendSensor();
 80032ee:	f000 f8ed 	bl	80034cc <sendSensor>
		  setTimer5(5000);
 80032f2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80032f6:	f001 fa35 	bl	8004764 <setTimer5>
	  }
	  if(isHumidity()){
 80032fa:	f000 fc61 	bl	8003bc0 <isHumidity>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <main+0x8c>
		  buzzer_check = 1;
 8003304:	4b10      	ldr	r3, [pc, #64]	@ (8003348 <main+0xc8>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	e002      	b.n	8003312 <main+0x92>
	  }else{
		  buzzer_check = 0;
 800330c:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <main+0xc8>)
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
	  }
	  if (isLight()){
 8003312:	f000 fc37 	bl	8003b84 <isLight>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <main+0xa8>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, SET);
 800331c:	2201      	movs	r2, #1
 800331e:	2120      	movs	r1, #32
 8003320:	480a      	ldr	r0, [pc, #40]	@ (800334c <main+0xcc>)
 8003322:	f004 f8c5 	bl	80074b0 <HAL_GPIO_WritePin>
 8003326:	e004      	b.n	8003332 <main+0xb2>
	  }else{
		  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 8003328:	2200      	movs	r2, #0
 800332a:	2120      	movs	r1, #32
 800332c:	4807      	ldr	r0, [pc, #28]	@ (800334c <main+0xcc>)
 800332e:	f004 f8bf 	bl	80074b0 <HAL_GPIO_WritePin>
	  }
//	  if(status == INIT || status == GAME_OVER)
//		  test_Adc();
	  //touchProcess();
	  fsm_machine();
 8003332:	f7fe fbcb 	bl	8001acc <fsm_machine>
	  test_LedDebug();
 8003336:	f000 f8a5 	bl	8003484 <test_LedDebug>
	  fsm_send_buzzer();
 800333a:	f7fe f889 	bl	8001450 <fsm_send_buzzer>
	  while(!flag_timer2);
 800333e:	e7c6      	b.n	80032ce <main+0x4e>
 8003340:	20000b1c 	.word	0x20000b1c
 8003344:	20000b2e 	.word	0x20000b2e
 8003348:	200001f0 	.word	0x200001f0
 800334c:	40021000 	.word	0x40021000

08003350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b094      	sub	sp, #80	@ 0x50
 8003354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003356:	f107 0320 	add.w	r3, r7, #32
 800335a:	2230      	movs	r2, #48	@ 0x30
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f008 ff1f 	bl	800c1a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	2300      	movs	r3, #0
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	4b28      	ldr	r3, [pc, #160]	@ (800341c <SystemClock_Config+0xcc>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	4a27      	ldr	r2, [pc, #156]	@ (800341c <SystemClock_Config+0xcc>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	@ 0x40
 8003384:	4b25      	ldr	r3, [pc, #148]	@ (800341c <SystemClock_Config+0xcc>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003390:	2300      	movs	r3, #0
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <SystemClock_Config+0xd0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a21      	ldr	r2, [pc, #132]	@ (8003420 <SystemClock_Config+0xd0>)
 800339a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003420 <SystemClock_Config+0xd0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033ac:	2302      	movs	r3, #2
 80033ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033b0:	2301      	movs	r3, #1
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033b4:	2310      	movs	r3, #16
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033b8:	2302      	movs	r3, #2
 80033ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033bc:	2300      	movs	r3, #0
 80033be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033c0:	2308      	movs	r3, #8
 80033c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80033c4:	23a8      	movs	r3, #168	@ 0xa8
 80033c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033c8:	2302      	movs	r3, #2
 80033ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80033cc:	2304      	movs	r3, #4
 80033ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d0:	f107 0320 	add.w	r3, r7, #32
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 f85f 	bl	8008498 <HAL_RCC_OscConfig>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80033e0:	f000 f8e6 	bl	80035b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033e4:	230f      	movs	r3, #15
 80033e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033e8:	2302      	movs	r3, #2
 80033ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80033f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80033f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	2105      	movs	r1, #5
 8003402:	4618      	mov	r0, r3
 8003404:	f005 fac0 	bl	8008988 <HAL_RCC_ClockConfig>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800340e:	f000 f8cf 	bl	80035b0 <Error_Handler>
  }
}
 8003412:	bf00      	nop
 8003414:	3750      	adds	r7, #80	@ 0x50
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000

08003424 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af04      	add	r7, sp, #16
	  timer_init();
 800342a:	f001 f939 	bl	80046a0 <timer_init>
	  button_init();
 800342e:	f7fd fee3 	bl	80011f8 <button_init>
	  buzzer_init();
 8003432:	f7fd ff59 	bl	80012e8 <buzzer_init>
	  lcd_init();
 8003436:	f7ff fb4d 	bl	8002ad4 <lcd_init>
	  touch_init();
 800343a:	f002 fc7b 	bl	8005d34 <touch_init>
	  setTimer2(50);
 800343e:	2032      	movs	r0, #50	@ 0x32
 8003440:	f001 f93c 	bl	80046bc <setTimer2>
	  uart_init_esp();
 8003444:	f002 fd94 	bl	8005f70 <uart_init_esp>

	  lcd_Clear(BLACK);
 8003448:	2000      	movs	r0, #0
 800344a:	f7ff f8b1 	bl	80025b0 <lcd_Clear>
	  lcd_Fill(50, 200, 190, 300, GREEN);
 800344e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003458:	22be      	movs	r2, #190	@ 0xbe
 800345a:	21c8      	movs	r1, #200	@ 0xc8
 800345c:	2032      	movs	r0, #50	@ 0x32
 800345e:	f7ff f8d9 	bl	8002614 <lcd_Fill>
	  lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 8003462:	2301      	movs	r3, #1
 8003464:	9302      	str	r3, [sp, #8]
 8003466:	2318      	movs	r3, #24
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	4a03      	ldr	r2, [pc, #12]	@ (8003480 <system_init+0x5c>)
 8003472:	21eb      	movs	r1, #235	@ 0xeb
 8003474:	205a      	movs	r0, #90	@ 0x5a
 8003476:	f7ff fd85 	bl	8002f84 <lcd_ShowStr>
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	0800d480 	.word	0x0800d480

08003484 <test_LedDebug>:
	}
}

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8003488:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <test_LedDebug+0x3c>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <test_LedDebug+0x40>)
 8003490:	fb83 1302 	smull	r1, r3, r3, r2
 8003494:	10d9      	asrs	r1, r3, #3
 8003496:	17d3      	asrs	r3, r2, #31
 8003498:	1ac9      	subs	r1, r1, r3
 800349a:	460b      	mov	r3, r1
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	1ad1      	subs	r1, r2, r3
 80034a4:	b2ca      	uxtb	r2, r1
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <test_LedDebug+0x3c>)
 80034a8:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 80034aa:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <test_LedDebug+0x3c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 80034b2:	2110      	movs	r1, #16
 80034b4:	4804      	ldr	r0, [pc, #16]	@ (80034c8 <test_LedDebug+0x44>)
 80034b6:	f004 f814 	bl	80074e2 <HAL_GPIO_TogglePin>
	}
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200002b4 	.word	0x200002b4
 80034c4:	66666667 	.word	0x66666667
 80034c8:	40021000 	.word	0x40021000

080034cc <sendSensor>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void sendSensor(){
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b0a4      	sub	sp, #144	@ 0x90
 80034d0:	af06      	add	r7, sp, #24
	if(send_flag == 0){
 80034d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003588 <sendSensor+0xbc>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d152      	bne.n	8003580 <sendSensor+0xb4>
		char res[100];
		char light[10];
		if(!isLight()){
 80034da:	f000 fb53 	bl	8003b84 <isLight>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <sendSensor+0x26>
			sprintf(light, "Strong");
 80034e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034e8:	4928      	ldr	r1, [pc, #160]	@ (800358c <sendSensor+0xc0>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f008 fdf6 	bl	800c0dc <siprintf>
 80034f0:	e005      	b.n	80034fe <sendSensor+0x32>
		}else{
			sprintf(light, "Weak");
 80034f2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80034f6:	4926      	ldr	r1, [pc, #152]	@ (8003590 <sendSensor+0xc4>)
 80034f8:	4618      	mov	r0, r3
 80034fa:	f008 fdef 	bl	800c0dc <siprintf>
		}
		//int light = sensor_GetLight();
		int po1 = sensor_GetPotentiometer();
 80034fe:	f000 fb17 	bl	8003b30 <sensor_GetPotentiometer>
 8003502:	4603      	mov	r3, r0
 8003504:	677b      	str	r3, [r7, #116]	@ 0x74
		int temp1 = sensor_GetTemperature();
 8003506:	f000 fb1f 	bl	8003b48 <sensor_GetTemperature>
 800350a:	eef0 7a40 	vmov.f32	s15, s0
 800350e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003512:	ee17 3a90 	vmov	r3, s15
 8003516:	673b      	str	r3, [r7, #112]	@ 0x70
		if(status != PLAY){
 8003518:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <sendSensor+0xc8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d00f      	beq.n	8003540 <sendSensor+0x74>
			sprintf(res, "Light : %s\nPotentiometer : %d \nTemperature : %d\nNo one is playing\n%c",light, po1, temp1, sec);// khong co ai choi
 8003520:	4b1d      	ldr	r3, [pc, #116]	@ (8003598 <sendSensor+0xcc>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8003528:	4638      	mov	r0, r7
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003532:	491a      	ldr	r1, [pc, #104]	@ (800359c <sendSensor+0xd0>)
 8003534:	f008 fdd2 	bl	800c0dc <siprintf>
			uart_EspSendString(res);
 8003538:	463b      	mov	r3, r7
 800353a:	4618      	mov	r0, r3
 800353c:	f002 fd26 	bl	8005f8c <uart_EspSendString>
		}
		if(status == PLAY){
 8003540:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <sendSensor+0xc8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d11b      	bne.n	8003580 <sendSensor+0xb4>
			sprintf(res, "Light : %s\nPotentiometer : %d \nTemperature : %d\n%d is playing\nTime : %d sec\nScore : %d\n%c",light, po1, temp1, ID, count, score, sec);//dang co nguoi choi
 8003548:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <sendSensor+0xd4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a15      	ldr	r2, [pc, #84]	@ (80035a4 <sendSensor+0xd8>)
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	4915      	ldr	r1, [pc, #84]	@ (80035a8 <sendSensor+0xdc>)
 8003552:	7809      	ldrb	r1, [r1, #0]
 8003554:	460c      	mov	r4, r1
 8003556:	4910      	ldr	r1, [pc, #64]	@ (8003598 <sendSensor+0xcc>)
 8003558:	7809      	ldrb	r1, [r1, #0]
 800355a:	460d      	mov	r5, r1
 800355c:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8003560:	4638      	mov	r0, r7
 8003562:	9504      	str	r5, [sp, #16]
 8003564:	9403      	str	r4, [sp, #12]
 8003566:	9202      	str	r2, [sp, #8]
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003570:	460a      	mov	r2, r1
 8003572:	490e      	ldr	r1, [pc, #56]	@ (80035ac <sendSensor+0xe0>)
 8003574:	f008 fdb2 	bl	800c0dc <siprintf>
			uart_EspSendString(res);
 8003578:	463b      	mov	r3, r7
 800357a:	4618      	mov	r0, r3
 800357c:	f002 fd06 	bl	8005f8c <uart_EspSendString>
		}
	}
}
 8003580:	bf00      	nop
 8003582:	3778      	adds	r7, #120	@ 0x78
 8003584:	46bd      	mov	sp, r7
 8003586:	bdb0      	pop	{r4, r5, r7, pc}
 8003588:	200001f8 	.word	0x200001f8
 800358c:	0800d49c 	.word	0x0800d49c
 8003590:	0800d4d4 	.word	0x0800d4d4
 8003594:	200001d0 	.word	0x200001d0
 8003598:	20000004 	.word	0x20000004
 800359c:	0800d4dc 	.word	0x0800d4dc
 80035a0:	200001d4 	.word	0x200001d4
 80035a4:	200001dc 	.word	0x200001dc
 80035a8:	20000b14 	.word	0x20000b14
 80035ac:	0800d524 	.word	0x0800d524

080035b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035b4:	b672      	cpsid	i
}
 80035b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <Error_Handler+0x8>

080035bc <screen_init>:
 *      Author: Admin
 */

#include "screen.h"

void screen_init(){
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af04      	add	r7, sp, #16
	lcd_ShowStr(60,10,"SNAKE GAME",WHITE,WHITE,24,1);
 80035c2:	2301      	movs	r3, #1
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	2318      	movs	r3, #24
 80035c8:	9301      	str	r3, [sp, #4]
 80035ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035d4:	4a61      	ldr	r2, [pc, #388]	@ (800375c <screen_init+0x1a0>)
 80035d6:	210a      	movs	r1, #10
 80035d8:	203c      	movs	r0, #60	@ 0x3c
 80035da:	f7ff fcd3 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(40,60,"Player ID:",WHITE,BLACK,16,0);
 80035de:	2300      	movs	r3, #0
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	2310      	movs	r3, #16
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	2300      	movs	r3, #0
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003760 <screen_init+0x1a4>)
 80035f0:	213c      	movs	r1, #60	@ 0x3c
 80035f2:	2028      	movs	r0, #40	@ 0x28
 80035f4:	f7ff fcc6 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowIntNum(120, 60, ID, 4, WHITE, BLACK, 16);
 80035f8:	4b5a      	ldr	r3, [pc, #360]	@ (8003764 <screen_init+0x1a8>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	2310      	movs	r3, #16
 8003600:	9302      	str	r3, [sp, #8]
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2304      	movs	r3, #4
 800360e:	213c      	movs	r1, #60	@ 0x3c
 8003610:	2078      	movs	r0, #120	@ 0x78
 8003612:	f7ff f9bd 	bl	8002990 <lcd_ShowIntNum>
//	lcd_Fill(50, 200, 190, 300, GREEN);
	lcd_ShowStr(40, 90, "Mode (B):", WHITE, BLACK, 16, 0);
 8003616:	2300      	movs	r3, #0
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	2310      	movs	r3, #16
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2300      	movs	r3, #0
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003626:	4a50      	ldr	r2, [pc, #320]	@ (8003768 <screen_init+0x1ac>)
 8003628:	215a      	movs	r1, #90	@ 0x5a
 800362a:	2028      	movs	r0, #40	@ 0x28
 800362c:	f7ff fcaa 	bl	8002f84 <lcd_ShowStr>
	if(mode == NORMAL)
 8003630:	4b4e      	ldr	r3, [pc, #312]	@ (800376c <screen_init+0x1b0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10c      	bne.n	8003652 <screen_init+0x96>
		lcd_ShowStr(120, 90, "NORMAL", WHITE, BLACK, 16, 0);
 8003638:	2300      	movs	r3, #0
 800363a:	9302      	str	r3, [sp, #8]
 800363c:	2310      	movs	r3, #16
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	2300      	movs	r3, #0
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003648:	4a49      	ldr	r2, [pc, #292]	@ (8003770 <screen_init+0x1b4>)
 800364a:	215a      	movs	r1, #90	@ 0x5a
 800364c:	2078      	movs	r0, #120	@ 0x78
 800364e:	f7ff fc99 	bl	8002f84 <lcd_ShowStr>
	if(mode == WALL)
 8003652:	4b46      	ldr	r3, [pc, #280]	@ (800376c <screen_init+0x1b0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d10c      	bne.n	8003674 <screen_init+0xb8>
		lcd_ShowStr(120, 90, "WALL", WHITE, BLACK, 16, 0);
 800365a:	2300      	movs	r3, #0
 800365c:	9302      	str	r3, [sp, #8]
 800365e:	2310      	movs	r3, #16
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	2300      	movs	r3, #0
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800366a:	4a42      	ldr	r2, [pc, #264]	@ (8003774 <screen_init+0x1b8>)
 800366c:	215a      	movs	r1, #90	@ 0x5a
 800366e:	2078      	movs	r0, #120	@ 0x78
 8003670:	f7ff fc88 	bl	8002f84 <lcd_ShowStr>
	if(mode == WALLS)
 8003674:	4b3d      	ldr	r3, [pc, #244]	@ (800376c <screen_init+0x1b0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2b02      	cmp	r3, #2
 800367a:	d10c      	bne.n	8003696 <screen_init+0xda>
		lcd_ShowStr(120, 90, "WALLS", WHITE, BLACK, 16, 0);
 800367c:	2300      	movs	r3, #0
 800367e:	9302      	str	r3, [sp, #8]
 8003680:	2310      	movs	r3, #16
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	2300      	movs	r3, #0
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800368c:	4a3a      	ldr	r2, [pc, #232]	@ (8003778 <screen_init+0x1bc>)
 800368e:	215a      	movs	r1, #90	@ 0x5a
 8003690:	2078      	movs	r0, #120	@ 0x78
 8003692:	f7ff fc77 	bl	8002f84 <lcd_ShowStr>
	if(mode == TIMER)
 8003696:	4b35      	ldr	r3, [pc, #212]	@ (800376c <screen_init+0x1b0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d10c      	bne.n	80036b8 <screen_init+0xfc>
		lcd_ShowStr(120, 90, "TIMER", WHITE, BLACK, 16, 0);
 800369e:	2300      	movs	r3, #0
 80036a0:	9302      	str	r3, [sp, #8]
 80036a2:	2310      	movs	r3, #16
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	2300      	movs	r3, #0
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036ae:	4a33      	ldr	r2, [pc, #204]	@ (800377c <screen_init+0x1c0>)
 80036b0:	215a      	movs	r1, #90	@ 0x5a
 80036b2:	2078      	movs	r0, #120	@ 0x78
 80036b4:	f7ff fc66 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(40, 120, "Speed (E):", WHITE, BLACK, 16, 0);
 80036b8:	2300      	movs	r3, #0
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	2310      	movs	r3, #16
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	2300      	movs	r3, #0
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003780 <screen_init+0x1c4>)
 80036ca:	2178      	movs	r1, #120	@ 0x78
 80036cc:	2028      	movs	r0, #40	@ 0x28
 80036ce:	f7ff fc59 	bl	8002f84 <lcd_ShowStr>
	if(speed == 1000)
 80036d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003784 <screen_init+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036da:	d10c      	bne.n	80036f6 <screen_init+0x13a>
		lcd_ShowStr(120, 120, "EASY", WHITE, BLACK, 16, 0);
 80036dc:	2300      	movs	r3, #0
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	2310      	movs	r3, #16
 80036e2:	9301      	str	r3, [sp, #4]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036ec:	4a26      	ldr	r2, [pc, #152]	@ (8003788 <screen_init+0x1cc>)
 80036ee:	2178      	movs	r1, #120	@ 0x78
 80036f0:	2078      	movs	r0, #120	@ 0x78
 80036f2:	f7ff fc47 	bl	8002f84 <lcd_ShowStr>
	if(speed == 500)
 80036f6:	4b23      	ldr	r3, [pc, #140]	@ (8003784 <screen_init+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80036fe:	d10c      	bne.n	800371a <screen_init+0x15e>
		lcd_ShowStr(120, 120, "MEDIUM", WHITE, BLACK, 16, 0);
 8003700:	2300      	movs	r3, #0
 8003702:	9302      	str	r3, [sp, #8]
 8003704:	2310      	movs	r3, #16
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2300      	movs	r3, #0
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003710:	4a1e      	ldr	r2, [pc, #120]	@ (800378c <screen_init+0x1d0>)
 8003712:	2178      	movs	r1, #120	@ 0x78
 8003714:	2078      	movs	r0, #120	@ 0x78
 8003716:	f7ff fc35 	bl	8002f84 <lcd_ShowStr>
	if(speed == 100)
 800371a:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <screen_init+0x1c8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b64      	cmp	r3, #100	@ 0x64
 8003720:	d10c      	bne.n	800373c <screen_init+0x180>
		lcd_ShowStr(120, 120, "HARD", WHITE, BLACK, 16, 0);
 8003722:	2300      	movs	r3, #0
 8003724:	9302      	str	r3, [sp, #8]
 8003726:	2310      	movs	r3, #16
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2300      	movs	r3, #0
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003732:	4a17      	ldr	r2, [pc, #92]	@ (8003790 <screen_init+0x1d4>)
 8003734:	2178      	movs	r1, #120	@ 0x78
 8003736:	2078      	movs	r0, #120	@ 0x78
 8003738:	f7ff fc24 	bl	8002f84 <lcd_ShowStr>

	lcd_ShowStr(40,150,"Leaderboard (<)",WHITE,BLACK,16,0);
 800373c:	2300      	movs	r3, #0
 800373e:	9302      	str	r3, [sp, #8]
 8003740:	2310      	movs	r3, #16
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800374c:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <screen_init+0x1d8>)
 800374e:	2196      	movs	r1, #150	@ 0x96
 8003750:	2028      	movs	r0, #40	@ 0x28
 8003752:	f7ff fc17 	bl	8002f84 <lcd_ShowStr>
//	lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	0800d580 	.word	0x0800d580
 8003760:	0800d58c 	.word	0x0800d58c
 8003764:	200001d4 	.word	0x200001d4
 8003768:	0800d598 	.word	0x0800d598
 800376c:	200001d8 	.word	0x200001d8
 8003770:	0800d5a4 	.word	0x0800d5a4
 8003774:	0800d5ac 	.word	0x0800d5ac
 8003778:	0800d5b4 	.word	0x0800d5b4
 800377c:	0800d5bc 	.word	0x0800d5bc
 8003780:	0800d5c4 	.word	0x0800d5c4
 8003784:	20000000 	.word	0x20000000
 8003788:	0800d5d0 	.word	0x0800d5d0
 800378c:	0800d5d8 	.word	0x0800d5d8
 8003790:	0800d5e0 	.word	0x0800d5e0
 8003794:	0800d5e8 	.word	0x0800d5e8

08003798 <screen_play>:

void screen_play(){
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af02      	add	r7, sp, #8
	lcd_Fill(0, 0, 240, 200, WHITE);
 800379e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	23c8      	movs	r3, #200	@ 0xc8
 80037a6:	22f0      	movs	r2, #240	@ 0xf0
 80037a8:	2100      	movs	r1, #0
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7fe ff32 	bl	8002614 <lcd_Fill>
	lcd_Fill(90, 210, 150, 250, BLUE);//UP
 80037b0:	231f      	movs	r3, #31
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	23fa      	movs	r3, #250	@ 0xfa
 80037b6:	2296      	movs	r2, #150	@ 0x96
 80037b8:	21d2      	movs	r1, #210	@ 0xd2
 80037ba:	205a      	movs	r0, #90	@ 0x5a
 80037bc:	f7fe ff2a 	bl	8002614 <lcd_Fill>
	lcd_Fill(90, 260, 150, 300, BLUE);//DOWN
 80037c0:	231f      	movs	r3, #31
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80037c8:	2296      	movs	r2, #150	@ 0x96
 80037ca:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80037ce:	205a      	movs	r0, #90	@ 0x5a
 80037d0:	f7fe ff20 	bl	8002614 <lcd_Fill>
	lcd_Fill(20, 260, 80, 300, BLUE);//LEFT
 80037d4:	231f      	movs	r3, #31
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80037dc:	2250      	movs	r2, #80	@ 0x50
 80037de:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80037e2:	2014      	movs	r0, #20
 80037e4:	f7fe ff16 	bl	8002614 <lcd_Fill>
	lcd_Fill(160, 260, 220, 300, BLUE);//RIGHT
 80037e8:	231f      	movs	r3, #31
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80037f0:	22dc      	movs	r2, #220	@ 0xdc
 80037f2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80037f6:	20a0      	movs	r0, #160	@ 0xa0
 80037f8:	f7fe ff0c 	bl	8002614 <lcd_Fill>
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <screen_score>:

void screen_score(){
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af04      	add	r7, sp, #16
	lcd_ShowStr(0, 205, "Score: ", WHITE, WHITE, 24, 1);
 800380a:	2301      	movs	r3, #1
 800380c:	9302      	str	r3, [sp, #8]
 800380e:	2318      	movs	r3, #24
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800381c:	4a0b      	ldr	r2, [pc, #44]	@ (800384c <screen_score+0x48>)
 800381e:	21cd      	movs	r1, #205	@ 0xcd
 8003820:	2000      	movs	r0, #0
 8003822:	f7ff fbaf 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowIntNum(0, 230, score, 4, WHITE, BLACK, 24);
 8003826:	4b0a      	ldr	r3, [pc, #40]	@ (8003850 <screen_score+0x4c>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	2318      	movs	r3, #24
 800382e:	9302      	str	r3, [sp, #8]
 8003830:	2300      	movs	r3, #0
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2304      	movs	r3, #4
 800383c:	21e6      	movs	r1, #230	@ 0xe6
 800383e:	2000      	movs	r0, #0
 8003840:	f7ff f8a6 	bl	8002990 <lcd_ShowIntNum>
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	0800d5f8 	.word	0x0800d5f8
 8003850:	20000b14 	.word	0x20000b14

08003854 <screen_game_over>:

void screen_game_over(){
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af04      	add	r7, sp, #16
	lcd_ShowStr(70,10,"GAME OVER",WHITE,WHITE,24,1);
 800385a:	2301      	movs	r3, #1
 800385c:	9302      	str	r3, [sp, #8]
 800385e:	2318      	movs	r3, #24
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800386c:	4a95      	ldr	r2, [pc, #596]	@ (8003ac4 <screen_game_over+0x270>)
 800386e:	210a      	movs	r1, #10
 8003870:	2046      	movs	r0, #70	@ 0x46
 8003872:	f7ff fb87 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(80, 220, "Score: ", WHITE, WHITE, 24, 1);
 8003876:	2301      	movs	r3, #1
 8003878:	9302      	str	r3, [sp, #8]
 800387a:	2318      	movs	r3, #24
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003888:	4a8f      	ldr	r2, [pc, #572]	@ (8003ac8 <screen_game_over+0x274>)
 800388a:	21dc      	movs	r1, #220	@ 0xdc
 800388c:	2050      	movs	r0, #80	@ 0x50
 800388e:	f7ff fb79 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(40,60,"Player ID:",WHITE,BLACK,16,0);
 8003892:	2300      	movs	r3, #0
 8003894:	9302      	str	r3, [sp, #8]
 8003896:	2310      	movs	r3, #16
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038a2:	4a8a      	ldr	r2, [pc, #552]	@ (8003acc <screen_game_over+0x278>)
 80038a4:	213c      	movs	r1, #60	@ 0x3c
 80038a6:	2028      	movs	r0, #40	@ 0x28
 80038a8:	f7ff fb6c 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowIntNum(120, 60, ID, 4, WHITE, BLACK, 16);
 80038ac:	4b88      	ldr	r3, [pc, #544]	@ (8003ad0 <screen_game_over+0x27c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	2310      	movs	r3, #16
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	2300      	movs	r3, #0
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2304      	movs	r3, #4
 80038c2:	213c      	movs	r1, #60	@ 0x3c
 80038c4:	2078      	movs	r0, #120	@ 0x78
 80038c6:	f7ff f863 	bl	8002990 <lcd_ShowIntNum>
	lcd_ShowStr(40, 90, "Mode (B):", WHITE, BLACK, 16, 0);
 80038ca:	2300      	movs	r3, #0
 80038cc:	9302      	str	r3, [sp, #8]
 80038ce:	2310      	movs	r3, #16
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038da:	4a7e      	ldr	r2, [pc, #504]	@ (8003ad4 <screen_game_over+0x280>)
 80038dc:	215a      	movs	r1, #90	@ 0x5a
 80038de:	2028      	movs	r0, #40	@ 0x28
 80038e0:	f7ff fb50 	bl	8002f84 <lcd_ShowStr>
	if(mode == NORMAL)
 80038e4:	4b7c      	ldr	r3, [pc, #496]	@ (8003ad8 <screen_game_over+0x284>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10c      	bne.n	8003906 <screen_game_over+0xb2>
		lcd_ShowStr(120, 90, "NORMAL", WHITE, BLACK, 16, 0);
 80038ec:	2300      	movs	r3, #0
 80038ee:	9302      	str	r3, [sp, #8]
 80038f0:	2310      	movs	r3, #16
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038fc:	4a77      	ldr	r2, [pc, #476]	@ (8003adc <screen_game_over+0x288>)
 80038fe:	215a      	movs	r1, #90	@ 0x5a
 8003900:	2078      	movs	r0, #120	@ 0x78
 8003902:	f7ff fb3f 	bl	8002f84 <lcd_ShowStr>
	if(mode == WALL)
 8003906:	4b74      	ldr	r3, [pc, #464]	@ (8003ad8 <screen_game_over+0x284>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d10c      	bne.n	8003928 <screen_game_over+0xd4>
		lcd_ShowStr(120, 90, "WALL", WHITE, BLACK, 16, 0);
 800390e:	2300      	movs	r3, #0
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	2310      	movs	r3, #16
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	2300      	movs	r3, #0
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800391e:	4a70      	ldr	r2, [pc, #448]	@ (8003ae0 <screen_game_over+0x28c>)
 8003920:	215a      	movs	r1, #90	@ 0x5a
 8003922:	2078      	movs	r0, #120	@ 0x78
 8003924:	f7ff fb2e 	bl	8002f84 <lcd_ShowStr>
	if(mode == WALLS)
 8003928:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad8 <screen_game_over+0x284>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d10c      	bne.n	800394a <screen_game_over+0xf6>
		lcd_ShowStr(120, 90, "WALLS", WHITE, BLACK, 16, 0);
 8003930:	2300      	movs	r3, #0
 8003932:	9302      	str	r3, [sp, #8]
 8003934:	2310      	movs	r3, #16
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	2300      	movs	r3, #0
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003940:	4a68      	ldr	r2, [pc, #416]	@ (8003ae4 <screen_game_over+0x290>)
 8003942:	215a      	movs	r1, #90	@ 0x5a
 8003944:	2078      	movs	r0, #120	@ 0x78
 8003946:	f7ff fb1d 	bl	8002f84 <lcd_ShowStr>
	if(mode == TIMER)
 800394a:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <screen_game_over+0x284>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b03      	cmp	r3, #3
 8003950:	d10c      	bne.n	800396c <screen_game_over+0x118>
		lcd_ShowStr(120, 90, "TIMER", WHITE, BLACK, 16, 0);
 8003952:	2300      	movs	r3, #0
 8003954:	9302      	str	r3, [sp, #8]
 8003956:	2310      	movs	r3, #16
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2300      	movs	r3, #0
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003962:	4a61      	ldr	r2, [pc, #388]	@ (8003ae8 <screen_game_over+0x294>)
 8003964:	215a      	movs	r1, #90	@ 0x5a
 8003966:	2078      	movs	r0, #120	@ 0x78
 8003968:	f7ff fb0c 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(40, 120, "Speed (E):", WHITE, BLACK, 16, 0);
 800396c:	2300      	movs	r3, #0
 800396e:	9302      	str	r3, [sp, #8]
 8003970:	2310      	movs	r3, #16
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	2300      	movs	r3, #0
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800397c:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <screen_game_over+0x298>)
 800397e:	2178      	movs	r1, #120	@ 0x78
 8003980:	2028      	movs	r0, #40	@ 0x28
 8003982:	f7ff faff 	bl	8002f84 <lcd_ShowStr>
	if(speed == 1000)
 8003986:	4b5a      	ldr	r3, [pc, #360]	@ (8003af0 <screen_game_over+0x29c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800398e:	d10c      	bne.n	80039aa <screen_game_over+0x156>
		lcd_ShowStr(120, 120, "EASY", WHITE, BLACK, 16, 0);
 8003990:	2300      	movs	r3, #0
 8003992:	9302      	str	r3, [sp, #8]
 8003994:	2310      	movs	r3, #16
 8003996:	9301      	str	r3, [sp, #4]
 8003998:	2300      	movs	r3, #0
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039a0:	4a54      	ldr	r2, [pc, #336]	@ (8003af4 <screen_game_over+0x2a0>)
 80039a2:	2178      	movs	r1, #120	@ 0x78
 80039a4:	2078      	movs	r0, #120	@ 0x78
 80039a6:	f7ff faed 	bl	8002f84 <lcd_ShowStr>
	if(speed == 500)
 80039aa:	4b51      	ldr	r3, [pc, #324]	@ (8003af0 <screen_game_over+0x29c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80039b2:	d10c      	bne.n	80039ce <screen_game_over+0x17a>
		lcd_ShowStr(120, 120, "MEDIUM", WHITE, BLACK, 16, 0);
 80039b4:	2300      	movs	r3, #0
 80039b6:	9302      	str	r3, [sp, #8]
 80039b8:	2310      	movs	r3, #16
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	2300      	movs	r3, #0
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c4:	4a4c      	ldr	r2, [pc, #304]	@ (8003af8 <screen_game_over+0x2a4>)
 80039c6:	2178      	movs	r1, #120	@ 0x78
 80039c8:	2078      	movs	r0, #120	@ 0x78
 80039ca:	f7ff fadb 	bl	8002f84 <lcd_ShowStr>
	if(speed == 100)
 80039ce:	4b48      	ldr	r3, [pc, #288]	@ (8003af0 <screen_game_over+0x29c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b64      	cmp	r3, #100	@ 0x64
 80039d4:	d10c      	bne.n	80039f0 <screen_game_over+0x19c>
		lcd_ShowStr(120, 120, "HARD", WHITE, BLACK, 16, 0);
 80039d6:	2300      	movs	r3, #0
 80039d8:	9302      	str	r3, [sp, #8]
 80039da:	2310      	movs	r3, #16
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	2300      	movs	r3, #0
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039e6:	4a45      	ldr	r2, [pc, #276]	@ (8003afc <screen_game_over+0x2a8>)
 80039e8:	2178      	movs	r1, #120	@ 0x78
 80039ea:	2078      	movs	r0, #120	@ 0x78
 80039ec:	f7ff faca 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(40, 150, "Leaderboard (<)", WHITE, BLACK, 16, 0);
 80039f0:	2300      	movs	r3, #0
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	2310      	movs	r3, #16
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	2300      	movs	r3, #0
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a00:	4a3f      	ldr	r2, [pc, #252]	@ (8003b00 <screen_game_over+0x2ac>)
 8003a02:	2196      	movs	r1, #150	@ 0x96
 8003a04:	2028      	movs	r0, #40	@ 0x28
 8003a06:	f7ff fabd 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowStr(40, 180, "Time:", WHITE, BLACK, 16, 0);
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9302      	str	r3, [sp, #8]
 8003a0e:	2310      	movs	r3, #16
 8003a10:	9301      	str	r3, [sp, #4]
 8003a12:	2300      	movs	r3, #0
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b04 <screen_game_over+0x2b0>)
 8003a1c:	21b4      	movs	r1, #180	@ 0xb4
 8003a1e:	2028      	movs	r0, #40	@ 0x28
 8003a20:	f7ff fab0 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowIntNum(90, 180, count/60, 2, WHITE, BLACK, 16);
 8003a24:	4b38      	ldr	r3, [pc, #224]	@ (8003b08 <screen_game_over+0x2b4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a38      	ldr	r2, [pc, #224]	@ (8003b0c <screen_game_over+0x2b8>)
 8003a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8003a2e:	441a      	add	r2, r3
 8003a30:	1152      	asrs	r2, r2, #5
 8003a32:	17db      	asrs	r3, r3, #31
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	2310      	movs	r3, #16
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2302      	movs	r3, #2
 8003a48:	21b4      	movs	r1, #180	@ 0xb4
 8003a4a:	205a      	movs	r0, #90	@ 0x5a
 8003a4c:	f7fe ffa0 	bl	8002990 <lcd_ShowIntNum>
	lcd_ShowStr(110, 180, ":", WHITE, BLACK, 16, 0);
 8003a50:	2300      	movs	r3, #0
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	2310      	movs	r3, #16
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a60:	4a2b      	ldr	r2, [pc, #172]	@ (8003b10 <screen_game_over+0x2bc>)
 8003a62:	21b4      	movs	r1, #180	@ 0xb4
 8003a64:	206e      	movs	r0, #110	@ 0x6e
 8003a66:	f7ff fa8d 	bl	8002f84 <lcd_ShowStr>
	lcd_ShowIntNum(120, 180, count%60, 2, WHITE, BLACK, 16);
 8003a6a:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <screen_game_over+0x2b4>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b27      	ldr	r3, [pc, #156]	@ (8003b0c <screen_game_over+0x2b8>)
 8003a70:	fb83 1302 	smull	r1, r3, r3, r2
 8003a74:	4413      	add	r3, r2
 8003a76:	1159      	asrs	r1, r3, #5
 8003a78:	17d3      	asrs	r3, r2, #31
 8003a7a:	1ac9      	subs	r1, r1, r3
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a5b      	subs	r3, r3, r1
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	1ad1      	subs	r1, r2, r3
 8003a86:	b28a      	uxth	r2, r1
 8003a88:	2310      	movs	r3, #16
 8003a8a:	9302      	str	r3, [sp, #8]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2302      	movs	r3, #2
 8003a98:	21b4      	movs	r1, #180	@ 0xb4
 8003a9a:	2078      	movs	r0, #120	@ 0x78
 8003a9c:	f7fe ff78 	bl	8002990 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 220, score, 2, WHITE, BLACK, 24);
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <screen_game_over+0x2c0>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2318      	movs	r3, #24
 8003aa8:	9302      	str	r3, [sp, #8]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	21dc      	movs	r1, #220	@ 0xdc
 8003ab8:	2096      	movs	r0, #150	@ 0x96
 8003aba:	f7fe ff69 	bl	8002990 <lcd_ShowIntNum>
//	lcd_Fill(50, 250, 190, 300, GREEN);
//	lcd_ShowStr(80,260,"RESTART",BLACK,BLACK,24,1);
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	0800d600 	.word	0x0800d600
 8003ac8:	0800d5f8 	.word	0x0800d5f8
 8003acc:	0800d58c 	.word	0x0800d58c
 8003ad0:	200001d4 	.word	0x200001d4
 8003ad4:	0800d598 	.word	0x0800d598
 8003ad8:	200001d8 	.word	0x200001d8
 8003adc:	0800d5a4 	.word	0x0800d5a4
 8003ae0:	0800d5ac 	.word	0x0800d5ac
 8003ae4:	0800d5b4 	.word	0x0800d5b4
 8003ae8:	0800d5bc 	.word	0x0800d5bc
 8003aec:	0800d5c4 	.word	0x0800d5c4
 8003af0:	20000000 	.word	0x20000000
 8003af4:	0800d5d0 	.word	0x0800d5d0
 8003af8:	0800d5d8 	.word	0x0800d5d8
 8003afc:	0800d5e0 	.word	0x0800d5e0
 8003b00:	0800d5e8 	.word	0x0800d5e8
 8003b04:	0800d60c 	.word	0x0800d60c
 8003b08:	200001dc 	.word	0x200001dc
 8003b0c:	88888889 	.word	0x88888889
 8003b10:	0800d614 	.word	0x0800d614
 8003b14:	20000b14 	.word	0x20000b14

08003b18 <sensor_GetLight>:

void sensor_Read(){
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
}

uint16_t sensor_GetLight(){//do sang
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8003b1c:	4b03      	ldr	r3, [pc, #12]	@ (8003b2c <sensor_GetLight+0x14>)
 8003b1e:	889b      	ldrh	r3, [r3, #4]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	200002b8 	.word	0x200002b8

08003b30 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <sensor_GetPotentiometer+0x14>)
 8003b36:	88db      	ldrh	r3, [r3, #6]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	200002b8 	.word	0x200002b8

08003b48 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){//Nhiet do
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <sensor_GetTemperature+0x30>)
 8003b4e:	891b      	ldrh	r3, [r3, #8]
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b58:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003b7c <sensor_GetTemperature+0x34>
 8003b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b60:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003b80 <sensor_GetTemperature+0x38>
 8003b64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b68:	eef0 7a66 	vmov.f32	s15, s13
}
 8003b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	200002b8 	.word	0x200002b8
 8003b7c:	43a50000 	.word	0x43a50000
 8003b80:	457ff000 	.word	0x457ff000

08003b84 <isLight>:

float getWattage(){
	return sensor_GetVoltage() * sensor_GetCurrent();
}

uint16_t isLight(){//> 0.5 nguoc anh sang manh
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
	if((float)sensor_GetLight()/4095 > 0.5)
 8003b88:	f7ff ffc6 	bl	8003b18 <sensor_GetLight>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b96:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003bb8 <isLight+0x34>
 8003b9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003baa:	dd01      	ble.n	8003bb0 <isLight+0x2c>
		return 1;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <isLight+0x2e>
	return 0;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	457ff000 	.word	0x457ff000
 8003bbc:	00000000 	.word	0x00000000

08003bc0 <isHumidity>:

uint16_t isHumidity(){//Do am (nut van bien tro)
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	if((float)sensor_GetPotentiometer()/4094 > 0.7)
 8003bc4:	f7ff ffb4 	bl	8003b30 <sensor_GetPotentiometer>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003c08 <isHumidity+0x48>
 8003bd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bda:	ee16 0a90 	vmov	r0, s13
 8003bde:	f7fc fcab 	bl	8000538 <__aeabi_f2d>
 8003be2:	a307      	add	r3, pc, #28	@ (adr r3, 8003c00 <isHumidity+0x40>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc ff8e 	bl	8000b08 <__aeabi_dcmpgt>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <isHumidity+0x36>
		return 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <isHumidity+0x38>
	return 0;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	f3af 8000 	nop.w
 8003c00:	66666666 	.word	0x66666666
 8003c04:	3fe66666 	.word	0x3fe66666
 8003c08:	457fe000 	.word	0x457fe000

08003c0c <draw_snake>:
int sw_right = 1;
int sw_left = 1;
uint8_t score = 0;
int lose = 0;

void draw_snake(int x,int y){
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GREEN, 5, 1);
 8003c16:	2301      	movs	r3, #1
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003c20:	6839      	ldr	r1, [r7, #0]
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff f941 	bl	8002eaa <lcd_DrawCircle>
}
 8003c28:	bf00      	nop
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <draw_food>:

void draw_food(int x,int y){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, RED, 5, 1);
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	2305      	movs	r3, #5
 8003c40:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff f92f 	bl	8002eaa <lcd_DrawCircle>
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <draw_head>:

void draw_head(int x, int y){
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, LIGHTGREEN, 5, 1);
 8003c5e:	2301      	movs	r3, #1
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	2305      	movs	r3, #5
 8003c64:	f248 421f 	movw	r2, #33823	@ 0x841f
 8003c68:	6839      	ldr	r1, [r7, #0]
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff f91d 	bl	8002eaa <lcd_DrawCircle>
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <draw_wall>:

void draw_wall(int x, int y){
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GRAY, 5, 1);
 8003c82:	2301      	movs	r3, #1
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	2305      	movs	r3, #5
 8003c88:	f248 4230 	movw	r2, #33840	@ 0x8430
 8003c8c:	6839      	ldr	r1, [r7, #0]
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff f90b 	bl	8002eaa <lcd_DrawCircle>
}
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <clear_block>:

void clear_block(int x,int y){
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, WHITE, 5, 1);
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2305      	movs	r3, #5
 8003cac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cb0:	6839      	ldr	r1, [r7, #0]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff f8f9 	bl	8002eaa <lcd_DrawCircle>
}
 8003cb8:	bf00      	nop
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <update_grid>:

void update_grid(){
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	e08b      	b.n	8003de4 <update_grid+0x124>
		for(int j=0;j<20;j++){
 8003ccc:	2300      	movs	r3, #0
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	e081      	b.n	8003dd6 <update_grid+0x116>
			if(draw_grid[i][j]==2){
 8003cd2:	4949      	ldr	r1, [pc, #292]	@ (8003df8 <update_grid+0x138>)
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d10f      	bne.n	8003d0a <update_grid+0x4a>
				draw_snake(i*10+5,j*10+5);
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	1d58      	adds	r0, r3, #5
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	3305      	adds	r3, #5
 8003d02:	4619      	mov	r1, r3
 8003d04:	f7ff ff82 	bl	8003c0c <draw_snake>
 8003d08:	e062      	b.n	8003dd0 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==4){
 8003d0a:	493b      	ldr	r1, [pc, #236]	@ (8003df8 <update_grid+0x138>)
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d10f      	bne.n	8003d42 <update_grid+0x82>
				draw_head(i*10+5,j*10+5);
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	1d58      	adds	r0, r3, #5
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	3305      	adds	r3, #5
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7ff ff8a 	bl	8003c54 <draw_head>
 8003d40:	e046      	b.n	8003dd0 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==1){
 8003d42:	492d      	ldr	r1, [pc, #180]	@ (8003df8 <update_grid+0x138>)
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	4413      	add	r3, r2
 8003d52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10f      	bne.n	8003d7a <update_grid+0xba>
				draw_food(i*10+5,j*10+5);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	1d58      	adds	r0, r3, #5
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	3305      	adds	r3, #5
 8003d72:	4619      	mov	r1, r3
 8003d74:	f7ff ff5c 	bl	8003c30 <draw_food>
 8003d78:	e02a      	b.n	8003dd0 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==3){
 8003d7a:	491f      	ldr	r1, [pc, #124]	@ (8003df8 <update_grid+0x138>)
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d10f      	bne.n	8003db2 <update_grid+0xf2>
				draw_wall(i*10+5,j*10+5);
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	1d58      	adds	r0, r3, #5
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	3305      	adds	r3, #5
 8003daa:	4619      	mov	r1, r3
 8003dac:	f7ff ff64 	bl	8003c78 <draw_wall>
 8003db0:	e00e      	b.n	8003dd0 <update_grid+0x110>
			}
			else{
				clear_block(i*10+5,j*10+5);
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	1d58      	adds	r0, r3, #5
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	3305      	adds	r3, #5
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f7ff ff66 	bl	8003c9c <clear_block>
		for(int j=0;j<20;j++){
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b13      	cmp	r3, #19
 8003dda:	f77f af7a 	ble.w	8003cd2 <update_grid+0x12>
	for(int i=0;i<24;i++){
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3301      	adds	r3, #1
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b17      	cmp	r3, #23
 8003de8:	f77f af70 	ble.w	8003ccc <update_grid+0xc>
			}
		}
	}
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	200002c4 	.word	0x200002c4

08003dfc <delete_wall>:

void delete_wall(void){
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
 8003e06:	e022      	b.n	8003e4e <delete_wall+0x52>
		for(int j=0;j<20;j++){
 8003e08:	2300      	movs	r3, #0
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	e019      	b.n	8003e42 <delete_wall+0x46>
			if(draw_grid[i][j]==3){
 8003e0e:	4915      	ldr	r1, [pc, #84]	@ (8003e64 <delete_wall+0x68>)
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d10a      	bne.n	8003e3c <delete_wall+0x40>
				draw_grid[i][j]=0;
 8003e26:	490f      	ldr	r1, [pc, #60]	@ (8003e64 <delete_wall+0x68>)
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	4413      	add	r3, r2
 8003e36:	2200      	movs	r2, #0
 8003e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	603b      	str	r3, [r7, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b13      	cmp	r3, #19
 8003e46:	dde2      	ble.n	8003e0e <delete_wall+0x12>
	for(int i=0;i<24;i++){
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b17      	cmp	r3, #23
 8003e52:	ddd9      	ble.n	8003e08 <delete_wall+0xc>
			}
		}
	}
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	200002c4 	.word	0x200002c4

08003e68 <init_grid>:

void init_grid(void){
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
	for(int i=0; i<24;i++){
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	e016      	b.n	8003ea2 <init_grid+0x3a>
		for(int j=0;j<20;j++){
 8003e74:	2300      	movs	r3, #0
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	e00d      	b.n	8003e96 <init_grid+0x2e>
			draw_grid[i][j]=0;
 8003e7a:	490f      	ldr	r1, [pc, #60]	@ (8003eb8 <init_grid+0x50>)
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	4413      	add	r3, r2
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b13      	cmp	r3, #19
 8003e9a:	ddee      	ble.n	8003e7a <init_grid+0x12>
	for(int i=0; i<24;i++){
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b17      	cmp	r3, #23
 8003ea6:	dde5      	ble.n	8003e74 <init_grid+0xc>
		}
	}
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	200002c4 	.word	0x200002c4

08003ebc <move_snake>:

void move_snake(){
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
		for(int i=size_of_snake-1;i>=0;i--){
 8003ec2:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <move_snake+0x194>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	e014      	b.n	8003ef6 <move_snake+0x3a>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=0;
 8003ecc:	4a61      	ldr	r2, [pc, #388]	@ (8004054 <move_snake+0x198>)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ed4:	495f      	ldr	r1, [pc, #380]	@ (8004054 <move_snake+0x198>)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	3318      	adds	r3, #24
 8003eda:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003ede:	485e      	ldr	r0, [pc, #376]	@ (8004058 <move_snake+0x19c>)
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	2200      	movs	r2, #0
 8003eec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-1;i>=0;i--){
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	dae7      	bge.n	8003ecc <move_snake+0x10>
		}
		draw_grid[snake_pos[0][0]][snake_pos[1][0]] = 0;
 8003efc:	4b55      	ldr	r3, [pc, #340]	@ (8004054 <move_snake+0x198>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4b54      	ldr	r3, [pc, #336]	@ (8004054 <move_snake+0x198>)
 8003f02:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8003f04:	4854      	ldr	r0, [pc, #336]	@ (8004058 <move_snake+0x19c>)
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	2200      	movs	r2, #0
 8003f12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		old_poshx=snake_pos[0][size_of_snake-1];
 8003f16:	4b4e      	ldr	r3, [pc, #312]	@ (8004050 <move_snake+0x194>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	4a4d      	ldr	r2, [pc, #308]	@ (8004054 <move_snake+0x198>)
 8003f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f22:	4a4e      	ldr	r2, [pc, #312]	@ (800405c <move_snake+0x1a0>)
 8003f24:	6013      	str	r3, [r2, #0]
		old_poshy=snake_pos[1][size_of_snake-1];
 8003f26:	4b4a      	ldr	r3, [pc, #296]	@ (8004050 <move_snake+0x194>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	4a49      	ldr	r2, [pc, #292]	@ (8004054 <move_snake+0x198>)
 8003f2e:	3318      	adds	r3, #24
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	4a4a      	ldr	r2, [pc, #296]	@ (8004060 <move_snake+0x1a4>)
 8003f36:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=snake_pos[0][size_of_snake-1]+snake_speed[0];
 8003f38:	4b45      	ldr	r3, [pc, #276]	@ (8004050 <move_snake+0x194>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	4a45      	ldr	r2, [pc, #276]	@ (8004054 <move_snake+0x198>)
 8003f40:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f44:	4b47      	ldr	r3, [pc, #284]	@ (8004064 <move_snake+0x1a8>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b41      	ldr	r3, [pc, #260]	@ (8004050 <move_snake+0x194>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	440a      	add	r2, r1
 8003f50:	4940      	ldr	r1, [pc, #256]	@ (8004054 <move_snake+0x198>)
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=snake_pos[1][size_of_snake-1]+snake_speed[1];
 8003f56:	4b3e      	ldr	r3, [pc, #248]	@ (8004050 <move_snake+0x194>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8004054 <move_snake+0x198>)
 8003f5e:	3318      	adds	r3, #24
 8003f60:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f64:	4b3f      	ldr	r3, [pc, #252]	@ (8004064 <move_snake+0x1a8>)
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	4b39      	ldr	r3, [pc, #228]	@ (8004050 <move_snake+0x194>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	440a      	add	r2, r1
 8003f70:	4938      	ldr	r1, [pc, #224]	@ (8004054 <move_snake+0x198>)
 8003f72:	3318      	adds	r3, #24
 8003f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pos_head[0]=snake_pos[0][size_of_snake-1];
 8003f78:	4b35      	ldr	r3, [pc, #212]	@ (8004050 <move_snake+0x194>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	4a35      	ldr	r2, [pc, #212]	@ (8004054 <move_snake+0x198>)
 8003f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f84:	4a38      	ldr	r2, [pc, #224]	@ (8004068 <move_snake+0x1ac>)
 8003f86:	6013      	str	r3, [r2, #0]
		pos_head[1]=snake_pos[1][size_of_snake-1];
 8003f88:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <move_snake+0x194>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	4a31      	ldr	r2, [pc, #196]	@ (8004054 <move_snake+0x198>)
 8003f90:	3318      	adds	r3, #24
 8003f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f96:	4a34      	ldr	r2, [pc, #208]	@ (8004068 <move_snake+0x1ac>)
 8003f98:	6053      	str	r3, [r2, #4]
		for(int i=size_of_snake-2;i>=0;i--){
 8003f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004050 <move_snake+0x194>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3b02      	subs	r3, #2
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e020      	b.n	8003fe6 <move_snake+0x12a>
			int nx = snake_pos[0][i];
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <move_snake+0x198>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	60bb      	str	r3, [r7, #8]
			int ny = snake_pos[1][i];
 8003fae:	4a29      	ldr	r2, [pc, #164]	@ (8004054 <move_snake+0x198>)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	607b      	str	r3, [r7, #4]
			snake_pos[0][i]=old_poshx;
 8003fba:	4b28      	ldr	r3, [pc, #160]	@ (800405c <move_snake+0x1a0>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4925      	ldr	r1, [pc, #148]	@ (8004054 <move_snake+0x198>)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			snake_pos[1][i]=old_poshy;
 8003fc6:	4b26      	ldr	r3, [pc, #152]	@ (8004060 <move_snake+0x1a4>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4922      	ldr	r1, [pc, #136]	@ (8004054 <move_snake+0x198>)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			old_poshx=nx;
 8003fd4:	4a21      	ldr	r2, [pc, #132]	@ (800405c <move_snake+0x1a0>)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6013      	str	r3, [r2, #0]
			old_poshy=ny;
 8003fda:	4a21      	ldr	r2, [pc, #132]	@ (8004060 <move_snake+0x1a4>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6013      	str	r3, [r2, #0]
		for(int i=size_of_snake-2;i>=0;i--){
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	613b      	str	r3, [r7, #16]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dadb      	bge.n	8003fa4 <move_snake+0xe8>
		}
		for(int i=size_of_snake-2;i>=0;i--){
 8003fec:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <move_snake+0x194>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3b02      	subs	r3, #2
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e014      	b.n	8004020 <move_snake+0x164>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=2;
 8003ff6:	4a17      	ldr	r2, [pc, #92]	@ (8004054 <move_snake+0x198>)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ffe:	4915      	ldr	r1, [pc, #84]	@ (8004054 <move_snake+0x198>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3318      	adds	r3, #24
 8004004:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004008:	4813      	ldr	r0, [pc, #76]	@ (8004058 <move_snake+0x19c>)
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	2202      	movs	r2, #2
 8004016:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-2;i>=0;i--){
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b01      	subs	r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	dae7      	bge.n	8003ff6 <move_snake+0x13a>
		}
		check_collision();
 8004026:	f000 fa21 	bl	800446c <check_collision>
		check_food();
 800402a:	f000 fac9 	bl	80045c0 <check_food>
		draw_grid[pos_head[0]][pos_head[1]]=4;
 800402e:	4b0e      	ldr	r3, [pc, #56]	@ (8004068 <move_snake+0x1ac>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <move_snake+0x1ac>)
 8004034:	6859      	ldr	r1, [r3, #4]
 8004036:	4808      	ldr	r0, [pc, #32]	@ (8004058 <move_snake+0x19c>)
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	2204      	movs	r2, #4
 8004044:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	2000001c 	.word	0x2000001c
 8004054:	20000a44 	.word	0x20000a44
 8004058:	200002c4 	.word	0x200002c4
 800405c:	20000b04 	.word	0x20000b04
 8004060:	20000b08 	.word	0x20000b08
 8004064:	20000020 	.word	0x20000020
 8004068:	20000b0c 	.word	0x20000b0c

0800406c <re_init>:

void re_init(void){
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
	init_grid();
 8004070:	f7ff fefa 	bl	8003e68 <init_grid>
	draw_grid[0][0]=2;
 8004074:	4b16      	ldr	r3, [pc, #88]	@ (80040d0 <re_init+0x64>)
 8004076:	2202      	movs	r2, #2
 8004078:	601a      	str	r2, [r3, #0]
	draw_grid[1][0]=2;
 800407a:	4b15      	ldr	r3, [pc, #84]	@ (80040d0 <re_init+0x64>)
 800407c:	2202      	movs	r2, #2
 800407e:	651a      	str	r2, [r3, #80]	@ 0x50
	snake_pos[0][0]=0;
 8004080:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <re_init+0x68>)
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
	snake_pos[1][0]=0;
 8004086:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <re_init+0x68>)
 8004088:	2200      	movs	r2, #0
 800408a:	661a      	str	r2, [r3, #96]	@ 0x60
	snake_pos[0][1]=1;
 800408c:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <re_init+0x68>)
 800408e:	2201      	movs	r2, #1
 8004090:	605a      	str	r2, [r3, #4]
	snake_pos[1][1]=0;
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <re_init+0x68>)
 8004094:	2200      	movs	r2, #0
 8004096:	665a      	str	r2, [r3, #100]	@ 0x64
	size_of_snake=2;
 8004098:	4b0f      	ldr	r3, [pc, #60]	@ (80040d8 <re_init+0x6c>)
 800409a:	2202      	movs	r2, #2
 800409c:	601a      	str	r2, [r3, #0]
	snake_speed[0]=1;
 800409e:	4b0f      	ldr	r3, [pc, #60]	@ (80040dc <re_init+0x70>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
	snake_speed[1]=0;
 80040a4:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <re_init+0x70>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	605a      	str	r2, [r3, #4]
	sw_up=1;
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <re_init+0x74>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
	sw_down=1;
 80040b0:	4b0c      	ldr	r3, [pc, #48]	@ (80040e4 <re_init+0x78>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
	sw_right=1;
 80040b6:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <re_init+0x7c>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	601a      	str	r2, [r3, #0]
	sw_left=1;
 80040bc:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <re_init+0x80>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
	score=0;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <re_init+0x84>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
	spawn_food();
 80040c8:	f000 f814 	bl	80040f4 <spawn_food>
}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200002c4 	.word	0x200002c4
 80040d4:	20000a44 	.word	0x20000a44
 80040d8:	2000001c 	.word	0x2000001c
 80040dc:	20000020 	.word	0x20000020
 80040e0:	20000028 	.word	0x20000028
 80040e4:	2000002c 	.word	0x2000002c
 80040e8:	20000030 	.word	0x20000030
 80040ec:	20000034 	.word	0x20000034
 80040f0:	20000b14 	.word	0x20000b14

080040f4 <spawn_food>:

void spawn_food(void){
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
	int xf=rand_no(23);
 80040fa:	2017      	movs	r0, #23
 80040fc:	f000 f9a2 	bl	8004444 <rand_no>
 8004100:	6078      	str	r0, [r7, #4]
	int yf=rand_no(19);
 8004102:	2013      	movs	r0, #19
 8004104:	f000 f99e 	bl	8004444 <rand_no>
 8004108:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 800410a:	e007      	b.n	800411c <spawn_food+0x28>
		xf=rand_no(23);
 800410c:	2017      	movs	r0, #23
 800410e:	f000 f999 	bl	8004444 <rand_no>
 8004112:	6078      	str	r0, [r7, #4]
		yf=rand_no(19);
 8004114:	2013      	movs	r0, #19
 8004116:	f000 f995 	bl	8004444 <rand_no>
 800411a:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 800411c:	490d      	ldr	r1, [pc, #52]	@ (8004154 <spawn_food+0x60>)
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d0eb      	beq.n	800410c <spawn_food+0x18>
	}
	draw_grid[xf][yf]=1;
 8004134:	4907      	ldr	r1, [pc, #28]	@ (8004154 <spawn_food+0x60>)
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	4413      	add	r3, r2
 8004144:	2201      	movs	r2, #1
 8004146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800414a:	bf00      	nop
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200002c4 	.word	0x200002c4

08004158 <spawn_wall>:

void spawn_wall(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
	int xw=rand_no(23);
 800415e:	2017      	movs	r0, #23
 8004160:	f000 f970 	bl	8004444 <rand_no>
 8004164:	60f8      	str	r0, [r7, #12]
	int yw=rand_no(19);
 8004166:	2013      	movs	r0, #19
 8004168:	f000 f96c 	bl	8004444 <rand_no>
 800416c:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 800416e:	e007      	b.n	8004180 <spawn_wall+0x28>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
		xw=rand_no(23);
 8004170:	2017      	movs	r0, #23
 8004172:	f000 f967 	bl	8004444 <rand_no>
 8004176:	60f8      	str	r0, [r7, #12]
		yw=rand_no(19);
 8004178:	2013      	movs	r0, #19
 800417a:	f000 f963 	bl	8004444 <rand_no>
 800417e:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 8004180:	49af      	ldr	r1, [pc, #700]	@ (8004440 <spawn_wall+0x2e8>)
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	4413      	add	r3, r2
 8004190:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d0eb      	beq.n	8004170 <spawn_wall+0x18>
 8004198:	49a9      	ldr	r1, [pc, #676]	@ (8004440 <spawn_wall+0x2e8>)
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4413      	add	r3, r2
 80041a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d0df      	beq.n	8004170 <spawn_wall+0x18>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	49a2      	ldr	r1, [pc, #648]	@ (8004440 <spawn_wall+0x2e8>)
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4413      	add	r3, r2
 80041c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d00c      	beq.n	80041e4 <spawn_wall+0x8c>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	499c      	ldr	r1, [pc, #624]	@ (8004440 <spawn_wall+0x2e8>)
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4413      	add	r3, r2
 80041dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d14e      	bne.n	8004282 <spawn_wall+0x12a>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1e5a      	subs	r2, r3, #1
 80041e8:	4995      	ldr	r1, [pc, #596]	@ (8004440 <spawn_wall+0x2e8>)
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d00c      	beq.n	8004218 <spawn_wall+0xc0>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1e5a      	subs	r2, r3, #1
 8004202:	498f      	ldr	r1, [pc, #572]	@ (8004440 <spawn_wall+0x2e8>)
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	4413      	add	r3, r2
 8004210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d134      	bne.n	8004282 <spawn_wall+0x12a>
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1c59      	adds	r1, r3, #1
 800421c:	4888      	ldr	r0, [pc, #544]	@ (8004440 <spawn_wall+0x2e8>)
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d00c      	beq.n	800424c <spawn_wall+0xf4>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1c59      	adds	r1, r3, #1
 8004236:	4882      	ldr	r0, [pc, #520]	@ (8004440 <spawn_wall+0x2e8>)
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d11a      	bne.n	8004282 <spawn_wall+0x12a>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	1e59      	subs	r1, r3, #1
 8004250:	487b      	ldr	r0, [pc, #492]	@ (8004440 <spawn_wall+0x2e8>)
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d084      	beq.n	8004170 <spawn_wall+0x18>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1e59      	subs	r1, r3, #1
 800426a:	4875      	ldr	r0, [pc, #468]	@ (8004440 <spawn_wall+0x2e8>)
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800427c:	2b01      	cmp	r3, #1
 800427e:	f43f af77 	beq.w	8004170 <spawn_wall+0x18>
	}
	draw_grid[xw][yw]=3;
 8004282:	496f      	ldr	r1, [pc, #444]	@ (8004440 <spawn_wall+0x2e8>)
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	2203      	movs	r2, #3
 8004294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	int d=rand_no(4);
 8004298:	2004      	movs	r0, #4
 800429a:	f000 f8d3 	bl	8004444 <rand_no>
 800429e:	6038      	str	r0, [r7, #0]
	int flag = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	607b      	str	r3, [r7, #4]
	while(flag == 0){
 80042a4:	e0c3      	b.n	800442e <spawn_wall+0x2d6>
		d = rand_no(4);
 80042a6:	2004      	movs	r0, #4
 80042a8:	f000 f8cc 	bl	8004444 <rand_no>
 80042ac:	6038      	str	r0, [r7, #0]
		switch (d){
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	f200 80b2 	bhi.w	800441c <spawn_wall+0x2c4>
 80042b8:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <spawn_wall+0x168>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	08004327 	.word	0x08004327
 80042c8:	08004379 	.word	0x08004379
 80042cc:	080043cb 	.word	0x080043cb
		case 1:
			if(draw_grid[xw+1][yw]!=2 && draw_grid[xw+1][yw]!=1){
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	495a      	ldr	r1, [pc, #360]	@ (8004440 <spawn_wall+0x2e8>)
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	f000 809a 	beq.w	8004420 <spawn_wall+0x2c8>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	4953      	ldr	r1, [pc, #332]	@ (8004440 <spawn_wall+0x2e8>)
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4413      	add	r3, r2
 80042fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004302:	2b01      	cmp	r3, #1
 8004304:	f000 808c 	beq.w	8004420 <spawn_wall+0x2c8>
				draw_grid[xw+1][yw]=3;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	494c      	ldr	r1, [pc, #304]	@ (8004440 <spawn_wall+0x2e8>)
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	2203      	movs	r2, #3
 800431c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 8004320:	2301      	movs	r3, #1
 8004322:	607b      	str	r3, [r7, #4]
			}
			break;
 8004324:	e07c      	b.n	8004420 <spawn_wall+0x2c8>
		case 2:
			if(draw_grid[xw-1][yw]!=2 && draw_grid[xw-1][yw]!=1){
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1e5a      	subs	r2, r3, #1
 800432a:	4945      	ldr	r1, [pc, #276]	@ (8004440 <spawn_wall+0x2e8>)
 800432c:	4613      	mov	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	4413      	add	r3, r2
 8004338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d071      	beq.n	8004424 <spawn_wall+0x2cc>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	493e      	ldr	r1, [pc, #248]	@ (8004440 <spawn_wall+0x2e8>)
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	4413      	add	r3, r2
 8004352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d064      	beq.n	8004424 <spawn_wall+0x2cc>
				draw_grid[xw-1][yw]=3;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	4938      	ldr	r1, [pc, #224]	@ (8004440 <spawn_wall+0x2e8>)
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	4413      	add	r3, r2
 800436c:	2203      	movs	r2, #3
 800436e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	607b      	str	r3, [r7, #4]
			}
			break;
 8004376:	e055      	b.n	8004424 <spawn_wall+0x2cc>
		case 3:
			if(draw_grid[xw][yw+1]!=2 && draw_grid[xw][yw+1]!=1){
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1c59      	adds	r1, r3, #1
 800437c:	4830      	ldr	r0, [pc, #192]	@ (8004440 <spawn_wall+0x2e8>)
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d04a      	beq.n	8004428 <spawn_wall+0x2d0>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	482a      	ldr	r0, [pc, #168]	@ (8004440 <spawn_wall+0x2e8>)
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d03d      	beq.n	8004428 <spawn_wall+0x2d0>
				draw_grid[xw][yw+1]=3;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	1c59      	adds	r1, r3, #1
 80043b0:	4823      	ldr	r0, [pc, #140]	@ (8004440 <spawn_wall+0x2e8>)
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	2203      	movs	r2, #3
 80043c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 80043c4:	2301      	movs	r3, #1
 80043c6:	607b      	str	r3, [r7, #4]
			}
			break;
 80043c8:	e02e      	b.n	8004428 <spawn_wall+0x2d0>
		case 4:
			if(draw_grid[xw][yw-1]!=2 && draw_grid[xw][yw-1]!=1){
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	1e59      	subs	r1, r3, #1
 80043ce:	481c      	ldr	r0, [pc, #112]	@ (8004440 <spawn_wall+0x2e8>)
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	440b      	add	r3, r1
 80043dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d023      	beq.n	800442c <spawn_wall+0x2d4>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	1e59      	subs	r1, r3, #1
 80043e8:	4815      	ldr	r0, [pc, #84]	@ (8004440 <spawn_wall+0x2e8>)
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d016      	beq.n	800442c <spawn_wall+0x2d4>
				draw_grid[xw][yw-1]=3;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	1e59      	subs	r1, r3, #1
 8004402:	480f      	ldr	r0, [pc, #60]	@ (8004440 <spawn_wall+0x2e8>)
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	2203      	movs	r2, #3
 8004412:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	607b      	str	r3, [r7, #4]
			}
			break;
 800441a:	e007      	b.n	800442c <spawn_wall+0x2d4>
		default:
			break;
 800441c:	bf00      	nop
 800441e:	e006      	b.n	800442e <spawn_wall+0x2d6>
			break;
 8004420:	bf00      	nop
 8004422:	e004      	b.n	800442e <spawn_wall+0x2d6>
			break;
 8004424:	bf00      	nop
 8004426:	e002      	b.n	800442e <spawn_wall+0x2d6>
			break;
 8004428:	bf00      	nop
 800442a:	e000      	b.n	800442e <spawn_wall+0x2d6>
			break;
 800442c:	bf00      	nop
	while(flag == 0){
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f43f af38 	beq.w	80042a6 <spawn_wall+0x14e>
		}
	}
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200002c4 	.word	0x200002c4

08004444 <rand_no>:

int rand_no(int m){
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	int num = (rand()%(m+1));
 800444c:	f007 fd46 	bl	800bedc <rand>
 8004450:	4602      	mov	r2, r0
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3301      	adds	r3, #1
 8004456:	fb92 f1f3 	sdiv	r1, r2, r3
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	60fb      	str	r3, [r7, #12]
	return num;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <check_collision>:

void check_collision(void){
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
	if(pos_head[0]>23 || pos_head[0]<0){
 8004470:	4b23      	ldr	r3, [pc, #140]	@ (8004500 <check_collision+0x94>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b17      	cmp	r3, #23
 8004476:	dc03      	bgt.n	8004480 <check_collision+0x14>
 8004478:	4b21      	ldr	r3, [pc, #132]	@ (8004500 <check_collision+0x94>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	da02      	bge.n	8004486 <check_collision+0x1a>
		lose = 1;
 8004480:	4b20      	ldr	r3, [pc, #128]	@ (8004504 <check_collision+0x98>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]
	}
	if(pos_head[1]>19 || pos_head[1]<0){
 8004486:	4b1e      	ldr	r3, [pc, #120]	@ (8004500 <check_collision+0x94>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b13      	cmp	r3, #19
 800448c:	dc03      	bgt.n	8004496 <check_collision+0x2a>
 800448e:	4b1c      	ldr	r3, [pc, #112]	@ (8004500 <check_collision+0x94>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	da02      	bge.n	800449c <check_collision+0x30>
		lose = 1;
 8004496:	4b1b      	ldr	r3, [pc, #108]	@ (8004504 <check_collision+0x98>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==2){
 800449c:	4b18      	ldr	r3, [pc, #96]	@ (8004500 <check_collision+0x94>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b17      	ldr	r3, [pc, #92]	@ (8004500 <check_collision+0x94>)
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	4818      	ldr	r0, [pc, #96]	@ (8004508 <check_collision+0x9c>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d102      	bne.n	80044be <check_collision+0x52>
		lose = 1;
 80044b8:	4b12      	ldr	r3, [pc, #72]	@ (8004504 <check_collision+0x98>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==3){
 80044be:	4b10      	ldr	r3, [pc, #64]	@ (8004500 <check_collision+0x94>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <check_collision+0x94>)
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	4810      	ldr	r0, [pc, #64]	@ (8004508 <check_collision+0x9c>)
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d102      	bne.n	80044e0 <check_collision+0x74>
		lose = 1;
 80044da:	4b0a      	ldr	r3, [pc, #40]	@ (8004504 <check_collision+0x98>)
 80044dc:	2201      	movs	r2, #1
 80044de:	601a      	str	r2, [r3, #0]
	}
	if(countdown == 0){
 80044e0:	4b0a      	ldr	r3, [pc, #40]	@ (800450c <check_collision+0xa0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <check_collision+0x88>
		lose = 1;
 80044e8:	4b06      	ldr	r3, [pc, #24]	@ (8004504 <check_collision+0x98>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
		countdown = 180;
 80044ee:	4b07      	ldr	r3, [pc, #28]	@ (800450c <check_collision+0xa0>)
 80044f0:	22b4      	movs	r2, #180	@ 0xb4
 80044f2:	601a      	str	r2, [r3, #0]
	}
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000b0c 	.word	0x20000b0c
 8004504:	20000b18 	.word	0x20000b18
 8004508:	200002c4 	.word	0x200002c4
 800450c:	20000008 	.word	0x20000008

08004510 <wait_check>:

void wait_check(void){
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
	if(sw_down==0 && snake_speed[1]==0){
 8004514:	4b25      	ldr	r3, [pc, #148]	@ (80045ac <wait_check+0x9c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10c      	bne.n	8004536 <wait_check+0x26>
 800451c:	4b24      	ldr	r3, [pc, #144]	@ (80045b0 <wait_check+0xa0>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d108      	bne.n	8004536 <wait_check+0x26>
		snake_speed[0]=0;
 8004524:	4b22      	ldr	r3, [pc, #136]	@ (80045b0 <wait_check+0xa0>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
		snake_speed[1]=1;
 800452a:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <wait_check+0xa0>)
 800452c:	2201      	movs	r2, #1
 800452e:	605a      	str	r2, [r3, #4]
		sw_down=1;
 8004530:	4b1e      	ldr	r3, [pc, #120]	@ (80045ac <wait_check+0x9c>)
 8004532:	2201      	movs	r2, #1
 8004534:	601a      	str	r2, [r3, #0]
	}
	if(sw_up==0 && snake_speed[1]==0){
 8004536:	4b1f      	ldr	r3, [pc, #124]	@ (80045b4 <wait_check+0xa4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10d      	bne.n	800455a <wait_check+0x4a>
 800453e:	4b1c      	ldr	r3, [pc, #112]	@ (80045b0 <wait_check+0xa0>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <wait_check+0x4a>
		snake_speed[0]=0;
 8004546:	4b1a      	ldr	r3, [pc, #104]	@ (80045b0 <wait_check+0xa0>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
		snake_speed[1]=-1;
 800454c:	4b18      	ldr	r3, [pc, #96]	@ (80045b0 <wait_check+0xa0>)
 800454e:	f04f 32ff 	mov.w	r2, #4294967295
 8004552:	605a      	str	r2, [r3, #4]
		sw_up=1;
 8004554:	4b17      	ldr	r3, [pc, #92]	@ (80045b4 <wait_check+0xa4>)
 8004556:	2201      	movs	r2, #1
 8004558:	601a      	str	r2, [r3, #0]
	}
	if(sw_right==0 && snake_speed[0]==0){
 800455a:	4b17      	ldr	r3, [pc, #92]	@ (80045b8 <wait_check+0xa8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <wait_check+0x6c>
 8004562:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <wait_check+0xa0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <wait_check+0x6c>
		snake_speed[0]=1;
 800456a:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <wait_check+0xa0>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 8004570:	4b0f      	ldr	r3, [pc, #60]	@ (80045b0 <wait_check+0xa0>)
 8004572:	2200      	movs	r2, #0
 8004574:	605a      	str	r2, [r3, #4]
		sw_right=1;
 8004576:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <wait_check+0xa8>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
	}
	if(sw_left==0 && snake_speed[0]==0){
 800457c:	4b0f      	ldr	r3, [pc, #60]	@ (80045bc <wait_check+0xac>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10d      	bne.n	80045a0 <wait_check+0x90>
 8004584:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <wait_check+0xa0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <wait_check+0x90>
		snake_speed[0]=-1;
 800458c:	4b08      	ldr	r3, [pc, #32]	@ (80045b0 <wait_check+0xa0>)
 800458e:	f04f 32ff 	mov.w	r2, #4294967295
 8004592:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <wait_check+0xa0>)
 8004596:	2200      	movs	r2, #0
 8004598:	605a      	str	r2, [r3, #4]
		sw_left=1;
 800459a:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <wait_check+0xac>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]
	}
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	2000002c 	.word	0x2000002c
 80045b0:	20000020 	.word	0x20000020
 80045b4:	20000028 	.word	0x20000028
 80045b8:	20000030 	.word	0x20000030
 80045bc:	20000034 	.word	0x20000034

080045c0 <check_food>:
//		snake_pos[1][size_of_snake-1]=pos_head[1];
//		spawn_food();
//	}
//}

void check_food(void){
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
    if(draw_grid[pos_head[0]][pos_head[1]]==1){
 80045c6:	4b31      	ldr	r3, [pc, #196]	@ (800468c <check_food+0xcc>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b30      	ldr	r3, [pc, #192]	@ (800468c <check_food+0xcc>)
 80045cc:	6859      	ldr	r1, [r3, #4]
 80045ce:	4830      	ldr	r0, [pc, #192]	@ (8004690 <check_food+0xd0>)
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d150      	bne.n	8004684 <check_food+0xc4>
        score++;
 80045e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004694 <check_food+0xd4>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004694 <check_food+0xd4>)
 80045ec:	701a      	strb	r2, [r3, #0]
        size_of_snake++;
 80045ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004698 <check_food+0xd8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	4a28      	ldr	r2, [pc, #160]	@ (8004698 <check_food+0xd8>)
 80045f6:	6013      	str	r3, [r2, #0]

        for (int i = size_of_snake - 1; i > 0; i--) {
 80045f8:	4b27      	ldr	r3, [pc, #156]	@ (8004698 <check_food+0xd8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	e016      	b.n	8004630 <check_food+0x70>
            snake_pos[0][i] = snake_pos[0][i - 1];
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3b01      	subs	r3, #1
 8004606:	4a25      	ldr	r2, [pc, #148]	@ (800469c <check_food+0xdc>)
 8004608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800460c:	4923      	ldr	r1, [pc, #140]	@ (800469c <check_food+0xdc>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            snake_pos[1][i] = snake_pos[1][i - 1];
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	4a20      	ldr	r2, [pc, #128]	@ (800469c <check_food+0xdc>)
 800461a:	3318      	adds	r3, #24
 800461c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004620:	491e      	ldr	r1, [pc, #120]	@ (800469c <check_food+0xdc>)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3318      	adds	r3, #24
 8004626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = size_of_snake - 1; i > 0; i--) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3b01      	subs	r3, #1
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	dce5      	bgt.n	8004602 <check_food+0x42>
        }

        snake_pos[0][0] = pos_head[0];
 8004636:	4b15      	ldr	r3, [pc, #84]	@ (800468c <check_food+0xcc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	@ (800469c <check_food+0xdc>)
 800463c:	6013      	str	r3, [r2, #0]
        snake_pos[1][0] = pos_head[1];
 800463e:	4b13      	ldr	r3, [pc, #76]	@ (800468c <check_food+0xcc>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	4a16      	ldr	r2, [pc, #88]	@ (800469c <check_food+0xdc>)
 8004644:	6613      	str	r3, [r2, #96]	@ 0x60

        for (int i = 0; i < size_of_snake; i++) {
 8004646:	2300      	movs	r3, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	e014      	b.n	8004676 <check_food+0xb6>
            draw_grid[snake_pos[0][i]][snake_pos[1][i]] = 2;
 800464c:	4a13      	ldr	r2, [pc, #76]	@ (800469c <check_food+0xdc>)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004654:	4911      	ldr	r1, [pc, #68]	@ (800469c <check_food+0xdc>)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	3318      	adds	r3, #24
 800465a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800465e:	480c      	ldr	r0, [pc, #48]	@ (8004690 <check_food+0xd0>)
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	2202      	movs	r2, #2
 800466c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int i = 0; i < size_of_snake; i++) {
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	4b08      	ldr	r3, [pc, #32]	@ (8004698 <check_food+0xd8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	dbe5      	blt.n	800464c <check_food+0x8c>
        }

        spawn_food();
 8004680:	f7ff fd38 	bl	80040f4 <spawn_food>
    }
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000b0c 	.word	0x20000b0c
 8004690:	200002c4 	.word	0x200002c4
 8004694:	20000b14 	.word	0x20000b14
 8004698:	2000001c 	.word	0x2000001c
 800469c:	20000a44 	.word	0x20000a44

080046a0 <timer_init>:

uint16_t flag_timer7 = 0;
uint16_t timer7_counter = 0;
uint16_t timer7_MUL = 0;

void timer_init(){
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80046a4:	4803      	ldr	r0, [pc, #12]	@ (80046b4 <timer_init+0x14>)
 80046a6:	f005 fa33 	bl	8009b10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80046aa:	4803      	ldr	r0, [pc, #12]	@ (80046b8 <timer_init+0x18>)
 80046ac:	f005 f9c8 	bl	8009a40 <HAL_TIM_Base_Start>
}
 80046b0:	bf00      	nop
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	20000be4 	.word	0x20000be4
 80046b8:	20000b9c 	.word	0x20000b9c

080046bc <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80046c6:	4a08      	ldr	r2, [pc, #32]	@ (80046e8 <setTimer2+0x2c>)
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80046cc:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <setTimer2+0x2c>)
 80046ce:	881a      	ldrh	r2, [r3, #0]
 80046d0:	4b06      	ldr	r3, [pc, #24]	@ (80046ec <setTimer2+0x30>)
 80046d2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80046d4:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <setTimer2+0x34>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	801a      	strh	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000b20 	.word	0x20000b20
 80046ec:	20000b1e 	.word	0x20000b1e
 80046f0:	20000b1c 	.word	0x20000b1c

080046f4 <setTimer3>:

void setTimer3(uint16_t duration){
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 80046fe:	4a08      	ldr	r2, [pc, #32]	@ (8004720 <setTimer3+0x2c>)
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004704:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <setTimer3+0x2c>)
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	4b06      	ldr	r3, [pc, #24]	@ (8004724 <setTimer3+0x30>)
 800470a:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 800470c:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <setTimer3+0x34>)
 800470e:	2200      	movs	r2, #0
 8004710:	801a      	strh	r2, [r3, #0]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000b26 	.word	0x20000b26
 8004724:	20000b24 	.word	0x20000b24
 8004728:	20000b22 	.word	0x20000b22

0800472c <setTimer4>:

void setTimer4(uint16_t duration){
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	4603      	mov	r3, r0
 8004734:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8004736:	4a08      	ldr	r2, [pc, #32]	@ (8004758 <setTimer4+0x2c>)
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 800473c:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <setTimer4+0x2c>)
 800473e:	881a      	ldrh	r2, [r3, #0]
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <setTimer4+0x30>)
 8004742:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8004744:	4b06      	ldr	r3, [pc, #24]	@ (8004760 <setTimer4+0x34>)
 8004746:	2200      	movs	r2, #0
 8004748:	801a      	strh	r2, [r3, #0]
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000b2c 	.word	0x20000b2c
 800475c:	20000b2a 	.word	0x20000b2a
 8004760:	20000b28 	.word	0x20000b28

08004764 <setTimer5>:

void setTimer5(uint16_t duration){
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 800476e:	4a08      	ldr	r2, [pc, #32]	@ (8004790 <setTimer5+0x2c>)
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 8004774:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <setTimer5+0x2c>)
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <setTimer5+0x30>)
 800477a:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 800477c:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <setTimer5+0x34>)
 800477e:	2200      	movs	r2, #0
 8004780:	801a      	strh	r2, [r3, #0]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000b32 	.word	0x20000b32
 8004794:	20000b30 	.word	0x20000b30
 8004798:	20000b2e 	.word	0x20000b2e

0800479c <setTimer7>:
	timer6_MUL = duration/TIMER_CYCLE_2;
	timer6_counter = timer6_MUL;
	flag_timer6 = 0;
}

void setTimer7(uint16_t duration){
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
	timer7_MUL = duration/TIMER_CYCLE_2;
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <setTimer7+0x2c>)
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	8013      	strh	r3, [r2, #0]
	timer7_counter = timer7_MUL;
 80047ac:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <setTimer7+0x2c>)
 80047ae:	881a      	ldrh	r2, [r3, #0]
 80047b0:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <setTimer7+0x30>)
 80047b2:	801a      	strh	r2, [r3, #0]
	flag_timer7 = 0;
 80047b4:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <setTimer7+0x34>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	801a      	strh	r2, [r3, #0]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	20000b3e 	.word	0x20000b3e
 80047cc:	20000b3c 	.word	0x20000b3c
 80047d0:	20000b3a 	.word	0x20000b3a

080047d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e4:	d17f      	bne.n	80048e6 <HAL_TIM_PeriodElapsedCallback+0x112>
		if(timer2_counter > 0){
 80047e6:	4b42      	ldr	r3, [pc, #264]	@ (80048f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d010      	beq.n	8004810 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80047ee:	4b40      	ldr	r3, [pc, #256]	@ (80048f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	4b3e      	ldr	r3, [pc, #248]	@ (80048f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80047f8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80047fa:	4b3d      	ldr	r3, [pc, #244]	@ (80048f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004802:	4b3c      	ldr	r3, [pc, #240]	@ (80048f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004804:	2201      	movs	r2, #1
 8004806:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004808:	4b3b      	ldr	r3, [pc, #236]	@ (80048f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	4b38      	ldr	r3, [pc, #224]	@ (80048f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800480e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004810:	4b3a      	ldr	r3, [pc, #232]	@ (80048fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d010      	beq.n	800483a <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004818:	4b38      	ldr	r3, [pc, #224]	@ (80048fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	4b36      	ldr	r3, [pc, #216]	@ (80048fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004822:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8004824:	4b35      	ldr	r3, [pc, #212]	@ (80048fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 800482c:	4b34      	ldr	r3, [pc, #208]	@ (8004900 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800482e:	2201      	movs	r2, #1
 8004830:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004832:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004834:	881a      	ldrh	r2, [r3, #0]
 8004836:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004838:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 800483a:	4b33      	ldr	r3, [pc, #204]	@ (8004908 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d010      	beq.n	8004864 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004842:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800484c:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 800484e:	4b2e      	ldr	r3, [pc, #184]	@ (8004908 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8004856:	4b2d      	ldr	r3, [pc, #180]	@ (800490c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004858:	2201      	movs	r2, #1
 800485a:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 800485c:	4b2c      	ldr	r3, [pc, #176]	@ (8004910 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800485e:	881a      	ldrh	r2, [r3, #0]
 8004860:	4b29      	ldr	r3, [pc, #164]	@ (8004908 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004862:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8004864:	4b2b      	ldr	r3, [pc, #172]	@ (8004914 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004866:	881b      	ldrh	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d010      	beq.n	800488e <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 800486c:	4b29      	ldr	r3, [pc, #164]	@ (8004914 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004876:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0) {
 8004878:	4b26      	ldr	r3, [pc, #152]	@ (8004914 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 8004880:	4b25      	ldr	r3, [pc, #148]	@ (8004918 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004882:	2201      	movs	r2, #1
 8004884:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 8004886:	4b25      	ldr	r3, [pc, #148]	@ (800491c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004888:	881a      	ldrh	r2, [r3, #0]
 800488a:	4b22      	ldr	r3, [pc, #136]	@ (8004914 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800488c:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer6_counter > 0){
 800488e:	4b24      	ldr	r3, [pc, #144]	@ (8004920 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d010      	beq.n	80048b8 <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer6_counter--;
 8004896:	4b22      	ldr	r3, [pc, #136]	@ (8004920 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	4b20      	ldr	r3, [pc, #128]	@ (8004920 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80048a0:	801a      	strh	r2, [r3, #0]
			if(timer6_counter == 0) {
 80048a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004920 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer6 = 1;
 80048aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004924 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	801a      	strh	r2, [r3, #0]
				timer6_counter = timer6_MUL;
 80048b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80048b2:	881a      	ldrh	r2, [r3, #0]
 80048b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004920 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80048b6:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer7_counter > 0){
 80048b8:	4b1c      	ldr	r3, [pc, #112]	@ (800492c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d010      	beq.n	80048e2 <HAL_TIM_PeriodElapsedCallback+0x10e>
			timer7_counter--;
 80048c0:	4b1a      	ldr	r3, [pc, #104]	@ (800492c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	4b18      	ldr	r3, [pc, #96]	@ (800492c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048ca:	801a      	strh	r2, [r3, #0]
			if(timer7_counter == 0) {
 80048cc:	4b17      	ldr	r3, [pc, #92]	@ (800492c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_TIM_PeriodElapsedCallback+0x10e>
				flag_timer7 = 1;
 80048d4:	4b16      	ldr	r3, [pc, #88]	@ (8004930 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	801a      	strh	r2, [r3, #0]
				timer7_counter = timer7_MUL;
 80048da:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80048dc:	881a      	ldrh	r2, [r3, #0]
 80048de:	4b13      	ldr	r3, [pc, #76]	@ (800492c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80048e0:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80048e2:	f7fe fbfd 	bl	80030e0 <led7_Scan>
		//touch_Scan();
	}
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000b1e 	.word	0x20000b1e
 80048f4:	20000b1c 	.word	0x20000b1c
 80048f8:	20000b20 	.word	0x20000b20
 80048fc:	20000b24 	.word	0x20000b24
 8004900:	20000b22 	.word	0x20000b22
 8004904:	20000b26 	.word	0x20000b26
 8004908:	20000b2a 	.word	0x20000b2a
 800490c:	20000b28 	.word	0x20000b28
 8004910:	20000b2c 	.word	0x20000b2c
 8004914:	20000b30 	.word	0x20000b30
 8004918:	20000b2e 	.word	0x20000b2e
 800491c:	20000b32 	.word	0x20000b32
 8004920:	20000b36 	.word	0x20000b36
 8004924:	20000b34 	.word	0x20000b34
 8004928:	20000b38 	.word	0x20000b38
 800492c:	20000b3c 	.word	0x20000b3c
 8004930:	20000b3a 	.word	0x20000b3a
 8004934:	20000b3e 	.word	0x20000b3e

08004938 <delay_us>:

void delay_us (uint16_t us)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <delay_us+0x30>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800494a:	bf00      	nop
 800494c:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <delay_us+0x30>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3f9      	bcc.n	800494c <delay_us+0x14>
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000b9c 	.word	0x20000b9c

0800496c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004970:	4b17      	ldr	r3, [pc, #92]	@ (80049d0 <MX_SPI1_Init+0x64>)
 8004972:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <MX_SPI1_Init+0x68>)
 8004974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004976:	4b16      	ldr	r3, [pc, #88]	@ (80049d0 <MX_SPI1_Init+0x64>)
 8004978:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800497c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800497e:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <MX_SPI1_Init+0x64>)
 8004980:	2200      	movs	r2, #0
 8004982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004984:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <MX_SPI1_Init+0x64>)
 8004986:	2200      	movs	r2, #0
 8004988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800498a:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <MX_SPI1_Init+0x64>)
 800498c:	2200      	movs	r2, #0
 800498e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004990:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <MX_SPI1_Init+0x64>)
 8004992:	2200      	movs	r2, #0
 8004994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004996:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <MX_SPI1_Init+0x64>)
 8004998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800499c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800499e:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <MX_SPI1_Init+0x64>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049a4:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <MX_SPI1_Init+0x64>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049aa:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <MX_SPI1_Init+0x64>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b0:	4b07      	ldr	r3, [pc, #28]	@ (80049d0 <MX_SPI1_Init+0x64>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <MX_SPI1_Init+0x64>)
 80049b8:	220a      	movs	r2, #10
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80049bc:	4804      	ldr	r0, [pc, #16]	@ (80049d0 <MX_SPI1_Init+0x64>)
 80049be:	f004 fa03 	bl	8008dc8 <HAL_SPI_Init>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80049c8:	f7fe fdf2 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20000b40 	.word	0x20000b40
 80049d4:	40013000 	.word	0x40013000

080049d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	@ 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e0:	f107 0314 	add.w	r3, r7, #20
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a19      	ldr	r2, [pc, #100]	@ (8004a5c <HAL_SPI_MspInit+0x84>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d12b      	bne.n	8004a52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <HAL_SPI_MspInit+0x88>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	4a17      	ldr	r2, [pc, #92]	@ (8004a60 <HAL_SPI_MspInit+0x88>)
 8004a04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a0a:	4b15      	ldr	r3, [pc, #84]	@ (8004a60 <HAL_SPI_MspInit+0x88>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	4b11      	ldr	r3, [pc, #68]	@ (8004a60 <HAL_SPI_MspInit+0x88>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	4a10      	ldr	r2, [pc, #64]	@ (8004a60 <HAL_SPI_MspInit+0x88>)
 8004a20:	f043 0302 	orr.w	r3, r3, #2
 8004a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a26:	4b0e      	ldr	r3, [pc, #56]	@ (8004a60 <HAL_SPI_MspInit+0x88>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004a32:	2338      	movs	r3, #56	@ 0x38
 8004a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a36:	2302      	movs	r3, #2
 8004a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a42:	2305      	movs	r3, #5
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a46:	f107 0314 	add.w	r3, r7, #20
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4805      	ldr	r0, [pc, #20]	@ (8004a64 <HAL_SPI_MspInit+0x8c>)
 8004a4e:	f002 fb7b 	bl	8007148 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004a52:	bf00      	nop
 8004a54:	3728      	adds	r7, #40	@ 0x28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40013000 	.word	0x40013000
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40020400 	.word	0x40020400

08004a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
 8004a72:	4b10      	ldr	r3, [pc, #64]	@ (8004ab4 <HAL_MspInit+0x4c>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab4 <HAL_MspInit+0x4c>)
 8004a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <HAL_MspInit+0x4c>)
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	4b09      	ldr	r3, [pc, #36]	@ (8004ab4 <HAL_MspInit+0x4c>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	4a08      	ldr	r2, [pc, #32]	@ (8004ab4 <HAL_MspInit+0x4c>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a9a:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <HAL_MspInit+0x4c>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800

08004ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <NMI_Handler+0x4>

08004ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <HardFault_Handler+0x4>

08004ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004acc:	bf00      	nop
 8004ace:	e7fd      	b.n	8004acc <MemManage_Handler+0x4>

08004ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ad4:	bf00      	nop
 8004ad6:	e7fd      	b.n	8004ad4 <BusFault_Handler+0x4>

08004ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004adc:	bf00      	nop
 8004ade:	e7fd      	b.n	8004adc <UsageFault_Handler+0x4>

08004ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b0e:	f001 fbe7 	bl	80062e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b1c:	4802      	ldr	r0, [pc, #8]	@ (8004b28 <TIM2_IRQHandler+0x10>)
 8004b1e:	f005 f989 	bl	8009e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000be4 	.word	0x20000be4

08004b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b30:	4802      	ldr	r0, [pc, #8]	@ (8004b3c <USART1_IRQHandler+0x10>)
 8004b32:	f006 f8e9 	bl	800ad08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000de0 	.word	0x20000de0

08004b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b44:	4802      	ldr	r0, [pc, #8]	@ (8004b50 <USART2_IRQHandler+0x10>)
 8004b46:	f006 f8df 	bl	800ad08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000e24 	.word	0x20000e24

08004b54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004b58:	4802      	ldr	r0, [pc, #8]	@ (8004b64 <DMA2_Stream0_IRQHandler+0x10>)
 8004b5a:	f002 f8b9 	bl	8006cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	2000014c 	.word	0x2000014c

08004b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
	return 1;
 8004b6c:	2301      	movs	r3, #1
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <_kill>:

int _kill(int pid, int sig)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004b82:	f007 fb6d 	bl	800c260 <__errno>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2216      	movs	r2, #22
 8004b8a:	601a      	str	r2, [r3, #0]
	return -1;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_exit>:

void _exit (int status)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ffe7 	bl	8004b78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004baa:	bf00      	nop
 8004bac:	e7fd      	b.n	8004baa <_exit+0x12>

08004bae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	60b9      	str	r1, [r7, #8]
 8004bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
 8004bbe:	e00a      	b.n	8004bd6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004bc0:	f3af 8000 	nop.w
 8004bc4:	4601      	mov	r1, r0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	60ba      	str	r2, [r7, #8]
 8004bcc:	b2ca      	uxtb	r2, r1
 8004bce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	dbf0      	blt.n	8004bc0 <_read+0x12>
	}

return len;
 8004bde:	687b      	ldr	r3, [r7, #4]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e009      	b.n	8004c0e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	60ba      	str	r2, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	dbf1      	blt.n	8004bfa <_write+0x12>
	}
	return len;
 8004c16:	687b      	ldr	r3, [r7, #4]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_close>:

int _close(int file)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	return -1;
 8004c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c48:	605a      	str	r2, [r3, #4]
	return 0;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <_isatty>:

int _isatty(int file)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	return 1;
 8004c60:	2301      	movs	r3, #1
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
	return 0;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <_sbrk+0x5c>)
 8004c92:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <_sbrk+0x60>)
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c9c:	4b13      	ldr	r3, [pc, #76]	@ (8004cec <_sbrk+0x64>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <_sbrk+0x64>)
 8004ca6:	4a12      	ldr	r2, [pc, #72]	@ (8004cf0 <_sbrk+0x68>)
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004caa:	4b10      	ldr	r3, [pc, #64]	@ (8004cec <_sbrk+0x64>)
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d207      	bcs.n	8004cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cb8:	f007 fad2 	bl	800c260 <__errno>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	220c      	movs	r2, #12
 8004cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc6:	e009      	b.n	8004cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cc8:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <_sbrk+0x64>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cce:	4b07      	ldr	r3, [pc, #28]	@ (8004cec <_sbrk+0x64>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	4a05      	ldr	r2, [pc, #20]	@ (8004cec <_sbrk+0x64>)
 8004cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	20020000 	.word	0x20020000
 8004ce8:	00000400 	.word	0x00000400
 8004cec:	20000b98 	.word	0x20000b98
 8004cf0:	20000fb8 	.word	0x20000fb8

08004cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004cf8:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <SystemInit+0x20>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfe:	4a05      	ldr	r2, [pc, #20]	@ (8004d14 <SystemInit+0x20>)
 8004d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d08:	bf00      	nop
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	605a      	str	r2, [r3, #4]
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d2c:	463b      	mov	r3, r7
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d34:	4b1e      	ldr	r3, [pc, #120]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d36:	4a1f      	ldr	r2, [pc, #124]	@ (8004db4 <MX_TIM1_Init+0x9c>)
 8004d38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d3c:	2253      	movs	r2, #83	@ 0x53
 8004d3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d40:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004d46:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d4e:	4b18      	ldr	r3, [pc, #96]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d54:	4b16      	ldr	r3, [pc, #88]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d5a:	4b15      	ldr	r3, [pc, #84]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004d60:	4813      	ldr	r0, [pc, #76]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d62:	f004 fe1d 	bl	80099a0 <HAL_TIM_Base_Init>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004d6c:	f7fe fc20 	bl	80035b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004d76:	f107 0308 	add.w	r3, r7, #8
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	480c      	ldr	r0, [pc, #48]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d7e:	f005 fa23 	bl	800a1c8 <HAL_TIM_ConfigClockSource>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004d88:	f7fe fc12 	bl	80035b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004d94:	463b      	mov	r3, r7
 8004d96:	4619      	mov	r1, r3
 8004d98:	4805      	ldr	r0, [pc, #20]	@ (8004db0 <MX_TIM1_Init+0x98>)
 8004d9a:	f005 fe15 	bl	800a9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004da4:	f7fe fc04 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004da8:	bf00      	nop
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	20000b9c 	.word	0x20000b9c
 8004db4:	40010000 	.word	0x40010000

08004db8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004dbe:	f107 0308 	add.w	r3, r7, #8
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	605a      	str	r2, [r3, #4]
 8004dc8:	609a      	str	r2, [r3, #8]
 8004dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dcc:	463b      	mov	r3, r7
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004dd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004dde:	f240 3247 	movw	r2, #839	@ 0x347
 8004de2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004de4:	4b19      	ldr	r3, [pc, #100]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004dea:	4b18      	ldr	r3, [pc, #96]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004dec:	2263      	movs	r2, #99	@ 0x63
 8004dee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004df0:	4b16      	ldr	r3, [pc, #88]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004df6:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004dfc:	4813      	ldr	r0, [pc, #76]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004dfe:	f004 fdcf 	bl	80099a0 <HAL_TIM_Base_Init>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004e08:	f7fe fbd2 	bl	80035b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	4619      	mov	r1, r3
 8004e18:	480c      	ldr	r0, [pc, #48]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004e1a:	f005 f9d5 	bl	800a1c8 <HAL_TIM_ConfigClockSource>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004e24:	f7fe fbc4 	bl	80035b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e30:	463b      	mov	r3, r7
 8004e32:	4619      	mov	r1, r3
 8004e34:	4805      	ldr	r0, [pc, #20]	@ (8004e4c <MX_TIM2_Init+0x94>)
 8004e36:	f005 fdc7 	bl	800a9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004e40:	f7fe fbb6 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e44:	bf00      	nop
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000be4 	.word	0x20000be4

08004e50 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	605a      	str	r2, [r3, #4]
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	611a      	str	r2, [r3, #16]
 8004e64:	615a      	str	r2, [r3, #20]
 8004e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004e68:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ee8 <MX_TIM13_Init+0x98>)
 8004e6c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004e70:	f240 3247 	movw	r2, #839	@ 0x347
 8004e74:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e76:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8004e7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004e7e:	2263      	movs	r2, #99	@ 0x63
 8004e80:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e82:	4b18      	ldr	r3, [pc, #96]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e88:	4b16      	ldr	r3, [pc, #88]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004e8e:	4815      	ldr	r0, [pc, #84]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004e90:	f004 fd86 	bl	80099a0 <HAL_TIM_Base_Init>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8004e9a:	f7fe fb89 	bl	80035b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004e9e:	4811      	ldr	r0, [pc, #68]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004ea0:	f004 fea6 	bl	8009bf0 <HAL_TIM_PWM_Init>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8004eaa:	f7fe fb81 	bl	80035b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004eae:	2360      	movs	r3, #96	@ 0x60
 8004eb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4807      	ldr	r0, [pc, #28]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004ec6:	f005 f8bd 	bl	800a044 <HAL_TIM_PWM_ConfigChannel>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8004ed0:	f7fe fb6e 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004ed4:	4803      	ldr	r0, [pc, #12]	@ (8004ee4 <MX_TIM13_Init+0x94>)
 8004ed6:	f000 f85b 	bl	8004f90 <HAL_TIM_MspPostInit>

}
 8004eda:	bf00      	nop
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000c2c 	.word	0x20000c2c
 8004ee8:	40001c00 	.word	0x40001c00

08004eec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a22      	ldr	r2, [pc, #136]	@ (8004f84 <HAL_TIM_Base_MspInit+0x98>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	4b21      	ldr	r3, [pc, #132]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f06:	4a20      	ldr	r2, [pc, #128]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8004f1a:	e02e      	b.n	8004f7a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f24:	d116      	bne.n	8004f54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	4b17      	ldr	r3, [pc, #92]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	4a16      	ldr	r2, [pc, #88]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f36:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f42:	2200      	movs	r2, #0
 8004f44:	2100      	movs	r1, #0
 8004f46:	201c      	movs	r0, #28
 8004f48:	f001 fd4b 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f4c:	201c      	movs	r0, #28
 8004f4e:	f001 fd64 	bl	8006a1a <HAL_NVIC_EnableIRQ>
}
 8004f52:	e012      	b.n	8004f7a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a0c      	ldr	r2, [pc, #48]	@ (8004f8c <HAL_TIM_Base_MspInit+0xa0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	4b09      	ldr	r3, [pc, #36]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	4a08      	ldr	r2, [pc, #32]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f6e:	4b06      	ldr	r3, [pc, #24]	@ (8004f88 <HAL_TIM_Base_MspInit+0x9c>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
}
 8004f7a:	bf00      	nop
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40001c00 	.word	0x40001c00

08004f90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f98:	f107 030c 	add.w	r3, r7, #12
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	60da      	str	r2, [r3, #12]
 8004fa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a12      	ldr	r2, [pc, #72]	@ (8004ff8 <HAL_TIM_MspPostInit+0x68>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d11e      	bne.n	8004ff0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
 8004fb6:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <HAL_TIM_MspPostInit+0x6c>)
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	4a10      	ldr	r2, [pc, #64]	@ (8004ffc <HAL_TIM_MspPostInit+0x6c>)
 8004fbc:	f043 0320 	orr.w	r3, r3, #32
 8004fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <HAL_TIM_MspPostInit+0x6c>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	60bb      	str	r3, [r7, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004fe0:	2309      	movs	r3, #9
 8004fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fe4:	f107 030c 	add.w	r3, r7, #12
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4805      	ldr	r0, [pc, #20]	@ (8005000 <HAL_TIM_MspPostInit+0x70>)
 8004fec:	f002 f8ac 	bl	8007148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8004ff0:	bf00      	nop
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	40001c00 	.word	0x40001c00
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40021400 	.word	0x40021400

08005004 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	e025      	b.n	8005064 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501c:	2b00      	cmp	r3, #0
 800501e:	da06      	bge.n	800502e <TP_Write_Byte+0x2a>
 8005020:	2201      	movs	r2, #1
 8005022:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005026:	4813      	ldr	r0, [pc, #76]	@ (8005074 <TP_Write_Byte+0x70>)
 8005028:	f002 fa42 	bl	80074b0 <HAL_GPIO_WritePin>
 800502c:	e005      	b.n	800503a <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800502e:	2200      	movs	r2, #0
 8005030:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005034:	480f      	ldr	r0, [pc, #60]	@ (8005074 <TP_Write_Byte+0x70>)
 8005036:	f002 fa3b 	bl	80074b0 <HAL_GPIO_WritePin>
		num<<=1;
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005040:	2200      	movs	r2, #0
 8005042:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005046:	480c      	ldr	r0, [pc, #48]	@ (8005078 <TP_Write_Byte+0x74>)
 8005048:	f002 fa32 	bl	80074b0 <HAL_GPIO_WritePin>
		delay_us(1);
 800504c:	2001      	movs	r0, #1
 800504e:	f7ff fc73 	bl	8004938 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005052:	2201      	movs	r2, #1
 8005054:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005058:	4807      	ldr	r0, [pc, #28]	@ (8005078 <TP_Write_Byte+0x74>)
 800505a:	f002 fa29 	bl	80074b0 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	3301      	adds	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b07      	cmp	r3, #7
 8005068:	d9d6      	bls.n	8005018 <TP_Write_Byte+0x14>
	}
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40020800 	.word	0x40020800
 8005078:	40021800 	.word	0x40021800

0800507c <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	4603      	mov	r3, r0
 8005084:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 800508a:	2300      	movs	r3, #0
 800508c:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800508e:	2200      	movs	r2, #0
 8005090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005094:	482f      	ldr	r0, [pc, #188]	@ (8005154 <TP_Read_AD+0xd8>)
 8005096:	f002 fa0b 	bl	80074b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800509a:	2200      	movs	r2, #0
 800509c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80050a0:	482d      	ldr	r0, [pc, #180]	@ (8005158 <TP_Read_AD+0xdc>)
 80050a2:	f002 fa05 	bl	80074b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80050a6:	2200      	movs	r2, #0
 80050a8:	2180      	movs	r1, #128	@ 0x80
 80050aa:	482a      	ldr	r0, [pc, #168]	@ (8005154 <TP_Read_AD+0xd8>)
 80050ac:	f002 fa00 	bl	80074b0 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff ffa6 	bl	8005004 <TP_Write_Byte>
	delay_us(6);
 80050b8:	2006      	movs	r0, #6
 80050ba:	f7ff fc3d 	bl	8004938 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80050be:	2200      	movs	r2, #0
 80050c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050c4:	4823      	ldr	r0, [pc, #140]	@ (8005154 <TP_Read_AD+0xd8>)
 80050c6:	f002 f9f3 	bl	80074b0 <HAL_GPIO_WritePin>
	delay_us(1);
 80050ca:	2001      	movs	r0, #1
 80050cc:	f7ff fc34 	bl	8004938 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80050d0:	2201      	movs	r2, #1
 80050d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050d6:	481f      	ldr	r0, [pc, #124]	@ (8005154 <TP_Read_AD+0xd8>)
 80050d8:	f002 f9ea 	bl	80074b0 <HAL_GPIO_WritePin>
	delay_us(1);
 80050dc:	2001      	movs	r0, #1
 80050de:	f7ff fc2b 	bl	8004938 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050e8:	481a      	ldr	r0, [pc, #104]	@ (8005154 <TP_Read_AD+0xd8>)
 80050ea:	f002 f9e1 	bl	80074b0 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
 80050f2:	e01f      	b.n	8005134 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 80050f4:	89bb      	ldrh	r3, [r7, #12]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80050fa:	2200      	movs	r2, #0
 80050fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005100:	4814      	ldr	r0, [pc, #80]	@ (8005154 <TP_Read_AD+0xd8>)
 8005102:	f002 f9d5 	bl	80074b0 <HAL_GPIO_WritePin>
		delay_us(1);
 8005106:	2001      	movs	r0, #1
 8005108:	f7ff fc16 	bl	8004938 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800510c:	2201      	movs	r2, #1
 800510e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005112:	4810      	ldr	r0, [pc, #64]	@ (8005154 <TP_Read_AD+0xd8>)
 8005114:	f002 f9cc 	bl	80074b0 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800511c:	480e      	ldr	r0, [pc, #56]	@ (8005158 <TP_Read_AD+0xdc>)
 800511e:	f002 f9af 	bl	8007480 <HAL_GPIO_ReadPin>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <TP_Read_AD+0xb2>
 8005128:	89bb      	ldrh	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	3301      	adds	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b0f      	cmp	r3, #15
 8005138:	d9dc      	bls.n	80050f4 <TP_Read_AD+0x78>
	}
	Num>>=4;
 800513a:	89bb      	ldrh	r3, [r7, #12]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8005140:	2201      	movs	r2, #1
 8005142:	2180      	movs	r1, #128	@ 0x80
 8005144:	4803      	ldr	r0, [pc, #12]	@ (8005154 <TP_Read_AD+0xd8>)
 8005146:	f002 f9b3 	bl	80074b0 <HAL_GPIO_WritePin>
	return(Num);
 800514a:	89bb      	ldrh	r3, [r7, #12]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40021800 	.word	0x40021800
 8005158:	40020800 	.word	0x40020800

0800515c <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 800515c:	b590      	push	{r4, r7, lr}
 800515e:	b089      	sub	sp, #36	@ 0x24
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8005166:	2300      	movs	r3, #0
 8005168:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 800516a:	2300      	movs	r3, #0
 800516c:	83fb      	strh	r3, [r7, #30]
 800516e:	e00e      	b.n	800518e <TP_Read_XOY+0x32>
 8005170:	8bfc      	ldrh	r4, [r7, #30]
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff ff81 	bl	800507c <TP_Read_AD>
 800517a:	4603      	mov	r3, r0
 800517c:	461a      	mov	r2, r3
 800517e:	0063      	lsls	r3, r4, #1
 8005180:	3320      	adds	r3, #32
 8005182:	443b      	add	r3, r7
 8005184:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005188:	8bfb      	ldrh	r3, [r7, #30]
 800518a:	3301      	adds	r3, #1
 800518c:	83fb      	strh	r3, [r7, #30]
 800518e:	8bfb      	ldrh	r3, [r7, #30]
 8005190:	2b04      	cmp	r3, #4
 8005192:	d9ed      	bls.n	8005170 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8005194:	2300      	movs	r3, #0
 8005196:	83fb      	strh	r3, [r7, #30]
 8005198:	e035      	b.n	8005206 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 800519a:	8bfb      	ldrh	r3, [r7, #30]
 800519c:	3301      	adds	r3, #1
 800519e:	83bb      	strh	r3, [r7, #28]
 80051a0:	e02b      	b.n	80051fa <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 80051a2:	8bfb      	ldrh	r3, [r7, #30]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	3320      	adds	r3, #32
 80051a8:	443b      	add	r3, r7
 80051aa:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80051ae:	8bbb      	ldrh	r3, [r7, #28]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	3320      	adds	r3, #32
 80051b4:	443b      	add	r3, r7
 80051b6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d91a      	bls.n	80051f4 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 80051be:	8bfb      	ldrh	r3, [r7, #30]
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	3320      	adds	r3, #32
 80051c4:	443b      	add	r3, r7
 80051c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80051ca:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80051cc:	8bbb      	ldrh	r3, [r7, #28]
 80051ce:	8bfa      	ldrh	r2, [r7, #30]
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	3320      	adds	r3, #32
 80051d4:	443b      	add	r3, r7
 80051d6:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80051da:	0053      	lsls	r3, r2, #1
 80051dc:	3320      	adds	r3, #32
 80051de:	443b      	add	r3, r7
 80051e0:	460a      	mov	r2, r1
 80051e2:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 80051e6:	8bbb      	ldrh	r3, [r7, #28]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	3320      	adds	r3, #32
 80051ec:	443b      	add	r3, r7
 80051ee:	8b3a      	ldrh	r2, [r7, #24]
 80051f0:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 80051f4:	8bbb      	ldrh	r3, [r7, #28]
 80051f6:	3301      	adds	r3, #1
 80051f8:	83bb      	strh	r3, [r7, #28]
 80051fa:	8bbb      	ldrh	r3, [r7, #28]
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d9d0      	bls.n	80051a2 <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 8005200:	8bfb      	ldrh	r3, [r7, #30]
 8005202:	3301      	adds	r3, #1
 8005204:	83fb      	strh	r3, [r7, #30]
 8005206:	8bfb      	ldrh	r3, [r7, #30]
 8005208:	2b03      	cmp	r3, #3
 800520a:	d9c6      	bls.n	800519a <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 800520c:	2300      	movs	r3, #0
 800520e:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8005210:	2301      	movs	r3, #1
 8005212:	83fb      	strh	r3, [r7, #30]
 8005214:	e00b      	b.n	800522e <TP_Read_XOY+0xd2>
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	3320      	adds	r3, #32
 800521c:	443b      	add	r3, r7
 800521e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005222:	8b7b      	ldrh	r3, [r7, #26]
 8005224:	4413      	add	r3, r2
 8005226:	837b      	strh	r3, [r7, #26]
 8005228:	8bfb      	ldrh	r3, [r7, #30]
 800522a:	3301      	adds	r3, #1
 800522c:	83fb      	strh	r3, [r7, #30]
 800522e:	8bfb      	ldrh	r3, [r7, #30]
 8005230:	2b03      	cmp	r3, #3
 8005232:	d9f0      	bls.n	8005216 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005234:	8b7b      	ldrh	r3, [r7, #26]
 8005236:	4a05      	ldr	r2, [pc, #20]	@ (800524c <TP_Read_XOY+0xf0>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	833b      	strh	r3, [r7, #24]
	return temp;
 8005240:	8b3b      	ldrh	r3, [r7, #24]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3724      	adds	r7, #36	@ 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd90      	pop	{r4, r7, pc}
 800524a:	bf00      	nop
 800524c:	aaaaaaab 	.word	0xaaaaaaab

08005250 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 800525a:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <TP_Read_XY+0x3c>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff ff7c 	bl	800515c <TP_Read_XOY>
 8005264:	4603      	mov	r3, r0
 8005266:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005268:	4b09      	ldr	r3, [pc, #36]	@ (8005290 <TP_Read_XY+0x40>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff75 	bl	800515c <TP_Read_XOY>
 8005272:	4603      	mov	r3, r0
 8005274:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	89fa      	ldrh	r2, [r7, #14]
 800527a:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	89ba      	ldrh	r2, [r7, #12]
 8005280:	801a      	strh	r2, [r3, #0]
	return 1;
 8005282:	2301      	movs	r3, #1
}
 8005284:	4618      	mov	r0, r3
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20000070 	.word	0x20000070
 8005290:	20000071 	.word	0x20000071

08005294 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 800529e:	f107 0212 	add.w	r2, r7, #18
 80052a2:	f107 0314 	add.w	r3, r7, #20
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ffd1 	bl	8005250 <TP_Read_XY>
 80052ae:	4603      	mov	r3, r0
 80052b0:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <TP_Read_XY2+0x28>
 80052b8:	2300      	movs	r3, #0
 80052ba:	e049      	b.n	8005350 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 80052bc:	f107 020e 	add.w	r2, r7, #14
 80052c0:	f107 0310 	add.w	r3, r7, #16
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ffc2 	bl	8005250 <TP_Read_XY>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <TP_Read_XY2+0x46>
 80052d6:	2300      	movs	r3, #0
 80052d8:	e03a      	b.n	8005350 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 80052da:	8a3a      	ldrh	r2, [r7, #16]
 80052dc:	8abb      	ldrh	r3, [r7, #20]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d804      	bhi.n	80052ec <TP_Read_XY2+0x58>
 80052e2:	8a3b      	ldrh	r3, [r7, #16]
 80052e4:	3363      	adds	r3, #99	@ 0x63
 80052e6:	8aba      	ldrh	r2, [r7, #20]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	da08      	bge.n	80052fe <TP_Read_XY2+0x6a>
 80052ec:	8aba      	ldrh	r2, [r7, #20]
 80052ee:	8a3b      	ldrh	r3, [r7, #16]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d82c      	bhi.n	800534e <TP_Read_XY2+0xba>
 80052f4:	8abb      	ldrh	r3, [r7, #20]
 80052f6:	3363      	adds	r3, #99	@ 0x63
 80052f8:	8a3a      	ldrh	r2, [r7, #16]
 80052fa:	4293      	cmp	r3, r2
 80052fc:	db27      	blt.n	800534e <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 80052fe:	89fa      	ldrh	r2, [r7, #14]
 8005300:	8a7b      	ldrh	r3, [r7, #18]
 8005302:	429a      	cmp	r2, r3
 8005304:	d804      	bhi.n	8005310 <TP_Read_XY2+0x7c>
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	3363      	adds	r3, #99	@ 0x63
 800530a:	8a7a      	ldrh	r2, [r7, #18]
 800530c:	4293      	cmp	r3, r2
 800530e:	da08      	bge.n	8005322 <TP_Read_XY2+0x8e>
 8005310:	8a7a      	ldrh	r2, [r7, #18]
 8005312:	89fb      	ldrh	r3, [r7, #14]
 8005314:	429a      	cmp	r2, r3
 8005316:	d81a      	bhi.n	800534e <TP_Read_XY2+0xba>
 8005318:	8a7b      	ldrh	r3, [r7, #18]
 800531a:	3363      	adds	r3, #99	@ 0x63
 800531c:	89fa      	ldrh	r2, [r7, #14]
 800531e:	4293      	cmp	r3, r2
 8005320:	db15      	blt.n	800534e <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8005322:	8abb      	ldrh	r3, [r7, #20]
 8005324:	461a      	mov	r2, r3
 8005326:	8a3b      	ldrh	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	0fda      	lsrs	r2, r3, #31
 800532c:	4413      	add	r3, r2
 800532e:	105b      	asrs	r3, r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005336:	8a7b      	ldrh	r3, [r7, #18]
 8005338:	461a      	mov	r2, r3
 800533a:	89fb      	ldrh	r3, [r7, #14]
 800533c:	4413      	add	r3, r2
 800533e:	0fda      	lsrs	r2, r3, #31
 8005340:	4413      	add	r3, r2
 8005342:	105b      	asrs	r3, r3, #1
 8005344:	b29a      	uxth	r2, r3
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	801a      	strh	r2, [r3, #0]
		return 1;
 800534a:	2301      	movs	r3, #1
 800534c:	e000      	b.n	8005350 <TP_Read_XY2+0xbc>
	}else return 0;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b085      	sub	sp, #20
 800535c:	af02      	add	r7, sp, #8
 800535e:	4603      	mov	r3, r0
 8005360:	80fb      	strh	r3, [r7, #6]
 8005362:	460b      	mov	r3, r1
 8005364:	80bb      	strh	r3, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	3b0c      	subs	r3, #12
 800536e:	b298      	uxth	r0, r3
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	330d      	adds	r3, #13
 8005374:	b29a      	uxth	r2, r3
 8005376:	88bc      	ldrh	r4, [r7, #4]
 8005378:	88b9      	ldrh	r1, [r7, #4]
 800537a:	887b      	ldrh	r3, [r7, #2]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	4623      	mov	r3, r4
 8005380:	f7fd f995 	bl	80026ae <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8005384:	88bb      	ldrh	r3, [r7, #4]
 8005386:	3b0c      	subs	r3, #12
 8005388:	b299      	uxth	r1, r3
 800538a:	88bb      	ldrh	r3, [r7, #4]
 800538c:	330d      	adds	r3, #13
 800538e:	b29c      	uxth	r4, r3
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	88f8      	ldrh	r0, [r7, #6]
 8005394:	887b      	ldrh	r3, [r7, #2]
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	4623      	mov	r3, r4
 800539a:	f7fd f988 	bl	80026ae <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	3301      	adds	r3, #1
 80053a2:	b298      	uxth	r0, r3
 80053a4:	88bb      	ldrh	r3, [r7, #4]
 80053a6:	3301      	adds	r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	887a      	ldrh	r2, [r7, #2]
 80053ac:	4619      	mov	r1, r3
 80053ae:	f7fd f967 	bl	8002680 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b298      	uxth	r0, r3
 80053b8:	88bb      	ldrh	r3, [r7, #4]
 80053ba:	3301      	adds	r3, #1
 80053bc:	b29b      	uxth	r3, r3
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	4619      	mov	r1, r3
 80053c2:	f7fd f95d 	bl	8002680 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	3301      	adds	r3, #1
 80053ca:	b298      	uxth	r0, r3
 80053cc:	88bb      	ldrh	r3, [r7, #4]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	887a      	ldrh	r2, [r7, #2]
 80053d4:	4619      	mov	r1, r3
 80053d6:	f7fd f953 	bl	8002680 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	3b01      	subs	r3, #1
 80053de:	b298      	uxth	r0, r3
 80053e0:	88bb      	ldrh	r3, [r7, #4]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	887a      	ldrh	r2, [r7, #2]
 80053e8:	4619      	mov	r1, r3
 80053ea:	f7fd f949 	bl	8002680 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 80053ee:	88f8      	ldrh	r0, [r7, #6]
 80053f0:	88b9      	ldrh	r1, [r7, #4]
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	2300      	movs	r3, #0
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	2306      	movs	r3, #6
 80053fa:	f7fd fd56 	bl	8002eaa <lcd_DrawCircle>
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	bd90      	pop	{r4, r7, pc}
	...

08005408 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8005412:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005416:	4843      	ldr	r0, [pc, #268]	@ (8005524 <TP_Scan+0x11c>)
 8005418:	f002 f832 	bl	8007480 <HAL_GPIO_ReadPin>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d157      	bne.n	80054d2 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <TP_Scan+0x2a>
 8005428:	493f      	ldr	r1, [pc, #252]	@ (8005528 <TP_Scan+0x120>)
 800542a:	4840      	ldr	r0, [pc, #256]	@ (800552c <TP_Scan+0x124>)
 800542c:	f7ff ff32 	bl	8005294 <TP_Read_XY2>
 8005430:	e03c      	b.n	80054ac <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8005432:	493d      	ldr	r1, [pc, #244]	@ (8005528 <TP_Scan+0x120>)
 8005434:	483d      	ldr	r0, [pc, #244]	@ (800552c <TP_Scan+0x124>)
 8005436:	f7ff ff2d 	bl	8005294 <TP_Read_XY2>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d035      	beq.n	80054ac <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8005440:	4b3b      	ldr	r3, [pc, #236]	@ (8005530 <TP_Scan+0x128>)
 8005442:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005446:	4b3a      	ldr	r3, [pc, #232]	@ (8005530 <TP_Scan+0x128>)
 8005448:	899b      	ldrh	r3, [r3, #12]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005452:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005456:	4b36      	ldr	r3, [pc, #216]	@ (8005530 <TP_Scan+0x128>)
 8005458:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800545c:	ee07 3a90 	vmov	s15, r3
 8005460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546c:	ee17 3a90 	vmov	r3, s15
 8005470:	b29a      	uxth	r2, r3
 8005472:	4b2f      	ldr	r3, [pc, #188]	@ (8005530 <TP_Scan+0x128>)
 8005474:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8005476:	4b2e      	ldr	r3, [pc, #184]	@ (8005530 <TP_Scan+0x128>)
 8005478:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800547c:	4b2c      	ldr	r3, [pc, #176]	@ (8005530 <TP_Scan+0x128>)
 800547e:	8adb      	ldrh	r3, [r3, #22]
 8005480:	ee07 3a90 	vmov	s15, r3
 8005484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800548c:	4b28      	ldr	r3, [pc, #160]	@ (8005530 <TP_Scan+0x128>)
 800548e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8005492:	ee07 3a90 	vmov	s15, r3
 8005496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800549a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800549e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a2:	ee17 3a90 	vmov	r3, s15
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	4b21      	ldr	r3, [pc, #132]	@ (8005530 <TP_Scan+0x128>)
 80054aa:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 80054ac:	4b20      	ldr	r3, [pc, #128]	@ (8005530 <TP_Scan+0x128>)
 80054ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	db2a      	blt.n	800550e <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 80054b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005530 <TP_Scan+0x128>)
 80054ba:	22c0      	movs	r2, #192	@ 0xc0
 80054bc:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80054c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005530 <TP_Scan+0x128>)
 80054c2:	899a      	ldrh	r2, [r3, #12]
 80054c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005530 <TP_Scan+0x128>)
 80054c6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <TP_Scan+0x128>)
 80054ca:	8ada      	ldrh	r2, [r3, #22]
 80054cc:	4b18      	ldr	r3, [pc, #96]	@ (8005530 <TP_Scan+0x128>)
 80054ce:	83da      	strh	r2, [r3, #30]
 80054d0:	e01d      	b.n	800550e <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80054d2:	4b17      	ldr	r3, [pc, #92]	@ (8005530 <TP_Scan+0x128>)
 80054d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054d8:	b25b      	sxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da09      	bge.n	80054f2 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 80054de:	4b14      	ldr	r3, [pc, #80]	@ (8005530 <TP_Scan+0x128>)
 80054e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <TP_Scan+0x128>)
 80054ec:	f883 2020 	strb.w	r2, [r3, #32]
 80054f0:	e00d      	b.n	800550e <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 80054f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005530 <TP_Scan+0x128>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 80054f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005530 <TP_Scan+0x128>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 80054fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005530 <TP_Scan+0x128>)
 8005500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005504:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005506:	4b0a      	ldr	r3, [pc, #40]	@ (8005530 <TP_Scan+0x128>)
 8005508:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800550c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800550e:	4b08      	ldr	r3, [pc, #32]	@ (8005530 <TP_Scan+0x128>)
 8005510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005514:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005518:	b2db      	uxtb	r3, r3
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40020800 	.word	0x40020800
 8005528:	20000052 	.word	0x20000052
 800552c:	20000048 	.word	0x20000048
 8005530:	2000003c 	.word	0x2000003c

08005534 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005538:	220e      	movs	r2, #14
 800553a:	4905      	ldr	r1, [pc, #20]	@ (8005550 <TP_Save_Adjdata+0x1c>)
 800553c:	2000      	movs	r0, #0
 800553e:	f7fb fe3b 	bl	80011b8 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8005542:	2100      	movs	r1, #0
 8005544:	200e      	movs	r0, #14
 8005546:	f7fb fdd7 	bl	80010f8 <at24c_WriteOneByte>
}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000060 	.word	0x20000060

08005554 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800555e:	200e      	movs	r0, #14
 8005560:	f7fb fdae 	bl	80010c0 <at24c_ReadOneByte>
 8005564:	4603      	mov	r3, r0
 8005566:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800556e:	220e      	movs	r2, #14
 8005570:	4905      	ldr	r1, [pc, #20]	@ (8005588 <TP_Get_Adjdata+0x34>)
 8005572:	2000      	movs	r0, #0
 8005574:	f7fb fe01 	bl	800117a <at24c_Read>
		return 1;
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <TP_Get_Adjdata+0x2a>
	}
	return 0;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000060 	.word	0x20000060
 800558c:	00000000 	.word	0x00000000

08005590 <touch_Adjust>:


void touch_Adjust(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	@ 0x38
 8005594:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80055a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005720 <touch_Adjust+0x190>)
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	4b5e      	ldr	r3, [pc, #376]	@ (8005720 <touch_Adjust+0x190>)
 80055a8:	885b      	ldrh	r3, [r3, #2]
 80055aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80055ae:	9100      	str	r1, [sp, #0]
 80055b0:	2100      	movs	r1, #0
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7fd f82e 	bl	8002614 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 80055b8:	2300      	movs	r3, #0
 80055ba:	9302      	str	r3, [sp, #8]
 80055bc:	2310      	movs	r3, #16
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80055ca:	4a56      	ldr	r2, [pc, #344]	@ (8005724 <touch_Adjust+0x194>)
 80055cc:	2128      	movs	r1, #40	@ 0x28
 80055ce:	2005      	movs	r0, #5
 80055d0:	f7fd fcd8 	bl	8002f84 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80055d4:	2300      	movs	r3, #0
 80055d6:	9302      	str	r3, [sp, #8]
 80055d8:	2310      	movs	r3, #16
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80055e6:	4a50      	ldr	r2, [pc, #320]	@ (8005728 <touch_Adjust+0x198>)
 80055e8:	2141      	movs	r1, #65	@ 0x41
 80055ea:	2005      	movs	r0, #5
 80055ec:	f7fd fcca 	bl	8002f84 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 80055f0:	2300      	movs	r3, #0
 80055f2:	9302      	str	r3, [sp, #8]
 80055f4:	2310      	movs	r3, #16
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005602:	4a4a      	ldr	r2, [pc, #296]	@ (800572c <touch_Adjust+0x19c>)
 8005604:	215a      	movs	r1, #90	@ 0x5a
 8005606:	2005      	movs	r0, #5
 8005608:	f7fd fcbc 	bl	8002f84 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800560c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005610:	2114      	movs	r1, #20
 8005612:	2014      	movs	r0, #20
 8005614:	f7ff fea0 	bl	8005358 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005618:	4b45      	ldr	r3, [pc, #276]	@ (8005730 <touch_Adjust+0x1a0>)
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005620:	4b43      	ldr	r3, [pc, #268]	@ (8005730 <touch_Adjust+0x1a0>)
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 8005628:	2032      	movs	r0, #50	@ 0x32
 800562a:	f000 fe79 	bl	8006320 <HAL_Delay>
		tp_dev.scan(1);
 800562e:	4b40      	ldr	r3, [pc, #256]	@ (8005730 <touch_Adjust+0x1a0>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2001      	movs	r0, #1
 8005634:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8005636:	4b3e      	ldr	r3, [pc, #248]	@ (8005730 <touch_Adjust+0x1a0>)
 8005638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800563c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005640:	2b40      	cmp	r3, #64	@ 0x40
 8005642:	d1f1      	bne.n	8005628 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 8005644:	4b3a      	ldr	r3, [pc, #232]	@ (8005730 <touch_Adjust+0x1a0>)
 8005646:	f893 3020 	ldrb.w	r3, [r3, #32]
 800564a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800564e:	b2da      	uxtb	r2, r3
 8005650:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <touch_Adjust+0x1a0>)
 8005652:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 8005656:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800565a:	4a35      	ldr	r2, [pc, #212]	@ (8005730 <touch_Adjust+0x1a0>)
 800565c:	8992      	ldrh	r2, [r2, #12]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	3328      	adds	r3, #40	@ 0x28
 8005662:	443b      	add	r3, r7
 8005664:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8005668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800566c:	4a30      	ldr	r2, [pc, #192]	@ (8005730 <touch_Adjust+0x1a0>)
 800566e:	8ad2      	ldrh	r2, [r2, #22]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	3328      	adds	r3, #40	@ 0x28
 8005674:	443b      	add	r3, r7
 8005676:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 800567a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800567e:	3301      	adds	r3, #1
 8005680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 8005684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005688:	3b01      	subs	r3, #1
 800568a:	2b03      	cmp	r3, #3
 800568c:	d8cc      	bhi.n	8005628 <touch_Adjust+0x98>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <touch_Adjust+0x104>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056c7 	.word	0x080056c7
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	08005735 	.word	0x08005735
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80056a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056a8:	2114      	movs	r1, #20
 80056aa:	2014      	movs	r0, #20
 80056ac:	f7ff fe54 	bl	8005358 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80056b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005720 <touch_Adjust+0x190>)
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	3b14      	subs	r3, #20
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80056bc:	2114      	movs	r1, #20
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fe4a 	bl	8005358 <TP_Drow_Touch_Point>
					break;
 80056c4:	e319      	b.n	8005cfa <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80056c6:	4b16      	ldr	r3, [pc, #88]	@ (8005720 <touch_Adjust+0x190>)
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	3b14      	subs	r3, #20
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056d2:	2114      	movs	r1, #20
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fe3f 	bl	8005358 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80056da:	4b11      	ldr	r3, [pc, #68]	@ (8005720 <touch_Adjust+0x190>)
 80056dc:	885b      	ldrh	r3, [r3, #2]
 80056de:	3b14      	subs	r3, #20
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80056e6:	4619      	mov	r1, r3
 80056e8:	2014      	movs	r0, #20
 80056ea:	f7ff fe35 	bl	8005358 <TP_Drow_Touch_Point>
					break;
 80056ee:	e304      	b.n	8005cfa <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 80056f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <touch_Adjust+0x190>)
 80056f2:	885b      	ldrh	r3, [r3, #2]
 80056f4:	3b14      	subs	r3, #20
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80056fc:	4619      	mov	r1, r3
 80056fe:	2014      	movs	r0, #20
 8005700:	f7ff fe2a 	bl	8005358 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <touch_Adjust+0x190>)
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	3b14      	subs	r3, #20
 800570a:	b298      	uxth	r0, r3
 800570c:	4b04      	ldr	r3, [pc, #16]	@ (8005720 <touch_Adjust+0x190>)
 800570e:	885b      	ldrh	r3, [r3, #2]
 8005710:	3b14      	subs	r3, #20
 8005712:	b29b      	uxth	r3, r3
 8005714:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005718:	4619      	mov	r1, r3
 800571a:	f7ff fe1d 	bl	8005358 <TP_Drow_Touch_Point>
					break;
 800571e:	e2ec      	b.n	8005cfa <touch_Adjust+0x76a>
 8005720:	200002a8 	.word	0x200002a8
 8005724:	0800d618 	.word	0x0800d618
 8005728:	0800d634 	.word	0x0800d634
 800572c:	0800d64c 	.word	0x0800d64c
 8005730:	2000003c 	.word	0x2000003c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 8005734:	883b      	ldrh	r3, [r7, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	88bb      	ldrh	r3, [r7, #4]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	bfb8      	it	lt
 8005740:	425b      	neglt	r3, r3
 8005742:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	461a      	mov	r2, r3
 8005748:	88fb      	ldrh	r3, [r7, #6]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	bfb8      	it	lt
 8005750:	425b      	neglt	r3, r3
 8005752:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	fb03 f303 	mul.w	r3, r3, r3
 800575a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	fb03 f303 	mul.w	r3, r3, r3
 8005762:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	4618      	mov	r0, r3
 800576c:	f7fa fec2 	bl	80004f4 <__aeabi_ui2d>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	ec43 2b10 	vmov	d0, r2, r3
 8005778:	f007 fcae 	bl	800d0d8 <sqrt>
 800577c:	ec53 2b10 	vmov	r2, r3, d0
 8005780:	4610      	mov	r0, r2
 8005782:	4619      	mov	r1, r3
 8005784:	f7fb f9e0 	bl	8000b48 <__aeabi_d2uiz>
 8005788:	4603      	mov	r3, r0
 800578a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 800578c:	893b      	ldrh	r3, [r7, #8]
 800578e:	461a      	mov	r2, r3
 8005790:	89bb      	ldrh	r3, [r7, #12]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	bfb8      	it	lt
 8005798:	425b      	neglt	r3, r3
 800579a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 800579c:	897b      	ldrh	r3, [r7, #10]
 800579e:	461a      	mov	r2, r3
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bfb8      	it	lt
 80057a8:	425b      	neglt	r3, r3
 80057aa:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	fb03 f303 	mul.w	r3, r3, r3
 80057b2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	fb03 f303 	mul.w	r3, r3, r3
 80057ba:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fa fe96 	bl	80004f4 <__aeabi_ui2d>
 80057c8:	4602      	mov	r2, r0
 80057ca:	460b      	mov	r3, r1
 80057cc:	ec43 2b10 	vmov	d0, r2, r3
 80057d0:	f007 fc82 	bl	800d0d8 <sqrt>
 80057d4:	ec53 2b10 	vmov	r2, r3, d0
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	f7fb f9b4 	bl	8000b48 <__aeabi_d2uiz>
 80057e0:	4603      	mov	r3, r0
 80057e2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80057e4:	8b7b      	ldrh	r3, [r7, #26]
 80057e6:	ee07 3a90 	vmov	s15, r3
 80057ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057ee:	8b3b      	ldrh	r3, [r7, #24]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80057fc:	ee16 0a90 	vmov	r0, s13
 8005800:	f7fa fe9a 	bl	8000538 <__aeabi_f2d>
 8005804:	4602      	mov	r2, r0
 8005806:	460b      	mov	r3, r1
 8005808:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 800580c:	a384      	add	r3, pc, #528	@ (adr r3, 8005a20 <touch_Adjust+0x490>)
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005816:	f7fb f959 	bl	8000acc <__aeabi_dcmplt>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10f      	bne.n	8005840 <touch_Adjust+0x2b0>
 8005820:	a381      	add	r3, pc, #516	@ (adr r3, 8005a28 <touch_Adjust+0x498>)
 8005822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005826:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800582a:	f7fb f96d 	bl	8000b08 <__aeabi_dcmpgt>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d105      	bne.n	8005840 <touch_Adjust+0x2b0>
 8005834:	8b7b      	ldrh	r3, [r7, #26]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <touch_Adjust+0x2b0>
 800583a:	8b3b      	ldrh	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d136      	bne.n	80058ae <touch_Adjust+0x31e>
					{
						cnt=0;
 8005840:	2300      	movs	r3, #0
 8005842:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005846:	4b7a      	ldr	r3, [pc, #488]	@ (8005a30 <touch_Adjust+0x4a0>)
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	3b14      	subs	r3, #20
 800584c:	b298      	uxth	r0, r3
 800584e:	4b78      	ldr	r3, [pc, #480]	@ (8005a30 <touch_Adjust+0x4a0>)
 8005850:	885b      	ldrh	r3, [r3, #2]
 8005852:	3b14      	subs	r3, #20
 8005854:	b29b      	uxth	r3, r3
 8005856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800585a:	4619      	mov	r1, r3
 800585c:	f7ff fd7c 	bl	8005358 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005860:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005864:	2114      	movs	r1, #20
 8005866:	2014      	movs	r0, #20
 8005868:	f7ff fd76 	bl	8005358 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 800586c:	2300      	movs	r3, #0
 800586e:	9302      	str	r3, [sp, #8]
 8005870:	2310      	movs	r3, #16
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800587e:	4a6d      	ldr	r2, [pc, #436]	@ (8005a34 <touch_Adjust+0x4a4>)
 8005880:	2128      	movs	r1, #40	@ 0x28
 8005882:	2005      	movs	r0, #5
 8005884:	f7fd fb7e 	bl	8002f84 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005888:	2300      	movs	r3, #0
 800588a:	9302      	str	r3, [sp, #8]
 800588c:	2310      	movs	r3, #16
 800588e:	9301      	str	r3, [sp, #4]
 8005890:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800589a:	4a67      	ldr	r2, [pc, #412]	@ (8005a38 <touch_Adjust+0x4a8>)
 800589c:	213c      	movs	r1, #60	@ 0x3c
 800589e:	2005      	movs	r0, #5
 80058a0:	f7fd fb70 	bl	8002f84 <lcd_ShowStr>
						HAL_Delay(1000);
 80058a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80058a8:	f000 fd3a 	bl	8006320 <HAL_Delay>
 						continue;
 80058ac:	e225      	b.n	8005cfa <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 80058ae:	883b      	ldrh	r3, [r7, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	893b      	ldrh	r3, [r7, #8]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bfb8      	it	lt
 80058ba:	425b      	neglt	r3, r3
 80058bc:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 80058be:	887b      	ldrh	r3, [r7, #2]
 80058c0:	461a      	mov	r2, r3
 80058c2:	897b      	ldrh	r3, [r7, #10]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bfb8      	it	lt
 80058ca:	425b      	neglt	r3, r3
 80058cc:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	fb03 f303 	mul.w	r3, r3, r3
 80058d4:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fb03 f303 	mul.w	r3, r3, r3
 80058dc:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7fa fe05 	bl	80004f4 <__aeabi_ui2d>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	ec43 2b10 	vmov	d0, r2, r3
 80058f2:	f007 fbf1 	bl	800d0d8 <sqrt>
 80058f6:	ec53 2b10 	vmov	r2, r3, d0
 80058fa:	4610      	mov	r0, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	f7fb f923 	bl	8000b48 <__aeabi_d2uiz>
 8005902:	4603      	mov	r3, r0
 8005904:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8005906:	88bb      	ldrh	r3, [r7, #4]
 8005908:	461a      	mov	r2, r3
 800590a:	89bb      	ldrh	r3, [r7, #12]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	bfb8      	it	lt
 8005912:	425b      	neglt	r3, r3
 8005914:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	461a      	mov	r2, r3
 800591a:	89fb      	ldrh	r3, [r7, #14]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfb8      	it	lt
 8005922:	425b      	neglt	r3, r3
 8005924:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	fb03 f303 	mul.w	r3, r3, r3
 800592c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	fb03 f303 	mul.w	r3, r3, r3
 8005934:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005936:	6a3a      	ldr	r2, [r7, #32]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	4413      	add	r3, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f7fa fdd9 	bl	80004f4 <__aeabi_ui2d>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	ec43 2b10 	vmov	d0, r2, r3
 800594a:	f007 fbc5 	bl	800d0d8 <sqrt>
 800594e:	ec53 2b10 	vmov	r2, r3, d0
 8005952:	4610      	mov	r0, r2
 8005954:	4619      	mov	r1, r3
 8005956:	f7fb f8f7 	bl	8000b48 <__aeabi_d2uiz>
 800595a:	4603      	mov	r3, r0
 800595c:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800595e:	8b7b      	ldrh	r3, [r7, #26]
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005968:	8b3b      	ldrh	r3, [r7, #24]
 800596a:	ee07 3a90 	vmov	s15, r3
 800596e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005972:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005976:	ee16 0a90 	vmov	r0, s13
 800597a:	f7fa fddd 	bl	8000538 <__aeabi_f2d>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005986:	a326      	add	r3, pc, #152	@ (adr r3, 8005a20 <touch_Adjust+0x490>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005990:	f7fb f89c 	bl	8000acc <__aeabi_dcmplt>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <touch_Adjust+0x41e>
 800599a:	a323      	add	r3, pc, #140	@ (adr r3, 8005a28 <touch_Adjust+0x498>)
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059a4:	f7fb f8b0 	bl	8000b08 <__aeabi_dcmpgt>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d046      	beq.n	8005a3c <touch_Adjust+0x4ac>
					{
						cnt=0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80059b4:	4b1e      	ldr	r3, [pc, #120]	@ (8005a30 <touch_Adjust+0x4a0>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	3b14      	subs	r3, #20
 80059ba:	b298      	uxth	r0, r3
 80059bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005a30 <touch_Adjust+0x4a0>)
 80059be:	885b      	ldrh	r3, [r3, #2]
 80059c0:	3b14      	subs	r3, #20
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059c8:	4619      	mov	r1, r3
 80059ca:	f7ff fcc5 	bl	8005358 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80059ce:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80059d2:	2114      	movs	r1, #20
 80059d4:	2014      	movs	r0, #20
 80059d6:	f7ff fcbf 	bl	8005358 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80059da:	2300      	movs	r3, #0
 80059dc:	9302      	str	r3, [sp, #8]
 80059de:	2310      	movs	r3, #16
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80059ec:	4a11      	ldr	r2, [pc, #68]	@ (8005a34 <touch_Adjust+0x4a4>)
 80059ee:	2128      	movs	r1, #40	@ 0x28
 80059f0:	2005      	movs	r0, #5
 80059f2:	f7fd fac7 	bl	8002f84 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80059f6:	2300      	movs	r3, #0
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	2310      	movs	r3, #16
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a08:	4a0b      	ldr	r2, [pc, #44]	@ (8005a38 <touch_Adjust+0x4a8>)
 8005a0a:	213c      	movs	r1, #60	@ 0x3c
 8005a0c:	2005      	movs	r0, #5
 8005a0e:	f7fd fab9 	bl	8002f84 <lcd_ShowStr>
						HAL_Delay(1000);
 8005a12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005a16:	f000 fc83 	bl	8006320 <HAL_Delay>
						continue;
 8005a1a:	e16e      	b.n	8005cfa <touch_Adjust+0x76a>
 8005a1c:	f3af 8000 	nop.w
 8005a20:	66666666 	.word	0x66666666
 8005a24:	3fee6666 	.word	0x3fee6666
 8005a28:	cccccccd 	.word	0xcccccccd
 8005a2c:	3ff0cccc 	.word	0x3ff0cccc
 8005a30:	200002a8 	.word	0x200002a8
 8005a34:	0800d660 	.word	0x0800d660
 8005a38:	0800d680 	.word	0x0800d680
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8005a3c:	88bb      	ldrh	r3, [r7, #4]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	893b      	ldrh	r3, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bfb8      	it	lt
 8005a48:	425b      	neglt	r3, r3
 8005a4a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8005a4c:	88fb      	ldrh	r3, [r7, #6]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	897b      	ldrh	r3, [r7, #10]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	bfb8      	it	lt
 8005a58:	425b      	neglt	r3, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	fb03 f303 	mul.w	r3, r3, r3
 8005a62:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	fb03 f303 	mul.w	r3, r3, r3
 8005a6a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005a6c:	6a3a      	ldr	r2, [r7, #32]
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	4413      	add	r3, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa fd3e 	bl	80004f4 <__aeabi_ui2d>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	ec43 2b10 	vmov	d0, r2, r3
 8005a80:	f007 fb2a 	bl	800d0d8 <sqrt>
 8005a84:	ec53 2b10 	vmov	r2, r3, d0
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f7fb f85c 	bl	8000b48 <__aeabi_d2uiz>
 8005a90:	4603      	mov	r3, r0
 8005a92:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8005a94:	883b      	ldrh	r3, [r7, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	89bb      	ldrh	r3, [r7, #12]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfb8      	it	lt
 8005aa0:	425b      	neglt	r3, r3
 8005aa2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8005aa4:	887b      	ldrh	r3, [r7, #2]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	89fb      	ldrh	r3, [r7, #14]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	bfb8      	it	lt
 8005ab0:	425b      	neglt	r3, r3
 8005ab2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	fb03 f303 	mul.w	r3, r3, r3
 8005aba:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	fb03 f303 	mul.w	r3, r3, r3
 8005ac2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005ac4:	6a3a      	ldr	r2, [r7, #32]
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	4413      	add	r3, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fa fd12 	bl	80004f4 <__aeabi_ui2d>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	ec43 2b10 	vmov	d0, r2, r3
 8005ad8:	f007 fafe 	bl	800d0d8 <sqrt>
 8005adc:	ec53 2b10 	vmov	r2, r3, d0
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f7fb f830 	bl	8000b48 <__aeabi_d2uiz>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005aec:	8b7b      	ldrh	r3, [r7, #26]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005af6:	8b3b      	ldrh	r3, [r7, #24]
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b04:	ee16 0a90 	vmov	r0, s13
 8005b08:	f7fa fd16 	bl	8000538 <__aeabi_f2d>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005b14:	a383      	add	r3, pc, #524	@ (adr r3, 8005d24 <touch_Adjust+0x794>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b1e:	f7fa ffd5 	bl	8000acc <__aeabi_dcmplt>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d109      	bne.n	8005b3c <touch_Adjust+0x5ac>
 8005b28:	a380      	add	r3, pc, #512	@ (adr r3, 8005d2c <touch_Adjust+0x79c>)
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b32:	f7fa ffe9 	bl	8000b08 <__aeabi_dcmpgt>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d036      	beq.n	8005baa <touch_Adjust+0x61a>
					{
						cnt=0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005b42:	4b71      	ldr	r3, [pc, #452]	@ (8005d08 <touch_Adjust+0x778>)
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	3b14      	subs	r3, #20
 8005b48:	b298      	uxth	r0, r3
 8005b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8005d08 <touch_Adjust+0x778>)
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	3b14      	subs	r3, #20
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b56:	4619      	mov	r1, r3
 8005b58:	f7ff fbfe 	bl	8005358 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005b5c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005b60:	2114      	movs	r1, #20
 8005b62:	2014      	movs	r0, #20
 8005b64:	f7ff fbf8 	bl	8005358 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	9302      	str	r3, [sp, #8]
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005b7a:	4a64      	ldr	r2, [pc, #400]	@ (8005d0c <touch_Adjust+0x77c>)
 8005b7c:	2128      	movs	r1, #40	@ 0x28
 8005b7e:	2005      	movs	r0, #5
 8005b80:	f7fd fa00 	bl	8002f84 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005b84:	2300      	movs	r3, #0
 8005b86:	9302      	str	r3, [sp, #8]
 8005b88:	2310      	movs	r3, #16
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005b96:	4a5e      	ldr	r2, [pc, #376]	@ (8005d10 <touch_Adjust+0x780>)
 8005b98:	213c      	movs	r1, #60	@ 0x3c
 8005b9a:	2005      	movs	r0, #5
 8005b9c:	f7fd f9f2 	bl	8002f84 <lcd_ShowStr>

						HAL_Delay(1000);
 8005ba0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ba4:	f000 fbbc 	bl	8006320 <HAL_Delay>
 							continue;
 8005ba8:	e0a7      	b.n	8005cfa <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8005baa:	4b57      	ldr	r3, [pc, #348]	@ (8005d08 <touch_Adjust+0x778>)
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	3b28      	subs	r3, #40	@ 0x28
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005bb8:	88bb      	ldrh	r3, [r7, #4]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	883b      	ldrh	r3, [r7, #0]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	ee07 3a90 	vmov	s15, r3
 8005bc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bcc:	4b51      	ldr	r3, [pc, #324]	@ (8005d14 <touch_Adjust+0x784>)
 8005bce:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8005bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8005d08 <touch_Adjust+0x778>)
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bde:	4b4d      	ldr	r3, [pc, #308]	@ (8005d14 <touch_Adjust+0x784>)
 8005be0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005be4:	88bb      	ldrh	r3, [r7, #4]
 8005be6:	461a      	mov	r2, r3
 8005be8:	883b      	ldrh	r3, [r7, #0]
 8005bea:	4413      	add	r3, r2
 8005bec:	ee07 3a90 	vmov	s15, r3
 8005bf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bfc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005c00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c08:	ee17 3a90 	vmov	r3, s15
 8005c0c:	b21a      	sxth	r2, r3
 8005c0e:	4b41      	ldr	r3, [pc, #260]	@ (8005d14 <touch_Adjust+0x784>)
 8005c10:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8005c12:	4b3d      	ldr	r3, [pc, #244]	@ (8005d08 <touch_Adjust+0x778>)
 8005c14:	885b      	ldrh	r3, [r3, #2]
 8005c16:	3b28      	subs	r3, #40	@ 0x28
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005c20:	897b      	ldrh	r3, [r7, #10]
 8005c22:	461a      	mov	r2, r3
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c34:	4b37      	ldr	r3, [pc, #220]	@ (8005d14 <touch_Adjust+0x784>)
 8005c36:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8005c3a:	4b33      	ldr	r3, [pc, #204]	@ (8005d08 <touch_Adjust+0x778>)
 8005c3c:	885b      	ldrh	r3, [r3, #2]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c46:	4b33      	ldr	r3, [pc, #204]	@ (8005d14 <touch_Adjust+0x784>)
 8005c48:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8005c4c:	897b      	ldrh	r3, [r7, #10]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	887b      	ldrh	r3, [r7, #2]
 8005c52:	4413      	add	r3, r2
 8005c54:	ee07 3a90 	vmov	s15, r3
 8005c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c64:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c70:	ee17 3a90 	vmov	r3, s15
 8005c74:	b21a      	sxth	r2, r3
 8005c76:	4b27      	ldr	r3, [pc, #156]	@ (8005d14 <touch_Adjust+0x784>)
 8005c78:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005c7a:	4b23      	ldr	r3, [pc, #140]	@ (8005d08 <touch_Adjust+0x778>)
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	3b14      	subs	r3, #20
 8005c80:	b298      	uxth	r0, r3
 8005c82:	4b21      	ldr	r3, [pc, #132]	@ (8005d08 <touch_Adjust+0x778>)
 8005c84:	885b      	ldrh	r3, [r3, #2]
 8005c86:	3b14      	subs	r3, #20
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f7ff fb62 	bl	8005358 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8005c94:	2300      	movs	r3, #0
 8005c96:	9302      	str	r3, [sp, #8]
 8005c98:	2310      	movs	r3, #16
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005ca6:	4a1c      	ldr	r2, [pc, #112]	@ (8005d18 <touch_Adjust+0x788>)
 8005ca8:	2128      	movs	r1, #40	@ 0x28
 8005caa:	2005      	movs	r0, #5
 8005cac:	f7fd f96a 	bl	8002f84 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	9302      	str	r3, [sp, #8]
 8005cb4:	2310      	movs	r3, #16
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005cc2:	4a16      	ldr	r2, [pc, #88]	@ (8005d1c <touch_Adjust+0x78c>)
 8005cc4:	213c      	movs	r1, #60	@ 0x3c
 8005cc6:	2005      	movs	r0, #5
 8005cc8:	f7fd f95c 	bl	8002f84 <lcd_ShowStr>
					HAL_Delay(1000);
 8005ccc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005cd0:	f000 fb26 	bl	8006320 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9302      	str	r3, [sp, #8]
 8005cd8:	2310      	movs	r3, #16
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8005d20 <touch_Adjust+0x790>)
 8005ce8:	2128      	movs	r1, #40	@ 0x28
 8005cea:	2005      	movs	r0, #5
 8005cec:	f7fd f94a 	bl	8002f84 <lcd_ShowStr>
					TP_Save_Adjdata();
 8005cf0:	f7ff fc20 	bl	8005534 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8005cf4:	f7ff fc2e 	bl	8005554 <TP_Get_Adjdata>
					return;
 8005cf8:	e000      	b.n	8005cfc <touch_Adjust+0x76c>
		HAL_Delay(50);
 8005cfa:	e495      	b.n	8005628 <touch_Adjust+0x98>
			}
		}
 	}
}
 8005cfc:	3728      	adds	r7, #40	@ 0x28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	f3af 8000 	nop.w
 8005d08:	200002a8 	.word	0x200002a8
 8005d0c:	0800d660 	.word	0x0800d660
 8005d10:	0800d680 	.word	0x0800d680
 8005d14:	2000003c 	.word	0x2000003c
 8005d18:	0800d6a0 	.word	0x0800d6a0
 8005d1c:	0800d6c0 	.word	0x0800d6c0
 8005d20:	0800d6e0 	.word	0x0800d6e0
 8005d24:	66666666 	.word	0x66666666
 8005d28:	3fee6666 	.word	0x3fee6666
 8005d2c:	cccccccd 	.word	0xcccccccd
 8005d30:	3ff0cccc 	.word	0x3ff0cccc

08005d34 <touch_init>:

void touch_init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8005d38:	4904      	ldr	r1, [pc, #16]	@ (8005d4c <touch_init+0x18>)
 8005d3a:	4805      	ldr	r0, [pc, #20]	@ (8005d50 <touch_init+0x1c>)
 8005d3c:	f7ff fa88 	bl	8005250 <TP_Read_XY>
	at24c_init();
 8005d40:	f7fb f9b8 	bl	80010b4 <at24c_init>
	TP_Get_Adjdata();
 8005d44:	f7ff fc06 	bl	8005554 <TP_Get_Adjdata>
}
 8005d48:	bf00      	nop
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	20000052 	.word	0x20000052
 8005d50:	20000048 	.word	0x20000048

08005d54 <touch_Scan>:

void touch_Scan(){
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8005d58:	4b02      	ldr	r3, [pc, #8]	@ (8005d64 <touch_Scan+0x10>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	4798      	blx	r3
}
 8005d60:	bf00      	nop
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	2000003c 	.word	0x2000003c

08005d68 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8005d6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005d70:	4805      	ldr	r0, [pc, #20]	@ (8005d88 <touch_IsTouched+0x20>)
 8005d72:	f001 fb85 	bl	8007480 <HAL_GPIO_ReadPin>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2301      	moveq	r3, #1
 8005d7e:	2300      	movne	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	40020800 	.word	0x40020800

08005d8c <touch_GetX>:

uint16_t touch_GetX(){
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8005d90:	4b03      	ldr	r3, [pc, #12]	@ (8005da0 <touch_GetX+0x14>)
 8005d92:	899b      	ldrh	r3, [r3, #12]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	2000003c 	.word	0x2000003c

08005da4 <touch_GetY>:

uint16_t touch_GetY(){
 8005da4:	b480      	push	{r7}
 8005da6:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005da8:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <touch_GetY+0x14>)
 8005daa:	8adb      	ldrh	r3, [r3, #22]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	2000003c 	.word	0x2000003c

08005dbc <isButtonStart>:
 *      Author: Admin
 */

#include "touch_screen.h"

uint8_t isButtonStart(){
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005dc0:	f7ff ffd2 	bl	8005d68 <touch_IsTouched>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <isButtonStart+0x12>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e018      	b.n	8005e00 <isButtonStart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 200 && touch_GetY() < 300;
 8005dce:	f7ff ffdd 	bl	8005d8c <touch_GetX>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b32      	cmp	r3, #50	@ 0x32
 8005dd6:	d911      	bls.n	8005dfc <isButtonStart+0x40>
 8005dd8:	f7ff ffd8 	bl	8005d8c <touch_GetX>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2bbd      	cmp	r3, #189	@ 0xbd
 8005de0:	d80c      	bhi.n	8005dfc <isButtonStart+0x40>
 8005de2:	f7ff ffdf 	bl	8005da4 <touch_GetY>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005dea:	d907      	bls.n	8005dfc <isButtonStart+0x40>
 8005dec:	f7ff ffda 	bl	8005da4 <touch_GetY>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005df6:	d201      	bcs.n	8005dfc <isButtonStart+0x40>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <isButtonStart+0x42>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <isButtonUp>:
uint8_t isButtonUp(){
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005e08:	f7ff ffae 	bl	8005d68 <touch_IsTouched>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <isButtonUp+0x12>
 8005e12:	2300      	movs	r3, #0
 8005e14:	e017      	b.n	8005e46 <isButtonUp+0x42>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 210 && touch_GetY() < 250;
 8005e16:	f7ff ffb9 	bl	8005d8c <touch_GetX>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b5a      	cmp	r3, #90	@ 0x5a
 8005e1e:	d910      	bls.n	8005e42 <isButtonUp+0x3e>
 8005e20:	f7ff ffb4 	bl	8005d8c <touch_GetX>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b95      	cmp	r3, #149	@ 0x95
 8005e28:	d80b      	bhi.n	8005e42 <isButtonUp+0x3e>
 8005e2a:	f7ff ffbb 	bl	8005da4 <touch_GetY>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2bd2      	cmp	r3, #210	@ 0xd2
 8005e32:	d906      	bls.n	8005e42 <isButtonUp+0x3e>
 8005e34:	f7ff ffb6 	bl	8005da4 <touch_GetY>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2bf9      	cmp	r3, #249	@ 0xf9
 8005e3c:	d801      	bhi.n	8005e42 <isButtonUp+0x3e>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e000      	b.n	8005e44 <isButtonUp+0x40>
 8005e42:	2300      	movs	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <isButtonDown>:
uint8_t isButtonDown(){
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005e4e:	f7ff ff8b 	bl	8005d68 <touch_IsTouched>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <isButtonDown+0x12>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	e019      	b.n	8005e90 <isButtonDown+0x46>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 260 && touch_GetY() < 300;
 8005e5c:	f7ff ff96 	bl	8005d8c <touch_GetX>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b5a      	cmp	r3, #90	@ 0x5a
 8005e64:	d912      	bls.n	8005e8c <isButtonDown+0x42>
 8005e66:	f7ff ff91 	bl	8005d8c <touch_GetX>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b95      	cmp	r3, #149	@ 0x95
 8005e6e:	d80d      	bhi.n	8005e8c <isButtonDown+0x42>
 8005e70:	f7ff ff98 	bl	8005da4 <touch_GetY>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e7a:	d907      	bls.n	8005e8c <isButtonDown+0x42>
 8005e7c:	f7ff ff92 	bl	8005da4 <touch_GetY>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005e86:	d201      	bcs.n	8005e8c <isButtonDown+0x42>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <isButtonDown+0x44>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <isButtonLeft>:
uint8_t isButtonLeft(){
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005e98:	f7ff ff66 	bl	8005d68 <touch_IsTouched>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <isButtonLeft+0x12>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e019      	b.n	8005eda <isButtonLeft+0x46>
	return touch_GetX() > 20 && touch_GetX() < 80 && touch_GetY() > 260 && touch_GetY() < 300;
 8005ea6:	f7ff ff71 	bl	8005d8c <touch_GetX>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b14      	cmp	r3, #20
 8005eae:	d912      	bls.n	8005ed6 <isButtonLeft+0x42>
 8005eb0:	f7ff ff6c 	bl	8005d8c <touch_GetX>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b4f      	cmp	r3, #79	@ 0x4f
 8005eb8:	d80d      	bhi.n	8005ed6 <isButtonLeft+0x42>
 8005eba:	f7ff ff73 	bl	8005da4 <touch_GetY>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ec4:	d907      	bls.n	8005ed6 <isButtonLeft+0x42>
 8005ec6:	f7ff ff6d 	bl	8005da4 <touch_GetY>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005ed0:	d201      	bcs.n	8005ed6 <isButtonLeft+0x42>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <isButtonLeft+0x44>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	b2db      	uxtb	r3, r3
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	bd80      	pop	{r7, pc}

08005ede <isButtonRight>:
uint8_t isButtonRight(){
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005ee2:	f7ff ff41 	bl	8005d68 <touch_IsTouched>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <isButtonRight+0x12>
 8005eec:	2300      	movs	r3, #0
 8005eee:	e019      	b.n	8005f24 <isButtonRight+0x46>
	return touch_GetX() > 160 && touch_GetX() < 220 && touch_GetY() > 260 && touch_GetY() < 300;
 8005ef0:	f7ff ff4c 	bl	8005d8c <touch_GetX>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ef8:	d912      	bls.n	8005f20 <isButtonRight+0x42>
 8005efa:	f7ff ff47 	bl	8005d8c <touch_GetX>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2bdb      	cmp	r3, #219	@ 0xdb
 8005f02:	d80d      	bhi.n	8005f20 <isButtonRight+0x42>
 8005f04:	f7ff ff4e 	bl	8005da4 <touch_GetY>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f0e:	d907      	bls.n	8005f20 <isButtonRight+0x42>
 8005f10:	f7ff ff48 	bl	8005da4 <touch_GetY>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005f1a:	d201      	bcs.n	8005f20 <isButtonRight+0x42>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <isButtonRight+0x44>
 8005f20:	2300      	movs	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <isButtonRestart>:
uint8_t isButtonRestart(){
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005f2c:	f7ff ff1c 	bl	8005d68 <touch_IsTouched>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <isButtonRestart+0x12>
 8005f36:	2300      	movs	r3, #0
 8005f38:	e018      	b.n	8005f6c <isButtonRestart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 350;
 8005f3a:	f7ff ff27 	bl	8005d8c <touch_GetX>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b32      	cmp	r3, #50	@ 0x32
 8005f42:	d911      	bls.n	8005f68 <isButtonRestart+0x40>
 8005f44:	f7ff ff22 	bl	8005d8c <touch_GetX>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2bbd      	cmp	r3, #189	@ 0xbd
 8005f4c:	d80c      	bhi.n	8005f68 <isButtonRestart+0x40>
 8005f4e:	f7ff ff29 	bl	8005da4 <touch_GetY>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2bfa      	cmp	r3, #250	@ 0xfa
 8005f56:	d907      	bls.n	8005f68 <isButtonRestart+0x40>
 8005f58:	f7ff ff24 	bl	8005da4 <touch_GetY>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8005f62:	d201      	bcs.n	8005f68 <isButtonRestart+0x40>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <isButtonRestart+0x42>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){// khoi tao uart gui den wifi
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8005f74:	2201      	movs	r2, #1
 8005f76:	4903      	ldr	r1, [pc, #12]	@ (8005f84 <uart_init_esp+0x14>)
 8005f78:	4803      	ldr	r0, [pc, #12]	@ (8005f88 <uart_init_esp+0x18>)
 8005f7a:	f004 fe94 	bl	800aca6 <HAL_UART_Receive_IT>
}
 8005f7e:	bf00      	nop
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000c75 	.word	0x20000c75
 8005f88:	20000e24 	.word	0x20000e24

08005f8c <uart_EspSendString>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void uart_EspSendString(uint8_t* str){// gui chuoi
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4907      	ldr	r1, [pc, #28]	@ (8005fb4 <uart_EspSendString+0x28>)
 8005f98:	4807      	ldr	r0, [pc, #28]	@ (8005fb8 <uart_EspSendString+0x2c>)
 8005f9a:	f006 f89f 	bl	800c0dc <siprintf>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	230a      	movs	r3, #10
 8005fa4:	4904      	ldr	r1, [pc, #16]	@ (8005fb8 <uart_EspSendString+0x2c>)
 8005fa6:	4805      	ldr	r0, [pc, #20]	@ (8005fbc <uart_EspSendString+0x30>)
 8005fa8:	f004 fdeb 	bl	800ab82 <HAL_UART_Transmit>
}
 8005fac:	bf00      	nop
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	0800d6f8 	.word	0x0800d6f8
 8005fb8:	20000c78 	.word	0x20000c78
 8005fbc:	20000e24 	.word	0x20000e24

08005fc0 <HAL_UART_RxCpltCallback>:
        }
        num %= mypow(10, i-1);
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a11      	ldr	r2, [pc, #68]	@ (8006014 <HAL_UART_RxCpltCallback+0x54>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d11c      	bne.n	800600c <HAL_UART_RxCpltCallback+0x4c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8005fd2:	230a      	movs	r3, #10
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4910      	ldr	r1, [pc, #64]	@ (8006018 <HAL_UART_RxCpltCallback+0x58>)
 8005fd8:	4810      	ldr	r0, [pc, #64]	@ (800601c <HAL_UART_RxCpltCallback+0x5c>)
 8005fda:	f004 fdd2 	bl	800ab82 <HAL_UART_Transmit>

		// turn on the receice interrupt
		rxBuffer[rxHead] = receive_buffer1;
 8005fde:	4b10      	ldr	r3, [pc, #64]	@ (8006020 <HAL_UART_RxCpltCallback+0x60>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8006018 <HAL_UART_RxCpltCallback+0x58>)
 8005fe6:	7819      	ldrb	r1, [r3, #0]
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8006024 <HAL_UART_RxCpltCallback+0x64>)
 8005fea:	5499      	strb	r1, [r3, r2]
		rxHead = (rxHead + 1)%BUFFER_SIZE;
 8005fec:	4b0c      	ldr	r3, [pc, #48]	@ (8006020 <HAL_UART_RxCpltCallback+0x60>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	425a      	negs	r2, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	bf58      	it	pl
 8005ffa:	4253      	negpl	r3, r2
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <HAL_UART_RxCpltCallback+0x60>)
 8006000:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8006002:	2201      	movs	r2, #1
 8006004:	4904      	ldr	r1, [pc, #16]	@ (8006018 <HAL_UART_RxCpltCallback+0x58>)
 8006006:	4805      	ldr	r0, [pc, #20]	@ (800601c <HAL_UART_RxCpltCallback+0x5c>)
 8006008:	f004 fe4d 	bl	800aca6 <HAL_UART_Receive_IT>
	}
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40011000 	.word	0x40011000
 8006018:	20000c74 	.word	0x20000c74
 800601c:	20000de0 	.word	0x20000de0
 8006020:	20000ddc 	.word	0x20000ddc
 8006024:	20000cdc 	.word	0x20000cdc

08006028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800602c:	4b11      	ldr	r3, [pc, #68]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 800602e:	4a12      	ldr	r2, [pc, #72]	@ (8006078 <MX_USART1_UART_Init+0x50>)
 8006030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006032:	4b10      	ldr	r3, [pc, #64]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 8006034:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800603a:	4b0e      	ldr	r3, [pc, #56]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 800603c:	2200      	movs	r2, #0
 800603e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006040:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 8006042:	2200      	movs	r2, #0
 8006044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006046:	4b0b      	ldr	r3, [pc, #44]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 8006048:	2200      	movs	r2, #0
 800604a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800604c:	4b09      	ldr	r3, [pc, #36]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 800604e:	220c      	movs	r2, #12
 8006050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006052:	4b08      	ldr	r3, [pc, #32]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 8006054:	2200      	movs	r2, #0
 8006056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006058:	4b06      	ldr	r3, [pc, #24]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800605e:	4805      	ldr	r0, [pc, #20]	@ (8006074 <MX_USART1_UART_Init+0x4c>)
 8006060:	f004 fd42 	bl	800aae8 <HAL_UART_Init>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800606a:	f7fd faa1 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000de0 	.word	0x20000de0
 8006078:	40011000 	.word	0x40011000

0800607c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006080:	4b11      	ldr	r3, [pc, #68]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 8006082:	4a12      	ldr	r2, [pc, #72]	@ (80060cc <MX_USART2_UART_Init+0x50>)
 8006084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006086:	4b10      	ldr	r3, [pc, #64]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 8006088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800608c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800608e:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 8006090:	2200      	movs	r2, #0
 8006092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006094:	4b0c      	ldr	r3, [pc, #48]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 8006096:	2200      	movs	r2, #0
 8006098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800609a:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 800609c:	2200      	movs	r2, #0
 800609e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80060a0:	4b09      	ldr	r3, [pc, #36]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 80060a2:	220c      	movs	r2, #12
 80060a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060a6:	4b08      	ldr	r3, [pc, #32]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80060ac:	4b06      	ldr	r3, [pc, #24]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80060b2:	4805      	ldr	r0, [pc, #20]	@ (80060c8 <MX_USART2_UART_Init+0x4c>)
 80060b4:	f004 fd18 	bl	800aae8 <HAL_UART_Init>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80060be:	f7fd fa77 	bl	80035b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80060c2:	bf00      	nop
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000e24 	.word	0x20000e24
 80060cc:	40004400 	.word	0x40004400

080060d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d8:	f107 031c 	add.w	r3, r7, #28
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a3a      	ldr	r2, [pc, #232]	@ (80061d8 <HAL_UART_MspInit+0x108>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d135      	bne.n	800615e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	4b39      	ldr	r3, [pc, #228]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 80060f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060fa:	4a38      	ldr	r2, [pc, #224]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 80060fc:	f043 0310 	orr.w	r3, r3, #16
 8006100:	6453      	str	r3, [r2, #68]	@ 0x44
 8006102:	4b36      	ldr	r3, [pc, #216]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 8006104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006106:	f003 0310 	and.w	r3, r3, #16
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	4b32      	ldr	r3, [pc, #200]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 8006114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006116:	4a31      	ldr	r2, [pc, #196]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6313      	str	r3, [r2, #48]	@ 0x30
 800611e:	4b2f      	ldr	r3, [pc, #188]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800612a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800612e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006130:	2302      	movs	r3, #2
 8006132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	2300      	movs	r3, #0
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006138:	2303      	movs	r3, #3
 800613a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800613c:	2307      	movs	r3, #7
 800613e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006140:	f107 031c 	add.w	r3, r7, #28
 8006144:	4619      	mov	r1, r3
 8006146:	4826      	ldr	r0, [pc, #152]	@ (80061e0 <HAL_UART_MspInit+0x110>)
 8006148:	f000 fffe 	bl	8007148 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800614c:	2200      	movs	r2, #0
 800614e:	2100      	movs	r1, #0
 8006150:	2025      	movs	r0, #37	@ 0x25
 8006152:	f000 fc46 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006156:	2025      	movs	r0, #37	@ 0x25
 8006158:	f000 fc5f 	bl	8006a1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800615c:	e038      	b.n	80061d0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a20      	ldr	r2, [pc, #128]	@ (80061e4 <HAL_UART_MspInit+0x114>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d133      	bne.n	80061d0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006168:	2300      	movs	r3, #0
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	4b1b      	ldr	r3, [pc, #108]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 800616e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006170:	4a1a      	ldr	r2, [pc, #104]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 8006172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006176:	6413      	str	r3, [r2, #64]	@ 0x40
 8006178:	4b18      	ldr	r3, [pc, #96]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	4b14      	ldr	r3, [pc, #80]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 800618a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800618c:	4a13      	ldr	r2, [pc, #76]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 800618e:	f043 0301 	orr.w	r3, r3, #1
 8006192:	6313      	str	r3, [r2, #48]	@ 0x30
 8006194:	4b11      	ldr	r3, [pc, #68]	@ (80061dc <HAL_UART_MspInit+0x10c>)
 8006196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80061a0:	230c      	movs	r3, #12
 80061a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a4:	2302      	movs	r3, #2
 80061a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a8:	2300      	movs	r3, #0
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ac:	2303      	movs	r3, #3
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80061b0:	2307      	movs	r3, #7
 80061b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061b4:	f107 031c 	add.w	r3, r7, #28
 80061b8:	4619      	mov	r1, r3
 80061ba:	4809      	ldr	r0, [pc, #36]	@ (80061e0 <HAL_UART_MspInit+0x110>)
 80061bc:	f000 ffc4 	bl	8007148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	2026      	movs	r0, #38	@ 0x26
 80061c6:	f000 fc0c 	bl	80069e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80061ca:	2026      	movs	r0, #38	@ 0x26
 80061cc:	f000 fc25 	bl	8006a1a <HAL_NVIC_EnableIRQ>
}
 80061d0:	bf00      	nop
 80061d2:	3730      	adds	r7, #48	@ 0x30
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40011000 	.word	0x40011000
 80061dc:	40023800 	.word	0x40023800
 80061e0:	40020000 	.word	0x40020000
 80061e4:	40004400 	.word	0x40004400

080061e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80061e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006220 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80061ec:	480d      	ldr	r0, [pc, #52]	@ (8006224 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80061ee:	490e      	ldr	r1, [pc, #56]	@ (8006228 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80061f0:	4a0e      	ldr	r2, [pc, #56]	@ (800622c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80061f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061f4:	e002      	b.n	80061fc <LoopCopyDataInit>

080061f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061fa:	3304      	adds	r3, #4

080061fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006200:	d3f9      	bcc.n	80061f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006202:	4a0b      	ldr	r2, [pc, #44]	@ (8006230 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006204:	4c0b      	ldr	r4, [pc, #44]	@ (8006234 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006208:	e001      	b.n	800620e <LoopFillZerobss>

0800620a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800620a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800620c:	3204      	adds	r2, #4

0800620e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800620e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006210:	d3fb      	bcc.n	800620a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006212:	f7fe fd6f 	bl	8004cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006216:	f006 f829 	bl	800c26c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800621a:	f7fd f831 	bl	8003280 <main>
  bx  lr    
 800621e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006228:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 800622c:	0801079c 	.word	0x0801079c
  ldr r2, =_sbss
 8006230:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8006234:	20000fb8 	.word	0x20000fb8

08006238 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006238:	e7fe      	b.n	8006238 <ADC_IRQHandler>
	...

0800623c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006240:	4b0e      	ldr	r3, [pc, #56]	@ (800627c <HAL_Init+0x40>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a0d      	ldr	r2, [pc, #52]	@ (800627c <HAL_Init+0x40>)
 8006246:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800624a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800624c:	4b0b      	ldr	r3, [pc, #44]	@ (800627c <HAL_Init+0x40>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a0a      	ldr	r2, [pc, #40]	@ (800627c <HAL_Init+0x40>)
 8006252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006256:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006258:	4b08      	ldr	r3, [pc, #32]	@ (800627c <HAL_Init+0x40>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a07      	ldr	r2, [pc, #28]	@ (800627c <HAL_Init+0x40>)
 800625e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006262:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006264:	2003      	movs	r0, #3
 8006266:	f000 fbb1 	bl	80069cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800626a:	200f      	movs	r0, #15
 800626c:	f000 f808 	bl	8006280 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006270:	f7fe fbfa 	bl	8004a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40023c00 	.word	0x40023c00

08006280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006288:	4b12      	ldr	r3, [pc, #72]	@ (80062d4 <HAL_InitTick+0x54>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <HAL_InitTick+0x58>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	4619      	mov	r1, r3
 8006292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006296:	fbb3 f3f1 	udiv	r3, r3, r1
 800629a:	fbb2 f3f3 	udiv	r3, r2, r3
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fbc9 	bl	8006a36 <HAL_SYSTICK_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e00e      	b.n	80062cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b0f      	cmp	r3, #15
 80062b2:	d80a      	bhi.n	80062ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062b4:	2200      	movs	r2, #0
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	f000 fb91 	bl	80069e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062c0:	4a06      	ldr	r2, [pc, #24]	@ (80062dc <HAL_InitTick+0x5c>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	e000      	b.n	80062cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000038 	.word	0x20000038
 80062d8:	20000078 	.word	0x20000078
 80062dc:	20000074 	.word	0x20000074

080062e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <HAL_IncTick+0x20>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <HAL_IncTick+0x24>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4413      	add	r3, r2
 80062f0:	4a04      	ldr	r2, [pc, #16]	@ (8006304 <HAL_IncTick+0x24>)
 80062f2:	6013      	str	r3, [r2, #0]
}
 80062f4:	bf00      	nop
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20000078 	.word	0x20000078
 8006304:	20000e68 	.word	0x20000e68

08006308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return uwTick;
 800630c:	4b03      	ldr	r3, [pc, #12]	@ (800631c <HAL_GetTick+0x14>)
 800630e:	681b      	ldr	r3, [r3, #0]
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000e68 	.word	0x20000e68

08006320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006328:	f7ff ffee 	bl	8006308 <HAL_GetTick>
 800632c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d005      	beq.n	8006346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800633a:	4b0a      	ldr	r3, [pc, #40]	@ (8006364 <HAL_Delay+0x44>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4413      	add	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006346:	bf00      	nop
 8006348:	f7ff ffde 	bl	8006308 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	429a      	cmp	r2, r3
 8006356:	d8f7      	bhi.n	8006348 <HAL_Delay+0x28>
  {
  }
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20000078 	.word	0x20000078

08006368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e033      	b.n	80063e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fa fe00 	bl	8000f8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d118      	bne.n	80063d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80063ae:	f023 0302 	bic.w	r3, r3, #2
 80063b2:	f043 0202 	orr.w	r2, r3, #2
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f93a 	bl	8006634 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ca:	f023 0303 	bic.w	r3, r3, #3
 80063ce:	f043 0201 	orr.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80063d6:	e001      	b.n	80063dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_ADC_ConfigChannel+0x1c>
 8006408:	2302      	movs	r3, #2
 800640a:	e105      	b.n	8006618 <HAL_ADC_ConfigChannel+0x228>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b09      	cmp	r3, #9
 800641a:	d925      	bls.n	8006468 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68d9      	ldr	r1, [r3, #12]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	4613      	mov	r3, r2
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4413      	add	r3, r2
 8006430:	3b1e      	subs	r3, #30
 8006432:	2207      	movs	r2, #7
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43da      	mvns	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	400a      	ands	r2, r1
 8006440:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68d9      	ldr	r1, [r3, #12]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	4618      	mov	r0, r3
 8006454:	4603      	mov	r3, r0
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	4403      	add	r3, r0
 800645a:	3b1e      	subs	r3, #30
 800645c:	409a      	lsls	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	e022      	b.n	80064ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6919      	ldr	r1, [r3, #16]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	4613      	mov	r3, r2
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	4413      	add	r3, r2
 800647c:	2207      	movs	r2, #7
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43da      	mvns	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	400a      	ands	r2, r1
 800648a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6919      	ldr	r1, [r3, #16]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	4618      	mov	r0, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	4403      	add	r3, r0
 80064a4:	409a      	lsls	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d824      	bhi.n	8006500 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	3b05      	subs	r3, #5
 80064c8:	221f      	movs	r2, #31
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43da      	mvns	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	400a      	ands	r2, r1
 80064d6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	4618      	mov	r0, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	3b05      	subs	r3, #5
 80064f2:	fa00 f203 	lsl.w	r2, r0, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80064fe:	e04c      	b.n	800659a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d824      	bhi.n	8006552 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	3b23      	subs	r3, #35	@ 0x23
 800651a:	221f      	movs	r2, #31
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	43da      	mvns	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	400a      	ands	r2, r1
 8006528:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	b29b      	uxth	r3, r3
 8006536:	4618      	mov	r0, r3
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	3b23      	subs	r3, #35	@ 0x23
 8006544:	fa00 f203 	lsl.w	r2, r0, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006550:	e023      	b.n	800659a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	3b41      	subs	r3, #65	@ 0x41
 8006564:	221f      	movs	r2, #31
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	43da      	mvns	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	400a      	ands	r2, r1
 8006572:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	4618      	mov	r0, r3
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	3b41      	subs	r3, #65	@ 0x41
 800658e:	fa00 f203 	lsl.w	r2, r0, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800659a:	4b22      	ldr	r3, [pc, #136]	@ (8006624 <HAL_ADC_ConfigChannel+0x234>)
 800659c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a21      	ldr	r2, [pc, #132]	@ (8006628 <HAL_ADC_ConfigChannel+0x238>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d109      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x1cc>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b12      	cmp	r3, #18
 80065ae:	d105      	bne.n	80065bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a19      	ldr	r2, [pc, #100]	@ (8006628 <HAL_ADC_ConfigChannel+0x238>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d123      	bne.n	800660e <HAL_ADC_ConfigChannel+0x21e>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d003      	beq.n	80065d6 <HAL_ADC_ConfigChannel+0x1e6>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b11      	cmp	r3, #17
 80065d4:	d11b      	bne.n	800660e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d111      	bne.n	800660e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80065ea:	4b10      	ldr	r3, [pc, #64]	@ (800662c <HAL_ADC_ConfigChannel+0x23c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a10      	ldr	r2, [pc, #64]	@ (8006630 <HAL_ADC_ConfigChannel+0x240>)
 80065f0:	fba2 2303 	umull	r2, r3, r2, r3
 80065f4:	0c9a      	lsrs	r2, r3, #18
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006600:	e002      	b.n	8006608 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	3b01      	subs	r3, #1
 8006606:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1f9      	bne.n	8006602 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40012300 	.word	0x40012300
 8006628:	40012000 	.word	0x40012000
 800662c:	20000038 	.word	0x20000038
 8006630:	431bde83 	.word	0x431bde83

08006634 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800663c:	4b79      	ldr	r3, [pc, #484]	@ (8006824 <ADC_Init+0x1f0>)
 800663e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	431a      	orrs	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6859      	ldr	r1, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	021a      	lsls	r2, r3, #8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800668c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689a      	ldr	r2, [r3, #8]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6899      	ldr	r1, [r3, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c6:	4a58      	ldr	r2, [pc, #352]	@ (8006828 <ADC_Init+0x1f4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d022      	beq.n	8006712 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80066da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6899      	ldr	r1, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80066fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6899      	ldr	r1, [r3, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	e00f      	b.n	8006732 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006730:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0202 	bic.w	r2, r2, #2
 8006740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6899      	ldr	r1, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	7e1b      	ldrb	r3, [r3, #24]
 800674c:	005a      	lsls	r2, r3, #1
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01b      	beq.n	8006798 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800676e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800677e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6859      	ldr	r1, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	3b01      	subs	r3, #1
 800678c:	035a      	lsls	r2, r3, #13
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	e007      	b.n	80067a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80067b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	051a      	lsls	r2, r3, #20
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80067dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6899      	ldr	r1, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067ea:	025a      	lsls	r2, r3, #9
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6899      	ldr	r1, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	029a      	lsls	r2, r3, #10
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	609a      	str	r2, [r3, #8]
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	40012300 	.word	0x40012300
 8006828:	0f000001 	.word	0x0f000001

0800682c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f003 0307 	and.w	r3, r3, #7
 800683a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800683c:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <__NVIC_SetPriorityGrouping+0x44>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006848:	4013      	ands	r3, r2
 800684a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006854:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800685c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800685e:	4a04      	ldr	r2, [pc, #16]	@ (8006870 <__NVIC_SetPriorityGrouping+0x44>)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	60d3      	str	r3, [r2, #12]
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	e000ed00 	.word	0xe000ed00

08006874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006878:	4b04      	ldr	r3, [pc, #16]	@ (800688c <__NVIC_GetPriorityGrouping+0x18>)
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	0a1b      	lsrs	r3, r3, #8
 800687e:	f003 0307 	and.w	r3, r3, #7
}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	e000ed00 	.word	0xe000ed00

08006890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800689a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	db0b      	blt.n	80068ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	f003 021f 	and.w	r2, r3, #31
 80068a8:	4907      	ldr	r1, [pc, #28]	@ (80068c8 <__NVIC_EnableIRQ+0x38>)
 80068aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ae:	095b      	lsrs	r3, r3, #5
 80068b0:	2001      	movs	r0, #1
 80068b2:	fa00 f202 	lsl.w	r2, r0, r2
 80068b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	e000e100 	.word	0xe000e100

080068cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4603      	mov	r3, r0
 80068d4:	6039      	str	r1, [r7, #0]
 80068d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	db0a      	blt.n	80068f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	490c      	ldr	r1, [pc, #48]	@ (8006918 <__NVIC_SetPriority+0x4c>)
 80068e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ea:	0112      	lsls	r2, r2, #4
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	440b      	add	r3, r1
 80068f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068f4:	e00a      	b.n	800690c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	4908      	ldr	r1, [pc, #32]	@ (800691c <__NVIC_SetPriority+0x50>)
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	f003 030f 	and.w	r3, r3, #15
 8006902:	3b04      	subs	r3, #4
 8006904:	0112      	lsls	r2, r2, #4
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	440b      	add	r3, r1
 800690a:	761a      	strb	r2, [r3, #24]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	e000e100 	.word	0xe000e100
 800691c:	e000ed00 	.word	0xe000ed00

08006920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006920:	b480      	push	{r7}
 8006922:	b089      	sub	sp, #36	@ 0x24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	f1c3 0307 	rsb	r3, r3, #7
 800693a:	2b04      	cmp	r3, #4
 800693c:	bf28      	it	cs
 800693e:	2304      	movcs	r3, #4
 8006940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3304      	adds	r3, #4
 8006946:	2b06      	cmp	r3, #6
 8006948:	d902      	bls.n	8006950 <NVIC_EncodePriority+0x30>
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3b03      	subs	r3, #3
 800694e:	e000      	b.n	8006952 <NVIC_EncodePriority+0x32>
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006954:	f04f 32ff 	mov.w	r2, #4294967295
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	fa02 f303 	lsl.w	r3, r2, r3
 800695e:	43da      	mvns	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	401a      	ands	r2, r3
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006968:	f04f 31ff 	mov.w	r1, #4294967295
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	fa01 f303 	lsl.w	r3, r1, r3
 8006972:	43d9      	mvns	r1, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006978:	4313      	orrs	r3, r2
         );
}
 800697a:	4618      	mov	r0, r3
 800697c:	3724      	adds	r7, #36	@ 0x24
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3b01      	subs	r3, #1
 8006994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006998:	d301      	bcc.n	800699e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800699a:	2301      	movs	r3, #1
 800699c:	e00f      	b.n	80069be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800699e:	4a0a      	ldr	r2, [pc, #40]	@ (80069c8 <SysTick_Config+0x40>)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3b01      	subs	r3, #1
 80069a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069a6:	210f      	movs	r1, #15
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	f7ff ff8e 	bl	80068cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069b0:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <SysTick_Config+0x40>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069b6:	4b04      	ldr	r3, [pc, #16]	@ (80069c8 <SysTick_Config+0x40>)
 80069b8:	2207      	movs	r2, #7
 80069ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	e000e010 	.word	0xe000e010

080069cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff ff29 	bl	800682c <__NVIC_SetPriorityGrouping>
}
 80069da:	bf00      	nop
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b086      	sub	sp, #24
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4603      	mov	r3, r0
 80069ea:	60b9      	str	r1, [r7, #8]
 80069ec:	607a      	str	r2, [r7, #4]
 80069ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069f4:	f7ff ff3e 	bl	8006874 <__NVIC_GetPriorityGrouping>
 80069f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	6978      	ldr	r0, [r7, #20]
 8006a00:	f7ff ff8e 	bl	8006920 <NVIC_EncodePriority>
 8006a04:	4602      	mov	r2, r0
 8006a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ff5d 	bl	80068cc <__NVIC_SetPriority>
}
 8006a12:	bf00      	nop
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	4603      	mov	r3, r0
 8006a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff ff31 	bl	8006890 <__NVIC_EnableIRQ>
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ffa2 	bl	8006988 <SysTick_Config>
 8006a44:	4603      	mov	r3, r0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a5c:	f7ff fc54 	bl	8006308 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e099      	b.n	8006ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a8c:	e00f      	b.n	8006aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a8e:	f7ff fc3b 	bl	8006308 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b05      	cmp	r3, #5
 8006a9a:	d908      	bls.n	8006aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2203      	movs	r2, #3
 8006aa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e078      	b.n	8006ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e8      	bne.n	8006a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4b38      	ldr	r3, [pc, #224]	@ (8006ba8 <HAL_DMA_Init+0x158>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d107      	bne.n	8006b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b10:	4313      	orrs	r3, r2
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0307 	bic.w	r3, r3, #7
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d117      	bne.n	8006b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00e      	beq.n	8006b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa7b 	bl	8007050 <DMA_CheckFifoParam>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2240      	movs	r2, #64	@ 0x40
 8006b64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e016      	b.n	8006ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa32 	bl	8006fe4 <DMA_CalcBaseAndBitshift>
 8006b80:	4603      	mov	r3, r0
 8006b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b88:	223f      	movs	r2, #63	@ 0x3f
 8006b8a:	409a      	lsls	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	f010803f 	.word	0xf010803f

08006bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006bba:	f7ff fba5 	bl	8006308 <HAL_GetTick>
 8006bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d008      	beq.n	8006bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2280      	movs	r2, #128	@ 0x80
 8006bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e052      	b.n	8006c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0216 	bic.w	r2, r2, #22
 8006bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695a      	ldr	r2, [r3, #20]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <HAL_DMA_Abort+0x62>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0208 	bic.w	r2, r2, #8
 8006c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c2e:	e013      	b.n	8006c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c30:	f7ff fb6a 	bl	8006308 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d90c      	bls.n	8006c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2203      	movs	r2, #3
 8006c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e015      	b.n	8006c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e4      	bne.n	8006c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6a:	223f      	movs	r2, #63	@ 0x3f
 8006c6c:	409a      	lsls	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2280      	movs	r2, #128	@ 0x80
 8006ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e00c      	b.n	8006cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2205      	movs	r2, #5
 8006cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8006f18 <HAL_DMA_IRQHandler+0x248>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a8e      	ldr	r2, [pc, #568]	@ (8006f1c <HAL_DMA_IRQHandler+0x24c>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	0a9b      	lsrs	r3, r3, #10
 8006ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	409a      	lsls	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01a      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d013      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0204 	bic.w	r2, r2, #4
 8006d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d28:	2208      	movs	r2, #8
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d34:	f043 0201 	orr.w	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d40:	2201      	movs	r2, #1
 8006d42:	409a      	lsls	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d012      	beq.n	8006d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5e:	2201      	movs	r2, #1
 8006d60:	409a      	lsls	r2, r3
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6a:	f043 0202 	orr.w	r2, r3, #2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d76:	2204      	movs	r2, #4
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d012      	beq.n	8006da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d94:	2204      	movs	r2, #4
 8006d96:	409a      	lsls	r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da0:	f043 0204 	orr.w	r2, r3, #4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dac:	2210      	movs	r2, #16
 8006dae:	409a      	lsls	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d043      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d03c      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dca:	2210      	movs	r2, #16
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d018      	beq.n	8006e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d108      	bne.n	8006e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d024      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
 8006dfe:	e01f      	b.n	8006e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01b      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
 8006e10:	e016      	b.n	8006e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0208 	bic.w	r2, r2, #8
 8006e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e44:	2220      	movs	r2, #32
 8006e46:	409a      	lsls	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 808f 	beq.w	8006f70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8087 	beq.w	8006f70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e66:	2220      	movs	r2, #32
 8006e68:	409a      	lsls	r2, r3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d136      	bne.n	8006ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0216 	bic.w	r2, r2, #22
 8006e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <HAL_DMA_IRQHandler+0x1da>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0208 	bic.w	r2, r2, #8
 8006eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ebe:	223f      	movs	r2, #63	@ 0x3f
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d07e      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
        }
        return;
 8006ee6:	e079      	b.n	8006fdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01d      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10d      	bne.n	8006f20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d031      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	e02c      	b.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
 8006f16:	bf00      	nop
 8006f18:	20000038 	.word	0x20000038
 8006f1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d023      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
 8006f30:	e01e      	b.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10f      	bne.n	8006f60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0210 	bic.w	r2, r2, #16
 8006f4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d032      	beq.n	8006fde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d022      	beq.n	8006fca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2205      	movs	r2, #5
 8006f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d307      	bcc.n	8006fb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f2      	bne.n	8006f9c <HAL_DMA_IRQHandler+0x2cc>
 8006fb6:	e000      	b.n	8006fba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006fb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
 8006fda:	e000      	b.n	8006fde <HAL_DMA_IRQHandler+0x30e>
        return;
 8006fdc:	bf00      	nop
    }
  }
}
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	3b10      	subs	r3, #16
 8006ff4:	4a14      	ldr	r2, [pc, #80]	@ (8007048 <DMA_CalcBaseAndBitshift+0x64>)
 8006ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffa:	091b      	lsrs	r3, r3, #4
 8006ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006ffe:	4a13      	ldr	r2, [pc, #76]	@ (800704c <DMA_CalcBaseAndBitshift+0x68>)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b03      	cmp	r3, #3
 8007010:	d909      	bls.n	8007026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	1d1a      	adds	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	659a      	str	r2, [r3, #88]	@ 0x58
 8007024:	e007      	b.n	8007036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	aaaaaaab 	.word	0xaaaaaaab
 800704c:	080106a4 	.word	0x080106a4

08007050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d11f      	bne.n	80070aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b03      	cmp	r3, #3
 800706e:	d856      	bhi.n	800711e <DMA_CheckFifoParam+0xce>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <DMA_CheckFifoParam+0x28>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	08007089 	.word	0x08007089
 800707c:	0800709b 	.word	0x0800709b
 8007080:	08007089 	.word	0x08007089
 8007084:	0800711f 	.word	0x0800711f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007090:	2b00      	cmp	r3, #0
 8007092:	d046      	beq.n	8007122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007098:	e043      	b.n	8007122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070a2:	d140      	bne.n	8007126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070a8:	e03d      	b.n	8007126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070b2:	d121      	bne.n	80070f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d837      	bhi.n	800712a <DMA_CheckFifoParam+0xda>
 80070ba:	a201      	add	r2, pc, #4	@ (adr r2, 80070c0 <DMA_CheckFifoParam+0x70>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070d1 	.word	0x080070d1
 80070c4:	080070d7 	.word	0x080070d7
 80070c8:	080070d1 	.word	0x080070d1
 80070cc:	080070e9 	.word	0x080070e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
      break;
 80070d4:	e030      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d025      	beq.n	800712e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e6:	e022      	b.n	800712e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070f0:	d11f      	bne.n	8007132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80070f6:	e01c      	b.n	8007132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d903      	bls.n	8007106 <DMA_CheckFifoParam+0xb6>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b03      	cmp	r3, #3
 8007102:	d003      	beq.n	800710c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007104:	e018      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]
      break;
 800710a:	e015      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00e      	beq.n	8007136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
      break;
 800711c:	e00b      	b.n	8007136 <DMA_CheckFifoParam+0xe6>
      break;
 800711e:	bf00      	nop
 8007120:	e00a      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      break;
 8007122:	bf00      	nop
 8007124:	e008      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      break;
 8007126:	bf00      	nop
 8007128:	e006      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      break;
 800712a:	bf00      	nop
 800712c:	e004      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      break;
 800712e:	bf00      	nop
 8007130:	e002      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      break;   
 8007132:	bf00      	nop
 8007134:	e000      	b.n	8007138 <DMA_CheckFifoParam+0xe8>
      break;
 8007136:	bf00      	nop
    }
  } 
  
  return status; 
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop

08007148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007148:	b480      	push	{r7}
 800714a:	b089      	sub	sp, #36	@ 0x24
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800715e:	2300      	movs	r3, #0
 8007160:	61fb      	str	r3, [r7, #28]
 8007162:	e16b      	b.n	800743c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007164:	2201      	movs	r2, #1
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4013      	ands	r3, r2
 8007176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	429a      	cmp	r2, r3
 800717e:	f040 815a 	bne.w	8007436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b01      	cmp	r3, #1
 800718c:	d005      	beq.n	800719a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007196:	2b02      	cmp	r3, #2
 8007198:	d130      	bne.n	80071fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	2203      	movs	r2, #3
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43db      	mvns	r3, r3
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	4013      	ands	r3, r2
 80071b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	69ba      	ldr	r2, [r7, #24]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071d0:	2201      	movs	r2, #1
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	43db      	mvns	r3, r3
 80071da:	69ba      	ldr	r2, [r7, #24]
 80071dc:	4013      	ands	r3, r2
 80071de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	f003 0201 	and.w	r2, r3, #1
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f003 0303 	and.w	r3, r3, #3
 8007204:	2b03      	cmp	r3, #3
 8007206:	d017      	beq.n	8007238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	2203      	movs	r2, #3
 8007214:	fa02 f303 	lsl.w	r3, r2, r3
 8007218:	43db      	mvns	r3, r3
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	4013      	ands	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4313      	orrs	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f003 0303 	and.w	r3, r3, #3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d123      	bne.n	800728c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	08da      	lsrs	r2, r3, #3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3208      	adds	r2, #8
 800724c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	220f      	movs	r2, #15
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	43db      	mvns	r3, r3
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4013      	ands	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	fa02 f303 	lsl.w	r3, r2, r3
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	4313      	orrs	r3, r2
 800727c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	08da      	lsrs	r2, r3, #3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	3208      	adds	r2, #8
 8007286:	69b9      	ldr	r1, [r7, #24]
 8007288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	2203      	movs	r2, #3
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	4013      	ands	r3, r2
 80072a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f003 0203 	and.w	r2, r3, #3
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80b4 	beq.w	8007436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	4b60      	ldr	r3, [pc, #384]	@ (8007454 <HAL_GPIO_Init+0x30c>)
 80072d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d6:	4a5f      	ldr	r2, [pc, #380]	@ (8007454 <HAL_GPIO_Init+0x30c>)
 80072d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80072de:	4b5d      	ldr	r3, [pc, #372]	@ (8007454 <HAL_GPIO_Init+0x30c>)
 80072e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80072ea:	4a5b      	ldr	r2, [pc, #364]	@ (8007458 <HAL_GPIO_Init+0x310>)
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	089b      	lsrs	r3, r3, #2
 80072f0:	3302      	adds	r3, #2
 80072f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	220f      	movs	r2, #15
 8007302:	fa02 f303 	lsl.w	r3, r2, r3
 8007306:	43db      	mvns	r3, r3
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	4013      	ands	r3, r2
 800730c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a52      	ldr	r2, [pc, #328]	@ (800745c <HAL_GPIO_Init+0x314>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d02b      	beq.n	800736e <HAL_GPIO_Init+0x226>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a51      	ldr	r2, [pc, #324]	@ (8007460 <HAL_GPIO_Init+0x318>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d025      	beq.n	800736a <HAL_GPIO_Init+0x222>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a50      	ldr	r2, [pc, #320]	@ (8007464 <HAL_GPIO_Init+0x31c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01f      	beq.n	8007366 <HAL_GPIO_Init+0x21e>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a4f      	ldr	r2, [pc, #316]	@ (8007468 <HAL_GPIO_Init+0x320>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d019      	beq.n	8007362 <HAL_GPIO_Init+0x21a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a4e      	ldr	r2, [pc, #312]	@ (800746c <HAL_GPIO_Init+0x324>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_GPIO_Init+0x216>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a4d      	ldr	r2, [pc, #308]	@ (8007470 <HAL_GPIO_Init+0x328>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00d      	beq.n	800735a <HAL_GPIO_Init+0x212>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a4c      	ldr	r2, [pc, #304]	@ (8007474 <HAL_GPIO_Init+0x32c>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d007      	beq.n	8007356 <HAL_GPIO_Init+0x20e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a4b      	ldr	r2, [pc, #300]	@ (8007478 <HAL_GPIO_Init+0x330>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_GPIO_Init+0x20a>
 800734e:	2307      	movs	r3, #7
 8007350:	e00e      	b.n	8007370 <HAL_GPIO_Init+0x228>
 8007352:	2308      	movs	r3, #8
 8007354:	e00c      	b.n	8007370 <HAL_GPIO_Init+0x228>
 8007356:	2306      	movs	r3, #6
 8007358:	e00a      	b.n	8007370 <HAL_GPIO_Init+0x228>
 800735a:	2305      	movs	r3, #5
 800735c:	e008      	b.n	8007370 <HAL_GPIO_Init+0x228>
 800735e:	2304      	movs	r3, #4
 8007360:	e006      	b.n	8007370 <HAL_GPIO_Init+0x228>
 8007362:	2303      	movs	r3, #3
 8007364:	e004      	b.n	8007370 <HAL_GPIO_Init+0x228>
 8007366:	2302      	movs	r3, #2
 8007368:	e002      	b.n	8007370 <HAL_GPIO_Init+0x228>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <HAL_GPIO_Init+0x228>
 800736e:	2300      	movs	r3, #0
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	f002 0203 	and.w	r2, r2, #3
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	4093      	lsls	r3, r2
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	4313      	orrs	r3, r2
 800737e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007380:	4935      	ldr	r1, [pc, #212]	@ (8007458 <HAL_GPIO_Init+0x310>)
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	3302      	adds	r3, #2
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800738e:	4b3b      	ldr	r3, [pc, #236]	@ (800747c <HAL_GPIO_Init+0x334>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	43db      	mvns	r3, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4013      	ands	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80073b2:	4a32      	ldr	r2, [pc, #200]	@ (800747c <HAL_GPIO_Init+0x334>)
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80073b8:	4b30      	ldr	r3, [pc, #192]	@ (800747c <HAL_GPIO_Init+0x334>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	4013      	ands	r3, r2
 80073c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	4313      	orrs	r3, r2
 80073da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80073dc:	4a27      	ldr	r2, [pc, #156]	@ (800747c <HAL_GPIO_Init+0x334>)
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073e2:	4b26      	ldr	r3, [pc, #152]	@ (800747c <HAL_GPIO_Init+0x334>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	43db      	mvns	r3, r3
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	4013      	ands	r3, r2
 80073f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007406:	4a1d      	ldr	r2, [pc, #116]	@ (800747c <HAL_GPIO_Init+0x334>)
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800740c:	4b1b      	ldr	r3, [pc, #108]	@ (800747c <HAL_GPIO_Init+0x334>)
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	43db      	mvns	r3, r3
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	4013      	ands	r3, r2
 800741a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007430:	4a12      	ldr	r2, [pc, #72]	@ (800747c <HAL_GPIO_Init+0x334>)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	3301      	adds	r3, #1
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	2b0f      	cmp	r3, #15
 8007440:	f67f ae90 	bls.w	8007164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	3724      	adds	r7, #36	@ 0x24
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800
 8007458:	40013800 	.word	0x40013800
 800745c:	40020000 	.word	0x40020000
 8007460:	40020400 	.word	0x40020400
 8007464:	40020800 	.word	0x40020800
 8007468:	40020c00 	.word	0x40020c00
 800746c:	40021000 	.word	0x40021000
 8007470:	40021400 	.word	0x40021400
 8007474:	40021800 	.word	0x40021800
 8007478:	40021c00 	.word	0x40021c00
 800747c:	40013c00 	.word	0x40013c00

08007480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	887b      	ldrh	r3, [r7, #2]
 8007492:	4013      	ands	r3, r2
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
 800749c:	e001      	b.n	80074a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	807b      	strh	r3, [r7, #2]
 80074bc:	4613      	mov	r3, r2
 80074be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074c0:	787b      	ldrb	r3, [r7, #1]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074c6:	887a      	ldrh	r2, [r7, #2]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074cc:	e003      	b.n	80074d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074ce:	887b      	ldrh	r3, [r7, #2]
 80074d0:	041a      	lsls	r2, r3, #16
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	619a      	str	r2, [r3, #24]
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	460b      	mov	r3, r1
 80074ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80074f4:	887a      	ldrh	r2, [r7, #2]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4013      	ands	r3, r2
 80074fa:	041a      	lsls	r2, r3, #16
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	43d9      	mvns	r1, r3
 8007500:	887b      	ldrh	r3, [r7, #2]
 8007502:	400b      	ands	r3, r1
 8007504:	431a      	orrs	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	619a      	str	r2, [r3, #24]
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e12b      	b.n	8007782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fa ff70 	bl	8002424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2224      	movs	r2, #36	@ 0x24
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800756a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800757a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800757c:	f001 fbfc 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 8007580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	4a81      	ldr	r2, [pc, #516]	@ (800778c <HAL_I2C_Init+0x274>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d807      	bhi.n	800759c <HAL_I2C_Init+0x84>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4a80      	ldr	r2, [pc, #512]	@ (8007790 <HAL_I2C_Init+0x278>)
 8007590:	4293      	cmp	r3, r2
 8007592:	bf94      	ite	ls
 8007594:	2301      	movls	r3, #1
 8007596:	2300      	movhi	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e006      	b.n	80075aa <HAL_I2C_Init+0x92>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4a7d      	ldr	r2, [pc, #500]	@ (8007794 <HAL_I2C_Init+0x27c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	bf94      	ite	ls
 80075a4:	2301      	movls	r3, #1
 80075a6:	2300      	movhi	r3, #0
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e0e7      	b.n	8007782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4a78      	ldr	r2, [pc, #480]	@ (8007798 <HAL_I2C_Init+0x280>)
 80075b6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ba:	0c9b      	lsrs	r3, r3, #18
 80075bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4a6a      	ldr	r2, [pc, #424]	@ (800778c <HAL_I2C_Init+0x274>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d802      	bhi.n	80075ec <HAL_I2C_Init+0xd4>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	3301      	adds	r3, #1
 80075ea:	e009      	b.n	8007600 <HAL_I2C_Init+0xe8>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80075f2:	fb02 f303 	mul.w	r3, r2, r3
 80075f6:	4a69      	ldr	r2, [pc, #420]	@ (800779c <HAL_I2C_Init+0x284>)
 80075f8:	fba2 2303 	umull	r2, r3, r2, r3
 80075fc:	099b      	lsrs	r3, r3, #6
 80075fe:	3301      	adds	r3, #1
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6812      	ldr	r2, [r2, #0]
 8007604:	430b      	orrs	r3, r1
 8007606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007612:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	495c      	ldr	r1, [pc, #368]	@ (800778c <HAL_I2C_Init+0x274>)
 800761c:	428b      	cmp	r3, r1
 800761e:	d819      	bhi.n	8007654 <HAL_I2C_Init+0x13c>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	1e59      	subs	r1, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	fbb1 f3f3 	udiv	r3, r1, r3
 800762e:	1c59      	adds	r1, r3, #1
 8007630:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007634:	400b      	ands	r3, r1
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <HAL_I2C_Init+0x138>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	1e59      	subs	r1, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	fbb1 f3f3 	udiv	r3, r1, r3
 8007648:	3301      	adds	r3, #1
 800764a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800764e:	e051      	b.n	80076f4 <HAL_I2C_Init+0x1dc>
 8007650:	2304      	movs	r3, #4
 8007652:	e04f      	b.n	80076f4 <HAL_I2C_Init+0x1dc>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d111      	bne.n	8007680 <HAL_I2C_Init+0x168>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	1e58      	subs	r0, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6859      	ldr	r1, [r3, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	440b      	add	r3, r1
 800766a:	fbb0 f3f3 	udiv	r3, r0, r3
 800766e:	3301      	adds	r3, #1
 8007670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007674:	2b00      	cmp	r3, #0
 8007676:	bf0c      	ite	eq
 8007678:	2301      	moveq	r3, #1
 800767a:	2300      	movne	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	e012      	b.n	80076a6 <HAL_I2C_Init+0x18e>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	1e58      	subs	r0, r3, #1
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6859      	ldr	r1, [r3, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	0099      	lsls	r1, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	fbb0 f3f3 	udiv	r3, r0, r3
 8007696:	3301      	adds	r3, #1
 8007698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800769c:	2b00      	cmp	r3, #0
 800769e:	bf0c      	ite	eq
 80076a0:	2301      	moveq	r3, #1
 80076a2:	2300      	movne	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <HAL_I2C_Init+0x196>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e022      	b.n	80076f4 <HAL_I2C_Init+0x1dc>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10e      	bne.n	80076d4 <HAL_I2C_Init+0x1bc>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	1e58      	subs	r0, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6859      	ldr	r1, [r3, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	440b      	add	r3, r1
 80076c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80076c8:	3301      	adds	r3, #1
 80076ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076d2:	e00f      	b.n	80076f4 <HAL_I2C_Init+0x1dc>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	1e58      	subs	r0, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6859      	ldr	r1, [r3, #4]
 80076dc:	460b      	mov	r3, r1
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	0099      	lsls	r1, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ea:	3301      	adds	r3, #1
 80076ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	6809      	ldr	r1, [r1, #0]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	69da      	ldr	r2, [r3, #28]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007722:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6911      	ldr	r1, [r2, #16]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	68d2      	ldr	r2, [r2, #12]
 800772e:	4311      	orrs	r1, r2
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	430b      	orrs	r3, r1
 8007736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695a      	ldr	r2, [r3, #20]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	431a      	orrs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	430a      	orrs	r2, r1
 8007752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	000186a0 	.word	0x000186a0
 8007790:	001e847f 	.word	0x001e847f
 8007794:	003d08ff 	.word	0x003d08ff
 8007798:	431bde83 	.word	0x431bde83
 800779c:	10624dd3 	.word	0x10624dd3

080077a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	4608      	mov	r0, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	461a      	mov	r2, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	817b      	strh	r3, [r7, #10]
 80077b2:	460b      	mov	r3, r1
 80077b4:	813b      	strh	r3, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077ba:	f7fe fda5 	bl	8006308 <HAL_GetTick>
 80077be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b20      	cmp	r3, #32
 80077ca:	f040 80d9 	bne.w	8007980 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	2319      	movs	r3, #25
 80077d4:	2201      	movs	r2, #1
 80077d6:	496d      	ldr	r1, [pc, #436]	@ (800798c <HAL_I2C_Mem_Write+0x1ec>)
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fc7f 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80077e4:	2302      	movs	r3, #2
 80077e6:	e0cc      	b.n	8007982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_I2C_Mem_Write+0x56>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e0c5      	b.n	8007982 <HAL_I2C_Mem_Write+0x1e2>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d007      	beq.n	800781c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800782a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2221      	movs	r2, #33	@ 0x21
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2240      	movs	r2, #64	@ 0x40
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a3a      	ldr	r2, [r7, #32]
 8007846:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800784c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a4d      	ldr	r2, [pc, #308]	@ (8007990 <HAL_I2C_Mem_Write+0x1f0>)
 800785c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800785e:	88f8      	ldrh	r0, [r7, #6]
 8007860:	893a      	ldrh	r2, [r7, #8]
 8007862:	8979      	ldrh	r1, [r7, #10]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786a:	9300      	str	r3, [sp, #0]
 800786c:	4603      	mov	r3, r0
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fab6 	bl	8007de0 <I2C_RequestMemoryWrite>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d052      	beq.n	8007920 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e081      	b.n	8007982 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 fd00 	bl	8008288 <I2C_WaitOnTXEFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007892:	2b04      	cmp	r3, #4
 8007894:	d107      	bne.n	80078a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80078a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e06b      	b.n	8007982 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d11b      	bne.n	8007920 <HAL_I2C_Mem_Write+0x180>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790a:	3b01      	subs	r3, #1
 800790c:	b29a      	uxth	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1aa      	bne.n	800787e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 fcec 	bl	800830a <I2C_WaitOnBTFFlagUntilTimeout>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00d      	beq.n	8007954 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793c:	2b04      	cmp	r3, #4
 800793e:	d107      	bne.n	8007950 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800794e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e016      	b.n	8007982 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e000      	b.n	8007982 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	00100002 	.word	0x00100002
 8007990:	ffff0000 	.word	0xffff0000

08007994 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	@ 0x30
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	461a      	mov	r2, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	817b      	strh	r3, [r7, #10]
 80079a6:	460b      	mov	r3, r1
 80079a8:	813b      	strh	r3, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079ae:	f7fe fcab 	bl	8006308 <HAL_GetTick>
 80079b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b20      	cmp	r3, #32
 80079be:	f040 8208 	bne.w	8007dd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	2319      	movs	r3, #25
 80079c8:	2201      	movs	r2, #1
 80079ca:	497b      	ldr	r1, [pc, #492]	@ (8007bb8 <HAL_I2C_Mem_Read+0x224>)
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fb85 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80079d8:	2302      	movs	r3, #2
 80079da:	e1fb      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d101      	bne.n	80079ea <HAL_I2C_Mem_Read+0x56>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e1f4      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d007      	beq.n	8007a10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0201 	orr.w	r2, r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2222      	movs	r2, #34	@ 0x22
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2240      	movs	r2, #64	@ 0x40
 8007a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8007a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4a5b      	ldr	r2, [pc, #364]	@ (8007bbc <HAL_I2C_Mem_Read+0x228>)
 8007a50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a52:	88f8      	ldrh	r0, [r7, #6]
 8007a54:	893a      	ldrh	r2, [r7, #8]
 8007a56:	8979      	ldrh	r1, [r7, #10]
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	9301      	str	r3, [sp, #4]
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	4603      	mov	r3, r0
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 fa52 	bl	8007f0c <I2C_RequestMemoryRead>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e1b0      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d113      	bne.n	8007aa2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	623b      	str	r3, [r7, #32]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	623b      	str	r3, [r7, #32]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	e184      	b.n	8007dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d11b      	bne.n	8007ae2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aba:	2300      	movs	r3, #0
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	61fb      	str	r3, [r7, #28]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	61fb      	str	r3, [r7, #28]
 8007ace:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e164      	b.n	8007dac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d11b      	bne.n	8007b22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	61bb      	str	r3, [r7, #24]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	e144      	b.n	8007dac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b38:	e138      	b.n	8007dac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f200 80f1 	bhi.w	8007d26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d123      	bne.n	8007b94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fc1b 	bl	800838c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e139      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007b92:	e10b      	b.n	8007dac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d14e      	bne.n	8007c3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4906      	ldr	r1, [pc, #24]	@ (8007bc0 <HAL_I2C_Mem_Read+0x22c>)
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fa98 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e10e      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
 8007bb6:	bf00      	nop
 8007bb8:	00100002 	.word	0x00100002
 8007bbc:	ffff0000 	.word	0xffff0000
 8007bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007c38:	e0b8      	b.n	8007dac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c40:	2200      	movs	r2, #0
 8007c42:	4966      	ldr	r1, [pc, #408]	@ (8007ddc <HAL_I2C_Mem_Read+0x448>)
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fa49 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0bf      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	494f      	ldr	r1, [pc, #316]	@ (8007ddc <HAL_I2C_Mem_Read+0x448>)
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fa1b 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e091      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d24:	e042      	b.n	8007dac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d28:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fb2e 	bl	800838c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e04c      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d118      	bne.n	8007dac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f aec2 	bne.w	8007b3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e000      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
  }
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	@ 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	00010004 	.word	0x00010004

08007de0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	817b      	strh	r3, [r7, #10]
 8007df2:	460b      	mov	r3, r1
 8007df4:	813b      	strh	r3, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007e08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 f960 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00d      	beq.n	8007e3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e30:	d103      	bne.n	8007e3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e05f      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e3e:	897b      	ldrh	r3, [r7, #10]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007e4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	6a3a      	ldr	r2, [r7, #32]
 8007e52:	492d      	ldr	r1, [pc, #180]	@ (8007f08 <I2C_RequestMemoryWrite+0x128>)
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f998 	bl	800818a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e04c      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	617b      	str	r3, [r7, #20]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e7c:	6a39      	ldr	r1, [r7, #32]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fa02 	bl	8008288 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00d      	beq.n	8007ea6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8e:	2b04      	cmp	r3, #4
 8007e90:	d107      	bne.n	8007ea2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ea0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e02b      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d105      	bne.n	8007eb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eac:	893b      	ldrh	r3, [r7, #8]
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	611a      	str	r2, [r3, #16]
 8007eb6:	e021      	b.n	8007efc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007eb8:	893b      	ldrh	r3, [r7, #8]
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ec8:	6a39      	ldr	r1, [r7, #32]
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 f9dc 	bl	8008288 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00d      	beq.n	8007ef2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d107      	bne.n	8007eee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007eec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e005      	b.n	8007efe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ef2:	893b      	ldrh	r3, [r7, #8]
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	00010002 	.word	0x00010002

08007f0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	4608      	mov	r0, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	817b      	strh	r3, [r7, #10]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	813b      	strh	r3, [r7, #8]
 8007f22:	4613      	mov	r3, r2
 8007f24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f8c2 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00d      	beq.n	8007f7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6c:	d103      	bne.n	8007f76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f74:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e0aa      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f7a:	897b      	ldrh	r3, [r7, #10]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	6a3a      	ldr	r2, [r7, #32]
 8007f8e:	4952      	ldr	r1, [pc, #328]	@ (80080d8 <I2C_RequestMemoryRead+0x1cc>)
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f8fa 	bl	800818a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e097      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fb8:	6a39      	ldr	r1, [r7, #32]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f000 f964 	bl	8008288 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00d      	beq.n	8007fe2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d107      	bne.n	8007fde <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e076      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007fe2:	88fb      	ldrh	r3, [r7, #6]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d105      	bne.n	8007ff4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007fe8:	893b      	ldrh	r3, [r7, #8]
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	611a      	str	r2, [r3, #16]
 8007ff2:	e021      	b.n	8008038 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ff4:	893b      	ldrh	r3, [r7, #8]
 8007ff6:	0a1b      	lsrs	r3, r3, #8
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008004:	6a39      	ldr	r1, [r7, #32]
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f93e 	bl	8008288 <I2C_WaitOnTXEFlagUntilTimeout>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00d      	beq.n	800802e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008016:	2b04      	cmp	r3, #4
 8008018:	d107      	bne.n	800802a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e050      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800803a:	6a39      	ldr	r1, [r7, #32]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f000 f923 	bl	8008288 <I2C_WaitOnTXEFlagUntilTimeout>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00d      	beq.n	8008064 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804c:	2b04      	cmp	r3, #4
 800804e:	d107      	bne.n	8008060 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681a      	ldr	r2, [r3, #0]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800805e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e035      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008072:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	2200      	movs	r2, #0
 800807c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f82b 	bl	80080dc <I2C_WaitOnFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00d      	beq.n	80080a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800809a:	d103      	bne.n	80080a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e013      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080a8:	897b      	ldrh	r3, [r7, #10]
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f043 0301 	orr.w	r3, r3, #1
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	6a3a      	ldr	r2, [r7, #32]
 80080bc:	4906      	ldr	r1, [pc, #24]	@ (80080d8 <I2C_RequestMemoryRead+0x1cc>)
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 f863 	bl	800818a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3718      	adds	r7, #24
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	00010002 	.word	0x00010002

080080dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080ec:	e025      	b.n	800813a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d021      	beq.n	800813a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080f6:	f7fe f907 	bl	8006308 <HAL_GetTick>
 80080fa:	4602      	mov	r2, r0
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d302      	bcc.n	800810c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d116      	bne.n	800813a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2200      	movs	r2, #0
 8008110:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2220      	movs	r2, #32
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008126:	f043 0220 	orr.w	r2, r3, #32
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e023      	b.n	8008182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	0c1b      	lsrs	r3, r3, #16
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	d10d      	bne.n	8008160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	43da      	mvns	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4013      	ands	r3, r2
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	bf0c      	ite	eq
 8008156:	2301      	moveq	r3, #1
 8008158:	2300      	movne	r3, #0
 800815a:	b2db      	uxtb	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	e00c      	b.n	800817a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	43da      	mvns	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4013      	ands	r3, r2
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	461a      	mov	r2, r3
 800817a:	79fb      	ldrb	r3, [r7, #7]
 800817c:	429a      	cmp	r2, r3
 800817e:	d0b6      	beq.n	80080ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	607a      	str	r2, [r7, #4]
 8008196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008198:	e051      	b.n	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a8:	d123      	bne.n	80081f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80081b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80081c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2220      	movs	r2, #32
 80081ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081de:	f043 0204 	orr.w	r2, r3, #4
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e046      	b.n	8008280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d021      	beq.n	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fa:	f7fe f885 	bl	8006308 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d116      	bne.n	800823e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2220      	movs	r2, #32
 800821a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822a:	f043 0220 	orr.w	r2, r3, #32
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e020      	b.n	8008280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	0c1b      	lsrs	r3, r3, #16
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b01      	cmp	r3, #1
 8008246:	d10c      	bne.n	8008262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	43da      	mvns	r2, r3
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4013      	ands	r3, r2
 8008254:	b29b      	uxth	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	bf14      	ite	ne
 800825a:	2301      	movne	r3, #1
 800825c:	2300      	moveq	r3, #0
 800825e:	b2db      	uxtb	r3, r3
 8008260:	e00b      	b.n	800827a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	43da      	mvns	r2, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	4013      	ands	r3, r2
 800826e:	b29b      	uxth	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	bf14      	ite	ne
 8008274:	2301      	movne	r3, #1
 8008276:	2300      	moveq	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d18d      	bne.n	800819a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008294:	e02d      	b.n	80082f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 f8ce 	bl	8008438 <I2C_IsAcknowledgeFailed>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e02d      	b.n	8008302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d021      	beq.n	80082f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ae:	f7fe f82b 	bl	8006308 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d302      	bcc.n	80082c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d116      	bne.n	80082f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2220      	movs	r2, #32
 80082ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082de:	f043 0220 	orr.w	r2, r3, #32
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e007      	b.n	8008302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082fc:	2b80      	cmp	r3, #128	@ 0x80
 80082fe:	d1ca      	bne.n	8008296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008316:	e02d      	b.n	8008374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 f88d 	bl	8008438 <I2C_IsAcknowledgeFailed>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e02d      	b.n	8008384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800832e:	d021      	beq.n	8008374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008330:	f7fd ffea 	bl	8006308 <HAL_GetTick>
 8008334:	4602      	mov	r2, r0
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d116      	bne.n	8008374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	f043 0220 	orr.w	r2, r3, #32
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e007      	b.n	8008384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b04      	cmp	r3, #4
 8008380:	d1ca      	bne.n	8008318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008398:	e042      	b.n	8008420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d119      	bne.n	80083dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0210 	mvn.w	r2, #16
 80083b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e029      	b.n	8008430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083dc:	f7fd ff94 	bl	8006308 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d302      	bcc.n	80083f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d116      	bne.n	8008420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	f043 0220 	orr.w	r2, r3, #32
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e007      	b.n	8008430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800842a:	2b40      	cmp	r3, #64	@ 0x40
 800842c:	d1b5      	bne.n	800839a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800844a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800844e:	d11b      	bne.n	8008488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2220      	movs	r2, #32
 8008464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008474:	f043 0204 	orr.w	r2, r3, #4
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
	...

08008498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e267      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0301 	and.w	r3, r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d075      	beq.n	80085a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084b6:	4b88      	ldr	r3, [pc, #544]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 030c 	and.w	r3, r3, #12
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d00c      	beq.n	80084dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084c2:	4b85      	ldr	r3, [pc, #532]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80084ca:	2b08      	cmp	r3, #8
 80084cc:	d112      	bne.n	80084f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80084ce:	4b82      	ldr	r3, [pc, #520]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084da:	d10b      	bne.n	80084f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084dc:	4b7e      	ldr	r3, [pc, #504]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d05b      	beq.n	80085a0 <HAL_RCC_OscConfig+0x108>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d157      	bne.n	80085a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e242      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084fc:	d106      	bne.n	800850c <HAL_RCC_OscConfig+0x74>
 80084fe:	4b76      	ldr	r3, [pc, #472]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a75      	ldr	r2, [pc, #468]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008508:	6013      	str	r3, [r2, #0]
 800850a:	e01d      	b.n	8008548 <HAL_RCC_OscConfig+0xb0>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008514:	d10c      	bne.n	8008530 <HAL_RCC_OscConfig+0x98>
 8008516:	4b70      	ldr	r3, [pc, #448]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a6f      	ldr	r2, [pc, #444]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 800851c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	4b6d      	ldr	r3, [pc, #436]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a6c      	ldr	r2, [pc, #432]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	e00b      	b.n	8008548 <HAL_RCC_OscConfig+0xb0>
 8008530:	4b69      	ldr	r3, [pc, #420]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a68      	ldr	r2, [pc, #416]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	4b66      	ldr	r3, [pc, #408]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a65      	ldr	r2, [pc, #404]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d013      	beq.n	8008578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008550:	f7fd feda 	bl	8006308 <HAL_GetTick>
 8008554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008558:	f7fd fed6 	bl	8006308 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b64      	cmp	r3, #100	@ 0x64
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e207      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800856a:	4b5b      	ldr	r3, [pc, #364]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f0      	beq.n	8008558 <HAL_RCC_OscConfig+0xc0>
 8008576:	e014      	b.n	80085a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008578:	f7fd fec6 	bl	8006308 <HAL_GetTick>
 800857c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800857e:	e008      	b.n	8008592 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008580:	f7fd fec2 	bl	8006308 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b64      	cmp	r3, #100	@ 0x64
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e1f3      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008592:	4b51      	ldr	r3, [pc, #324]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f0      	bne.n	8008580 <HAL_RCC_OscConfig+0xe8>
 800859e:	e000      	b.n	80085a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0302 	and.w	r3, r3, #2
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d063      	beq.n	8008676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085ae:	4b4a      	ldr	r3, [pc, #296]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f003 030c 	and.w	r3, r3, #12
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00b      	beq.n	80085d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085ba:	4b47      	ldr	r3, [pc, #284]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085c2:	2b08      	cmp	r3, #8
 80085c4:	d11c      	bne.n	8008600 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80085c6:	4b44      	ldr	r3, [pc, #272]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d116      	bne.n	8008600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085d2:	4b41      	ldr	r3, [pc, #260]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <HAL_RCC_OscConfig+0x152>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d001      	beq.n	80085ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e1c7      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085ea:	4b3b      	ldr	r3, [pc, #236]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	4937      	ldr	r1, [pc, #220]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085fe:	e03a      	b.n	8008676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d020      	beq.n	800864a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008608:	4b34      	ldr	r3, [pc, #208]	@ (80086dc <HAL_RCC_OscConfig+0x244>)
 800860a:	2201      	movs	r2, #1
 800860c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860e:	f7fd fe7b 	bl	8006308 <HAL_GetTick>
 8008612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008614:	e008      	b.n	8008628 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008616:	f7fd fe77 	bl	8006308 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e1a8      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008628:	4b2b      	ldr	r3, [pc, #172]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008634:	4b28      	ldr	r3, [pc, #160]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	4925      	ldr	r1, [pc, #148]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 8008644:	4313      	orrs	r3, r2
 8008646:	600b      	str	r3, [r1, #0]
 8008648:	e015      	b.n	8008676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800864a:	4b24      	ldr	r3, [pc, #144]	@ (80086dc <HAL_RCC_OscConfig+0x244>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008650:	f7fd fe5a 	bl	8006308 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008656:	e008      	b.n	800866a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008658:	f7fd fe56 	bl	8006308 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e187      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800866a:	4b1b      	ldr	r3, [pc, #108]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1f0      	bne.n	8008658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d036      	beq.n	80086f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d016      	beq.n	80086b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800868a:	4b15      	ldr	r3, [pc, #84]	@ (80086e0 <HAL_RCC_OscConfig+0x248>)
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008690:	f7fd fe3a 	bl	8006308 <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008698:	f7fd fe36 	bl	8006308 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e167      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086aa:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <HAL_RCC_OscConfig+0x240>)
 80086ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d0f0      	beq.n	8008698 <HAL_RCC_OscConfig+0x200>
 80086b6:	e01b      	b.n	80086f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086b8:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <HAL_RCC_OscConfig+0x248>)
 80086ba:	2200      	movs	r2, #0
 80086bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086be:	f7fd fe23 	bl	8006308 <HAL_GetTick>
 80086c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086c4:	e00e      	b.n	80086e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086c6:	f7fd fe1f 	bl	8006308 <HAL_GetTick>
 80086ca:	4602      	mov	r2, r0
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	1ad3      	subs	r3, r2, r3
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d907      	bls.n	80086e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e150      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
 80086d8:	40023800 	.word	0x40023800
 80086dc:	42470000 	.word	0x42470000
 80086e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80086e4:	4b88      	ldr	r3, [pc, #544]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80086e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1ea      	bne.n	80086c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8097 	beq.w	800882c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086fe:	2300      	movs	r3, #0
 8008700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008702:	4b81      	ldr	r3, [pc, #516]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10f      	bne.n	800872e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800870e:	2300      	movs	r3, #0
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	4b7d      	ldr	r3, [pc, #500]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008716:	4a7c      	ldr	r2, [pc, #496]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800871c:	6413      	str	r3, [r2, #64]	@ 0x40
 800871e:	4b7a      	ldr	r3, [pc, #488]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008726:	60bb      	str	r3, [r7, #8]
 8008728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800872a:	2301      	movs	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800872e:	4b77      	ldr	r3, [pc, #476]	@ (800890c <HAL_RCC_OscConfig+0x474>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008736:	2b00      	cmp	r3, #0
 8008738:	d118      	bne.n	800876c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800873a:	4b74      	ldr	r3, [pc, #464]	@ (800890c <HAL_RCC_OscConfig+0x474>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a73      	ldr	r2, [pc, #460]	@ (800890c <HAL_RCC_OscConfig+0x474>)
 8008740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008746:	f7fd fddf 	bl	8006308 <HAL_GetTick>
 800874a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800874c:	e008      	b.n	8008760 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800874e:	f7fd fddb 	bl	8006308 <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	2b02      	cmp	r3, #2
 800875a:	d901      	bls.n	8008760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e10c      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008760:	4b6a      	ldr	r3, [pc, #424]	@ (800890c <HAL_RCC_OscConfig+0x474>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0f0      	beq.n	800874e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d106      	bne.n	8008782 <HAL_RCC_OscConfig+0x2ea>
 8008774:	4b64      	ldr	r3, [pc, #400]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008778:	4a63      	ldr	r2, [pc, #396]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008780:	e01c      	b.n	80087bc <HAL_RCC_OscConfig+0x324>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	2b05      	cmp	r3, #5
 8008788:	d10c      	bne.n	80087a4 <HAL_RCC_OscConfig+0x30c>
 800878a:	4b5f      	ldr	r3, [pc, #380]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 800878c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878e:	4a5e      	ldr	r2, [pc, #376]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008790:	f043 0304 	orr.w	r3, r3, #4
 8008794:	6713      	str	r3, [r2, #112]	@ 0x70
 8008796:	4b5c      	ldr	r3, [pc, #368]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800879a:	4a5b      	ldr	r2, [pc, #364]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 800879c:	f043 0301 	orr.w	r3, r3, #1
 80087a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80087a2:	e00b      	b.n	80087bc <HAL_RCC_OscConfig+0x324>
 80087a4:	4b58      	ldr	r3, [pc, #352]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80087a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087a8:	4a57      	ldr	r2, [pc, #348]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80087aa:	f023 0301 	bic.w	r3, r3, #1
 80087ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80087b0:	4b55      	ldr	r3, [pc, #340]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b4:	4a54      	ldr	r2, [pc, #336]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80087b6:	f023 0304 	bic.w	r3, r3, #4
 80087ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d015      	beq.n	80087f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c4:	f7fd fda0 	bl	8006308 <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ca:	e00a      	b.n	80087e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087cc:	f7fd fd9c 	bl	8006308 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087da:	4293      	cmp	r3, r2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e0cb      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087e2:	4b49      	ldr	r3, [pc, #292]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80087e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0ee      	beq.n	80087cc <HAL_RCC_OscConfig+0x334>
 80087ee:	e014      	b.n	800881a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087f0:	f7fd fd8a 	bl	8006308 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087f6:	e00a      	b.n	800880e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087f8:	f7fd fd86 	bl	8006308 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008806:	4293      	cmp	r3, r2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e0b5      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800880e:	4b3e      	ldr	r3, [pc, #248]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1ee      	bne.n	80087f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d105      	bne.n	800882c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008820:	4b39      	ldr	r3, [pc, #228]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008824:	4a38      	ldr	r2, [pc, #224]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800882a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80a1 	beq.w	8008978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008836:	4b34      	ldr	r3, [pc, #208]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 030c 	and.w	r3, r3, #12
 800883e:	2b08      	cmp	r3, #8
 8008840:	d05c      	beq.n	80088fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d141      	bne.n	80088ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800884a:	4b31      	ldr	r3, [pc, #196]	@ (8008910 <HAL_RCC_OscConfig+0x478>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008850:	f7fd fd5a 	bl	8006308 <HAL_GetTick>
 8008854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008858:	f7fd fd56 	bl	8006308 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e087      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800886a:	4b27      	ldr	r3, [pc, #156]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f0      	bne.n	8008858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008884:	019b      	lsls	r3, r3, #6
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	3b01      	subs	r3, #1
 8008890:	041b      	lsls	r3, r3, #16
 8008892:	431a      	orrs	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008898:	061b      	lsls	r3, r3, #24
 800889a:	491b      	ldr	r1, [pc, #108]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 800889c:	4313      	orrs	r3, r2
 800889e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008910 <HAL_RCC_OscConfig+0x478>)
 80088a2:	2201      	movs	r2, #1
 80088a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a6:	f7fd fd2f 	bl	8006308 <HAL_GetTick>
 80088aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ac:	e008      	b.n	80088c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088ae:	f7fd fd2b 	bl	8006308 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e05c      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088c0:	4b11      	ldr	r3, [pc, #68]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0f0      	beq.n	80088ae <HAL_RCC_OscConfig+0x416>
 80088cc:	e054      	b.n	8008978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088ce:	4b10      	ldr	r3, [pc, #64]	@ (8008910 <HAL_RCC_OscConfig+0x478>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d4:	f7fd fd18 	bl	8006308 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088da:	e008      	b.n	80088ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088dc:	f7fd fd14 	bl	8006308 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d901      	bls.n	80088ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80088ea:	2303      	movs	r3, #3
 80088ec:	e045      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ee:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <HAL_RCC_OscConfig+0x470>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1f0      	bne.n	80088dc <HAL_RCC_OscConfig+0x444>
 80088fa:	e03d      	b.n	8008978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d107      	bne.n	8008914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e038      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
 8008908:	40023800 	.word	0x40023800
 800890c:	40007000 	.word	0x40007000
 8008910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008914:	4b1b      	ldr	r3, [pc, #108]	@ (8008984 <HAL_RCC_OscConfig+0x4ec>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d028      	beq.n	8008974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800892c:	429a      	cmp	r2, r3
 800892e:	d121      	bne.n	8008974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800893a:	429a      	cmp	r2, r3
 800893c:	d11a      	bne.n	8008974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008944:	4013      	ands	r3, r2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800894a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800894c:	4293      	cmp	r3, r2
 800894e:	d111      	bne.n	8008974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800895a:	085b      	lsrs	r3, r3, #1
 800895c:	3b01      	subs	r3, #1
 800895e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008960:	429a      	cmp	r2, r3
 8008962:	d107      	bne.n	8008974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800896e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008970:	429a      	cmp	r2, r3
 8008972:	d001      	beq.n	8008978 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e000      	b.n	800897a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40023800 	.word	0x40023800

08008988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e0cc      	b.n	8008b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800899c:	4b68      	ldr	r3, [pc, #416]	@ (8008b40 <HAL_RCC_ClockConfig+0x1b8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d90c      	bls.n	80089c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089aa:	4b65      	ldr	r3, [pc, #404]	@ (8008b40 <HAL_RCC_ClockConfig+0x1b8>)
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b2:	4b63      	ldr	r3, [pc, #396]	@ (8008b40 <HAL_RCC_ClockConfig+0x1b8>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d001      	beq.n	80089c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e0b8      	b.n	8008b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d020      	beq.n	8008a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089dc:	4b59      	ldr	r3, [pc, #356]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	4a58      	ldr	r2, [pc, #352]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 80089e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0308 	and.w	r3, r3, #8
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089f4:	4b53      	ldr	r3, [pc, #332]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	4a52      	ldr	r2, [pc, #328]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 80089fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80089fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a00:	4b50      	ldr	r3, [pc, #320]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	494d      	ldr	r1, [pc, #308]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d044      	beq.n	8008aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d107      	bne.n	8008a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a26:	4b47      	ldr	r3, [pc, #284]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d119      	bne.n	8008a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e07f      	b.n	8008b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b02      	cmp	r3, #2
 8008a3c:	d003      	beq.n	8008a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d107      	bne.n	8008a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a46:	4b3f      	ldr	r3, [pc, #252]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d109      	bne.n	8008a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e06f      	b.n	8008b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a56:	4b3b      	ldr	r3, [pc, #236]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d101      	bne.n	8008a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e067      	b.n	8008b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a66:	4b37      	ldr	r3, [pc, #220]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f023 0203 	bic.w	r2, r3, #3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	4934      	ldr	r1, [pc, #208]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a78:	f7fd fc46 	bl	8006308 <HAL_GetTick>
 8008a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a7e:	e00a      	b.n	8008a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a80:	f7fd fc42 	bl	8006308 <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d901      	bls.n	8008a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a92:	2303      	movs	r3, #3
 8008a94:	e04f      	b.n	8008b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a96:	4b2b      	ldr	r3, [pc, #172]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 020c 	and.w	r2, r3, #12
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d1eb      	bne.n	8008a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008aa8:	4b25      	ldr	r3, [pc, #148]	@ (8008b40 <HAL_RCC_ClockConfig+0x1b8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d20c      	bcs.n	8008ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ab6:	4b22      	ldr	r3, [pc, #136]	@ (8008b40 <HAL_RCC_ClockConfig+0x1b8>)
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008abe:	4b20      	ldr	r3, [pc, #128]	@ (8008b40 <HAL_RCC_ClockConfig+0x1b8>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d001      	beq.n	8008ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e032      	b.n	8008b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d008      	beq.n	8008aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008adc:	4b19      	ldr	r3, [pc, #100]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	4916      	ldr	r1, [pc, #88]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d009      	beq.n	8008b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008afa:	4b12      	ldr	r3, [pc, #72]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	490e      	ldr	r1, [pc, #56]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b0e:	f000 f821 	bl	8008b54 <HAL_RCC_GetSysClockFreq>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	091b      	lsrs	r3, r3, #4
 8008b1a:	f003 030f 	and.w	r3, r3, #15
 8008b1e:	490a      	ldr	r1, [pc, #40]	@ (8008b48 <HAL_RCC_ClockConfig+0x1c0>)
 8008b20:	5ccb      	ldrb	r3, [r1, r3]
 8008b22:	fa22 f303 	lsr.w	r3, r2, r3
 8008b26:	4a09      	ldr	r2, [pc, #36]	@ (8008b4c <HAL_RCC_ClockConfig+0x1c4>)
 8008b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b2a:	4b09      	ldr	r3, [pc, #36]	@ (8008b50 <HAL_RCC_ClockConfig+0x1c8>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fd fba6 	bl	8006280 <HAL_InitTick>

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	40023c00 	.word	0x40023c00
 8008b44:	40023800 	.word	0x40023800
 8008b48:	0801068c 	.word	0x0801068c
 8008b4c:	20000038 	.word	0x20000038
 8008b50:	20000074 	.word	0x20000074

08008b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b58:	b094      	sub	sp, #80	@ 0x50
 8008b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b60:	2300      	movs	r3, #0
 8008b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b64:	2300      	movs	r3, #0
 8008b66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b6c:	4b79      	ldr	r3, [pc, #484]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 030c 	and.w	r3, r3, #12
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d00d      	beq.n	8008b94 <HAL_RCC_GetSysClockFreq+0x40>
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	f200 80e1 	bhi.w	8008d40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <HAL_RCC_GetSysClockFreq+0x34>
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d003      	beq.n	8008b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8008b86:	e0db      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b88:	4b73      	ldr	r3, [pc, #460]	@ (8008d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008b8c:	e0db      	b.n	8008d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b8e:	4b73      	ldr	r3, [pc, #460]	@ (8008d5c <HAL_RCC_GetSysClockFreq+0x208>)
 8008b90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b92:	e0d8      	b.n	8008d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b94:	4b6f      	ldr	r3, [pc, #444]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d063      	beq.n	8008c72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008baa:	4b6a      	ldr	r3, [pc, #424]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	099b      	lsrs	r3, r3, #6
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008bc6:	4622      	mov	r2, r4
 8008bc8:	462b      	mov	r3, r5
 8008bca:	f04f 0000 	mov.w	r0, #0
 8008bce:	f04f 0100 	mov.w	r1, #0
 8008bd2:	0159      	lsls	r1, r3, #5
 8008bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bd8:	0150      	lsls	r0, r2, #5
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4621      	mov	r1, r4
 8008be0:	1a51      	subs	r1, r2, r1
 8008be2:	6139      	str	r1, [r7, #16]
 8008be4:	4629      	mov	r1, r5
 8008be6:	eb63 0301 	sbc.w	r3, r3, r1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	018b      	lsls	r3, r1, #6
 8008bfc:	4651      	mov	r1, sl
 8008bfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c02:	4651      	mov	r1, sl
 8008c04:	018a      	lsls	r2, r1, #6
 8008c06:	4651      	mov	r1, sl
 8008c08:	ebb2 0801 	subs.w	r8, r2, r1
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	eb63 0901 	sbc.w	r9, r3, r1
 8008c12:	f04f 0200 	mov.w	r2, #0
 8008c16:	f04f 0300 	mov.w	r3, #0
 8008c1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c26:	4690      	mov	r8, r2
 8008c28:	4699      	mov	r9, r3
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	eb18 0303 	adds.w	r3, r8, r3
 8008c30:	60bb      	str	r3, [r7, #8]
 8008c32:	462b      	mov	r3, r5
 8008c34:	eb49 0303 	adc.w	r3, r9, r3
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	f04f 0200 	mov.w	r2, #0
 8008c3e:	f04f 0300 	mov.w	r3, #0
 8008c42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c46:	4629      	mov	r1, r5
 8008c48:	024b      	lsls	r3, r1, #9
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c50:	4621      	mov	r1, r4
 8008c52:	024a      	lsls	r2, r1, #9
 8008c54:	4610      	mov	r0, r2
 8008c56:	4619      	mov	r1, r3
 8008c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c64:	f7f7 ff90 	bl	8000b88 <__aeabi_uldivmod>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c70:	e058      	b.n	8008d24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c72:	4b38      	ldr	r3, [pc, #224]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	099b      	lsrs	r3, r3, #6
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c82:	623b      	str	r3, [r7, #32]
 8008c84:	2300      	movs	r3, #0
 8008c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c8c:	4642      	mov	r2, r8
 8008c8e:	464b      	mov	r3, r9
 8008c90:	f04f 0000 	mov.w	r0, #0
 8008c94:	f04f 0100 	mov.w	r1, #0
 8008c98:	0159      	lsls	r1, r3, #5
 8008c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c9e:	0150      	lsls	r0, r2, #5
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8008caa:	4649      	mov	r1, r9
 8008cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	f04f 0300 	mov.w	r3, #0
 8008cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8008cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	00eb      	lsls	r3, r5, #3
 8008cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cda:	00e2      	lsls	r2, r4, #3
 8008cdc:	4614      	mov	r4, r2
 8008cde:	461d      	mov	r5, r3
 8008ce0:	4643      	mov	r3, r8
 8008ce2:	18e3      	adds	r3, r4, r3
 8008ce4:	603b      	str	r3, [r7, #0]
 8008ce6:	464b      	mov	r3, r9
 8008ce8:	eb45 0303 	adc.w	r3, r5, r3
 8008cec:	607b      	str	r3, [r7, #4]
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	028b      	lsls	r3, r1, #10
 8008cfe:	4621      	mov	r1, r4
 8008d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d04:	4621      	mov	r1, r4
 8008d06:	028a      	lsls	r2, r1, #10
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d0e:	2200      	movs	r2, #0
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	61fa      	str	r2, [r7, #28]
 8008d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d18:	f7f7 ff36 	bl	8000b88 <__aeabi_uldivmod>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4613      	mov	r3, r2
 8008d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d24:	4b0b      	ldr	r3, [pc, #44]	@ (8008d54 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	0c1b      	lsrs	r3, r3, #16
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d3e:	e002      	b.n	8008d46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d40:	4b05      	ldr	r3, [pc, #20]	@ (8008d58 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3750      	adds	r7, #80	@ 0x50
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d52:	bf00      	nop
 8008d54:	40023800 	.word	0x40023800
 8008d58:	00f42400 	.word	0x00f42400
 8008d5c:	007a1200 	.word	0x007a1200

08008d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d64:	4b03      	ldr	r3, [pc, #12]	@ (8008d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d66:	681b      	ldr	r3, [r3, #0]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000038 	.word	0x20000038

08008d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d7c:	f7ff fff0 	bl	8008d60 <HAL_RCC_GetHCLKFreq>
 8008d80:	4602      	mov	r2, r0
 8008d82:	4b05      	ldr	r3, [pc, #20]	@ (8008d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	0a9b      	lsrs	r3, r3, #10
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	4903      	ldr	r1, [pc, #12]	@ (8008d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d8e:	5ccb      	ldrb	r3, [r1, r3]
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	0801069c 	.word	0x0801069c

08008da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008da4:	f7ff ffdc 	bl	8008d60 <HAL_RCC_GetHCLKFreq>
 8008da8:	4602      	mov	r2, r0
 8008daa:	4b05      	ldr	r3, [pc, #20]	@ (8008dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	0b5b      	lsrs	r3, r3, #13
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	4903      	ldr	r1, [pc, #12]	@ (8008dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008db6:	5ccb      	ldrb	r3, [r1, r3]
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	0801069c 	.word	0x0801069c

08008dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e07b      	b.n	8008ed2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d108      	bne.n	8008df4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dea:	d009      	beq.n	8008e00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	61da      	str	r2, [r3, #28]
 8008df2:	e005      	b.n	8008e00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7fb fddc 	bl	80049d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e52:	431a      	orrs	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e70:	431a      	orrs	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e7a:	431a      	orrs	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e84:	ea42 0103 	orr.w	r1, r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	0c1b      	lsrs	r3, r3, #16
 8008e9e:	f003 0104 	and.w	r1, r3, #4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea6:	f003 0210 	and.w	r2, r3, #16
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69da      	ldr	r2, [r3, #28]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ec0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	603b      	str	r3, [r7, #0]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_SPI_Transmit+0x22>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e126      	b.n	800914a <HAL_SPI_Transmit+0x270>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f04:	f7fd fa00 	bl	8006308 <HAL_GetTick>
 8008f08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008f0a:	88fb      	ldrh	r3, [r7, #6]
 8008f0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d002      	beq.n	8008f20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f1e:	e10b      	b.n	8009138 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <HAL_SPI_Transmit+0x52>
 8008f26:	88fb      	ldrh	r3, [r7, #6]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008f30:	e102      	b.n	8009138 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2203      	movs	r2, #3
 8008f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	88fa      	ldrh	r2, [r7, #6]
 8008f4a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	88fa      	ldrh	r2, [r7, #6]
 8008f50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f78:	d10f      	bne.n	8008f9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa4:	2b40      	cmp	r3, #64	@ 0x40
 8008fa6:	d007      	beq.n	8008fb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fc0:	d14b      	bne.n	800905a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <HAL_SPI_Transmit+0xf6>
 8008fca:	8afb      	ldrh	r3, [r7, #22]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d13e      	bne.n	800904e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd4:	881a      	ldrh	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe0:	1c9a      	adds	r2, r3, #2
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	3b01      	subs	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008ff4:	e02b      	b.n	800904e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b02      	cmp	r3, #2
 8009002:	d112      	bne.n	800902a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009008:	881a      	ldrh	r2, [r3, #0]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009014:	1c9a      	adds	r2, r3, #2
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800901e:	b29b      	uxth	r3, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009028:	e011      	b.n	800904e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800902a:	f7fd f96d 	bl	8006308 <HAL_GetTick>
 800902e:	4602      	mov	r2, r0
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	1ad3      	subs	r3, r2, r3
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d803      	bhi.n	8009042 <HAL_SPI_Transmit+0x168>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009040:	d102      	bne.n	8009048 <HAL_SPI_Transmit+0x16e>
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d102      	bne.n	800904e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009048:	2303      	movs	r3, #3
 800904a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800904c:	e074      	b.n	8009138 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009052:	b29b      	uxth	r3, r3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1ce      	bne.n	8008ff6 <HAL_SPI_Transmit+0x11c>
 8009058:	e04c      	b.n	80090f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <HAL_SPI_Transmit+0x18e>
 8009062:	8afb      	ldrh	r3, [r7, #22]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d140      	bne.n	80090ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	330c      	adds	r3, #12
 8009072:	7812      	ldrb	r2, [r2, #0]
 8009074:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800908e:	e02c      	b.n	80090ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b02      	cmp	r3, #2
 800909c:	d113      	bne.n	80090c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	330c      	adds	r3, #12
 80090a8:	7812      	ldrb	r2, [r2, #0]
 80090aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b0:	1c5a      	adds	r2, r3, #1
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80090c4:	e011      	b.n	80090ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090c6:	f7fd f91f 	bl	8006308 <HAL_GetTick>
 80090ca:	4602      	mov	r2, r0
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d803      	bhi.n	80090de <HAL_SPI_Transmit+0x204>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090dc:	d102      	bne.n	80090e4 <HAL_SPI_Transmit+0x20a>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80090e8:	e026      	b.n	8009138 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1cd      	bne.n	8009090 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 fbcb 	bl	8009894 <SPI_EndRxTxTransaction>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2220      	movs	r2, #32
 8009108:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10a      	bne.n	8009128 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009112:	2300      	movs	r3, #0
 8009114:	613b      	str	r3, [r7, #16]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	613b      	str	r3, [r7, #16]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	613b      	str	r3, [r7, #16]
 8009126:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	77fb      	strb	r3, [r7, #31]
 8009134:	e000      	b.n	8009138 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009148:	7ffb      	ldrb	r3, [r7, #31]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b088      	sub	sp, #32
 8009156:	af02      	add	r7, sp, #8
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	4613      	mov	r3, r2
 8009160:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800916e:	d112      	bne.n	8009196 <HAL_SPI_Receive+0x44>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10e      	bne.n	8009196 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2204      	movs	r2, #4
 800917c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009180:	88fa      	ldrh	r2, [r7, #6]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	4613      	mov	r3, r2
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f8f1 	bl	8009374 <HAL_SPI_TransmitReceive>
 8009192:	4603      	mov	r3, r0
 8009194:	e0ea      	b.n	800936c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_SPI_Receive+0x52>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e0e3      	b.n	800936c <HAL_SPI_Receive+0x21a>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091ac:	f7fd f8ac 	bl	8006308 <HAL_GetTick>
 80091b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d002      	beq.n	80091c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80091be:	2302      	movs	r3, #2
 80091c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80091c2:	e0ca      	b.n	800935a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_SPI_Receive+0x7e>
 80091ca:	88fb      	ldrh	r3, [r7, #6]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80091d4:	e0c1      	b.n	800935a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2204      	movs	r2, #4
 80091da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	88fa      	ldrh	r2, [r7, #6]
 80091ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	88fa      	ldrh	r2, [r7, #6]
 80091f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800921c:	d10f      	bne.n	800923e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800922c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800923c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009248:	2b40      	cmp	r3, #64	@ 0x40
 800924a:	d007      	beq.n	800925c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800925a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d162      	bne.n	800932a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009264:	e02e      	b.n	80092c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b01      	cmp	r3, #1
 8009272:	d115      	bne.n	80092a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f103 020c 	add.w	r2, r3, #12
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009280:	7812      	ldrb	r2, [r2, #0]
 8009282:	b2d2      	uxtb	r2, r2
 8009284:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009294:	b29b      	uxth	r3, r3
 8009296:	3b01      	subs	r3, #1
 8009298:	b29a      	uxth	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800929e:	e011      	b.n	80092c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092a0:	f7fd f832 	bl	8006308 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d803      	bhi.n	80092b8 <HAL_SPI_Receive+0x166>
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	d102      	bne.n	80092be <HAL_SPI_Receive+0x16c>
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d102      	bne.n	80092c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80092c2:	e04a      	b.n	800935a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1cb      	bne.n	8009266 <HAL_SPI_Receive+0x114>
 80092ce:	e031      	b.n	8009334 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d113      	bne.n	8009306 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e8:	b292      	uxth	r2, r2
 80092ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f0:	1c9a      	adds	r2, r3, #2
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009304:	e011      	b.n	800932a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009306:	f7fc ffff 	bl	8006308 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d803      	bhi.n	800931e <HAL_SPI_Receive+0x1cc>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931c:	d102      	bne.n	8009324 <HAL_SPI_Receive+0x1d2>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009328:	e017      	b.n	800935a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800932e:	b29b      	uxth	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1cd      	bne.n	80092d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 fa45 	bl	80097c8 <SPI_EndRxTransaction>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2220      	movs	r2, #32
 8009348:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	75fb      	strb	r3, [r7, #23]
 8009356:	e000      	b.n	800935a <HAL_SPI_Receive+0x208>
  }

error :
 8009358:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08c      	sub	sp, #48	@ 0x30
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	607a      	str	r2, [r7, #4]
 8009380:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009382:	2301      	movs	r3, #1
 8009384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_SPI_TransmitReceive+0x26>
 8009396:	2302      	movs	r3, #2
 8009398:	e18a      	b.n	80096b0 <HAL_SPI_TransmitReceive+0x33c>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093a2:	f7fc ffb1 	bl	8006308 <HAL_GetTick>
 80093a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80093ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80093b8:	887b      	ldrh	r3, [r7, #2]
 80093ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80093bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d00f      	beq.n	80093e4 <HAL_SPI_TransmitReceive+0x70>
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093ca:	d107      	bne.n	80093dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d103      	bne.n	80093dc <HAL_SPI_TransmitReceive+0x68>
 80093d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093d8:	2b04      	cmp	r3, #4
 80093da:	d003      	beq.n	80093e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80093dc:	2302      	movs	r3, #2
 80093de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80093e2:	e15b      	b.n	800969c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0x82>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <HAL_SPI_TransmitReceive+0x82>
 80093f0:	887b      	ldrh	r3, [r7, #2]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d103      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80093fc:	e14e      	b.n	800969c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b04      	cmp	r3, #4
 8009408:	d003      	beq.n	8009412 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2205      	movs	r2, #5
 800940e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	887a      	ldrh	r2, [r7, #2]
 8009422:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	887a      	ldrh	r2, [r7, #2]
 8009428:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	887a      	ldrh	r2, [r7, #2]
 8009434:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	887a      	ldrh	r2, [r7, #2]
 800943a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009452:	2b40      	cmp	r3, #64	@ 0x40
 8009454:	d007      	beq.n	8009466 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009464:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800946e:	d178      	bne.n	8009562 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <HAL_SPI_TransmitReceive+0x10a>
 8009478:	8b7b      	ldrh	r3, [r7, #26]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d166      	bne.n	800954c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009482:	881a      	ldrh	r2, [r3, #0]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948e:	1c9a      	adds	r2, r3, #2
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009498:	b29b      	uxth	r3, r3
 800949a:	3b01      	subs	r3, #1
 800949c:	b29a      	uxth	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094a2:	e053      	b.n	800954c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d11b      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x176>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d016      	beq.n	80094ea <HAL_SPI_TransmitReceive+0x176>
 80094bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d113      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094c6:	881a      	ldrh	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d2:	1c9a      	adds	r2, r3, #2
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d119      	bne.n	800952c <HAL_SPI_TransmitReceive+0x1b8>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d014      	beq.n	800952c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950c:	b292      	uxth	r2, r2
 800950e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009514:	1c9a      	adds	r2, r3, #2
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800951e:	b29b      	uxth	r3, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009528:	2301      	movs	r3, #1
 800952a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800952c:	f7fc feec 	bl	8006308 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009538:	429a      	cmp	r2, r3
 800953a:	d807      	bhi.n	800954c <HAL_SPI_TransmitReceive+0x1d8>
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009542:	d003      	beq.n	800954c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800954a:	e0a7      	b.n	800969c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1a6      	bne.n	80094a4 <HAL_SPI_TransmitReceive+0x130>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800955a:	b29b      	uxth	r3, r3
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1a1      	bne.n	80094a4 <HAL_SPI_TransmitReceive+0x130>
 8009560:	e07c      	b.n	800965c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <HAL_SPI_TransmitReceive+0x1fc>
 800956a:	8b7b      	ldrh	r3, [r7, #26]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d16b      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	330c      	adds	r3, #12
 800957a:	7812      	ldrb	r2, [r2, #0]
 800957c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009582:	1c5a      	adds	r2, r3, #1
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800958c:	b29b      	uxth	r3, r3
 800958e:	3b01      	subs	r3, #1
 8009590:	b29a      	uxth	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009596:	e057      	b.n	8009648 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d11c      	bne.n	80095e0 <HAL_SPI_TransmitReceive+0x26c>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d017      	beq.n	80095e0 <HAL_SPI_TransmitReceive+0x26c>
 80095b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d114      	bne.n	80095e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	330c      	adds	r3, #12
 80095c0:	7812      	ldrb	r2, [r2, #0]
 80095c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	3b01      	subs	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d119      	bne.n	8009622 <HAL_SPI_TransmitReceive+0x2ae>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d014      	beq.n	8009622 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009602:	b2d2      	uxtb	r2, r2
 8009604:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009614:	b29b      	uxth	r3, r3
 8009616:	3b01      	subs	r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800961e:	2301      	movs	r3, #1
 8009620:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009622:	f7fc fe71 	bl	8006308 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800962e:	429a      	cmp	r2, r3
 8009630:	d803      	bhi.n	800963a <HAL_SPI_TransmitReceive+0x2c6>
 8009632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009638:	d102      	bne.n	8009640 <HAL_SPI_TransmitReceive+0x2cc>
 800963a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963c:	2b00      	cmp	r3, #0
 800963e:	d103      	bne.n	8009648 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8009646:	e029      	b.n	800969c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800964c:	b29b      	uxth	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1a2      	bne.n	8009598 <HAL_SPI_TransmitReceive+0x224>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009656:	b29b      	uxth	r3, r3
 8009658:	2b00      	cmp	r3, #0
 800965a:	d19d      	bne.n	8009598 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800965c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800965e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 f917 	bl	8009894 <SPI_EndRxTxTransaction>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d006      	beq.n	800967a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2220      	movs	r2, #32
 8009676:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8009678:	e010      	b.n	800969c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	617b      	str	r3, [r7, #20]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	e000      	b.n	800969c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800969a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80096ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3730      	adds	r7, #48	@ 0x30
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	4613      	mov	r3, r2
 80096c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096c8:	f7fc fe1e 	bl	8006308 <HAL_GetTick>
 80096cc:	4602      	mov	r2, r0
 80096ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	4413      	add	r3, r2
 80096d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096d8:	f7fc fe16 	bl	8006308 <HAL_GetTick>
 80096dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096de:	4b39      	ldr	r3, [pc, #228]	@ (80097c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	015b      	lsls	r3, r3, #5
 80096e4:	0d1b      	lsrs	r3, r3, #20
 80096e6:	69fa      	ldr	r2, [r7, #28]
 80096e8:	fb02 f303 	mul.w	r3, r2, r3
 80096ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096ee:	e054      	b.n	800979a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f6:	d050      	beq.n	800979a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096f8:	f7fc fe06 	bl	8006308 <HAL_GetTick>
 80096fc:	4602      	mov	r2, r0
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	429a      	cmp	r2, r3
 8009706:	d902      	bls.n	800970e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d13d      	bne.n	800978a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800971c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009726:	d111      	bne.n	800974c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009730:	d004      	beq.n	800973c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800973a:	d107      	bne.n	800974c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800974a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009754:	d10f      	bne.n	8009776 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e017      	b.n	80097ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	3b01      	subs	r3, #1
 8009798:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4013      	ands	r3, r2
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	bf0c      	ite	eq
 80097aa:	2301      	moveq	r3, #1
 80097ac:	2300      	movne	r3, #0
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d19b      	bne.n	80096f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20000038 	.word	0x20000038

080097c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097dc:	d111      	bne.n	8009802 <SPI_EndRxTransaction+0x3a>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097e6:	d004      	beq.n	80097f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097f0:	d107      	bne.n	8009802 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009800:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800980a:	d12a      	bne.n	8009862 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009814:	d012      	beq.n	800983c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2200      	movs	r2, #0
 800981e:	2180      	movs	r1, #128	@ 0x80
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f7ff ff49 	bl	80096b8 <SPI_WaitFlagStateUntilTimeout>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d02d      	beq.n	8009888 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009830:	f043 0220 	orr.w	r2, r3, #32
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e026      	b.n	800988a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2200      	movs	r2, #0
 8009844:	2101      	movs	r1, #1
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff ff36 	bl	80096b8 <SPI_WaitFlagStateUntilTimeout>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d01a      	beq.n	8009888 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009856:	f043 0220 	orr.w	r2, r3, #32
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e013      	b.n	800988a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2200      	movs	r2, #0
 800986a:	2101      	movs	r1, #1
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff ff23 	bl	80096b8 <SPI_WaitFlagStateUntilTimeout>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987c:	f043 0220 	orr.w	r2, r3, #32
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e000      	b.n	800988a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80098a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009910 <SPI_EndRxTxTransaction+0x7c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a1b      	ldr	r2, [pc, #108]	@ (8009914 <SPI_EndRxTxTransaction+0x80>)
 80098a6:	fba2 2303 	umull	r2, r3, r2, r3
 80098aa:	0d5b      	lsrs	r3, r3, #21
 80098ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80098b0:	fb02 f303 	mul.w	r3, r2, r3
 80098b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098be:	d112      	bne.n	80098e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2200      	movs	r2, #0
 80098c8:	2180      	movs	r1, #128	@ 0x80
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff fef4 	bl	80096b8 <SPI_WaitFlagStateUntilTimeout>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d016      	beq.n	8009904 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098da:	f043 0220 	orr.w	r2, r3, #32
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e00f      	b.n	8009906 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d00a      	beq.n	8009902 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098fc:	2b80      	cmp	r3, #128	@ 0x80
 80098fe:	d0f2      	beq.n	80098e6 <SPI_EndRxTxTransaction+0x52>
 8009900:	e000      	b.n	8009904 <SPI_EndRxTxTransaction+0x70>
        break;
 8009902:	bf00      	nop
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3718      	adds	r7, #24
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000038 	.word	0x20000038
 8009914:	165e9f81 	.word	0x165e9f81

08009918 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	60b9      	str	r1, [r7, #8]
 8009922:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e034      	b.n	8009998 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d106      	bne.n	8009948 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7f8 fc20 	bl	8002188 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3308      	adds	r3, #8
 8009950:	4619      	mov	r1, r3
 8009952:	4610      	mov	r0, r2
 8009954:	f002 f93c 	bl	800bbd0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	461a      	mov	r2, r3
 8009962:	68b9      	ldr	r1, [r7, #8]
 8009964:	f002 f986 	bl	800bc74 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6858      	ldr	r0, [r3, #4]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	f002 f9bb 	bl	800bcf0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	6892      	ldr	r2, [r2, #8]
 8009982:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68fa      	ldr	r2, [r7, #12]
 800998c:	6892      	ldr	r2, [r2, #8]
 800998e:	f041 0101 	orr.w	r1, r1, #1
 8009992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3710      	adds	r7, #16
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e041      	b.n	8009a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d106      	bne.n	80099cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f7fb fa90 	bl	8004eec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	3304      	adds	r3, #4
 80099dc:	4619      	mov	r1, r3
 80099de:	4610      	mov	r0, r2
 80099e0:	f000 fce2 	bl	800a3a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d001      	beq.n	8009a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e046      	b.n	8009ae6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a23      	ldr	r2, [pc, #140]	@ (8009af4 <HAL_TIM_Base_Start+0xb4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d022      	beq.n	8009ab0 <HAL_TIM_Base_Start+0x70>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a72:	d01d      	beq.n	8009ab0 <HAL_TIM_Base_Start+0x70>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1f      	ldr	r2, [pc, #124]	@ (8009af8 <HAL_TIM_Base_Start+0xb8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d018      	beq.n	8009ab0 <HAL_TIM_Base_Start+0x70>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <HAL_TIM_Base_Start+0xbc>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d013      	beq.n	8009ab0 <HAL_TIM_Base_Start+0x70>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8009b00 <HAL_TIM_Base_Start+0xc0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00e      	beq.n	8009ab0 <HAL_TIM_Base_Start+0x70>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a1b      	ldr	r2, [pc, #108]	@ (8009b04 <HAL_TIM_Base_Start+0xc4>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d009      	beq.n	8009ab0 <HAL_TIM_Base_Start+0x70>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a19      	ldr	r2, [pc, #100]	@ (8009b08 <HAL_TIM_Base_Start+0xc8>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d004      	beq.n	8009ab0 <HAL_TIM_Base_Start+0x70>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a18      	ldr	r2, [pc, #96]	@ (8009b0c <HAL_TIM_Base_Start+0xcc>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d111      	bne.n	8009ad4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	d010      	beq.n	8009ae4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0201 	orr.w	r2, r2, #1
 8009ad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ad2:	e007      	b.n	8009ae4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0201 	orr.w	r2, r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	40010000 	.word	0x40010000
 8009af8:	40000400 	.word	0x40000400
 8009afc:	40000800 	.word	0x40000800
 8009b00:	40000c00 	.word	0x40000c00
 8009b04:	40010400 	.word	0x40010400
 8009b08:	40014000 	.word	0x40014000
 8009b0c:	40001800 	.word	0x40001800

08009b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d001      	beq.n	8009b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e04e      	b.n	8009bc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0201 	orr.w	r2, r2, #1
 8009b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a23      	ldr	r2, [pc, #140]	@ (8009bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d022      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x80>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b52:	d01d      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x80>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a1f      	ldr	r2, [pc, #124]	@ (8009bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d018      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x80>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a1e      	ldr	r2, [pc, #120]	@ (8009bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d013      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x80>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8009be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d00e      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x80>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a1b      	ldr	r2, [pc, #108]	@ (8009be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d009      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x80>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a19      	ldr	r2, [pc, #100]	@ (8009be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d004      	beq.n	8009b90 <HAL_TIM_Base_Start_IT+0x80>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a18      	ldr	r2, [pc, #96]	@ (8009bec <HAL_TIM_Base_Start_IT+0xdc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d111      	bne.n	8009bb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b06      	cmp	r3, #6
 8009ba0:	d010      	beq.n	8009bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f042 0201 	orr.w	r2, r2, #1
 8009bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb2:	e007      	b.n	8009bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f042 0201 	orr.w	r2, r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40010000 	.word	0x40010000
 8009bd8:	40000400 	.word	0x40000400
 8009bdc:	40000800 	.word	0x40000800
 8009be0:	40000c00 	.word	0x40000c00
 8009be4:	40010400 	.word	0x40010400
 8009be8:	40014000 	.word	0x40014000
 8009bec:	40001800 	.word	0x40001800

08009bf0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e041      	b.n	8009c86 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f839 	bl	8009c8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4610      	mov	r0, r2
 8009c30:	f000 fbba 	bl	800a3a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b083      	sub	sp, #12
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c96:	bf00      	nop
 8009c98:	370c      	adds	r7, #12
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr
	...

08009ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <HAL_TIM_PWM_Start+0x24>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	bf14      	ite	ne
 8009cc0:	2301      	movne	r3, #1
 8009cc2:	2300      	moveq	r3, #0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	e022      	b.n	8009d0e <HAL_TIM_PWM_Start+0x6a>
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d109      	bne.n	8009ce2 <HAL_TIM_PWM_Start+0x3e>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	bf14      	ite	ne
 8009cda:	2301      	movne	r3, #1
 8009cdc:	2300      	moveq	r3, #0
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	e015      	b.n	8009d0e <HAL_TIM_PWM_Start+0x6a>
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d109      	bne.n	8009cfc <HAL_TIM_PWM_Start+0x58>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	bf14      	ite	ne
 8009cf4:	2301      	movne	r3, #1
 8009cf6:	2300      	moveq	r3, #0
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	e008      	b.n	8009d0e <HAL_TIM_PWM_Start+0x6a>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	bf14      	ite	ne
 8009d08:	2301      	movne	r3, #1
 8009d0a:	2300      	moveq	r3, #0
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e07c      	b.n	8009e10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <HAL_TIM_PWM_Start+0x82>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d24:	e013      	b.n	8009d4e <HAL_TIM_PWM_Start+0xaa>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	d104      	bne.n	8009d36 <HAL_TIM_PWM_Start+0x92>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2202      	movs	r2, #2
 8009d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d34:	e00b      	b.n	8009d4e <HAL_TIM_PWM_Start+0xaa>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b08      	cmp	r3, #8
 8009d3a:	d104      	bne.n	8009d46 <HAL_TIM_PWM_Start+0xa2>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2202      	movs	r2, #2
 8009d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d44:	e003      	b.n	8009d4e <HAL_TIM_PWM_Start+0xaa>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2202      	movs	r2, #2
 8009d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2201      	movs	r2, #1
 8009d54:	6839      	ldr	r1, [r7, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fe10 	bl	800a97c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a2d      	ldr	r2, [pc, #180]	@ (8009e18 <HAL_TIM_PWM_Start+0x174>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d004      	beq.n	8009d70 <HAL_TIM_PWM_Start+0xcc>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8009e1c <HAL_TIM_PWM_Start+0x178>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d101      	bne.n	8009d74 <HAL_TIM_PWM_Start+0xd0>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e000      	b.n	8009d76 <HAL_TIM_PWM_Start+0xd2>
 8009d74:	2300      	movs	r3, #0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a22      	ldr	r2, [pc, #136]	@ (8009e18 <HAL_TIM_PWM_Start+0x174>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d022      	beq.n	8009dda <HAL_TIM_PWM_Start+0x136>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d9c:	d01d      	beq.n	8009dda <HAL_TIM_PWM_Start+0x136>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a1f      	ldr	r2, [pc, #124]	@ (8009e20 <HAL_TIM_PWM_Start+0x17c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d018      	beq.n	8009dda <HAL_TIM_PWM_Start+0x136>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a1d      	ldr	r2, [pc, #116]	@ (8009e24 <HAL_TIM_PWM_Start+0x180>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d013      	beq.n	8009dda <HAL_TIM_PWM_Start+0x136>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a1c      	ldr	r2, [pc, #112]	@ (8009e28 <HAL_TIM_PWM_Start+0x184>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d00e      	beq.n	8009dda <HAL_TIM_PWM_Start+0x136>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <HAL_TIM_PWM_Start+0x178>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d009      	beq.n	8009dda <HAL_TIM_PWM_Start+0x136>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a18      	ldr	r2, [pc, #96]	@ (8009e2c <HAL_TIM_PWM_Start+0x188>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d004      	beq.n	8009dda <HAL_TIM_PWM_Start+0x136>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a16      	ldr	r2, [pc, #88]	@ (8009e30 <HAL_TIM_PWM_Start+0x18c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d111      	bne.n	8009dfe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f003 0307 	and.w	r3, r3, #7
 8009de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b06      	cmp	r3, #6
 8009dea:	d010      	beq.n	8009e0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f042 0201 	orr.w	r2, r2, #1
 8009dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dfc:	e007      	b.n	8009e0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f042 0201 	orr.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	40010000 	.word	0x40010000
 8009e1c:	40010400 	.word	0x40010400
 8009e20:	40000400 	.word	0x40000400
 8009e24:	40000800 	.word	0x40000800
 8009e28:	40000c00 	.word	0x40000c00
 8009e2c:	40014000 	.word	0x40014000
 8009e30:	40001800 	.word	0x40001800

08009e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d122      	bne.n	8009e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f003 0302 	and.w	r3, r3, #2
 8009e54:	2b02      	cmp	r3, #2
 8009e56:	d11b      	bne.n	8009e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f06f 0202 	mvn.w	r2, #2
 8009e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	f003 0303 	and.w	r3, r3, #3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fa77 	bl	800a36a <HAL_TIM_IC_CaptureCallback>
 8009e7c:	e005      	b.n	8009e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fa69 	bl	800a356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fa7a 	bl	800a37e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d122      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d11b      	bne.n	8009ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f06f 0204 	mvn.w	r2, #4
 8009eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2202      	movs	r2, #2
 8009eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fa4d 	bl	800a36a <HAL_TIM_IC_CaptureCallback>
 8009ed0:	e005      	b.n	8009ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa3f 	bl	800a356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 fa50 	bl	800a37e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	f003 0308 	and.w	r3, r3, #8
 8009eee:	2b08      	cmp	r3, #8
 8009ef0:	d122      	bne.n	8009f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f003 0308 	and.w	r3, r3, #8
 8009efc:	2b08      	cmp	r3, #8
 8009efe:	d11b      	bne.n	8009f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f06f 0208 	mvn.w	r2, #8
 8009f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fa23 	bl	800a36a <HAL_TIM_IC_CaptureCallback>
 8009f24:	e005      	b.n	8009f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa15 	bl	800a356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fa26 	bl	800a37e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f003 0310 	and.w	r3, r3, #16
 8009f42:	2b10      	cmp	r3, #16
 8009f44:	d122      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f003 0310 	and.w	r3, r3, #16
 8009f50:	2b10      	cmp	r3, #16
 8009f52:	d11b      	bne.n	8009f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f06f 0210 	mvn.w	r2, #16
 8009f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2208      	movs	r2, #8
 8009f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d003      	beq.n	8009f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f9f9 	bl	800a36a <HAL_TIM_IC_CaptureCallback>
 8009f78:	e005      	b.n	8009f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f9eb 	bl	800a356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f9fc 	bl	800a37e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d10e      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d107      	bne.n	8009fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f06f 0201 	mvn.w	r2, #1
 8009fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7fa fc0e 	bl	80047d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	691b      	ldr	r3, [r3, #16]
 8009fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc2:	2b80      	cmp	r3, #128	@ 0x80
 8009fc4:	d10e      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fd0:	2b80      	cmp	r3, #128	@ 0x80
 8009fd2:	d107      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fd78 	bl	800aad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fee:	2b40      	cmp	r3, #64	@ 0x40
 8009ff0:	d10e      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ffc:	2b40      	cmp	r3, #64	@ 0x40
 8009ffe:	d107      	bne.n	800a010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f9c1 	bl	800a392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	f003 0320 	and.w	r3, r3, #32
 800a01a:	2b20      	cmp	r3, #32
 800a01c:	d10e      	bne.n	800a03c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f003 0320 	and.w	r3, r3, #32
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d107      	bne.n	800a03c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f06f 0220 	mvn.w	r2, #32
 800a034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fd42 	bl	800aac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a03c:	bf00      	nop
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d101      	bne.n	800a062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a05e:	2302      	movs	r3, #2
 800a060:	e0ae      	b.n	800a1c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b0c      	cmp	r3, #12
 800a06e:	f200 809f 	bhi.w	800a1b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a072:	a201      	add	r2, pc, #4	@ (adr r2, 800a078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a0ad 	.word	0x0800a0ad
 800a07c:	0800a1b1 	.word	0x0800a1b1
 800a080:	0800a1b1 	.word	0x0800a1b1
 800a084:	0800a1b1 	.word	0x0800a1b1
 800a088:	0800a0ed 	.word	0x0800a0ed
 800a08c:	0800a1b1 	.word	0x0800a1b1
 800a090:	0800a1b1 	.word	0x0800a1b1
 800a094:	0800a1b1 	.word	0x0800a1b1
 800a098:	0800a12f 	.word	0x0800a12f
 800a09c:	0800a1b1 	.word	0x0800a1b1
 800a0a0:	0800a1b1 	.word	0x0800a1b1
 800a0a4:	0800a1b1 	.word	0x0800a1b1
 800a0a8:	0800a16f 	.word	0x0800a16f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fa18 	bl	800a4e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f042 0208 	orr.w	r2, r2, #8
 800a0c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	699a      	ldr	r2, [r3, #24]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f022 0204 	bic.w	r2, r2, #4
 800a0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6999      	ldr	r1, [r3, #24]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	691a      	ldr	r2, [r3, #16]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	430a      	orrs	r2, r1
 800a0e8:	619a      	str	r2, [r3, #24]
      break;
 800a0ea:	e064      	b.n	800a1b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68b9      	ldr	r1, [r7, #8]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fa68 	bl	800a5c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699a      	ldr	r2, [r3, #24]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	6999      	ldr	r1, [r3, #24]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	021a      	lsls	r2, r3, #8
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	619a      	str	r2, [r3, #24]
      break;
 800a12c:	e043      	b.n	800a1b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fabd 	bl	800a6b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	69da      	ldr	r2, [r3, #28]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f042 0208 	orr.w	r2, r2, #8
 800a148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69da      	ldr	r2, [r3, #28]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0204 	bic.w	r2, r2, #4
 800a158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	69d9      	ldr	r1, [r3, #28]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	691a      	ldr	r2, [r3, #16]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	430a      	orrs	r2, r1
 800a16a:	61da      	str	r2, [r3, #28]
      break;
 800a16c:	e023      	b.n	800a1b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68b9      	ldr	r1, [r7, #8]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 fb11 	bl	800a79c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	69da      	ldr	r2, [r3, #28]
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	69da      	ldr	r2, [r3, #28]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69d9      	ldr	r1, [r3, #28]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	021a      	lsls	r2, r3, #8
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	430a      	orrs	r2, r1
 800a1ac:	61da      	str	r2, [r3, #28]
      break;
 800a1ae:	e002      	b.n	800a1b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d101      	bne.n	800a1e4 <HAL_TIM_ConfigClockSource+0x1c>
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e0b4      	b.n	800a34e <HAL_TIM_ConfigClockSource+0x186>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a20a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a21c:	d03e      	beq.n	800a29c <HAL_TIM_ConfigClockSource+0xd4>
 800a21e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a222:	f200 8087 	bhi.w	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a22a:	f000 8086 	beq.w	800a33a <HAL_TIM_ConfigClockSource+0x172>
 800a22e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a232:	d87f      	bhi.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a234:	2b70      	cmp	r3, #112	@ 0x70
 800a236:	d01a      	beq.n	800a26e <HAL_TIM_ConfigClockSource+0xa6>
 800a238:	2b70      	cmp	r3, #112	@ 0x70
 800a23a:	d87b      	bhi.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a23c:	2b60      	cmp	r3, #96	@ 0x60
 800a23e:	d050      	beq.n	800a2e2 <HAL_TIM_ConfigClockSource+0x11a>
 800a240:	2b60      	cmp	r3, #96	@ 0x60
 800a242:	d877      	bhi.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a244:	2b50      	cmp	r3, #80	@ 0x50
 800a246:	d03c      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0xfa>
 800a248:	2b50      	cmp	r3, #80	@ 0x50
 800a24a:	d873      	bhi.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a24c:	2b40      	cmp	r3, #64	@ 0x40
 800a24e:	d058      	beq.n	800a302 <HAL_TIM_ConfigClockSource+0x13a>
 800a250:	2b40      	cmp	r3, #64	@ 0x40
 800a252:	d86f      	bhi.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a254:	2b30      	cmp	r3, #48	@ 0x30
 800a256:	d064      	beq.n	800a322 <HAL_TIM_ConfigClockSource+0x15a>
 800a258:	2b30      	cmp	r3, #48	@ 0x30
 800a25a:	d86b      	bhi.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d060      	beq.n	800a322 <HAL_TIM_ConfigClockSource+0x15a>
 800a260:	2b20      	cmp	r3, #32
 800a262:	d867      	bhi.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
 800a264:	2b00      	cmp	r3, #0
 800a266:	d05c      	beq.n	800a322 <HAL_TIM_ConfigClockSource+0x15a>
 800a268:	2b10      	cmp	r3, #16
 800a26a:	d05a      	beq.n	800a322 <HAL_TIM_ConfigClockSource+0x15a>
 800a26c:	e062      	b.n	800a334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	6899      	ldr	r1, [r3, #8]
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	f000 fb5d 	bl	800a93c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	609a      	str	r2, [r3, #8]
      break;
 800a29a:	e04f      	b.n	800a33c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6818      	ldr	r0, [r3, #0]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6899      	ldr	r1, [r3, #8]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f000 fb46 	bl	800a93c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689a      	ldr	r2, [r3, #8]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2be:	609a      	str	r2, [r3, #8]
      break;
 800a2c0:	e03c      	b.n	800a33c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6818      	ldr	r0, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	6859      	ldr	r1, [r3, #4]
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f000 faba 	bl	800a848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2150      	movs	r1, #80	@ 0x50
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 fb13 	bl	800a906 <TIM_ITRx_SetConfig>
      break;
 800a2e0:	e02c      	b.n	800a33c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6818      	ldr	r0, [r3, #0]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	6859      	ldr	r1, [r3, #4]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f000 fad9 	bl	800a8a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2160      	movs	r1, #96	@ 0x60
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 fb03 	bl	800a906 <TIM_ITRx_SetConfig>
      break;
 800a300:	e01c      	b.n	800a33c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	6859      	ldr	r1, [r3, #4]
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	461a      	mov	r2, r3
 800a310:	f000 fa9a 	bl	800a848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2140      	movs	r1, #64	@ 0x40
 800a31a:	4618      	mov	r0, r3
 800a31c:	f000 faf3 	bl	800a906 <TIM_ITRx_SetConfig>
      break;
 800a320:	e00c      	b.n	800a33c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f000 faea 	bl	800a906 <TIM_ITRx_SetConfig>
      break;
 800a332:	e003      	b.n	800a33c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	73fb      	strb	r3, [r7, #15]
      break;
 800a338:	e000      	b.n	800a33c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a33a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a35e:	bf00      	nop
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a386:	bf00      	nop
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a40      	ldr	r2, [pc, #256]	@ (800a4bc <TIM_Base_SetConfig+0x114>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d013      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3c6:	d00f      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a3d      	ldr	r2, [pc, #244]	@ (800a4c0 <TIM_Base_SetConfig+0x118>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00b      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a3c      	ldr	r2, [pc, #240]	@ (800a4c4 <TIM_Base_SetConfig+0x11c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d007      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a3b      	ldr	r2, [pc, #236]	@ (800a4c8 <TIM_Base_SetConfig+0x120>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a3a      	ldr	r2, [pc, #232]	@ (800a4cc <TIM_Base_SetConfig+0x124>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d108      	bne.n	800a3fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a2f      	ldr	r2, [pc, #188]	@ (800a4bc <TIM_Base_SetConfig+0x114>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d02b      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a408:	d027      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a2c      	ldr	r2, [pc, #176]	@ (800a4c0 <TIM_Base_SetConfig+0x118>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d023      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a2b      	ldr	r2, [pc, #172]	@ (800a4c4 <TIM_Base_SetConfig+0x11c>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d01f      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c8 <TIM_Base_SetConfig+0x120>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d01b      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a29      	ldr	r2, [pc, #164]	@ (800a4cc <TIM_Base_SetConfig+0x124>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d017      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a28      	ldr	r2, [pc, #160]	@ (800a4d0 <TIM_Base_SetConfig+0x128>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d013      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a27      	ldr	r2, [pc, #156]	@ (800a4d4 <TIM_Base_SetConfig+0x12c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00f      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a26      	ldr	r2, [pc, #152]	@ (800a4d8 <TIM_Base_SetConfig+0x130>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00b      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a25      	ldr	r2, [pc, #148]	@ (800a4dc <TIM_Base_SetConfig+0x134>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d007      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a24      	ldr	r2, [pc, #144]	@ (800a4e0 <TIM_Base_SetConfig+0x138>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d003      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a23      	ldr	r2, [pc, #140]	@ (800a4e4 <TIM_Base_SetConfig+0x13c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d108      	bne.n	800a46c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a0a      	ldr	r2, [pc, #40]	@ (800a4bc <TIM_Base_SetConfig+0x114>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d003      	beq.n	800a4a0 <TIM_Base_SetConfig+0xf8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a0c      	ldr	r2, [pc, #48]	@ (800a4cc <TIM_Base_SetConfig+0x124>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d103      	bne.n	800a4a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	691a      	ldr	r2, [r3, #16]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	615a      	str	r2, [r3, #20]
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40000400 	.word	0x40000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	40000c00 	.word	0x40000c00
 800a4cc:	40010400 	.word	0x40010400
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40014800 	.word	0x40014800
 800a4dc:	40001800 	.word	0x40001800
 800a4e0:	40001c00 	.word	0x40001c00
 800a4e4:	40002000 	.word	0x40002000

0800a4e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	f023 0201 	bic.w	r2, r3, #1
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f023 0303 	bic.w	r3, r3, #3
 800a51e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	4313      	orrs	r3, r2
 800a528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f023 0302 	bic.w	r3, r3, #2
 800a530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	4313      	orrs	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a20      	ldr	r2, [pc, #128]	@ (800a5c0 <TIM_OC1_SetConfig+0xd8>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d003      	beq.n	800a54c <TIM_OC1_SetConfig+0x64>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a1f      	ldr	r2, [pc, #124]	@ (800a5c4 <TIM_OC1_SetConfig+0xdc>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d10c      	bne.n	800a566 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f023 0308 	bic.w	r3, r3, #8
 800a552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f023 0304 	bic.w	r3, r3, #4
 800a564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a15      	ldr	r2, [pc, #84]	@ (800a5c0 <TIM_OC1_SetConfig+0xd8>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d003      	beq.n	800a576 <TIM_OC1_SetConfig+0x8e>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a14      	ldr	r2, [pc, #80]	@ (800a5c4 <TIM_OC1_SetConfig+0xdc>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d111      	bne.n	800a59a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a57c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	4313      	orrs	r3, r2
 800a598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	621a      	str	r2, [r3, #32]
}
 800a5b4:	bf00      	nop
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	40010000 	.word	0x40010000
 800a5c4:	40010400 	.word	0x40010400

0800a5c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	f023 0210 	bic.w	r2, r3, #16
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	021b      	lsls	r3, r3, #8
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	f023 0320 	bic.w	r3, r3, #32
 800a612:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	011b      	lsls	r3, r3, #4
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a22      	ldr	r2, [pc, #136]	@ (800a6ac <TIM_OC2_SetConfig+0xe4>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d003      	beq.n	800a630 <TIM_OC2_SetConfig+0x68>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a21      	ldr	r2, [pc, #132]	@ (800a6b0 <TIM_OC2_SetConfig+0xe8>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d10d      	bne.n	800a64c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	011b      	lsls	r3, r3, #4
 800a63e:	697a      	ldr	r2, [r7, #20]
 800a640:	4313      	orrs	r3, r2
 800a642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a64a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a17      	ldr	r2, [pc, #92]	@ (800a6ac <TIM_OC2_SetConfig+0xe4>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d003      	beq.n	800a65c <TIM_OC2_SetConfig+0x94>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a16      	ldr	r2, [pc, #88]	@ (800a6b0 <TIM_OC2_SetConfig+0xe8>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d113      	bne.n	800a684 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a66a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	4313      	orrs	r3, r2
 800a676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	4313      	orrs	r3, r2
 800a682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	697a      	ldr	r2, [r7, #20]
 800a69c:	621a      	str	r2, [r3, #32]
}
 800a69e:	bf00      	nop
 800a6a0:	371c      	adds	r7, #28
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	40010000 	.word	0x40010000
 800a6b0:	40010400 	.word	0x40010400

0800a6b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	69db      	ldr	r3, [r3, #28]
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0303 	bic.w	r3, r3, #3
 800a6ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	4313      	orrs	r3, r2
 800a708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a21      	ldr	r2, [pc, #132]	@ (800a794 <TIM_OC3_SetConfig+0xe0>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d003      	beq.n	800a71a <TIM_OC3_SetConfig+0x66>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a20      	ldr	r2, [pc, #128]	@ (800a798 <TIM_OC3_SetConfig+0xe4>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d10d      	bne.n	800a736 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a16      	ldr	r2, [pc, #88]	@ (800a794 <TIM_OC3_SetConfig+0xe0>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d003      	beq.n	800a746 <TIM_OC3_SetConfig+0x92>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a15      	ldr	r2, [pc, #84]	@ (800a798 <TIM_OC3_SetConfig+0xe4>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d113      	bne.n	800a76e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a74c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	4313      	orrs	r3, r2
 800a760:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	699b      	ldr	r3, [r3, #24]
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	693a      	ldr	r2, [r7, #16]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	621a      	str	r2, [r3, #32]
}
 800a788:	bf00      	nop
 800a78a:	371c      	adds	r7, #28
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr
 800a794:	40010000 	.word	0x40010000
 800a798:	40010400 	.word	0x40010400

0800a79c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	021b      	lsls	r3, r3, #8
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a7e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	031b      	lsls	r3, r3, #12
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a12      	ldr	r2, [pc, #72]	@ (800a840 <TIM_OC4_SetConfig+0xa4>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d003      	beq.n	800a804 <TIM_OC4_SetConfig+0x68>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a11      	ldr	r2, [pc, #68]	@ (800a844 <TIM_OC4_SetConfig+0xa8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d109      	bne.n	800a818 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a80a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	019b      	lsls	r3, r3, #6
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685a      	ldr	r2, [r3, #4]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	621a      	str	r2, [r3, #32]
}
 800a832:	bf00      	nop
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	40010000 	.word	0x40010000
 800a844:	40010400 	.word	0x40010400

0800a848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a848:	b480      	push	{r7}
 800a84a:	b087      	sub	sp, #28
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6a1b      	ldr	r3, [r3, #32]
 800a858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	f023 0201 	bic.w	r2, r3, #1
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	011b      	lsls	r3, r3, #4
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f023 030a 	bic.w	r3, r3, #10
 800a884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a886:	697a      	ldr	r2, [r7, #20]
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	621a      	str	r2, [r3, #32]
}
 800a89a:	bf00      	nop
 800a89c:	371c      	adds	r7, #28
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b087      	sub	sp, #28
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	60b9      	str	r1, [r7, #8]
 800a8b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	f023 0210 	bic.w	r2, r3, #16
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	031b      	lsls	r3, r3, #12
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a8e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	011b      	lsls	r3, r3, #4
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	697a      	ldr	r2, [r7, #20]
 800a8f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	693a      	ldr	r2, [r7, #16]
 800a8f8:	621a      	str	r2, [r3, #32]
}
 800a8fa:	bf00      	nop
 800a8fc:	371c      	adds	r7, #28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a91c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	f043 0307 	orr.w	r3, r3, #7
 800a928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	609a      	str	r2, [r3, #8]
}
 800a930:	bf00      	nop
 800a932:	3714      	adds	r7, #20
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	021a      	lsls	r2, r3, #8
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	431a      	orrs	r2, r3
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	4313      	orrs	r3, r2
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	609a      	str	r2, [r3, #8]
}
 800a970:	bf00      	nop
 800a972:	371c      	adds	r7, #28
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	f003 031f 	and.w	r3, r3, #31
 800a98e:	2201      	movs	r2, #1
 800a990:	fa02 f303 	lsl.w	r3, r2, r3
 800a994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6a1a      	ldr	r2, [r3, #32]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	43db      	mvns	r3, r3
 800a99e:	401a      	ands	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6a1a      	ldr	r2, [r3, #32]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f003 031f 	and.w	r3, r3, #31
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	621a      	str	r2, [r3, #32]
}
 800a9ba:	bf00      	nop
 800a9bc:	371c      	adds	r7, #28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
	...

0800a9c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d101      	bne.n	800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9dc:	2302      	movs	r3, #2
 800a9de:	e05a      	b.n	800aa96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a21      	ldr	r2, [pc, #132]	@ (800aaa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d022      	beq.n	800aa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa2c:	d01d      	beq.n	800aa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d018      	beq.n	800aa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1b      	ldr	r2, [pc, #108]	@ (800aaac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d013      	beq.n	800aa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1a      	ldr	r2, [pc, #104]	@ (800aab0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d00e      	beq.n	800aa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a18      	ldr	r2, [pc, #96]	@ (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d009      	beq.n	800aa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a17      	ldr	r2, [pc, #92]	@ (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d004      	beq.n	800aa6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a15      	ldr	r2, [pc, #84]	@ (800aabc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d10c      	bne.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	40010000 	.word	0x40010000
 800aaa8:	40000400 	.word	0x40000400
 800aaac:	40000800 	.word	0x40000800
 800aab0:	40000c00 	.word	0x40000c00
 800aab4:	40010400 	.word	0x40010400
 800aab8:	40014000 	.word	0x40014000
 800aabc:	40001800 	.word	0x40001800

0800aac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aac8:	bf00      	nop
 800aaca:	370c      	adds	r7, #12
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e03f      	b.n	800ab7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d106      	bne.n	800ab14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7fb fade 	bl	80060d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2224      	movs	r2, #36	@ 0x24
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ab2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fddb 	bl	800b6e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	691a      	ldr	r2, [r3, #16]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	695a      	ldr	r2, [r3, #20]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68da      	ldr	r2, [r3, #12]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ab60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2220      	movs	r2, #32
 800ab74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b08a      	sub	sp, #40	@ 0x28
 800ab86:	af02      	add	r7, sp, #8
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	603b      	str	r3, [r7, #0]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b20      	cmp	r3, #32
 800aba0:	d17c      	bne.n	800ac9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d002      	beq.n	800abae <HAL_UART_Transmit+0x2c>
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e075      	b.n	800ac9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d101      	bne.n	800abc0 <HAL_UART_Transmit+0x3e>
 800abbc:	2302      	movs	r3, #2
 800abbe:	e06e      	b.n	800ac9e <HAL_UART_Transmit+0x11c>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2221      	movs	r2, #33	@ 0x21
 800abd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abd6:	f7fb fb97 	bl	8006308 <HAL_GetTick>
 800abda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	88fa      	ldrh	r2, [r7, #6]
 800abe0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	88fa      	ldrh	r2, [r7, #6]
 800abe6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abf0:	d108      	bne.n	800ac04 <HAL_UART_Transmit+0x82>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d104      	bne.n	800ac04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	61bb      	str	r3, [r7, #24]
 800ac02:	e003      	b.n	800ac0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800ac14:	e02a      	b.n	800ac6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	2180      	movs	r1, #128	@ 0x80
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 fb1f 	bl	800b264 <UART_WaitOnFlagUntilTimeout>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d001      	beq.n	800ac30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e036      	b.n	800ac9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10b      	bne.n	800ac4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	3302      	adds	r3, #2
 800ac4a:	61bb      	str	r3, [r7, #24]
 800ac4c:	e007      	b.n	800ac5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	781a      	ldrb	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1cf      	bne.n	800ac16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2140      	movs	r1, #64	@ 0x40
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 faef 	bl	800b264 <UART_WaitOnFlagUntilTimeout>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d001      	beq.n	800ac90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	e006      	b.n	800ac9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e000      	b.n	800ac9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ac9c:	2302      	movs	r3, #2
  }
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	4613      	mov	r3, r2
 800acb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b20      	cmp	r3, #32
 800acbe:	d11d      	bne.n	800acfc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <HAL_UART_Receive_IT+0x26>
 800acc6:	88fb      	ldrh	r3, [r7, #6]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d101      	bne.n	800acd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
 800acce:	e016      	b.n	800acfe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d101      	bne.n	800acde <HAL_UART_Receive_IT+0x38>
 800acda:	2302      	movs	r3, #2
 800acdc:	e00f      	b.n	800acfe <HAL_UART_Receive_IT+0x58>
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800acec:	88fb      	ldrh	r3, [r7, #6]
 800acee:	461a      	mov	r2, r3
 800acf0:	68b9      	ldr	r1, [r7, #8]
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 fb24 	bl	800b340 <UART_Start_Receive_IT>
 800acf8:	4603      	mov	r3, r0
 800acfa:	e000      	b.n	800acfe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800acfc:	2302      	movs	r3, #2
  }
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b0ba      	sub	sp, #232	@ 0xe8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	695b      	ldr	r3, [r3, #20]
 800ad2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ad34:	2300      	movs	r3, #0
 800ad36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ad3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad3e:	f003 030f 	and.w	r3, r3, #15
 800ad42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ad46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10f      	bne.n	800ad6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad52:	f003 0320 	and.w	r3, r3, #32
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d009      	beq.n	800ad6e <HAL_UART_IRQHandler+0x66>
 800ad5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fc03 	bl	800b572 <UART_Receive_IT>
      return;
 800ad6c:	e256      	b.n	800b21c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ad6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	f000 80de 	beq.w	800af34 <HAL_UART_IRQHandler+0x22c>
 800ad78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad7c:	f003 0301 	and.w	r3, r3, #1
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad88:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f000 80d1 	beq.w	800af34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad96:	f003 0301 	and.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00b      	beq.n	800adb6 <HAL_UART_IRQHandler+0xae>
 800ad9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ada2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d005      	beq.n	800adb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adae:	f043 0201 	orr.w	r2, r3, #1
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800adb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <HAL_UART_IRQHandler+0xd2>
 800adc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d005      	beq.n	800adda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add2:	f043 0202 	orr.w	r2, r3, #2
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800adda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adde:	f003 0302 	and.w	r3, r3, #2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00b      	beq.n	800adfe <HAL_UART_IRQHandler+0xf6>
 800ade6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d005      	beq.n	800adfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf6:	f043 0204 	orr.w	r2, r3, #4
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800adfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae02:	f003 0308 	and.w	r3, r3, #8
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d011      	beq.n	800ae2e <HAL_UART_IRQHandler+0x126>
 800ae0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae0e:	f003 0320 	and.w	r3, r3, #32
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d105      	bne.n	800ae22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ae16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae26:	f043 0208 	orr.w	r2, r3, #8
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f000 81ed 	beq.w	800b212 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae3c:	f003 0320 	and.w	r3, r3, #32
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d008      	beq.n	800ae56 <HAL_UART_IRQHandler+0x14e>
 800ae44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae48:	f003 0320 	and.w	r3, r3, #32
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fb8e 	bl	800b572 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae60:	2b40      	cmp	r3, #64	@ 0x40
 800ae62:	bf0c      	ite	eq
 800ae64:	2301      	moveq	r3, #1
 800ae66:	2300      	movne	r3, #0
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae72:	f003 0308 	and.w	r3, r3, #8
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d103      	bne.n	800ae82 <HAL_UART_IRQHandler+0x17a>
 800ae7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d04f      	beq.n	800af22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fa96 	bl	800b3b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae92:	2b40      	cmp	r3, #64	@ 0x40
 800ae94:	d141      	bne.n	800af1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3314      	adds	r3, #20
 800ae9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800aeac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800aeb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aeb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3314      	adds	r3, #20
 800aebe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800aec2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800aec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800aece:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800aed2:	e841 2300 	strex	r3, r2, [r1]
 800aed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800aeda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1d9      	bne.n	800ae96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d013      	beq.n	800af12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeee:	4a7d      	ldr	r2, [pc, #500]	@ (800b0e4 <HAL_UART_IRQHandler+0x3dc>)
 800aef0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fb fec8 	bl	8006c8c <HAL_DMA_Abort_IT>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d016      	beq.n	800af30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800af0c:	4610      	mov	r0, r2
 800af0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af10:	e00e      	b.n	800af30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f990 	bl	800b238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af18:	e00a      	b.n	800af30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f98c 	bl	800b238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af20:	e006      	b.n	800af30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f988 	bl	800b238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800af2e:	e170      	b.n	800b212 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af30:	bf00      	nop
    return;
 800af32:	e16e      	b.n	800b212 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af38:	2b01      	cmp	r3, #1
 800af3a:	f040 814a 	bne.w	800b1d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800af3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af42:	f003 0310 	and.w	r3, r3, #16
 800af46:	2b00      	cmp	r3, #0
 800af48:	f000 8143 	beq.w	800b1d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800af4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af50:	f003 0310 	and.w	r3, r3, #16
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 813c 	beq.w	800b1d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af5a:	2300      	movs	r3, #0
 800af5c:	60bb      	str	r3, [r7, #8]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60bb      	str	r3, [r7, #8]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	60bb      	str	r3, [r7, #8]
 800af6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af7a:	2b40      	cmp	r3, #64	@ 0x40
 800af7c:	f040 80b4 	bne.w	800b0e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 8140 	beq.w	800b216 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800af9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800af9e:	429a      	cmp	r2, r3
 800afa0:	f080 8139 	bcs.w	800b216 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800afaa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	69db      	ldr	r3, [r3, #28]
 800afb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afb6:	f000 8088 	beq.w	800b0ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	330c      	adds	r3, #12
 800afc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800afd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	330c      	adds	r3, #12
 800afe2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800afe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800afea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aff2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aff6:	e841 2300 	strex	r3, r2, [r1]
 800affa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800affe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1d9      	bne.n	800afba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3314      	adds	r3, #20
 800b00c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b010:	e853 3f00 	ldrex	r3, [r3]
 800b014:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b016:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b018:	f023 0301 	bic.w	r3, r3, #1
 800b01c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3314      	adds	r3, #20
 800b026:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b02a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b02e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b030:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b032:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b036:	e841 2300 	strex	r3, r2, [r1]
 800b03a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b03c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1e1      	bne.n	800b006 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	3314      	adds	r3, #20
 800b048:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b04c:	e853 3f00 	ldrex	r3, [r3]
 800b050:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3314      	adds	r3, #20
 800b062:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b066:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b068:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b06c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e3      	bne.n	800b042 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2220      	movs	r2, #32
 800b07e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	330c      	adds	r3, #12
 800b08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b092:	e853 3f00 	ldrex	r3, [r3]
 800b096:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b098:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b09a:	f023 0310 	bic.w	r3, r3, #16
 800b09e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	330c      	adds	r3, #12
 800b0a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b0ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b0ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e3      	bne.n	800b088 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7fb fd71 	bl	8006bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f8b6 	bl	800b24c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b0e0:	e099      	b.n	800b216 <HAL_UART_IRQHandler+0x50e>
 800b0e2:	bf00      	nop
 800b0e4:	0800b47b 	.word	0x0800b47b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f000 808b 	beq.w	800b21a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 8086 	beq.w	800b21a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	330c      	adds	r3, #12
 800b114:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	330c      	adds	r3, #12
 800b12e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b132:	647a      	str	r2, [r7, #68]	@ 0x44
 800b134:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b136:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b138:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b13a:	e841 2300 	strex	r3, r2, [r1]
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1e3      	bne.n	800b10e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3314      	adds	r3, #20
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	623b      	str	r3, [r7, #32]
   return(result);
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	f023 0301 	bic.w	r3, r3, #1
 800b15c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3314      	adds	r3, #20
 800b166:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b16a:	633a      	str	r2, [r7, #48]	@ 0x30
 800b16c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b172:	e841 2300 	strex	r3, r2, [r1]
 800b176:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e3      	bne.n	800b146 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2220      	movs	r2, #32
 800b182:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	330c      	adds	r3, #12
 800b192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	e853 3f00 	ldrex	r3, [r3]
 800b19a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 0310 	bic.w	r3, r3, #16
 800b1a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	330c      	adds	r3, #12
 800b1ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b1b0:	61fa      	str	r2, [r7, #28]
 800b1b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	69b9      	ldr	r1, [r7, #24]
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e3      	bne.n	800b18c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b1c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f83e 	bl	800b24c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1d0:	e023      	b.n	800b21a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b1d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d009      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x4ea>
 800b1de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f959 	bl	800b4a2 <UART_Transmit_IT>
    return;
 800b1f0:	e014      	b.n	800b21c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00e      	beq.n	800b21c <HAL_UART_IRQHandler+0x514>
 800b1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f999 	bl	800b542 <UART_EndTransmit_IT>
    return;
 800b210:	e004      	b.n	800b21c <HAL_UART_IRQHandler+0x514>
    return;
 800b212:	bf00      	nop
 800b214:	e002      	b.n	800b21c <HAL_UART_IRQHandler+0x514>
      return;
 800b216:	bf00      	nop
 800b218:	e000      	b.n	800b21c <HAL_UART_IRQHandler+0x514>
      return;
 800b21a:	bf00      	nop
  }
}
 800b21c:	37e8      	adds	r7, #232	@ 0xe8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop

0800b224 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b258:	bf00      	nop
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b090      	sub	sp, #64	@ 0x40
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	603b      	str	r3, [r7, #0]
 800b270:	4613      	mov	r3, r2
 800b272:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b274:	e050      	b.n	800b318 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27c:	d04c      	beq.n	800b318 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b27e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b280:	2b00      	cmp	r3, #0
 800b282:	d007      	beq.n	800b294 <UART_WaitOnFlagUntilTimeout+0x30>
 800b284:	f7fb f840 	bl	8006308 <HAL_GetTick>
 800b288:	4602      	mov	r2, r0
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b290:	429a      	cmp	r2, r3
 800b292:	d241      	bcs.n	800b318 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	330c      	adds	r3, #12
 800b29a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29e:	e853 3f00 	ldrex	r3, [r3]
 800b2a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	330c      	adds	r3, #12
 800b2b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b2b4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b2b6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2bc:	e841 2300 	strex	r3, r2, [r1]
 800b2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1e5      	bne.n	800b294 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	3314      	adds	r3, #20
 800b2ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	e853 3f00 	ldrex	r3, [r3]
 800b2d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f023 0301 	bic.w	r3, r3, #1
 800b2de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3314      	adds	r3, #20
 800b2e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b2e8:	623a      	str	r2, [r7, #32]
 800b2ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ec:	69f9      	ldr	r1, [r7, #28]
 800b2ee:	6a3a      	ldr	r2, [r7, #32]
 800b2f0:	e841 2300 	strex	r3, r2, [r1]
 800b2f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e5      	bne.n	800b2c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2220      	movs	r2, #32
 800b308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800b314:	2303      	movs	r3, #3
 800b316:	e00f      	b.n	800b338 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	4013      	ands	r3, r2
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	429a      	cmp	r2, r3
 800b326:	bf0c      	ite	eq
 800b328:	2301      	moveq	r3, #1
 800b32a:	2300      	movne	r3, #0
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	461a      	mov	r2, r3
 800b330:	79fb      	ldrb	r3, [r7, #7]
 800b332:	429a      	cmp	r2, r3
 800b334:	d09f      	beq.n	800b276 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3740      	adds	r7, #64	@ 0x40
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	4613      	mov	r3, r2
 800b34c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	68ba      	ldr	r2, [r7, #8]
 800b352:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	88fa      	ldrh	r2, [r7, #6]
 800b358:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	88fa      	ldrh	r2, [r7, #6]
 800b35e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2222      	movs	r2, #34	@ 0x22
 800b36a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68da      	ldr	r2, [r3, #12]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b384:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	695a      	ldr	r2, [r3, #20]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f042 0201 	orr.w	r2, r2, #1
 800b394:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	68da      	ldr	r2, [r3, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f042 0220 	orr.w	r2, r2, #32
 800b3a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b095      	sub	sp, #84	@ 0x54
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	330c      	adds	r3, #12
 800b3c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	330c      	adds	r3, #12
 800b3da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3dc:	643a      	str	r2, [r7, #64]	@ 0x40
 800b3de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3e4:	e841 2300 	strex	r3, r2, [r1]
 800b3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e5      	bne.n	800b3bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3314      	adds	r3, #20
 800b3f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	e853 3f00 	ldrex	r3, [r3]
 800b3fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	f023 0301 	bic.w	r3, r3, #1
 800b406:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3314      	adds	r3, #20
 800b40e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b410:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b412:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b414:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b418:	e841 2300 	strex	r3, r2, [r1]
 800b41c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1e5      	bne.n	800b3f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d119      	bne.n	800b460 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f023 0310 	bic.w	r3, r3, #16
 800b442:	647b      	str	r3, [r7, #68]	@ 0x44
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	330c      	adds	r3, #12
 800b44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b44c:	61ba      	str	r2, [r7, #24]
 800b44e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b450:	6979      	ldr	r1, [r7, #20]
 800b452:	69ba      	ldr	r2, [r7, #24]
 800b454:	e841 2300 	strex	r3, r2, [r1]
 800b458:	613b      	str	r3, [r7, #16]
   return(result);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1e5      	bne.n	800b42c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2220      	movs	r2, #32
 800b464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b46e:	bf00      	nop
 800b470:	3754      	adds	r7, #84	@ 0x54
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b486:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7ff fecf 	bl	800b238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b49a:	bf00      	nop
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b085      	sub	sp, #20
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b21      	cmp	r3, #33	@ 0x21
 800b4b4:	d13e      	bne.n	800b534 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4be:	d114      	bne.n	800b4ea <UART_Transmit_IT+0x48>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d110      	bne.n	800b4ea <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6a1b      	ldr	r3, [r3, #32]
 800b4cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	1c9a      	adds	r2, r3, #2
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	621a      	str	r2, [r3, #32]
 800b4e8:	e008      	b.n	800b4fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a1b      	ldr	r3, [r3, #32]
 800b4ee:	1c59      	adds	r1, r3, #1
 800b4f0:	687a      	ldr	r2, [r7, #4]
 800b4f2:	6211      	str	r1, [r2, #32]
 800b4f4:	781a      	ldrb	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b500:	b29b      	uxth	r3, r3
 800b502:	3b01      	subs	r3, #1
 800b504:	b29b      	uxth	r3, r3
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	4619      	mov	r1, r3
 800b50a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10f      	bne.n	800b530 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68da      	ldr	r2, [r3, #12]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b51e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b52e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	e000      	b.n	800b536 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b534:	2302      	movs	r3, #2
  }
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68da      	ldr	r2, [r3, #12]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b558:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff fe5e 	bl	800b224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b08c      	sub	sp, #48	@ 0x30
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b580:	b2db      	uxtb	r3, r3
 800b582:	2b22      	cmp	r3, #34	@ 0x22
 800b584:	f040 80ab 	bne.w	800b6de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b590:	d117      	bne.n	800b5c2 <UART_Receive_IT+0x50>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d113      	bne.n	800b5c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b59a:	2300      	movs	r3, #0
 800b59c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ba:	1c9a      	adds	r2, r3, #2
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	629a      	str	r2, [r3, #40]	@ 0x28
 800b5c0:	e026      	b.n	800b610 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5d4:	d007      	beq.n	800b5e6 <UART_Receive_IT+0x74>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d10a      	bne.n	800b5f4 <UART_Receive_IT+0x82>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d106      	bne.n	800b5f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f0:	701a      	strb	r2, [r3, #0]
 800b5f2:	e008      	b.n	800b606 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b600:	b2da      	uxtb	r2, r3
 800b602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b604:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b614:	b29b      	uxth	r3, r3
 800b616:	3b01      	subs	r3, #1
 800b618:	b29b      	uxth	r3, r3
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	4619      	mov	r1, r3
 800b61e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b620:	2b00      	cmp	r3, #0
 800b622:	d15a      	bne.n	800b6da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68da      	ldr	r2, [r3, #12]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f022 0220 	bic.w	r2, r2, #32
 800b632:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68da      	ldr	r2, [r3, #12]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b642:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	695a      	ldr	r2, [r3, #20]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f022 0201 	bic.w	r2, r2, #1
 800b652:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2220      	movs	r2, #32
 800b658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b660:	2b01      	cmp	r3, #1
 800b662:	d135      	bne.n	800b6d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	330c      	adds	r3, #12
 800b670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	e853 3f00 	ldrex	r3, [r3]
 800b678:	613b      	str	r3, [r7, #16]
   return(result);
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	f023 0310 	bic.w	r3, r3, #16
 800b680:	627b      	str	r3, [r7, #36]	@ 0x24
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	330c      	adds	r3, #12
 800b688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b68a:	623a      	str	r2, [r7, #32]
 800b68c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	69f9      	ldr	r1, [r7, #28]
 800b690:	6a3a      	ldr	r2, [r7, #32]
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	61bb      	str	r3, [r7, #24]
   return(result);
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e5      	bne.n	800b66a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0310 	and.w	r3, r3, #16
 800b6a8:	2b10      	cmp	r3, #16
 800b6aa:	d10a      	bne.n	800b6c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff fdbf 	bl	800b24c <HAL_UARTEx_RxEventCallback>
 800b6ce:	e002      	b.n	800b6d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f7fa fc75 	bl	8005fc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e002      	b.n	800b6e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e000      	b.n	800b6e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b6de:	2302      	movs	r3, #2
  }
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3730      	adds	r7, #48	@ 0x30
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6ec:	b0c0      	sub	sp, #256	@ 0x100
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b704:	68d9      	ldr	r1, [r3, #12]
 800b706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	ea40 0301 	orr.w	r3, r0, r1
 800b710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	431a      	orrs	r2, r3
 800b720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	431a      	orrs	r2, r3
 800b728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	4313      	orrs	r3, r2
 800b730:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b740:	f021 010c 	bic.w	r1, r1, #12
 800b744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b74e:	430b      	orrs	r3, r1
 800b750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	695b      	ldr	r3, [r3, #20]
 800b75a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b75e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b762:	6999      	ldr	r1, [r3, #24]
 800b764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	ea40 0301 	orr.w	r3, r0, r1
 800b76e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	4b8f      	ldr	r3, [pc, #572]	@ (800b9b4 <UART_SetConfig+0x2cc>)
 800b778:	429a      	cmp	r2, r3
 800b77a:	d005      	beq.n	800b788 <UART_SetConfig+0xa0>
 800b77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	4b8d      	ldr	r3, [pc, #564]	@ (800b9b8 <UART_SetConfig+0x2d0>)
 800b784:	429a      	cmp	r2, r3
 800b786:	d104      	bne.n	800b792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b788:	f7fd fb0a 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 800b78c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b790:	e003      	b.n	800b79a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b792:	f7fd faf1 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 800b796:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b79e:	69db      	ldr	r3, [r3, #28]
 800b7a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7a4:	f040 810c 	bne.w	800b9c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b7a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b7b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b7b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b7ba:	4622      	mov	r2, r4
 800b7bc:	462b      	mov	r3, r5
 800b7be:	1891      	adds	r1, r2, r2
 800b7c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b7c2:	415b      	adcs	r3, r3
 800b7c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	eb12 0801 	adds.w	r8, r2, r1
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	eb43 0901 	adc.w	r9, r3, r1
 800b7d6:	f04f 0200 	mov.w	r2, #0
 800b7da:	f04f 0300 	mov.w	r3, #0
 800b7de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b7e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b7e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b7ea:	4690      	mov	r8, r2
 800b7ec:	4699      	mov	r9, r3
 800b7ee:	4623      	mov	r3, r4
 800b7f0:	eb18 0303 	adds.w	r3, r8, r3
 800b7f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b7f8:	462b      	mov	r3, r5
 800b7fa:	eb49 0303 	adc.w	r3, r9, r3
 800b7fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b80e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b816:	460b      	mov	r3, r1
 800b818:	18db      	adds	r3, r3, r3
 800b81a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b81c:	4613      	mov	r3, r2
 800b81e:	eb42 0303 	adc.w	r3, r2, r3
 800b822:	657b      	str	r3, [r7, #84]	@ 0x54
 800b824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b82c:	f7f5 f9ac 	bl	8000b88 <__aeabi_uldivmod>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	4b61      	ldr	r3, [pc, #388]	@ (800b9bc <UART_SetConfig+0x2d4>)
 800b836:	fba3 2302 	umull	r2, r3, r3, r2
 800b83a:	095b      	lsrs	r3, r3, #5
 800b83c:	011c      	lsls	r4, r3, #4
 800b83e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b842:	2200      	movs	r2, #0
 800b844:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b848:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b84c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b850:	4642      	mov	r2, r8
 800b852:	464b      	mov	r3, r9
 800b854:	1891      	adds	r1, r2, r2
 800b856:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b858:	415b      	adcs	r3, r3
 800b85a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b85c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b860:	4641      	mov	r1, r8
 800b862:	eb12 0a01 	adds.w	sl, r2, r1
 800b866:	4649      	mov	r1, r9
 800b868:	eb43 0b01 	adc.w	fp, r3, r1
 800b86c:	f04f 0200 	mov.w	r2, #0
 800b870:	f04f 0300 	mov.w	r3, #0
 800b874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b87c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b880:	4692      	mov	sl, r2
 800b882:	469b      	mov	fp, r3
 800b884:	4643      	mov	r3, r8
 800b886:	eb1a 0303 	adds.w	r3, sl, r3
 800b88a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b88e:	464b      	mov	r3, r9
 800b890:	eb4b 0303 	adc.w	r3, fp, r3
 800b894:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b8a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	18db      	adds	r3, r3, r3
 800b8b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	eb42 0303 	adc.w	r3, r2, r3
 800b8b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b8be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b8c2:	f7f5 f961 	bl	8000b88 <__aeabi_uldivmod>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b9bc <UART_SetConfig+0x2d4>)
 800b8ce:	fba3 2301 	umull	r2, r3, r3, r1
 800b8d2:	095b      	lsrs	r3, r3, #5
 800b8d4:	2264      	movs	r2, #100	@ 0x64
 800b8d6:	fb02 f303 	mul.w	r3, r2, r3
 800b8da:	1acb      	subs	r3, r1, r3
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b8e2:	4b36      	ldr	r3, [pc, #216]	@ (800b9bc <UART_SetConfig+0x2d4>)
 800b8e4:	fba3 2302 	umull	r2, r3, r3, r2
 800b8e8:	095b      	lsrs	r3, r3, #5
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b8f0:	441c      	add	r4, r3
 800b8f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b904:	4642      	mov	r2, r8
 800b906:	464b      	mov	r3, r9
 800b908:	1891      	adds	r1, r2, r2
 800b90a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b90c:	415b      	adcs	r3, r3
 800b90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b914:	4641      	mov	r1, r8
 800b916:	1851      	adds	r1, r2, r1
 800b918:	6339      	str	r1, [r7, #48]	@ 0x30
 800b91a:	4649      	mov	r1, r9
 800b91c:	414b      	adcs	r3, r1
 800b91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b920:	f04f 0200 	mov.w	r2, #0
 800b924:	f04f 0300 	mov.w	r3, #0
 800b928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b92c:	4659      	mov	r1, fp
 800b92e:	00cb      	lsls	r3, r1, #3
 800b930:	4651      	mov	r1, sl
 800b932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b936:	4651      	mov	r1, sl
 800b938:	00ca      	lsls	r2, r1, #3
 800b93a:	4610      	mov	r0, r2
 800b93c:	4619      	mov	r1, r3
 800b93e:	4603      	mov	r3, r0
 800b940:	4642      	mov	r2, r8
 800b942:	189b      	adds	r3, r3, r2
 800b944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b948:	464b      	mov	r3, r9
 800b94a:	460a      	mov	r2, r1
 800b94c:	eb42 0303 	adc.w	r3, r2, r3
 800b950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b960:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b968:	460b      	mov	r3, r1
 800b96a:	18db      	adds	r3, r3, r3
 800b96c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b96e:	4613      	mov	r3, r2
 800b970:	eb42 0303 	adc.w	r3, r2, r3
 800b974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b97a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b97e:	f7f5 f903 	bl	8000b88 <__aeabi_uldivmod>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4b0d      	ldr	r3, [pc, #52]	@ (800b9bc <UART_SetConfig+0x2d4>)
 800b988:	fba3 1302 	umull	r1, r3, r3, r2
 800b98c:	095b      	lsrs	r3, r3, #5
 800b98e:	2164      	movs	r1, #100	@ 0x64
 800b990:	fb01 f303 	mul.w	r3, r1, r3
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	00db      	lsls	r3, r3, #3
 800b998:	3332      	adds	r3, #50	@ 0x32
 800b99a:	4a08      	ldr	r2, [pc, #32]	@ (800b9bc <UART_SetConfig+0x2d4>)
 800b99c:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a0:	095b      	lsrs	r3, r3, #5
 800b9a2:	f003 0207 	and.w	r2, r3, #7
 800b9a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4422      	add	r2, r4
 800b9ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b9b0:	e106      	b.n	800bbc0 <UART_SetConfig+0x4d8>
 800b9b2:	bf00      	nop
 800b9b4:	40011000 	.word	0x40011000
 800b9b8:	40011400 	.word	0x40011400
 800b9bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b9c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b9ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b9ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b9d2:	4642      	mov	r2, r8
 800b9d4:	464b      	mov	r3, r9
 800b9d6:	1891      	adds	r1, r2, r2
 800b9d8:	6239      	str	r1, [r7, #32]
 800b9da:	415b      	adcs	r3, r3
 800b9dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b9e2:	4641      	mov	r1, r8
 800b9e4:	1854      	adds	r4, r2, r1
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	eb43 0501 	adc.w	r5, r3, r1
 800b9ec:	f04f 0200 	mov.w	r2, #0
 800b9f0:	f04f 0300 	mov.w	r3, #0
 800b9f4:	00eb      	lsls	r3, r5, #3
 800b9f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b9fa:	00e2      	lsls	r2, r4, #3
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	461d      	mov	r5, r3
 800ba00:	4643      	mov	r3, r8
 800ba02:	18e3      	adds	r3, r4, r3
 800ba04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ba08:	464b      	mov	r3, r9
 800ba0a:	eb45 0303 	adc.w	r3, r5, r3
 800ba0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ba12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ba22:	f04f 0200 	mov.w	r2, #0
 800ba26:	f04f 0300 	mov.w	r3, #0
 800ba2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ba2e:	4629      	mov	r1, r5
 800ba30:	008b      	lsls	r3, r1, #2
 800ba32:	4621      	mov	r1, r4
 800ba34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba38:	4621      	mov	r1, r4
 800ba3a:	008a      	lsls	r2, r1, #2
 800ba3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ba40:	f7f5 f8a2 	bl	8000b88 <__aeabi_uldivmod>
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	4b60      	ldr	r3, [pc, #384]	@ (800bbcc <UART_SetConfig+0x4e4>)
 800ba4a:	fba3 2302 	umull	r2, r3, r3, r2
 800ba4e:	095b      	lsrs	r3, r3, #5
 800ba50:	011c      	lsls	r4, r3, #4
 800ba52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba56:	2200      	movs	r2, #0
 800ba58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ba5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ba60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ba64:	4642      	mov	r2, r8
 800ba66:	464b      	mov	r3, r9
 800ba68:	1891      	adds	r1, r2, r2
 800ba6a:	61b9      	str	r1, [r7, #24]
 800ba6c:	415b      	adcs	r3, r3
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba74:	4641      	mov	r1, r8
 800ba76:	1851      	adds	r1, r2, r1
 800ba78:	6139      	str	r1, [r7, #16]
 800ba7a:	4649      	mov	r1, r9
 800ba7c:	414b      	adcs	r3, r1
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	f04f 0200 	mov.w	r2, #0
 800ba84:	f04f 0300 	mov.w	r3, #0
 800ba88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ba8c:	4659      	mov	r1, fp
 800ba8e:	00cb      	lsls	r3, r1, #3
 800ba90:	4651      	mov	r1, sl
 800ba92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba96:	4651      	mov	r1, sl
 800ba98:	00ca      	lsls	r2, r1, #3
 800ba9a:	4610      	mov	r0, r2
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	4603      	mov	r3, r0
 800baa0:	4642      	mov	r2, r8
 800baa2:	189b      	adds	r3, r3, r2
 800baa4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800baa8:	464b      	mov	r3, r9
 800baaa:	460a      	mov	r2, r1
 800baac:	eb42 0303 	adc.w	r3, r2, r3
 800bab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800babe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bac0:	f04f 0200 	mov.w	r2, #0
 800bac4:	f04f 0300 	mov.w	r3, #0
 800bac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bacc:	4649      	mov	r1, r9
 800bace:	008b      	lsls	r3, r1, #2
 800bad0:	4641      	mov	r1, r8
 800bad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bad6:	4641      	mov	r1, r8
 800bad8:	008a      	lsls	r2, r1, #2
 800bada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bade:	f7f5 f853 	bl	8000b88 <__aeabi_uldivmod>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4611      	mov	r1, r2
 800bae8:	4b38      	ldr	r3, [pc, #224]	@ (800bbcc <UART_SetConfig+0x4e4>)
 800baea:	fba3 2301 	umull	r2, r3, r3, r1
 800baee:	095b      	lsrs	r3, r3, #5
 800baf0:	2264      	movs	r2, #100	@ 0x64
 800baf2:	fb02 f303 	mul.w	r3, r2, r3
 800baf6:	1acb      	subs	r3, r1, r3
 800baf8:	011b      	lsls	r3, r3, #4
 800bafa:	3332      	adds	r3, #50	@ 0x32
 800bafc:	4a33      	ldr	r2, [pc, #204]	@ (800bbcc <UART_SetConfig+0x4e4>)
 800bafe:	fba2 2303 	umull	r2, r3, r2, r3
 800bb02:	095b      	lsrs	r3, r3, #5
 800bb04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb08:	441c      	add	r4, r3
 800bb0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb0e:	2200      	movs	r2, #0
 800bb10:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb12:	677a      	str	r2, [r7, #116]	@ 0x74
 800bb14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bb18:	4642      	mov	r2, r8
 800bb1a:	464b      	mov	r3, r9
 800bb1c:	1891      	adds	r1, r2, r2
 800bb1e:	60b9      	str	r1, [r7, #8]
 800bb20:	415b      	adcs	r3, r3
 800bb22:	60fb      	str	r3, [r7, #12]
 800bb24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bb28:	4641      	mov	r1, r8
 800bb2a:	1851      	adds	r1, r2, r1
 800bb2c:	6039      	str	r1, [r7, #0]
 800bb2e:	4649      	mov	r1, r9
 800bb30:	414b      	adcs	r3, r1
 800bb32:	607b      	str	r3, [r7, #4]
 800bb34:	f04f 0200 	mov.w	r2, #0
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bb40:	4659      	mov	r1, fp
 800bb42:	00cb      	lsls	r3, r1, #3
 800bb44:	4651      	mov	r1, sl
 800bb46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb4a:	4651      	mov	r1, sl
 800bb4c:	00ca      	lsls	r2, r1, #3
 800bb4e:	4610      	mov	r0, r2
 800bb50:	4619      	mov	r1, r3
 800bb52:	4603      	mov	r3, r0
 800bb54:	4642      	mov	r2, r8
 800bb56:	189b      	adds	r3, r3, r2
 800bb58:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bb5a:	464b      	mov	r3, r9
 800bb5c:	460a      	mov	r2, r1
 800bb5e:	eb42 0303 	adc.w	r3, r2, r3
 800bb62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb6e:	667a      	str	r2, [r7, #100]	@ 0x64
 800bb70:	f04f 0200 	mov.w	r2, #0
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	008b      	lsls	r3, r1, #2
 800bb80:	4641      	mov	r1, r8
 800bb82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb86:	4641      	mov	r1, r8
 800bb88:	008a      	lsls	r2, r1, #2
 800bb8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bb8e:	f7f4 fffb 	bl	8000b88 <__aeabi_uldivmod>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4b0d      	ldr	r3, [pc, #52]	@ (800bbcc <UART_SetConfig+0x4e4>)
 800bb98:	fba3 1302 	umull	r1, r3, r3, r2
 800bb9c:	095b      	lsrs	r3, r3, #5
 800bb9e:	2164      	movs	r1, #100	@ 0x64
 800bba0:	fb01 f303 	mul.w	r3, r1, r3
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	011b      	lsls	r3, r3, #4
 800bba8:	3332      	adds	r3, #50	@ 0x32
 800bbaa:	4a08      	ldr	r2, [pc, #32]	@ (800bbcc <UART_SetConfig+0x4e4>)
 800bbac:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb0:	095b      	lsrs	r3, r3, #5
 800bbb2:	f003 020f 	and.w	r2, r3, #15
 800bbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	4422      	add	r2, r4
 800bbbe:	609a      	str	r2, [r3, #8]
}
 800bbc0:	bf00      	nop
 800bbc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbcc:	51eb851f 	.word	0x51eb851f

0800bbd0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	4b20      	ldr	r3, [pc, #128]	@ (800bc70 <FSMC_NORSRAM_Init+0xa0>)
 800bbee:	4013      	ands	r3, r2
 800bbf0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bbfa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800bc00:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800bc06:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800bc0c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800bc12:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800bc18:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800bc1e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800bc24:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800bc2a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 800bc30:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800bc36:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 800bc3c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	689b      	ldr	r3, [r3, #8]
 800bc48:	2b08      	cmp	r3, #8
 800bc4a:	d103      	bne.n	800bc54 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc52:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68f9      	ldr	r1, [r7, #12]
 800bc5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
 800bc6e:	bf00      	nop
 800bc70:	fff00080 	.word	0xfff00080

0800bc74 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800bc80:	2300      	movs	r3, #0
 800bc82:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	1c5a      	adds	r2, r3, #1
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800bc96:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bca2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	689b      	ldr	r3, [r3, #8]
 800bca8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bcaa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	68db      	ldr	r3, [r3, #12]
 800bcb0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800bcb2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bcbc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	3b02      	subs	r3, #2
 800bcc4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bcc6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bccc:	4313      	orrs	r3, r2
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6979      	ldr	r1, [r7, #20]
 800bcdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	371c      	adds	r7, #28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
	...

0800bcf0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
 800bcfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd08:	d122      	bne.n	800bd50 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd12:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800bd14:	697a      	ldr	r2, [r7, #20]
 800bd16:	4b15      	ldr	r3, [pc, #84]	@ (800bd6c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800bd18:	4013      	ands	r3, r2
 800bd1a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bd26:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	689b      	ldr	r3, [r3, #8]
 800bd2c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bd2e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800bd36:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bd3c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bd3e:	697a      	ldr	r2, [r7, #20]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	6979      	ldr	r1, [r7, #20]
 800bd4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bd4e:	e005      	b.n	800bd5c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800bd58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	cff00000 	.word	0xcff00000

0800bd70 <malloc>:
 800bd70:	4b02      	ldr	r3, [pc, #8]	@ (800bd7c <malloc+0xc>)
 800bd72:	4601      	mov	r1, r0
 800bd74:	6818      	ldr	r0, [r3, #0]
 800bd76:	f000 b825 	b.w	800bdc4 <_malloc_r>
 800bd7a:	bf00      	nop
 800bd7c:	20000088 	.word	0x20000088

0800bd80 <sbrk_aligned>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	4e0f      	ldr	r6, [pc, #60]	@ (800bdc0 <sbrk_aligned+0x40>)
 800bd84:	460c      	mov	r4, r1
 800bd86:	6831      	ldr	r1, [r6, #0]
 800bd88:	4605      	mov	r5, r0
 800bd8a:	b911      	cbnz	r1, 800bd92 <sbrk_aligned+0x12>
 800bd8c:	f000 fa46 	bl	800c21c <_sbrk_r>
 800bd90:	6030      	str	r0, [r6, #0]
 800bd92:	4621      	mov	r1, r4
 800bd94:	4628      	mov	r0, r5
 800bd96:	f000 fa41 	bl	800c21c <_sbrk_r>
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	d103      	bne.n	800bda6 <sbrk_aligned+0x26>
 800bd9e:	f04f 34ff 	mov.w	r4, #4294967295
 800bda2:	4620      	mov	r0, r4
 800bda4:	bd70      	pop	{r4, r5, r6, pc}
 800bda6:	1cc4      	adds	r4, r0, #3
 800bda8:	f024 0403 	bic.w	r4, r4, #3
 800bdac:	42a0      	cmp	r0, r4
 800bdae:	d0f8      	beq.n	800bda2 <sbrk_aligned+0x22>
 800bdb0:	1a21      	subs	r1, r4, r0
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f000 fa32 	bl	800c21c <_sbrk_r>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d1f2      	bne.n	800bda2 <sbrk_aligned+0x22>
 800bdbc:	e7ef      	b.n	800bd9e <sbrk_aligned+0x1e>
 800bdbe:	bf00      	nop
 800bdc0:	20000e6c 	.word	0x20000e6c

0800bdc4 <_malloc_r>:
 800bdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc8:	1ccd      	adds	r5, r1, #3
 800bdca:	f025 0503 	bic.w	r5, r5, #3
 800bdce:	3508      	adds	r5, #8
 800bdd0:	2d0c      	cmp	r5, #12
 800bdd2:	bf38      	it	cc
 800bdd4:	250c      	movcc	r5, #12
 800bdd6:	2d00      	cmp	r5, #0
 800bdd8:	4606      	mov	r6, r0
 800bdda:	db01      	blt.n	800bde0 <_malloc_r+0x1c>
 800bddc:	42a9      	cmp	r1, r5
 800bdde:	d904      	bls.n	800bdea <_malloc_r+0x26>
 800bde0:	230c      	movs	r3, #12
 800bde2:	6033      	str	r3, [r6, #0]
 800bde4:	2000      	movs	r0, #0
 800bde6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bec0 <_malloc_r+0xfc>
 800bdee:	f000 f869 	bl	800bec4 <__malloc_lock>
 800bdf2:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf6:	461c      	mov	r4, r3
 800bdf8:	bb44      	cbnz	r4, 800be4c <_malloc_r+0x88>
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f7ff ffbf 	bl	800bd80 <sbrk_aligned>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	4604      	mov	r4, r0
 800be06:	d158      	bne.n	800beba <_malloc_r+0xf6>
 800be08:	f8d8 4000 	ldr.w	r4, [r8]
 800be0c:	4627      	mov	r7, r4
 800be0e:	2f00      	cmp	r7, #0
 800be10:	d143      	bne.n	800be9a <_malloc_r+0xd6>
 800be12:	2c00      	cmp	r4, #0
 800be14:	d04b      	beq.n	800beae <_malloc_r+0xea>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	4639      	mov	r1, r7
 800be1a:	4630      	mov	r0, r6
 800be1c:	eb04 0903 	add.w	r9, r4, r3
 800be20:	f000 f9fc 	bl	800c21c <_sbrk_r>
 800be24:	4581      	cmp	r9, r0
 800be26:	d142      	bne.n	800beae <_malloc_r+0xea>
 800be28:	6821      	ldr	r1, [r4, #0]
 800be2a:	1a6d      	subs	r5, r5, r1
 800be2c:	4629      	mov	r1, r5
 800be2e:	4630      	mov	r0, r6
 800be30:	f7ff ffa6 	bl	800bd80 <sbrk_aligned>
 800be34:	3001      	adds	r0, #1
 800be36:	d03a      	beq.n	800beae <_malloc_r+0xea>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	442b      	add	r3, r5
 800be3c:	6023      	str	r3, [r4, #0]
 800be3e:	f8d8 3000 	ldr.w	r3, [r8]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	bb62      	cbnz	r2, 800bea0 <_malloc_r+0xdc>
 800be46:	f8c8 7000 	str.w	r7, [r8]
 800be4a:	e00f      	b.n	800be6c <_malloc_r+0xa8>
 800be4c:	6822      	ldr	r2, [r4, #0]
 800be4e:	1b52      	subs	r2, r2, r5
 800be50:	d420      	bmi.n	800be94 <_malloc_r+0xd0>
 800be52:	2a0b      	cmp	r2, #11
 800be54:	d917      	bls.n	800be86 <_malloc_r+0xc2>
 800be56:	1961      	adds	r1, r4, r5
 800be58:	42a3      	cmp	r3, r4
 800be5a:	6025      	str	r5, [r4, #0]
 800be5c:	bf18      	it	ne
 800be5e:	6059      	strne	r1, [r3, #4]
 800be60:	6863      	ldr	r3, [r4, #4]
 800be62:	bf08      	it	eq
 800be64:	f8c8 1000 	streq.w	r1, [r8]
 800be68:	5162      	str	r2, [r4, r5]
 800be6a:	604b      	str	r3, [r1, #4]
 800be6c:	4630      	mov	r0, r6
 800be6e:	f000 f82f 	bl	800bed0 <__malloc_unlock>
 800be72:	f104 000b 	add.w	r0, r4, #11
 800be76:	1d23      	adds	r3, r4, #4
 800be78:	f020 0007 	bic.w	r0, r0, #7
 800be7c:	1ac2      	subs	r2, r0, r3
 800be7e:	bf1c      	itt	ne
 800be80:	1a1b      	subne	r3, r3, r0
 800be82:	50a3      	strne	r3, [r4, r2]
 800be84:	e7af      	b.n	800bde6 <_malloc_r+0x22>
 800be86:	6862      	ldr	r2, [r4, #4]
 800be88:	42a3      	cmp	r3, r4
 800be8a:	bf0c      	ite	eq
 800be8c:	f8c8 2000 	streq.w	r2, [r8]
 800be90:	605a      	strne	r2, [r3, #4]
 800be92:	e7eb      	b.n	800be6c <_malloc_r+0xa8>
 800be94:	4623      	mov	r3, r4
 800be96:	6864      	ldr	r4, [r4, #4]
 800be98:	e7ae      	b.n	800bdf8 <_malloc_r+0x34>
 800be9a:	463c      	mov	r4, r7
 800be9c:	687f      	ldr	r7, [r7, #4]
 800be9e:	e7b6      	b.n	800be0e <_malloc_r+0x4a>
 800bea0:	461a      	mov	r2, r3
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	42a3      	cmp	r3, r4
 800bea6:	d1fb      	bne.n	800bea0 <_malloc_r+0xdc>
 800bea8:	2300      	movs	r3, #0
 800beaa:	6053      	str	r3, [r2, #4]
 800beac:	e7de      	b.n	800be6c <_malloc_r+0xa8>
 800beae:	230c      	movs	r3, #12
 800beb0:	6033      	str	r3, [r6, #0]
 800beb2:	4630      	mov	r0, r6
 800beb4:	f000 f80c 	bl	800bed0 <__malloc_unlock>
 800beb8:	e794      	b.n	800bde4 <_malloc_r+0x20>
 800beba:	6005      	str	r5, [r0, #0]
 800bebc:	e7d6      	b.n	800be6c <_malloc_r+0xa8>
 800bebe:	bf00      	nop
 800bec0:	20000e70 	.word	0x20000e70

0800bec4 <__malloc_lock>:
 800bec4:	4801      	ldr	r0, [pc, #4]	@ (800becc <__malloc_lock+0x8>)
 800bec6:	f000 b9f6 	b.w	800c2b6 <__retarget_lock_acquire_recursive>
 800beca:	bf00      	nop
 800becc:	20000fb4 	.word	0x20000fb4

0800bed0 <__malloc_unlock>:
 800bed0:	4801      	ldr	r0, [pc, #4]	@ (800bed8 <__malloc_unlock+0x8>)
 800bed2:	f000 b9f1 	b.w	800c2b8 <__retarget_lock_release_recursive>
 800bed6:	bf00      	nop
 800bed8:	20000fb4 	.word	0x20000fb4

0800bedc <rand>:
 800bedc:	4b16      	ldr	r3, [pc, #88]	@ (800bf38 <rand+0x5c>)
 800bede:	b510      	push	{r4, lr}
 800bee0:	681c      	ldr	r4, [r3, #0]
 800bee2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800bee4:	b9b3      	cbnz	r3, 800bf14 <rand+0x38>
 800bee6:	2018      	movs	r0, #24
 800bee8:	f7ff ff42 	bl	800bd70 <malloc>
 800beec:	4602      	mov	r2, r0
 800beee:	6320      	str	r0, [r4, #48]	@ 0x30
 800bef0:	b920      	cbnz	r0, 800befc <rand+0x20>
 800bef2:	4b12      	ldr	r3, [pc, #72]	@ (800bf3c <rand+0x60>)
 800bef4:	4812      	ldr	r0, [pc, #72]	@ (800bf40 <rand+0x64>)
 800bef6:	2152      	movs	r1, #82	@ 0x52
 800bef8:	f000 f9e0 	bl	800c2bc <__assert_func>
 800befc:	4911      	ldr	r1, [pc, #68]	@ (800bf44 <rand+0x68>)
 800befe:	4b12      	ldr	r3, [pc, #72]	@ (800bf48 <rand+0x6c>)
 800bf00:	e9c0 1300 	strd	r1, r3, [r0]
 800bf04:	4b11      	ldr	r3, [pc, #68]	@ (800bf4c <rand+0x70>)
 800bf06:	6083      	str	r3, [r0, #8]
 800bf08:	230b      	movs	r3, #11
 800bf0a:	8183      	strh	r3, [r0, #12]
 800bf0c:	2100      	movs	r1, #0
 800bf0e:	2001      	movs	r0, #1
 800bf10:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800bf14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bf16:	480e      	ldr	r0, [pc, #56]	@ (800bf50 <rand+0x74>)
 800bf18:	690b      	ldr	r3, [r1, #16]
 800bf1a:	694c      	ldr	r4, [r1, #20]
 800bf1c:	4a0d      	ldr	r2, [pc, #52]	@ (800bf54 <rand+0x78>)
 800bf1e:	4358      	muls	r0, r3
 800bf20:	fb02 0004 	mla	r0, r2, r4, r0
 800bf24:	fba3 3202 	umull	r3, r2, r3, r2
 800bf28:	3301      	adds	r3, #1
 800bf2a:	eb40 0002 	adc.w	r0, r0, r2
 800bf2e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800bf32:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800bf36:	bd10      	pop	{r4, pc}
 800bf38:	20000088 	.word	0x20000088
 800bf3c:	080106ac 	.word	0x080106ac
 800bf40:	080106c3 	.word	0x080106c3
 800bf44:	abcd330e 	.word	0xabcd330e
 800bf48:	e66d1234 	.word	0xe66d1234
 800bf4c:	0005deec 	.word	0x0005deec
 800bf50:	5851f42d 	.word	0x5851f42d
 800bf54:	4c957f2d 	.word	0x4c957f2d

0800bf58 <std>:
 800bf58:	2300      	movs	r3, #0
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf66:	6083      	str	r3, [r0, #8]
 800bf68:	8181      	strh	r1, [r0, #12]
 800bf6a:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf6c:	81c2      	strh	r2, [r0, #14]
 800bf6e:	6183      	str	r3, [r0, #24]
 800bf70:	4619      	mov	r1, r3
 800bf72:	2208      	movs	r2, #8
 800bf74:	305c      	adds	r0, #92	@ 0x5c
 800bf76:	f000 f914 	bl	800c1a2 <memset>
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb0 <std+0x58>)
 800bf7c:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb4 <std+0x5c>)
 800bf80:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf82:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb8 <std+0x60>)
 800bf84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf86:	4b0d      	ldr	r3, [pc, #52]	@ (800bfbc <std+0x64>)
 800bf88:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc0 <std+0x68>)
 800bf8c:	6224      	str	r4, [r4, #32]
 800bf8e:	429c      	cmp	r4, r3
 800bf90:	d006      	beq.n	800bfa0 <std+0x48>
 800bf92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf96:	4294      	cmp	r4, r2
 800bf98:	d002      	beq.n	800bfa0 <std+0x48>
 800bf9a:	33d0      	adds	r3, #208	@ 0xd0
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d105      	bne.n	800bfac <std+0x54>
 800bfa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfa8:	f000 b984 	b.w	800c2b4 <__retarget_lock_init_recursive>
 800bfac:	bd10      	pop	{r4, pc}
 800bfae:	bf00      	nop
 800bfb0:	0800c11d 	.word	0x0800c11d
 800bfb4:	0800c13f 	.word	0x0800c13f
 800bfb8:	0800c177 	.word	0x0800c177
 800bfbc:	0800c19b 	.word	0x0800c19b
 800bfc0:	20000e74 	.word	0x20000e74

0800bfc4 <stdio_exit_handler>:
 800bfc4:	4a02      	ldr	r2, [pc, #8]	@ (800bfd0 <stdio_exit_handler+0xc>)
 800bfc6:	4903      	ldr	r1, [pc, #12]	@ (800bfd4 <stdio_exit_handler+0x10>)
 800bfc8:	4803      	ldr	r0, [pc, #12]	@ (800bfd8 <stdio_exit_handler+0x14>)
 800bfca:	f000 b869 	b.w	800c0a0 <_fwalk_sglue>
 800bfce:	bf00      	nop
 800bfd0:	2000007c 	.word	0x2000007c
 800bfd4:	0800ca61 	.word	0x0800ca61
 800bfd8:	2000008c 	.word	0x2000008c

0800bfdc <cleanup_stdio>:
 800bfdc:	6841      	ldr	r1, [r0, #4]
 800bfde:	4b0c      	ldr	r3, [pc, #48]	@ (800c010 <cleanup_stdio+0x34>)
 800bfe0:	4299      	cmp	r1, r3
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	d001      	beq.n	800bfec <cleanup_stdio+0x10>
 800bfe8:	f000 fd3a 	bl	800ca60 <_fflush_r>
 800bfec:	68a1      	ldr	r1, [r4, #8]
 800bfee:	4b09      	ldr	r3, [pc, #36]	@ (800c014 <cleanup_stdio+0x38>)
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d002      	beq.n	800bffa <cleanup_stdio+0x1e>
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 fd33 	bl	800ca60 <_fflush_r>
 800bffa:	68e1      	ldr	r1, [r4, #12]
 800bffc:	4b06      	ldr	r3, [pc, #24]	@ (800c018 <cleanup_stdio+0x3c>)
 800bffe:	4299      	cmp	r1, r3
 800c000:	d004      	beq.n	800c00c <cleanup_stdio+0x30>
 800c002:	4620      	mov	r0, r4
 800c004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c008:	f000 bd2a 	b.w	800ca60 <_fflush_r>
 800c00c:	bd10      	pop	{r4, pc}
 800c00e:	bf00      	nop
 800c010:	20000e74 	.word	0x20000e74
 800c014:	20000edc 	.word	0x20000edc
 800c018:	20000f44 	.word	0x20000f44

0800c01c <global_stdio_init.part.0>:
 800c01c:	b510      	push	{r4, lr}
 800c01e:	4b0b      	ldr	r3, [pc, #44]	@ (800c04c <global_stdio_init.part.0+0x30>)
 800c020:	4c0b      	ldr	r4, [pc, #44]	@ (800c050 <global_stdio_init.part.0+0x34>)
 800c022:	4a0c      	ldr	r2, [pc, #48]	@ (800c054 <global_stdio_init.part.0+0x38>)
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	4620      	mov	r0, r4
 800c028:	2200      	movs	r2, #0
 800c02a:	2104      	movs	r1, #4
 800c02c:	f7ff ff94 	bl	800bf58 <std>
 800c030:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c034:	2201      	movs	r2, #1
 800c036:	2109      	movs	r1, #9
 800c038:	f7ff ff8e 	bl	800bf58 <std>
 800c03c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c040:	2202      	movs	r2, #2
 800c042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c046:	2112      	movs	r1, #18
 800c048:	f7ff bf86 	b.w	800bf58 <std>
 800c04c:	20000fac 	.word	0x20000fac
 800c050:	20000e74 	.word	0x20000e74
 800c054:	0800bfc5 	.word	0x0800bfc5

0800c058 <__sfp_lock_acquire>:
 800c058:	4801      	ldr	r0, [pc, #4]	@ (800c060 <__sfp_lock_acquire+0x8>)
 800c05a:	f000 b92c 	b.w	800c2b6 <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	20000fb5 	.word	0x20000fb5

0800c064 <__sfp_lock_release>:
 800c064:	4801      	ldr	r0, [pc, #4]	@ (800c06c <__sfp_lock_release+0x8>)
 800c066:	f000 b927 	b.w	800c2b8 <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	20000fb5 	.word	0x20000fb5

0800c070 <__sinit>:
 800c070:	b510      	push	{r4, lr}
 800c072:	4604      	mov	r4, r0
 800c074:	f7ff fff0 	bl	800c058 <__sfp_lock_acquire>
 800c078:	6a23      	ldr	r3, [r4, #32]
 800c07a:	b11b      	cbz	r3, 800c084 <__sinit+0x14>
 800c07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c080:	f7ff bff0 	b.w	800c064 <__sfp_lock_release>
 800c084:	4b04      	ldr	r3, [pc, #16]	@ (800c098 <__sinit+0x28>)
 800c086:	6223      	str	r3, [r4, #32]
 800c088:	4b04      	ldr	r3, [pc, #16]	@ (800c09c <__sinit+0x2c>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1f5      	bne.n	800c07c <__sinit+0xc>
 800c090:	f7ff ffc4 	bl	800c01c <global_stdio_init.part.0>
 800c094:	e7f2      	b.n	800c07c <__sinit+0xc>
 800c096:	bf00      	nop
 800c098:	0800bfdd 	.word	0x0800bfdd
 800c09c:	20000fac 	.word	0x20000fac

0800c0a0 <_fwalk_sglue>:
 800c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0a4:	4607      	mov	r7, r0
 800c0a6:	4688      	mov	r8, r1
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	2600      	movs	r6, #0
 800c0ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0b0:	f1b9 0901 	subs.w	r9, r9, #1
 800c0b4:	d505      	bpl.n	800c0c2 <_fwalk_sglue+0x22>
 800c0b6:	6824      	ldr	r4, [r4, #0]
 800c0b8:	2c00      	cmp	r4, #0
 800c0ba:	d1f7      	bne.n	800c0ac <_fwalk_sglue+0xc>
 800c0bc:	4630      	mov	r0, r6
 800c0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	89ab      	ldrh	r3, [r5, #12]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d907      	bls.n	800c0d8 <_fwalk_sglue+0x38>
 800c0c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	d003      	beq.n	800c0d8 <_fwalk_sglue+0x38>
 800c0d0:	4629      	mov	r1, r5
 800c0d2:	4638      	mov	r0, r7
 800c0d4:	47c0      	blx	r8
 800c0d6:	4306      	orrs	r6, r0
 800c0d8:	3568      	adds	r5, #104	@ 0x68
 800c0da:	e7e9      	b.n	800c0b0 <_fwalk_sglue+0x10>

0800c0dc <siprintf>:
 800c0dc:	b40e      	push	{r1, r2, r3}
 800c0de:	b500      	push	{lr}
 800c0e0:	b09c      	sub	sp, #112	@ 0x70
 800c0e2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c0e4:	9002      	str	r0, [sp, #8]
 800c0e6:	9006      	str	r0, [sp, #24]
 800c0e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c0ec:	4809      	ldr	r0, [pc, #36]	@ (800c114 <siprintf+0x38>)
 800c0ee:	9107      	str	r1, [sp, #28]
 800c0f0:	9104      	str	r1, [sp, #16]
 800c0f2:	4909      	ldr	r1, [pc, #36]	@ (800c118 <siprintf+0x3c>)
 800c0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f8:	9105      	str	r1, [sp, #20]
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	a902      	add	r1, sp, #8
 800c100:	f000 f9a0 	bl	800c444 <_svfiprintf_r>
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	b01c      	add	sp, #112	@ 0x70
 800c10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c110:	b003      	add	sp, #12
 800c112:	4770      	bx	lr
 800c114:	20000088 	.word	0x20000088
 800c118:	ffff0208 	.word	0xffff0208

0800c11c <__sread>:
 800c11c:	b510      	push	{r4, lr}
 800c11e:	460c      	mov	r4, r1
 800c120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c124:	f000 f868 	bl	800c1f8 <_read_r>
 800c128:	2800      	cmp	r0, #0
 800c12a:	bfab      	itete	ge
 800c12c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c12e:	89a3      	ldrhlt	r3, [r4, #12]
 800c130:	181b      	addge	r3, r3, r0
 800c132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c136:	bfac      	ite	ge
 800c138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c13a:	81a3      	strhlt	r3, [r4, #12]
 800c13c:	bd10      	pop	{r4, pc}

0800c13e <__swrite>:
 800c13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c142:	461f      	mov	r7, r3
 800c144:	898b      	ldrh	r3, [r1, #12]
 800c146:	05db      	lsls	r3, r3, #23
 800c148:	4605      	mov	r5, r0
 800c14a:	460c      	mov	r4, r1
 800c14c:	4616      	mov	r6, r2
 800c14e:	d505      	bpl.n	800c15c <__swrite+0x1e>
 800c150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c154:	2302      	movs	r3, #2
 800c156:	2200      	movs	r2, #0
 800c158:	f000 f83c 	bl	800c1d4 <_lseek_r>
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c166:	81a3      	strh	r3, [r4, #12]
 800c168:	4632      	mov	r2, r6
 800c16a:	463b      	mov	r3, r7
 800c16c:	4628      	mov	r0, r5
 800c16e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c172:	f000 b863 	b.w	800c23c <_write_r>

0800c176 <__sseek>:
 800c176:	b510      	push	{r4, lr}
 800c178:	460c      	mov	r4, r1
 800c17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17e:	f000 f829 	bl	800c1d4 <_lseek_r>
 800c182:	1c43      	adds	r3, r0, #1
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	bf15      	itete	ne
 800c188:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c18a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c18e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c192:	81a3      	strheq	r3, [r4, #12]
 800c194:	bf18      	it	ne
 800c196:	81a3      	strhne	r3, [r4, #12]
 800c198:	bd10      	pop	{r4, pc}

0800c19a <__sclose>:
 800c19a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c19e:	f000 b809 	b.w	800c1b4 <_close_r>

0800c1a2 <memset>:
 800c1a2:	4402      	add	r2, r0
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d100      	bne.n	800c1ac <memset+0xa>
 800c1aa:	4770      	bx	lr
 800c1ac:	f803 1b01 	strb.w	r1, [r3], #1
 800c1b0:	e7f9      	b.n	800c1a6 <memset+0x4>
	...

0800c1b4 <_close_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	@ (800c1d0 <_close_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f8 fd2e 	bl	8004c20 <_close>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_close_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_close_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	20000fb0 	.word	0x20000fb0

0800c1d4 <_lseek_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d07      	ldr	r5, [pc, #28]	@ (800c1f4 <_lseek_r+0x20>)
 800c1d8:	4604      	mov	r4, r0
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4611      	mov	r1, r2
 800c1de:	2200      	movs	r2, #0
 800c1e0:	602a      	str	r2, [r5, #0]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f7f8 fd43 	bl	8004c6e <_lseek>
 800c1e8:	1c43      	adds	r3, r0, #1
 800c1ea:	d102      	bne.n	800c1f2 <_lseek_r+0x1e>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	b103      	cbz	r3, 800c1f2 <_lseek_r+0x1e>
 800c1f0:	6023      	str	r3, [r4, #0]
 800c1f2:	bd38      	pop	{r3, r4, r5, pc}
 800c1f4:	20000fb0 	.word	0x20000fb0

0800c1f8 <_read_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d07      	ldr	r5, [pc, #28]	@ (800c218 <_read_r+0x20>)
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	4608      	mov	r0, r1
 800c200:	4611      	mov	r1, r2
 800c202:	2200      	movs	r2, #0
 800c204:	602a      	str	r2, [r5, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f7f8 fcd1 	bl	8004bae <_read>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_read_r+0x1e>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_read_r+0x1e>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	20000fb0 	.word	0x20000fb0

0800c21c <_sbrk_r>:
 800c21c:	b538      	push	{r3, r4, r5, lr}
 800c21e:	4d06      	ldr	r5, [pc, #24]	@ (800c238 <_sbrk_r+0x1c>)
 800c220:	2300      	movs	r3, #0
 800c222:	4604      	mov	r4, r0
 800c224:	4608      	mov	r0, r1
 800c226:	602b      	str	r3, [r5, #0]
 800c228:	f7f8 fd2e 	bl	8004c88 <_sbrk>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_sbrk_r+0x1a>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_sbrk_r+0x1a>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	20000fb0 	.word	0x20000fb0

0800c23c <_write_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	@ (800c25c <_write_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f8 fccc 	bl	8004be8 <_write>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_write_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_write_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	20000fb0 	.word	0x20000fb0

0800c260 <__errno>:
 800c260:	4b01      	ldr	r3, [pc, #4]	@ (800c268 <__errno+0x8>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	20000088 	.word	0x20000088

0800c26c <__libc_init_array>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	4d0d      	ldr	r5, [pc, #52]	@ (800c2a4 <__libc_init_array+0x38>)
 800c270:	4c0d      	ldr	r4, [pc, #52]	@ (800c2a8 <__libc_init_array+0x3c>)
 800c272:	1b64      	subs	r4, r4, r5
 800c274:	10a4      	asrs	r4, r4, #2
 800c276:	2600      	movs	r6, #0
 800c278:	42a6      	cmp	r6, r4
 800c27a:	d109      	bne.n	800c290 <__libc_init_array+0x24>
 800c27c:	4d0b      	ldr	r5, [pc, #44]	@ (800c2ac <__libc_init_array+0x40>)
 800c27e:	4c0c      	ldr	r4, [pc, #48]	@ (800c2b0 <__libc_init_array+0x44>)
 800c280:	f001 f830 	bl	800d2e4 <_init>
 800c284:	1b64      	subs	r4, r4, r5
 800c286:	10a4      	asrs	r4, r4, #2
 800c288:	2600      	movs	r6, #0
 800c28a:	42a6      	cmp	r6, r4
 800c28c:	d105      	bne.n	800c29a <__libc_init_array+0x2e>
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	f855 3b04 	ldr.w	r3, [r5], #4
 800c294:	4798      	blx	r3
 800c296:	3601      	adds	r6, #1
 800c298:	e7ee      	b.n	800c278 <__libc_init_array+0xc>
 800c29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29e:	4798      	blx	r3
 800c2a0:	3601      	adds	r6, #1
 800c2a2:	e7f2      	b.n	800c28a <__libc_init_array+0x1e>
 800c2a4:	08010794 	.word	0x08010794
 800c2a8:	08010794 	.word	0x08010794
 800c2ac:	08010794 	.word	0x08010794
 800c2b0:	08010798 	.word	0x08010798

0800c2b4 <__retarget_lock_init_recursive>:
 800c2b4:	4770      	bx	lr

0800c2b6 <__retarget_lock_acquire_recursive>:
 800c2b6:	4770      	bx	lr

0800c2b8 <__retarget_lock_release_recursive>:
 800c2b8:	4770      	bx	lr
	...

0800c2bc <__assert_func>:
 800c2bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2be:	4614      	mov	r4, r2
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	4b09      	ldr	r3, [pc, #36]	@ (800c2e8 <__assert_func+0x2c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	68d8      	ldr	r0, [r3, #12]
 800c2ca:	b954      	cbnz	r4, 800c2e2 <__assert_func+0x26>
 800c2cc:	4b07      	ldr	r3, [pc, #28]	@ (800c2ec <__assert_func+0x30>)
 800c2ce:	461c      	mov	r4, r3
 800c2d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2d4:	9100      	str	r1, [sp, #0]
 800c2d6:	462b      	mov	r3, r5
 800c2d8:	4905      	ldr	r1, [pc, #20]	@ (800c2f0 <__assert_func+0x34>)
 800c2da:	f000 fbe9 	bl	800cab0 <fiprintf>
 800c2de:	f000 fc21 	bl	800cb24 <abort>
 800c2e2:	4b04      	ldr	r3, [pc, #16]	@ (800c2f4 <__assert_func+0x38>)
 800c2e4:	e7f4      	b.n	800c2d0 <__assert_func+0x14>
 800c2e6:	bf00      	nop
 800c2e8:	20000088 	.word	0x20000088
 800c2ec:	08010756 	.word	0x08010756
 800c2f0:	08010728 	.word	0x08010728
 800c2f4:	0801071b 	.word	0x0801071b

0800c2f8 <_free_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	d041      	beq.n	800c384 <_free_r+0x8c>
 800c300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c304:	1f0c      	subs	r4, r1, #4
 800c306:	2b00      	cmp	r3, #0
 800c308:	bfb8      	it	lt
 800c30a:	18e4      	addlt	r4, r4, r3
 800c30c:	f7ff fdda 	bl	800bec4 <__malloc_lock>
 800c310:	4a1d      	ldr	r2, [pc, #116]	@ (800c388 <_free_r+0x90>)
 800c312:	6813      	ldr	r3, [r2, #0]
 800c314:	b933      	cbnz	r3, 800c324 <_free_r+0x2c>
 800c316:	6063      	str	r3, [r4, #4]
 800c318:	6014      	str	r4, [r2, #0]
 800c31a:	4628      	mov	r0, r5
 800c31c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c320:	f7ff bdd6 	b.w	800bed0 <__malloc_unlock>
 800c324:	42a3      	cmp	r3, r4
 800c326:	d908      	bls.n	800c33a <_free_r+0x42>
 800c328:	6820      	ldr	r0, [r4, #0]
 800c32a:	1821      	adds	r1, r4, r0
 800c32c:	428b      	cmp	r3, r1
 800c32e:	bf01      	itttt	eq
 800c330:	6819      	ldreq	r1, [r3, #0]
 800c332:	685b      	ldreq	r3, [r3, #4]
 800c334:	1809      	addeq	r1, r1, r0
 800c336:	6021      	streq	r1, [r4, #0]
 800c338:	e7ed      	b.n	800c316 <_free_r+0x1e>
 800c33a:	461a      	mov	r2, r3
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	b10b      	cbz	r3, 800c344 <_free_r+0x4c>
 800c340:	42a3      	cmp	r3, r4
 800c342:	d9fa      	bls.n	800c33a <_free_r+0x42>
 800c344:	6811      	ldr	r1, [r2, #0]
 800c346:	1850      	adds	r0, r2, r1
 800c348:	42a0      	cmp	r0, r4
 800c34a:	d10b      	bne.n	800c364 <_free_r+0x6c>
 800c34c:	6820      	ldr	r0, [r4, #0]
 800c34e:	4401      	add	r1, r0
 800c350:	1850      	adds	r0, r2, r1
 800c352:	4283      	cmp	r3, r0
 800c354:	6011      	str	r1, [r2, #0]
 800c356:	d1e0      	bne.n	800c31a <_free_r+0x22>
 800c358:	6818      	ldr	r0, [r3, #0]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	6053      	str	r3, [r2, #4]
 800c35e:	4408      	add	r0, r1
 800c360:	6010      	str	r0, [r2, #0]
 800c362:	e7da      	b.n	800c31a <_free_r+0x22>
 800c364:	d902      	bls.n	800c36c <_free_r+0x74>
 800c366:	230c      	movs	r3, #12
 800c368:	602b      	str	r3, [r5, #0]
 800c36a:	e7d6      	b.n	800c31a <_free_r+0x22>
 800c36c:	6820      	ldr	r0, [r4, #0]
 800c36e:	1821      	adds	r1, r4, r0
 800c370:	428b      	cmp	r3, r1
 800c372:	bf04      	itt	eq
 800c374:	6819      	ldreq	r1, [r3, #0]
 800c376:	685b      	ldreq	r3, [r3, #4]
 800c378:	6063      	str	r3, [r4, #4]
 800c37a:	bf04      	itt	eq
 800c37c:	1809      	addeq	r1, r1, r0
 800c37e:	6021      	streq	r1, [r4, #0]
 800c380:	6054      	str	r4, [r2, #4]
 800c382:	e7ca      	b.n	800c31a <_free_r+0x22>
 800c384:	bd38      	pop	{r3, r4, r5, pc}
 800c386:	bf00      	nop
 800c388:	20000e70 	.word	0x20000e70

0800c38c <__ssputs_r>:
 800c38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	688e      	ldr	r6, [r1, #8]
 800c392:	461f      	mov	r7, r3
 800c394:	42be      	cmp	r6, r7
 800c396:	680b      	ldr	r3, [r1, #0]
 800c398:	4682      	mov	sl, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	4690      	mov	r8, r2
 800c39e:	d82d      	bhi.n	800c3fc <__ssputs_r+0x70>
 800c3a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c3a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c3a8:	d026      	beq.n	800c3f8 <__ssputs_r+0x6c>
 800c3aa:	6965      	ldr	r5, [r4, #20]
 800c3ac:	6909      	ldr	r1, [r1, #16]
 800c3ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3b2:	eba3 0901 	sub.w	r9, r3, r1
 800c3b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3ba:	1c7b      	adds	r3, r7, #1
 800c3bc:	444b      	add	r3, r9
 800c3be:	106d      	asrs	r5, r5, #1
 800c3c0:	429d      	cmp	r5, r3
 800c3c2:	bf38      	it	cc
 800c3c4:	461d      	movcc	r5, r3
 800c3c6:	0553      	lsls	r3, r2, #21
 800c3c8:	d527      	bpl.n	800c41a <__ssputs_r+0x8e>
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	f7ff fcfa 	bl	800bdc4 <_malloc_r>
 800c3d0:	4606      	mov	r6, r0
 800c3d2:	b360      	cbz	r0, 800c42e <__ssputs_r+0xa2>
 800c3d4:	6921      	ldr	r1, [r4, #16]
 800c3d6:	464a      	mov	r2, r9
 800c3d8:	f000 fb96 	bl	800cb08 <memcpy>
 800c3dc:	89a3      	ldrh	r3, [r4, #12]
 800c3de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c3e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e6:	81a3      	strh	r3, [r4, #12]
 800c3e8:	6126      	str	r6, [r4, #16]
 800c3ea:	6165      	str	r5, [r4, #20]
 800c3ec:	444e      	add	r6, r9
 800c3ee:	eba5 0509 	sub.w	r5, r5, r9
 800c3f2:	6026      	str	r6, [r4, #0]
 800c3f4:	60a5      	str	r5, [r4, #8]
 800c3f6:	463e      	mov	r6, r7
 800c3f8:	42be      	cmp	r6, r7
 800c3fa:	d900      	bls.n	800c3fe <__ssputs_r+0x72>
 800c3fc:	463e      	mov	r6, r7
 800c3fe:	6820      	ldr	r0, [r4, #0]
 800c400:	4632      	mov	r2, r6
 800c402:	4641      	mov	r1, r8
 800c404:	f000 fb66 	bl	800cad4 <memmove>
 800c408:	68a3      	ldr	r3, [r4, #8]
 800c40a:	1b9b      	subs	r3, r3, r6
 800c40c:	60a3      	str	r3, [r4, #8]
 800c40e:	6823      	ldr	r3, [r4, #0]
 800c410:	4433      	add	r3, r6
 800c412:	6023      	str	r3, [r4, #0]
 800c414:	2000      	movs	r0, #0
 800c416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c41a:	462a      	mov	r2, r5
 800c41c:	f000 fb89 	bl	800cb32 <_realloc_r>
 800c420:	4606      	mov	r6, r0
 800c422:	2800      	cmp	r0, #0
 800c424:	d1e0      	bne.n	800c3e8 <__ssputs_r+0x5c>
 800c426:	6921      	ldr	r1, [r4, #16]
 800c428:	4650      	mov	r0, sl
 800c42a:	f7ff ff65 	bl	800c2f8 <_free_r>
 800c42e:	230c      	movs	r3, #12
 800c430:	f8ca 3000 	str.w	r3, [sl]
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c43a:	81a3      	strh	r3, [r4, #12]
 800c43c:	f04f 30ff 	mov.w	r0, #4294967295
 800c440:	e7e9      	b.n	800c416 <__ssputs_r+0x8a>
	...

0800c444 <_svfiprintf_r>:
 800c444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c448:	4698      	mov	r8, r3
 800c44a:	898b      	ldrh	r3, [r1, #12]
 800c44c:	061b      	lsls	r3, r3, #24
 800c44e:	b09d      	sub	sp, #116	@ 0x74
 800c450:	4607      	mov	r7, r0
 800c452:	460d      	mov	r5, r1
 800c454:	4614      	mov	r4, r2
 800c456:	d510      	bpl.n	800c47a <_svfiprintf_r+0x36>
 800c458:	690b      	ldr	r3, [r1, #16]
 800c45a:	b973      	cbnz	r3, 800c47a <_svfiprintf_r+0x36>
 800c45c:	2140      	movs	r1, #64	@ 0x40
 800c45e:	f7ff fcb1 	bl	800bdc4 <_malloc_r>
 800c462:	6028      	str	r0, [r5, #0]
 800c464:	6128      	str	r0, [r5, #16]
 800c466:	b930      	cbnz	r0, 800c476 <_svfiprintf_r+0x32>
 800c468:	230c      	movs	r3, #12
 800c46a:	603b      	str	r3, [r7, #0]
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	b01d      	add	sp, #116	@ 0x74
 800c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c476:	2340      	movs	r3, #64	@ 0x40
 800c478:	616b      	str	r3, [r5, #20]
 800c47a:	2300      	movs	r3, #0
 800c47c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c47e:	2320      	movs	r3, #32
 800c480:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c484:	f8cd 800c 	str.w	r8, [sp, #12]
 800c488:	2330      	movs	r3, #48	@ 0x30
 800c48a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c628 <_svfiprintf_r+0x1e4>
 800c48e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c492:	f04f 0901 	mov.w	r9, #1
 800c496:	4623      	mov	r3, r4
 800c498:	469a      	mov	sl, r3
 800c49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c49e:	b10a      	cbz	r2, 800c4a4 <_svfiprintf_r+0x60>
 800c4a0:	2a25      	cmp	r2, #37	@ 0x25
 800c4a2:	d1f9      	bne.n	800c498 <_svfiprintf_r+0x54>
 800c4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4a8:	d00b      	beq.n	800c4c2 <_svfiprintf_r+0x7e>
 800c4aa:	465b      	mov	r3, fp
 800c4ac:	4622      	mov	r2, r4
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4638      	mov	r0, r7
 800c4b2:	f7ff ff6b 	bl	800c38c <__ssputs_r>
 800c4b6:	3001      	adds	r0, #1
 800c4b8:	f000 80a7 	beq.w	800c60a <_svfiprintf_r+0x1c6>
 800c4bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4be:	445a      	add	r2, fp
 800c4c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	f000 809f 	beq.w	800c60a <_svfiprintf_r+0x1c6>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4d6:	f10a 0a01 	add.w	sl, sl, #1
 800c4da:	9304      	str	r3, [sp, #16]
 800c4dc:	9307      	str	r3, [sp, #28]
 800c4de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4e4:	4654      	mov	r4, sl
 800c4e6:	2205      	movs	r2, #5
 800c4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4ec:	484e      	ldr	r0, [pc, #312]	@ (800c628 <_svfiprintf_r+0x1e4>)
 800c4ee:	f7f3 fe6f 	bl	80001d0 <memchr>
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	b9d8      	cbnz	r0, 800c52e <_svfiprintf_r+0xea>
 800c4f6:	06d0      	lsls	r0, r2, #27
 800c4f8:	bf44      	itt	mi
 800c4fa:	2320      	movmi	r3, #32
 800c4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c500:	0711      	lsls	r1, r2, #28
 800c502:	bf44      	itt	mi
 800c504:	232b      	movmi	r3, #43	@ 0x2b
 800c506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c50a:	f89a 3000 	ldrb.w	r3, [sl]
 800c50e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c510:	d015      	beq.n	800c53e <_svfiprintf_r+0xfa>
 800c512:	9a07      	ldr	r2, [sp, #28]
 800c514:	4654      	mov	r4, sl
 800c516:	2000      	movs	r0, #0
 800c518:	f04f 0c0a 	mov.w	ip, #10
 800c51c:	4621      	mov	r1, r4
 800c51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c522:	3b30      	subs	r3, #48	@ 0x30
 800c524:	2b09      	cmp	r3, #9
 800c526:	d94b      	bls.n	800c5c0 <_svfiprintf_r+0x17c>
 800c528:	b1b0      	cbz	r0, 800c558 <_svfiprintf_r+0x114>
 800c52a:	9207      	str	r2, [sp, #28]
 800c52c:	e014      	b.n	800c558 <_svfiprintf_r+0x114>
 800c52e:	eba0 0308 	sub.w	r3, r0, r8
 800c532:	fa09 f303 	lsl.w	r3, r9, r3
 800c536:	4313      	orrs	r3, r2
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	46a2      	mov	sl, r4
 800c53c:	e7d2      	b.n	800c4e4 <_svfiprintf_r+0xa0>
 800c53e:	9b03      	ldr	r3, [sp, #12]
 800c540:	1d19      	adds	r1, r3, #4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	9103      	str	r1, [sp, #12]
 800c546:	2b00      	cmp	r3, #0
 800c548:	bfbb      	ittet	lt
 800c54a:	425b      	neglt	r3, r3
 800c54c:	f042 0202 	orrlt.w	r2, r2, #2
 800c550:	9307      	strge	r3, [sp, #28]
 800c552:	9307      	strlt	r3, [sp, #28]
 800c554:	bfb8      	it	lt
 800c556:	9204      	strlt	r2, [sp, #16]
 800c558:	7823      	ldrb	r3, [r4, #0]
 800c55a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c55c:	d10a      	bne.n	800c574 <_svfiprintf_r+0x130>
 800c55e:	7863      	ldrb	r3, [r4, #1]
 800c560:	2b2a      	cmp	r3, #42	@ 0x2a
 800c562:	d132      	bne.n	800c5ca <_svfiprintf_r+0x186>
 800c564:	9b03      	ldr	r3, [sp, #12]
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	9203      	str	r2, [sp, #12]
 800c56c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c570:	3402      	adds	r4, #2
 800c572:	9305      	str	r3, [sp, #20]
 800c574:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c638 <_svfiprintf_r+0x1f4>
 800c578:	7821      	ldrb	r1, [r4, #0]
 800c57a:	2203      	movs	r2, #3
 800c57c:	4650      	mov	r0, sl
 800c57e:	f7f3 fe27 	bl	80001d0 <memchr>
 800c582:	b138      	cbz	r0, 800c594 <_svfiprintf_r+0x150>
 800c584:	9b04      	ldr	r3, [sp, #16]
 800c586:	eba0 000a 	sub.w	r0, r0, sl
 800c58a:	2240      	movs	r2, #64	@ 0x40
 800c58c:	4082      	lsls	r2, r0
 800c58e:	4313      	orrs	r3, r2
 800c590:	3401      	adds	r4, #1
 800c592:	9304      	str	r3, [sp, #16]
 800c594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c598:	4824      	ldr	r0, [pc, #144]	@ (800c62c <_svfiprintf_r+0x1e8>)
 800c59a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c59e:	2206      	movs	r2, #6
 800c5a0:	f7f3 fe16 	bl	80001d0 <memchr>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d036      	beq.n	800c616 <_svfiprintf_r+0x1d2>
 800c5a8:	4b21      	ldr	r3, [pc, #132]	@ (800c630 <_svfiprintf_r+0x1ec>)
 800c5aa:	bb1b      	cbnz	r3, 800c5f4 <_svfiprintf_r+0x1b0>
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	3307      	adds	r3, #7
 800c5b0:	f023 0307 	bic.w	r3, r3, #7
 800c5b4:	3308      	adds	r3, #8
 800c5b6:	9303      	str	r3, [sp, #12]
 800c5b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ba:	4433      	add	r3, r6
 800c5bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5be:	e76a      	b.n	800c496 <_svfiprintf_r+0x52>
 800c5c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5c4:	460c      	mov	r4, r1
 800c5c6:	2001      	movs	r0, #1
 800c5c8:	e7a8      	b.n	800c51c <_svfiprintf_r+0xd8>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	3401      	adds	r4, #1
 800c5ce:	9305      	str	r3, [sp, #20]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	f04f 0c0a 	mov.w	ip, #10
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5dc:	3a30      	subs	r2, #48	@ 0x30
 800c5de:	2a09      	cmp	r2, #9
 800c5e0:	d903      	bls.n	800c5ea <_svfiprintf_r+0x1a6>
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d0c6      	beq.n	800c574 <_svfiprintf_r+0x130>
 800c5e6:	9105      	str	r1, [sp, #20]
 800c5e8:	e7c4      	b.n	800c574 <_svfiprintf_r+0x130>
 800c5ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e7f0      	b.n	800c5d6 <_svfiprintf_r+0x192>
 800c5f4:	ab03      	add	r3, sp, #12
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	462a      	mov	r2, r5
 800c5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c634 <_svfiprintf_r+0x1f0>)
 800c5fc:	a904      	add	r1, sp, #16
 800c5fe:	4638      	mov	r0, r7
 800c600:	f3af 8000 	nop.w
 800c604:	1c42      	adds	r2, r0, #1
 800c606:	4606      	mov	r6, r0
 800c608:	d1d6      	bne.n	800c5b8 <_svfiprintf_r+0x174>
 800c60a:	89ab      	ldrh	r3, [r5, #12]
 800c60c:	065b      	lsls	r3, r3, #25
 800c60e:	f53f af2d 	bmi.w	800c46c <_svfiprintf_r+0x28>
 800c612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c614:	e72c      	b.n	800c470 <_svfiprintf_r+0x2c>
 800c616:	ab03      	add	r3, sp, #12
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	462a      	mov	r2, r5
 800c61c:	4b05      	ldr	r3, [pc, #20]	@ (800c634 <_svfiprintf_r+0x1f0>)
 800c61e:	a904      	add	r1, sp, #16
 800c620:	4638      	mov	r0, r7
 800c622:	f000 f879 	bl	800c718 <_printf_i>
 800c626:	e7ed      	b.n	800c604 <_svfiprintf_r+0x1c0>
 800c628:	08010757 	.word	0x08010757
 800c62c:	08010761 	.word	0x08010761
 800c630:	00000000 	.word	0x00000000
 800c634:	0800c38d 	.word	0x0800c38d
 800c638:	0801075d 	.word	0x0801075d

0800c63c <_printf_common>:
 800c63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c640:	4616      	mov	r6, r2
 800c642:	4698      	mov	r8, r3
 800c644:	688a      	ldr	r2, [r1, #8]
 800c646:	690b      	ldr	r3, [r1, #16]
 800c648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c64c:	4293      	cmp	r3, r2
 800c64e:	bfb8      	it	lt
 800c650:	4613      	movlt	r3, r2
 800c652:	6033      	str	r3, [r6, #0]
 800c654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c658:	4607      	mov	r7, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	b10a      	cbz	r2, 800c662 <_printf_common+0x26>
 800c65e:	3301      	adds	r3, #1
 800c660:	6033      	str	r3, [r6, #0]
 800c662:	6823      	ldr	r3, [r4, #0]
 800c664:	0699      	lsls	r1, r3, #26
 800c666:	bf42      	ittt	mi
 800c668:	6833      	ldrmi	r3, [r6, #0]
 800c66a:	3302      	addmi	r3, #2
 800c66c:	6033      	strmi	r3, [r6, #0]
 800c66e:	6825      	ldr	r5, [r4, #0]
 800c670:	f015 0506 	ands.w	r5, r5, #6
 800c674:	d106      	bne.n	800c684 <_printf_common+0x48>
 800c676:	f104 0a19 	add.w	sl, r4, #25
 800c67a:	68e3      	ldr	r3, [r4, #12]
 800c67c:	6832      	ldr	r2, [r6, #0]
 800c67e:	1a9b      	subs	r3, r3, r2
 800c680:	42ab      	cmp	r3, r5
 800c682:	dc26      	bgt.n	800c6d2 <_printf_common+0x96>
 800c684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c688:	6822      	ldr	r2, [r4, #0]
 800c68a:	3b00      	subs	r3, #0
 800c68c:	bf18      	it	ne
 800c68e:	2301      	movne	r3, #1
 800c690:	0692      	lsls	r2, r2, #26
 800c692:	d42b      	bmi.n	800c6ec <_printf_common+0xb0>
 800c694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c698:	4641      	mov	r1, r8
 800c69a:	4638      	mov	r0, r7
 800c69c:	47c8      	blx	r9
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d01e      	beq.n	800c6e0 <_printf_common+0xa4>
 800c6a2:	6823      	ldr	r3, [r4, #0]
 800c6a4:	6922      	ldr	r2, [r4, #16]
 800c6a6:	f003 0306 	and.w	r3, r3, #6
 800c6aa:	2b04      	cmp	r3, #4
 800c6ac:	bf02      	ittt	eq
 800c6ae:	68e5      	ldreq	r5, [r4, #12]
 800c6b0:	6833      	ldreq	r3, [r6, #0]
 800c6b2:	1aed      	subeq	r5, r5, r3
 800c6b4:	68a3      	ldr	r3, [r4, #8]
 800c6b6:	bf0c      	ite	eq
 800c6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6bc:	2500      	movne	r5, #0
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	bfc4      	itt	gt
 800c6c2:	1a9b      	subgt	r3, r3, r2
 800c6c4:	18ed      	addgt	r5, r5, r3
 800c6c6:	2600      	movs	r6, #0
 800c6c8:	341a      	adds	r4, #26
 800c6ca:	42b5      	cmp	r5, r6
 800c6cc:	d11a      	bne.n	800c704 <_printf_common+0xc8>
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	e008      	b.n	800c6e4 <_printf_common+0xa8>
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	4652      	mov	r2, sl
 800c6d6:	4641      	mov	r1, r8
 800c6d8:	4638      	mov	r0, r7
 800c6da:	47c8      	blx	r9
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d103      	bne.n	800c6e8 <_printf_common+0xac>
 800c6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e8:	3501      	adds	r5, #1
 800c6ea:	e7c6      	b.n	800c67a <_printf_common+0x3e>
 800c6ec:	18e1      	adds	r1, r4, r3
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	2030      	movs	r0, #48	@ 0x30
 800c6f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c6f6:	4422      	add	r2, r4
 800c6f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c6fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c700:	3302      	adds	r3, #2
 800c702:	e7c7      	b.n	800c694 <_printf_common+0x58>
 800c704:	2301      	movs	r3, #1
 800c706:	4622      	mov	r2, r4
 800c708:	4641      	mov	r1, r8
 800c70a:	4638      	mov	r0, r7
 800c70c:	47c8      	blx	r9
 800c70e:	3001      	adds	r0, #1
 800c710:	d0e6      	beq.n	800c6e0 <_printf_common+0xa4>
 800c712:	3601      	adds	r6, #1
 800c714:	e7d9      	b.n	800c6ca <_printf_common+0x8e>
	...

0800c718 <_printf_i>:
 800c718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c71c:	7e0f      	ldrb	r7, [r1, #24]
 800c71e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c720:	2f78      	cmp	r7, #120	@ 0x78
 800c722:	4691      	mov	r9, r2
 800c724:	4680      	mov	r8, r0
 800c726:	460c      	mov	r4, r1
 800c728:	469a      	mov	sl, r3
 800c72a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c72e:	d807      	bhi.n	800c740 <_printf_i+0x28>
 800c730:	2f62      	cmp	r7, #98	@ 0x62
 800c732:	d80a      	bhi.n	800c74a <_printf_i+0x32>
 800c734:	2f00      	cmp	r7, #0
 800c736:	f000 80d2 	beq.w	800c8de <_printf_i+0x1c6>
 800c73a:	2f58      	cmp	r7, #88	@ 0x58
 800c73c:	f000 80b9 	beq.w	800c8b2 <_printf_i+0x19a>
 800c740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c748:	e03a      	b.n	800c7c0 <_printf_i+0xa8>
 800c74a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c74e:	2b15      	cmp	r3, #21
 800c750:	d8f6      	bhi.n	800c740 <_printf_i+0x28>
 800c752:	a101      	add	r1, pc, #4	@ (adr r1, 800c758 <_printf_i+0x40>)
 800c754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c758:	0800c7b1 	.word	0x0800c7b1
 800c75c:	0800c7c5 	.word	0x0800c7c5
 800c760:	0800c741 	.word	0x0800c741
 800c764:	0800c741 	.word	0x0800c741
 800c768:	0800c741 	.word	0x0800c741
 800c76c:	0800c741 	.word	0x0800c741
 800c770:	0800c7c5 	.word	0x0800c7c5
 800c774:	0800c741 	.word	0x0800c741
 800c778:	0800c741 	.word	0x0800c741
 800c77c:	0800c741 	.word	0x0800c741
 800c780:	0800c741 	.word	0x0800c741
 800c784:	0800c8c5 	.word	0x0800c8c5
 800c788:	0800c7ef 	.word	0x0800c7ef
 800c78c:	0800c87f 	.word	0x0800c87f
 800c790:	0800c741 	.word	0x0800c741
 800c794:	0800c741 	.word	0x0800c741
 800c798:	0800c8e7 	.word	0x0800c8e7
 800c79c:	0800c741 	.word	0x0800c741
 800c7a0:	0800c7ef 	.word	0x0800c7ef
 800c7a4:	0800c741 	.word	0x0800c741
 800c7a8:	0800c741 	.word	0x0800c741
 800c7ac:	0800c887 	.word	0x0800c887
 800c7b0:	6833      	ldr	r3, [r6, #0]
 800c7b2:	1d1a      	adds	r2, r3, #4
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	6032      	str	r2, [r6, #0]
 800c7b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e09d      	b.n	800c900 <_printf_i+0x1e8>
 800c7c4:	6833      	ldr	r3, [r6, #0]
 800c7c6:	6820      	ldr	r0, [r4, #0]
 800c7c8:	1d19      	adds	r1, r3, #4
 800c7ca:	6031      	str	r1, [r6, #0]
 800c7cc:	0606      	lsls	r6, r0, #24
 800c7ce:	d501      	bpl.n	800c7d4 <_printf_i+0xbc>
 800c7d0:	681d      	ldr	r5, [r3, #0]
 800c7d2:	e003      	b.n	800c7dc <_printf_i+0xc4>
 800c7d4:	0645      	lsls	r5, r0, #25
 800c7d6:	d5fb      	bpl.n	800c7d0 <_printf_i+0xb8>
 800c7d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7dc:	2d00      	cmp	r5, #0
 800c7de:	da03      	bge.n	800c7e8 <_printf_i+0xd0>
 800c7e0:	232d      	movs	r3, #45	@ 0x2d
 800c7e2:	426d      	negs	r5, r5
 800c7e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7e8:	4859      	ldr	r0, [pc, #356]	@ (800c950 <_printf_i+0x238>)
 800c7ea:	230a      	movs	r3, #10
 800c7ec:	e011      	b.n	800c812 <_printf_i+0xfa>
 800c7ee:	6821      	ldr	r1, [r4, #0]
 800c7f0:	6833      	ldr	r3, [r6, #0]
 800c7f2:	0608      	lsls	r0, r1, #24
 800c7f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c7f8:	d402      	bmi.n	800c800 <_printf_i+0xe8>
 800c7fa:	0649      	lsls	r1, r1, #25
 800c7fc:	bf48      	it	mi
 800c7fe:	b2ad      	uxthmi	r5, r5
 800c800:	2f6f      	cmp	r7, #111	@ 0x6f
 800c802:	4853      	ldr	r0, [pc, #332]	@ (800c950 <_printf_i+0x238>)
 800c804:	6033      	str	r3, [r6, #0]
 800c806:	bf14      	ite	ne
 800c808:	230a      	movne	r3, #10
 800c80a:	2308      	moveq	r3, #8
 800c80c:	2100      	movs	r1, #0
 800c80e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c812:	6866      	ldr	r6, [r4, #4]
 800c814:	60a6      	str	r6, [r4, #8]
 800c816:	2e00      	cmp	r6, #0
 800c818:	bfa2      	ittt	ge
 800c81a:	6821      	ldrge	r1, [r4, #0]
 800c81c:	f021 0104 	bicge.w	r1, r1, #4
 800c820:	6021      	strge	r1, [r4, #0]
 800c822:	b90d      	cbnz	r5, 800c828 <_printf_i+0x110>
 800c824:	2e00      	cmp	r6, #0
 800c826:	d04b      	beq.n	800c8c0 <_printf_i+0x1a8>
 800c828:	4616      	mov	r6, r2
 800c82a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c82e:	fb03 5711 	mls	r7, r3, r1, r5
 800c832:	5dc7      	ldrb	r7, [r0, r7]
 800c834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c838:	462f      	mov	r7, r5
 800c83a:	42bb      	cmp	r3, r7
 800c83c:	460d      	mov	r5, r1
 800c83e:	d9f4      	bls.n	800c82a <_printf_i+0x112>
 800c840:	2b08      	cmp	r3, #8
 800c842:	d10b      	bne.n	800c85c <_printf_i+0x144>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	07df      	lsls	r7, r3, #31
 800c848:	d508      	bpl.n	800c85c <_printf_i+0x144>
 800c84a:	6923      	ldr	r3, [r4, #16]
 800c84c:	6861      	ldr	r1, [r4, #4]
 800c84e:	4299      	cmp	r1, r3
 800c850:	bfde      	ittt	le
 800c852:	2330      	movle	r3, #48	@ 0x30
 800c854:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c85c:	1b92      	subs	r2, r2, r6
 800c85e:	6122      	str	r2, [r4, #16]
 800c860:	f8cd a000 	str.w	sl, [sp]
 800c864:	464b      	mov	r3, r9
 800c866:	aa03      	add	r2, sp, #12
 800c868:	4621      	mov	r1, r4
 800c86a:	4640      	mov	r0, r8
 800c86c:	f7ff fee6 	bl	800c63c <_printf_common>
 800c870:	3001      	adds	r0, #1
 800c872:	d14a      	bne.n	800c90a <_printf_i+0x1f2>
 800c874:	f04f 30ff 	mov.w	r0, #4294967295
 800c878:	b004      	add	sp, #16
 800c87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	f043 0320 	orr.w	r3, r3, #32
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	4833      	ldr	r0, [pc, #204]	@ (800c954 <_printf_i+0x23c>)
 800c888:	2778      	movs	r7, #120	@ 0x78
 800c88a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c88e:	6823      	ldr	r3, [r4, #0]
 800c890:	6831      	ldr	r1, [r6, #0]
 800c892:	061f      	lsls	r7, r3, #24
 800c894:	f851 5b04 	ldr.w	r5, [r1], #4
 800c898:	d402      	bmi.n	800c8a0 <_printf_i+0x188>
 800c89a:	065f      	lsls	r7, r3, #25
 800c89c:	bf48      	it	mi
 800c89e:	b2ad      	uxthmi	r5, r5
 800c8a0:	6031      	str	r1, [r6, #0]
 800c8a2:	07d9      	lsls	r1, r3, #31
 800c8a4:	bf44      	itt	mi
 800c8a6:	f043 0320 	orrmi.w	r3, r3, #32
 800c8aa:	6023      	strmi	r3, [r4, #0]
 800c8ac:	b11d      	cbz	r5, 800c8b6 <_printf_i+0x19e>
 800c8ae:	2310      	movs	r3, #16
 800c8b0:	e7ac      	b.n	800c80c <_printf_i+0xf4>
 800c8b2:	4827      	ldr	r0, [pc, #156]	@ (800c950 <_printf_i+0x238>)
 800c8b4:	e7e9      	b.n	800c88a <_printf_i+0x172>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	f023 0320 	bic.w	r3, r3, #32
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	e7f6      	b.n	800c8ae <_printf_i+0x196>
 800c8c0:	4616      	mov	r6, r2
 800c8c2:	e7bd      	b.n	800c840 <_printf_i+0x128>
 800c8c4:	6833      	ldr	r3, [r6, #0]
 800c8c6:	6825      	ldr	r5, [r4, #0]
 800c8c8:	6961      	ldr	r1, [r4, #20]
 800c8ca:	1d18      	adds	r0, r3, #4
 800c8cc:	6030      	str	r0, [r6, #0]
 800c8ce:	062e      	lsls	r6, r5, #24
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	d501      	bpl.n	800c8d8 <_printf_i+0x1c0>
 800c8d4:	6019      	str	r1, [r3, #0]
 800c8d6:	e002      	b.n	800c8de <_printf_i+0x1c6>
 800c8d8:	0668      	lsls	r0, r5, #25
 800c8da:	d5fb      	bpl.n	800c8d4 <_printf_i+0x1bc>
 800c8dc:	8019      	strh	r1, [r3, #0]
 800c8de:	2300      	movs	r3, #0
 800c8e0:	6123      	str	r3, [r4, #16]
 800c8e2:	4616      	mov	r6, r2
 800c8e4:	e7bc      	b.n	800c860 <_printf_i+0x148>
 800c8e6:	6833      	ldr	r3, [r6, #0]
 800c8e8:	1d1a      	adds	r2, r3, #4
 800c8ea:	6032      	str	r2, [r6, #0]
 800c8ec:	681e      	ldr	r6, [r3, #0]
 800c8ee:	6862      	ldr	r2, [r4, #4]
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f7f3 fc6c 	bl	80001d0 <memchr>
 800c8f8:	b108      	cbz	r0, 800c8fe <_printf_i+0x1e6>
 800c8fa:	1b80      	subs	r0, r0, r6
 800c8fc:	6060      	str	r0, [r4, #4]
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	6123      	str	r3, [r4, #16]
 800c902:	2300      	movs	r3, #0
 800c904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c908:	e7aa      	b.n	800c860 <_printf_i+0x148>
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	4632      	mov	r2, r6
 800c90e:	4649      	mov	r1, r9
 800c910:	4640      	mov	r0, r8
 800c912:	47d0      	blx	sl
 800c914:	3001      	adds	r0, #1
 800c916:	d0ad      	beq.n	800c874 <_printf_i+0x15c>
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	079b      	lsls	r3, r3, #30
 800c91c:	d413      	bmi.n	800c946 <_printf_i+0x22e>
 800c91e:	68e0      	ldr	r0, [r4, #12]
 800c920:	9b03      	ldr	r3, [sp, #12]
 800c922:	4298      	cmp	r0, r3
 800c924:	bfb8      	it	lt
 800c926:	4618      	movlt	r0, r3
 800c928:	e7a6      	b.n	800c878 <_printf_i+0x160>
 800c92a:	2301      	movs	r3, #1
 800c92c:	4632      	mov	r2, r6
 800c92e:	4649      	mov	r1, r9
 800c930:	4640      	mov	r0, r8
 800c932:	47d0      	blx	sl
 800c934:	3001      	adds	r0, #1
 800c936:	d09d      	beq.n	800c874 <_printf_i+0x15c>
 800c938:	3501      	adds	r5, #1
 800c93a:	68e3      	ldr	r3, [r4, #12]
 800c93c:	9903      	ldr	r1, [sp, #12]
 800c93e:	1a5b      	subs	r3, r3, r1
 800c940:	42ab      	cmp	r3, r5
 800c942:	dcf2      	bgt.n	800c92a <_printf_i+0x212>
 800c944:	e7eb      	b.n	800c91e <_printf_i+0x206>
 800c946:	2500      	movs	r5, #0
 800c948:	f104 0619 	add.w	r6, r4, #25
 800c94c:	e7f5      	b.n	800c93a <_printf_i+0x222>
 800c94e:	bf00      	nop
 800c950:	08010768 	.word	0x08010768
 800c954:	08010779 	.word	0x08010779

0800c958 <__sflush_r>:
 800c958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c960:	0716      	lsls	r6, r2, #28
 800c962:	4605      	mov	r5, r0
 800c964:	460c      	mov	r4, r1
 800c966:	d454      	bmi.n	800ca12 <__sflush_r+0xba>
 800c968:	684b      	ldr	r3, [r1, #4]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dc02      	bgt.n	800c974 <__sflush_r+0x1c>
 800c96e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c970:	2b00      	cmp	r3, #0
 800c972:	dd48      	ble.n	800ca06 <__sflush_r+0xae>
 800c974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c976:	2e00      	cmp	r6, #0
 800c978:	d045      	beq.n	800ca06 <__sflush_r+0xae>
 800c97a:	2300      	movs	r3, #0
 800c97c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c980:	682f      	ldr	r7, [r5, #0]
 800c982:	6a21      	ldr	r1, [r4, #32]
 800c984:	602b      	str	r3, [r5, #0]
 800c986:	d030      	beq.n	800c9ea <__sflush_r+0x92>
 800c988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c98a:	89a3      	ldrh	r3, [r4, #12]
 800c98c:	0759      	lsls	r1, r3, #29
 800c98e:	d505      	bpl.n	800c99c <__sflush_r+0x44>
 800c990:	6863      	ldr	r3, [r4, #4]
 800c992:	1ad2      	subs	r2, r2, r3
 800c994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c996:	b10b      	cbz	r3, 800c99c <__sflush_r+0x44>
 800c998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c99a:	1ad2      	subs	r2, r2, r3
 800c99c:	2300      	movs	r3, #0
 800c99e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9a0:	6a21      	ldr	r1, [r4, #32]
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	47b0      	blx	r6
 800c9a6:	1c43      	adds	r3, r0, #1
 800c9a8:	89a3      	ldrh	r3, [r4, #12]
 800c9aa:	d106      	bne.n	800c9ba <__sflush_r+0x62>
 800c9ac:	6829      	ldr	r1, [r5, #0]
 800c9ae:	291d      	cmp	r1, #29
 800c9b0:	d82b      	bhi.n	800ca0a <__sflush_r+0xb2>
 800c9b2:	4a2a      	ldr	r2, [pc, #168]	@ (800ca5c <__sflush_r+0x104>)
 800c9b4:	410a      	asrs	r2, r1
 800c9b6:	07d6      	lsls	r6, r2, #31
 800c9b8:	d427      	bmi.n	800ca0a <__sflush_r+0xb2>
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	6062      	str	r2, [r4, #4]
 800c9be:	04d9      	lsls	r1, r3, #19
 800c9c0:	6922      	ldr	r2, [r4, #16]
 800c9c2:	6022      	str	r2, [r4, #0]
 800c9c4:	d504      	bpl.n	800c9d0 <__sflush_r+0x78>
 800c9c6:	1c42      	adds	r2, r0, #1
 800c9c8:	d101      	bne.n	800c9ce <__sflush_r+0x76>
 800c9ca:	682b      	ldr	r3, [r5, #0]
 800c9cc:	b903      	cbnz	r3, 800c9d0 <__sflush_r+0x78>
 800c9ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9d2:	602f      	str	r7, [r5, #0]
 800c9d4:	b1b9      	cbz	r1, 800ca06 <__sflush_r+0xae>
 800c9d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9da:	4299      	cmp	r1, r3
 800c9dc:	d002      	beq.n	800c9e4 <__sflush_r+0x8c>
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f7ff fc8a 	bl	800c2f8 <_free_r>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9e8:	e00d      	b.n	800ca06 <__sflush_r+0xae>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	47b0      	blx	r6
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	1c50      	adds	r0, r2, #1
 800c9f4:	d1c9      	bne.n	800c98a <__sflush_r+0x32>
 800c9f6:	682b      	ldr	r3, [r5, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d0c6      	beq.n	800c98a <__sflush_r+0x32>
 800c9fc:	2b1d      	cmp	r3, #29
 800c9fe:	d001      	beq.n	800ca04 <__sflush_r+0xac>
 800ca00:	2b16      	cmp	r3, #22
 800ca02:	d11e      	bne.n	800ca42 <__sflush_r+0xea>
 800ca04:	602f      	str	r7, [r5, #0]
 800ca06:	2000      	movs	r0, #0
 800ca08:	e022      	b.n	800ca50 <__sflush_r+0xf8>
 800ca0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca0e:	b21b      	sxth	r3, r3
 800ca10:	e01b      	b.n	800ca4a <__sflush_r+0xf2>
 800ca12:	690f      	ldr	r7, [r1, #16]
 800ca14:	2f00      	cmp	r7, #0
 800ca16:	d0f6      	beq.n	800ca06 <__sflush_r+0xae>
 800ca18:	0793      	lsls	r3, r2, #30
 800ca1a:	680e      	ldr	r6, [r1, #0]
 800ca1c:	bf08      	it	eq
 800ca1e:	694b      	ldreq	r3, [r1, #20]
 800ca20:	600f      	str	r7, [r1, #0]
 800ca22:	bf18      	it	ne
 800ca24:	2300      	movne	r3, #0
 800ca26:	eba6 0807 	sub.w	r8, r6, r7
 800ca2a:	608b      	str	r3, [r1, #8]
 800ca2c:	f1b8 0f00 	cmp.w	r8, #0
 800ca30:	dde9      	ble.n	800ca06 <__sflush_r+0xae>
 800ca32:	6a21      	ldr	r1, [r4, #32]
 800ca34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca36:	4643      	mov	r3, r8
 800ca38:	463a      	mov	r2, r7
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	47b0      	blx	r6
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	dc08      	bgt.n	800ca54 <__sflush_r+0xfc>
 800ca42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca4a:	81a3      	strh	r3, [r4, #12]
 800ca4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca54:	4407      	add	r7, r0
 800ca56:	eba8 0800 	sub.w	r8, r8, r0
 800ca5a:	e7e7      	b.n	800ca2c <__sflush_r+0xd4>
 800ca5c:	dfbffffe 	.word	0xdfbffffe

0800ca60 <_fflush_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	690b      	ldr	r3, [r1, #16]
 800ca64:	4605      	mov	r5, r0
 800ca66:	460c      	mov	r4, r1
 800ca68:	b913      	cbnz	r3, 800ca70 <_fflush_r+0x10>
 800ca6a:	2500      	movs	r5, #0
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	b118      	cbz	r0, 800ca7a <_fflush_r+0x1a>
 800ca72:	6a03      	ldr	r3, [r0, #32]
 800ca74:	b90b      	cbnz	r3, 800ca7a <_fflush_r+0x1a>
 800ca76:	f7ff fafb 	bl	800c070 <__sinit>
 800ca7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d0f3      	beq.n	800ca6a <_fflush_r+0xa>
 800ca82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca84:	07d0      	lsls	r0, r2, #31
 800ca86:	d404      	bmi.n	800ca92 <_fflush_r+0x32>
 800ca88:	0599      	lsls	r1, r3, #22
 800ca8a:	d402      	bmi.n	800ca92 <_fflush_r+0x32>
 800ca8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca8e:	f7ff fc12 	bl	800c2b6 <__retarget_lock_acquire_recursive>
 800ca92:	4628      	mov	r0, r5
 800ca94:	4621      	mov	r1, r4
 800ca96:	f7ff ff5f 	bl	800c958 <__sflush_r>
 800ca9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca9c:	07da      	lsls	r2, r3, #31
 800ca9e:	4605      	mov	r5, r0
 800caa0:	d4e4      	bmi.n	800ca6c <_fflush_r+0xc>
 800caa2:	89a3      	ldrh	r3, [r4, #12]
 800caa4:	059b      	lsls	r3, r3, #22
 800caa6:	d4e1      	bmi.n	800ca6c <_fflush_r+0xc>
 800caa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caaa:	f7ff fc05 	bl	800c2b8 <__retarget_lock_release_recursive>
 800caae:	e7dd      	b.n	800ca6c <_fflush_r+0xc>

0800cab0 <fiprintf>:
 800cab0:	b40e      	push	{r1, r2, r3}
 800cab2:	b503      	push	{r0, r1, lr}
 800cab4:	4601      	mov	r1, r0
 800cab6:	ab03      	add	r3, sp, #12
 800cab8:	4805      	ldr	r0, [pc, #20]	@ (800cad0 <fiprintf+0x20>)
 800caba:	f853 2b04 	ldr.w	r2, [r3], #4
 800cabe:	6800      	ldr	r0, [r0, #0]
 800cac0:	9301      	str	r3, [sp, #4]
 800cac2:	f000 f88d 	bl	800cbe0 <_vfiprintf_r>
 800cac6:	b002      	add	sp, #8
 800cac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cacc:	b003      	add	sp, #12
 800cace:	4770      	bx	lr
 800cad0:	20000088 	.word	0x20000088

0800cad4 <memmove>:
 800cad4:	4288      	cmp	r0, r1
 800cad6:	b510      	push	{r4, lr}
 800cad8:	eb01 0402 	add.w	r4, r1, r2
 800cadc:	d902      	bls.n	800cae4 <memmove+0x10>
 800cade:	4284      	cmp	r4, r0
 800cae0:	4623      	mov	r3, r4
 800cae2:	d807      	bhi.n	800caf4 <memmove+0x20>
 800cae4:	1e43      	subs	r3, r0, #1
 800cae6:	42a1      	cmp	r1, r4
 800cae8:	d008      	beq.n	800cafc <memmove+0x28>
 800caea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caf2:	e7f8      	b.n	800cae6 <memmove+0x12>
 800caf4:	4402      	add	r2, r0
 800caf6:	4601      	mov	r1, r0
 800caf8:	428a      	cmp	r2, r1
 800cafa:	d100      	bne.n	800cafe <memmove+0x2a>
 800cafc:	bd10      	pop	{r4, pc}
 800cafe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb06:	e7f7      	b.n	800caf8 <memmove+0x24>

0800cb08 <memcpy>:
 800cb08:	440a      	add	r2, r1
 800cb0a:	4291      	cmp	r1, r2
 800cb0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb10:	d100      	bne.n	800cb14 <memcpy+0xc>
 800cb12:	4770      	bx	lr
 800cb14:	b510      	push	{r4, lr}
 800cb16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb1e:	4291      	cmp	r1, r2
 800cb20:	d1f9      	bne.n	800cb16 <memcpy+0xe>
 800cb22:	bd10      	pop	{r4, pc}

0800cb24 <abort>:
 800cb24:	b508      	push	{r3, lr}
 800cb26:	2006      	movs	r0, #6
 800cb28:	f000 fa2e 	bl	800cf88 <raise>
 800cb2c:	2001      	movs	r0, #1
 800cb2e:	f7f8 f833 	bl	8004b98 <_exit>

0800cb32 <_realloc_r>:
 800cb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb36:	4680      	mov	r8, r0
 800cb38:	4615      	mov	r5, r2
 800cb3a:	460c      	mov	r4, r1
 800cb3c:	b921      	cbnz	r1, 800cb48 <_realloc_r+0x16>
 800cb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb42:	4611      	mov	r1, r2
 800cb44:	f7ff b93e 	b.w	800bdc4 <_malloc_r>
 800cb48:	b92a      	cbnz	r2, 800cb56 <_realloc_r+0x24>
 800cb4a:	f7ff fbd5 	bl	800c2f8 <_free_r>
 800cb4e:	2400      	movs	r4, #0
 800cb50:	4620      	mov	r0, r4
 800cb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb56:	f000 fa33 	bl	800cfc0 <_malloc_usable_size_r>
 800cb5a:	4285      	cmp	r5, r0
 800cb5c:	4606      	mov	r6, r0
 800cb5e:	d802      	bhi.n	800cb66 <_realloc_r+0x34>
 800cb60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb64:	d8f4      	bhi.n	800cb50 <_realloc_r+0x1e>
 800cb66:	4629      	mov	r1, r5
 800cb68:	4640      	mov	r0, r8
 800cb6a:	f7ff f92b 	bl	800bdc4 <_malloc_r>
 800cb6e:	4607      	mov	r7, r0
 800cb70:	2800      	cmp	r0, #0
 800cb72:	d0ec      	beq.n	800cb4e <_realloc_r+0x1c>
 800cb74:	42b5      	cmp	r5, r6
 800cb76:	462a      	mov	r2, r5
 800cb78:	4621      	mov	r1, r4
 800cb7a:	bf28      	it	cs
 800cb7c:	4632      	movcs	r2, r6
 800cb7e:	f7ff ffc3 	bl	800cb08 <memcpy>
 800cb82:	4621      	mov	r1, r4
 800cb84:	4640      	mov	r0, r8
 800cb86:	f7ff fbb7 	bl	800c2f8 <_free_r>
 800cb8a:	463c      	mov	r4, r7
 800cb8c:	e7e0      	b.n	800cb50 <_realloc_r+0x1e>

0800cb8e <__sfputc_r>:
 800cb8e:	6893      	ldr	r3, [r2, #8]
 800cb90:	3b01      	subs	r3, #1
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	b410      	push	{r4}
 800cb96:	6093      	str	r3, [r2, #8]
 800cb98:	da08      	bge.n	800cbac <__sfputc_r+0x1e>
 800cb9a:	6994      	ldr	r4, [r2, #24]
 800cb9c:	42a3      	cmp	r3, r4
 800cb9e:	db01      	blt.n	800cba4 <__sfputc_r+0x16>
 800cba0:	290a      	cmp	r1, #10
 800cba2:	d103      	bne.n	800cbac <__sfputc_r+0x1e>
 800cba4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cba8:	f000 b932 	b.w	800ce10 <__swbuf_r>
 800cbac:	6813      	ldr	r3, [r2, #0]
 800cbae:	1c58      	adds	r0, r3, #1
 800cbb0:	6010      	str	r0, [r2, #0]
 800cbb2:	7019      	strb	r1, [r3, #0]
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <__sfputs_r>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	4614      	mov	r4, r2
 800cbc4:	18d5      	adds	r5, r2, r3
 800cbc6:	42ac      	cmp	r4, r5
 800cbc8:	d101      	bne.n	800cbce <__sfputs_r+0x12>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	e007      	b.n	800cbde <__sfputs_r+0x22>
 800cbce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbd2:	463a      	mov	r2, r7
 800cbd4:	4630      	mov	r0, r6
 800cbd6:	f7ff ffda 	bl	800cb8e <__sfputc_r>
 800cbda:	1c43      	adds	r3, r0, #1
 800cbdc:	d1f3      	bne.n	800cbc6 <__sfputs_r+0xa>
 800cbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbe0 <_vfiprintf_r>:
 800cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	460d      	mov	r5, r1
 800cbe6:	b09d      	sub	sp, #116	@ 0x74
 800cbe8:	4614      	mov	r4, r2
 800cbea:	4698      	mov	r8, r3
 800cbec:	4606      	mov	r6, r0
 800cbee:	b118      	cbz	r0, 800cbf8 <_vfiprintf_r+0x18>
 800cbf0:	6a03      	ldr	r3, [r0, #32]
 800cbf2:	b90b      	cbnz	r3, 800cbf8 <_vfiprintf_r+0x18>
 800cbf4:	f7ff fa3c 	bl	800c070 <__sinit>
 800cbf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbfa:	07d9      	lsls	r1, r3, #31
 800cbfc:	d405      	bmi.n	800cc0a <_vfiprintf_r+0x2a>
 800cbfe:	89ab      	ldrh	r3, [r5, #12]
 800cc00:	059a      	lsls	r2, r3, #22
 800cc02:	d402      	bmi.n	800cc0a <_vfiprintf_r+0x2a>
 800cc04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc06:	f7ff fb56 	bl	800c2b6 <__retarget_lock_acquire_recursive>
 800cc0a:	89ab      	ldrh	r3, [r5, #12]
 800cc0c:	071b      	lsls	r3, r3, #28
 800cc0e:	d501      	bpl.n	800cc14 <_vfiprintf_r+0x34>
 800cc10:	692b      	ldr	r3, [r5, #16]
 800cc12:	b99b      	cbnz	r3, 800cc3c <_vfiprintf_r+0x5c>
 800cc14:	4629      	mov	r1, r5
 800cc16:	4630      	mov	r0, r6
 800cc18:	f000 f938 	bl	800ce8c <__swsetup_r>
 800cc1c:	b170      	cbz	r0, 800cc3c <_vfiprintf_r+0x5c>
 800cc1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc20:	07dc      	lsls	r4, r3, #31
 800cc22:	d504      	bpl.n	800cc2e <_vfiprintf_r+0x4e>
 800cc24:	f04f 30ff 	mov.w	r0, #4294967295
 800cc28:	b01d      	add	sp, #116	@ 0x74
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2e:	89ab      	ldrh	r3, [r5, #12]
 800cc30:	0598      	lsls	r0, r3, #22
 800cc32:	d4f7      	bmi.n	800cc24 <_vfiprintf_r+0x44>
 800cc34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc36:	f7ff fb3f 	bl	800c2b8 <__retarget_lock_release_recursive>
 800cc3a:	e7f3      	b.n	800cc24 <_vfiprintf_r+0x44>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc40:	2320      	movs	r3, #32
 800cc42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc46:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc4a:	2330      	movs	r3, #48	@ 0x30
 800cc4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cdfc <_vfiprintf_r+0x21c>
 800cc50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc54:	f04f 0901 	mov.w	r9, #1
 800cc58:	4623      	mov	r3, r4
 800cc5a:	469a      	mov	sl, r3
 800cc5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc60:	b10a      	cbz	r2, 800cc66 <_vfiprintf_r+0x86>
 800cc62:	2a25      	cmp	r2, #37	@ 0x25
 800cc64:	d1f9      	bne.n	800cc5a <_vfiprintf_r+0x7a>
 800cc66:	ebba 0b04 	subs.w	fp, sl, r4
 800cc6a:	d00b      	beq.n	800cc84 <_vfiprintf_r+0xa4>
 800cc6c:	465b      	mov	r3, fp
 800cc6e:	4622      	mov	r2, r4
 800cc70:	4629      	mov	r1, r5
 800cc72:	4630      	mov	r0, r6
 800cc74:	f7ff ffa2 	bl	800cbbc <__sfputs_r>
 800cc78:	3001      	adds	r0, #1
 800cc7a:	f000 80a7 	beq.w	800cdcc <_vfiprintf_r+0x1ec>
 800cc7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc80:	445a      	add	r2, fp
 800cc82:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc84:	f89a 3000 	ldrb.w	r3, [sl]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 809f 	beq.w	800cdcc <_vfiprintf_r+0x1ec>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f04f 32ff 	mov.w	r2, #4294967295
 800cc94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc98:	f10a 0a01 	add.w	sl, sl, #1
 800cc9c:	9304      	str	r3, [sp, #16]
 800cc9e:	9307      	str	r3, [sp, #28]
 800cca0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cca4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cca6:	4654      	mov	r4, sl
 800cca8:	2205      	movs	r2, #5
 800ccaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccae:	4853      	ldr	r0, [pc, #332]	@ (800cdfc <_vfiprintf_r+0x21c>)
 800ccb0:	f7f3 fa8e 	bl	80001d0 <memchr>
 800ccb4:	9a04      	ldr	r2, [sp, #16]
 800ccb6:	b9d8      	cbnz	r0, 800ccf0 <_vfiprintf_r+0x110>
 800ccb8:	06d1      	lsls	r1, r2, #27
 800ccba:	bf44      	itt	mi
 800ccbc:	2320      	movmi	r3, #32
 800ccbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccc2:	0713      	lsls	r3, r2, #28
 800ccc4:	bf44      	itt	mi
 800ccc6:	232b      	movmi	r3, #43	@ 0x2b
 800ccc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cccc:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccd2:	d015      	beq.n	800cd00 <_vfiprintf_r+0x120>
 800ccd4:	9a07      	ldr	r2, [sp, #28]
 800ccd6:	4654      	mov	r4, sl
 800ccd8:	2000      	movs	r0, #0
 800ccda:	f04f 0c0a 	mov.w	ip, #10
 800ccde:	4621      	mov	r1, r4
 800cce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cce4:	3b30      	subs	r3, #48	@ 0x30
 800cce6:	2b09      	cmp	r3, #9
 800cce8:	d94b      	bls.n	800cd82 <_vfiprintf_r+0x1a2>
 800ccea:	b1b0      	cbz	r0, 800cd1a <_vfiprintf_r+0x13a>
 800ccec:	9207      	str	r2, [sp, #28]
 800ccee:	e014      	b.n	800cd1a <_vfiprintf_r+0x13a>
 800ccf0:	eba0 0308 	sub.w	r3, r0, r8
 800ccf4:	fa09 f303 	lsl.w	r3, r9, r3
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	9304      	str	r3, [sp, #16]
 800ccfc:	46a2      	mov	sl, r4
 800ccfe:	e7d2      	b.n	800cca6 <_vfiprintf_r+0xc6>
 800cd00:	9b03      	ldr	r3, [sp, #12]
 800cd02:	1d19      	adds	r1, r3, #4
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	9103      	str	r1, [sp, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	bfbb      	ittet	lt
 800cd0c:	425b      	neglt	r3, r3
 800cd0e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd12:	9307      	strge	r3, [sp, #28]
 800cd14:	9307      	strlt	r3, [sp, #28]
 800cd16:	bfb8      	it	lt
 800cd18:	9204      	strlt	r2, [sp, #16]
 800cd1a:	7823      	ldrb	r3, [r4, #0]
 800cd1c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd1e:	d10a      	bne.n	800cd36 <_vfiprintf_r+0x156>
 800cd20:	7863      	ldrb	r3, [r4, #1]
 800cd22:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd24:	d132      	bne.n	800cd8c <_vfiprintf_r+0x1ac>
 800cd26:	9b03      	ldr	r3, [sp, #12]
 800cd28:	1d1a      	adds	r2, r3, #4
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	9203      	str	r2, [sp, #12]
 800cd2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd32:	3402      	adds	r4, #2
 800cd34:	9305      	str	r3, [sp, #20]
 800cd36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce0c <_vfiprintf_r+0x22c>
 800cd3a:	7821      	ldrb	r1, [r4, #0]
 800cd3c:	2203      	movs	r2, #3
 800cd3e:	4650      	mov	r0, sl
 800cd40:	f7f3 fa46 	bl	80001d0 <memchr>
 800cd44:	b138      	cbz	r0, 800cd56 <_vfiprintf_r+0x176>
 800cd46:	9b04      	ldr	r3, [sp, #16]
 800cd48:	eba0 000a 	sub.w	r0, r0, sl
 800cd4c:	2240      	movs	r2, #64	@ 0x40
 800cd4e:	4082      	lsls	r2, r0
 800cd50:	4313      	orrs	r3, r2
 800cd52:	3401      	adds	r4, #1
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5a:	4829      	ldr	r0, [pc, #164]	@ (800ce00 <_vfiprintf_r+0x220>)
 800cd5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd60:	2206      	movs	r2, #6
 800cd62:	f7f3 fa35 	bl	80001d0 <memchr>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d03f      	beq.n	800cdea <_vfiprintf_r+0x20a>
 800cd6a:	4b26      	ldr	r3, [pc, #152]	@ (800ce04 <_vfiprintf_r+0x224>)
 800cd6c:	bb1b      	cbnz	r3, 800cdb6 <_vfiprintf_r+0x1d6>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	3307      	adds	r3, #7
 800cd72:	f023 0307 	bic.w	r3, r3, #7
 800cd76:	3308      	adds	r3, #8
 800cd78:	9303      	str	r3, [sp, #12]
 800cd7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd7c:	443b      	add	r3, r7
 800cd7e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd80:	e76a      	b.n	800cc58 <_vfiprintf_r+0x78>
 800cd82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd86:	460c      	mov	r4, r1
 800cd88:	2001      	movs	r0, #1
 800cd8a:	e7a8      	b.n	800ccde <_vfiprintf_r+0xfe>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	3401      	adds	r4, #1
 800cd90:	9305      	str	r3, [sp, #20]
 800cd92:	4619      	mov	r1, r3
 800cd94:	f04f 0c0a 	mov.w	ip, #10
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd9e:	3a30      	subs	r2, #48	@ 0x30
 800cda0:	2a09      	cmp	r2, #9
 800cda2:	d903      	bls.n	800cdac <_vfiprintf_r+0x1cc>
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d0c6      	beq.n	800cd36 <_vfiprintf_r+0x156>
 800cda8:	9105      	str	r1, [sp, #20]
 800cdaa:	e7c4      	b.n	800cd36 <_vfiprintf_r+0x156>
 800cdac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e7f0      	b.n	800cd98 <_vfiprintf_r+0x1b8>
 800cdb6:	ab03      	add	r3, sp, #12
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	462a      	mov	r2, r5
 800cdbc:	4b12      	ldr	r3, [pc, #72]	@ (800ce08 <_vfiprintf_r+0x228>)
 800cdbe:	a904      	add	r1, sp, #16
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f3af 8000 	nop.w
 800cdc6:	4607      	mov	r7, r0
 800cdc8:	1c78      	adds	r0, r7, #1
 800cdca:	d1d6      	bne.n	800cd7a <_vfiprintf_r+0x19a>
 800cdcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdce:	07d9      	lsls	r1, r3, #31
 800cdd0:	d405      	bmi.n	800cdde <_vfiprintf_r+0x1fe>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	059a      	lsls	r2, r3, #22
 800cdd6:	d402      	bmi.n	800cdde <_vfiprintf_r+0x1fe>
 800cdd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdda:	f7ff fa6d 	bl	800c2b8 <__retarget_lock_release_recursive>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	065b      	lsls	r3, r3, #25
 800cde2:	f53f af1f 	bmi.w	800cc24 <_vfiprintf_r+0x44>
 800cde6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cde8:	e71e      	b.n	800cc28 <_vfiprintf_r+0x48>
 800cdea:	ab03      	add	r3, sp, #12
 800cdec:	9300      	str	r3, [sp, #0]
 800cdee:	462a      	mov	r2, r5
 800cdf0:	4b05      	ldr	r3, [pc, #20]	@ (800ce08 <_vfiprintf_r+0x228>)
 800cdf2:	a904      	add	r1, sp, #16
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f7ff fc8f 	bl	800c718 <_printf_i>
 800cdfa:	e7e4      	b.n	800cdc6 <_vfiprintf_r+0x1e6>
 800cdfc:	08010757 	.word	0x08010757
 800ce00:	08010761 	.word	0x08010761
 800ce04:	00000000 	.word	0x00000000
 800ce08:	0800cbbd 	.word	0x0800cbbd
 800ce0c:	0801075d 	.word	0x0801075d

0800ce10 <__swbuf_r>:
 800ce10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce12:	460e      	mov	r6, r1
 800ce14:	4614      	mov	r4, r2
 800ce16:	4605      	mov	r5, r0
 800ce18:	b118      	cbz	r0, 800ce22 <__swbuf_r+0x12>
 800ce1a:	6a03      	ldr	r3, [r0, #32]
 800ce1c:	b90b      	cbnz	r3, 800ce22 <__swbuf_r+0x12>
 800ce1e:	f7ff f927 	bl	800c070 <__sinit>
 800ce22:	69a3      	ldr	r3, [r4, #24]
 800ce24:	60a3      	str	r3, [r4, #8]
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	071a      	lsls	r2, r3, #28
 800ce2a:	d501      	bpl.n	800ce30 <__swbuf_r+0x20>
 800ce2c:	6923      	ldr	r3, [r4, #16]
 800ce2e:	b943      	cbnz	r3, 800ce42 <__swbuf_r+0x32>
 800ce30:	4621      	mov	r1, r4
 800ce32:	4628      	mov	r0, r5
 800ce34:	f000 f82a 	bl	800ce8c <__swsetup_r>
 800ce38:	b118      	cbz	r0, 800ce42 <__swbuf_r+0x32>
 800ce3a:	f04f 37ff 	mov.w	r7, #4294967295
 800ce3e:	4638      	mov	r0, r7
 800ce40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	6922      	ldr	r2, [r4, #16]
 800ce46:	1a98      	subs	r0, r3, r2
 800ce48:	6963      	ldr	r3, [r4, #20]
 800ce4a:	b2f6      	uxtb	r6, r6
 800ce4c:	4283      	cmp	r3, r0
 800ce4e:	4637      	mov	r7, r6
 800ce50:	dc05      	bgt.n	800ce5e <__swbuf_r+0x4e>
 800ce52:	4621      	mov	r1, r4
 800ce54:	4628      	mov	r0, r5
 800ce56:	f7ff fe03 	bl	800ca60 <_fflush_r>
 800ce5a:	2800      	cmp	r0, #0
 800ce5c:	d1ed      	bne.n	800ce3a <__swbuf_r+0x2a>
 800ce5e:	68a3      	ldr	r3, [r4, #8]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	60a3      	str	r3, [r4, #8]
 800ce64:	6823      	ldr	r3, [r4, #0]
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	6022      	str	r2, [r4, #0]
 800ce6a:	701e      	strb	r6, [r3, #0]
 800ce6c:	6962      	ldr	r2, [r4, #20]
 800ce6e:	1c43      	adds	r3, r0, #1
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d004      	beq.n	800ce7e <__swbuf_r+0x6e>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	07db      	lsls	r3, r3, #31
 800ce78:	d5e1      	bpl.n	800ce3e <__swbuf_r+0x2e>
 800ce7a:	2e0a      	cmp	r6, #10
 800ce7c:	d1df      	bne.n	800ce3e <__swbuf_r+0x2e>
 800ce7e:	4621      	mov	r1, r4
 800ce80:	4628      	mov	r0, r5
 800ce82:	f7ff fded 	bl	800ca60 <_fflush_r>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d0d9      	beq.n	800ce3e <__swbuf_r+0x2e>
 800ce8a:	e7d6      	b.n	800ce3a <__swbuf_r+0x2a>

0800ce8c <__swsetup_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4b29      	ldr	r3, [pc, #164]	@ (800cf34 <__swsetup_r+0xa8>)
 800ce90:	4605      	mov	r5, r0
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	460c      	mov	r4, r1
 800ce96:	b118      	cbz	r0, 800cea0 <__swsetup_r+0x14>
 800ce98:	6a03      	ldr	r3, [r0, #32]
 800ce9a:	b90b      	cbnz	r3, 800cea0 <__swsetup_r+0x14>
 800ce9c:	f7ff f8e8 	bl	800c070 <__sinit>
 800cea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cea4:	0719      	lsls	r1, r3, #28
 800cea6:	d422      	bmi.n	800ceee <__swsetup_r+0x62>
 800cea8:	06da      	lsls	r2, r3, #27
 800ceaa:	d407      	bmi.n	800cebc <__swsetup_r+0x30>
 800ceac:	2209      	movs	r2, #9
 800ceae:	602a      	str	r2, [r5, #0]
 800ceb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceb4:	81a3      	strh	r3, [r4, #12]
 800ceb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ceba:	e033      	b.n	800cf24 <__swsetup_r+0x98>
 800cebc:	0758      	lsls	r0, r3, #29
 800cebe:	d512      	bpl.n	800cee6 <__swsetup_r+0x5a>
 800cec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cec2:	b141      	cbz	r1, 800ced6 <__swsetup_r+0x4a>
 800cec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cec8:	4299      	cmp	r1, r3
 800ceca:	d002      	beq.n	800ced2 <__swsetup_r+0x46>
 800cecc:	4628      	mov	r0, r5
 800cece:	f7ff fa13 	bl	800c2f8 <_free_r>
 800ced2:	2300      	movs	r3, #0
 800ced4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cedc:	81a3      	strh	r3, [r4, #12]
 800cede:	2300      	movs	r3, #0
 800cee0:	6063      	str	r3, [r4, #4]
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	f043 0308 	orr.w	r3, r3, #8
 800ceec:	81a3      	strh	r3, [r4, #12]
 800ceee:	6923      	ldr	r3, [r4, #16]
 800cef0:	b94b      	cbnz	r3, 800cf06 <__swsetup_r+0x7a>
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cefc:	d003      	beq.n	800cf06 <__swsetup_r+0x7a>
 800cefe:	4621      	mov	r1, r4
 800cf00:	4628      	mov	r0, r5
 800cf02:	f000 f88b 	bl	800d01c <__smakebuf_r>
 800cf06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf0a:	f013 0201 	ands.w	r2, r3, #1
 800cf0e:	d00a      	beq.n	800cf26 <__swsetup_r+0x9a>
 800cf10:	2200      	movs	r2, #0
 800cf12:	60a2      	str	r2, [r4, #8]
 800cf14:	6962      	ldr	r2, [r4, #20]
 800cf16:	4252      	negs	r2, r2
 800cf18:	61a2      	str	r2, [r4, #24]
 800cf1a:	6922      	ldr	r2, [r4, #16]
 800cf1c:	b942      	cbnz	r2, 800cf30 <__swsetup_r+0xa4>
 800cf1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf22:	d1c5      	bne.n	800ceb0 <__swsetup_r+0x24>
 800cf24:	bd38      	pop	{r3, r4, r5, pc}
 800cf26:	0799      	lsls	r1, r3, #30
 800cf28:	bf58      	it	pl
 800cf2a:	6962      	ldrpl	r2, [r4, #20]
 800cf2c:	60a2      	str	r2, [r4, #8]
 800cf2e:	e7f4      	b.n	800cf1a <__swsetup_r+0x8e>
 800cf30:	2000      	movs	r0, #0
 800cf32:	e7f7      	b.n	800cf24 <__swsetup_r+0x98>
 800cf34:	20000088 	.word	0x20000088

0800cf38 <_raise_r>:
 800cf38:	291f      	cmp	r1, #31
 800cf3a:	b538      	push	{r3, r4, r5, lr}
 800cf3c:	4605      	mov	r5, r0
 800cf3e:	460c      	mov	r4, r1
 800cf40:	d904      	bls.n	800cf4c <_raise_r+0x14>
 800cf42:	2316      	movs	r3, #22
 800cf44:	6003      	str	r3, [r0, #0]
 800cf46:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf4e:	b112      	cbz	r2, 800cf56 <_raise_r+0x1e>
 800cf50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf54:	b94b      	cbnz	r3, 800cf6a <_raise_r+0x32>
 800cf56:	4628      	mov	r0, r5
 800cf58:	f000 f830 	bl	800cfbc <_getpid_r>
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	4601      	mov	r1, r0
 800cf60:	4628      	mov	r0, r5
 800cf62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf66:	f000 b817 	b.w	800cf98 <_kill_r>
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d00a      	beq.n	800cf84 <_raise_r+0x4c>
 800cf6e:	1c59      	adds	r1, r3, #1
 800cf70:	d103      	bne.n	800cf7a <_raise_r+0x42>
 800cf72:	2316      	movs	r3, #22
 800cf74:	6003      	str	r3, [r0, #0]
 800cf76:	2001      	movs	r0, #1
 800cf78:	e7e7      	b.n	800cf4a <_raise_r+0x12>
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf80:	4620      	mov	r0, r4
 800cf82:	4798      	blx	r3
 800cf84:	2000      	movs	r0, #0
 800cf86:	e7e0      	b.n	800cf4a <_raise_r+0x12>

0800cf88 <raise>:
 800cf88:	4b02      	ldr	r3, [pc, #8]	@ (800cf94 <raise+0xc>)
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	6818      	ldr	r0, [r3, #0]
 800cf8e:	f7ff bfd3 	b.w	800cf38 <_raise_r>
 800cf92:	bf00      	nop
 800cf94:	20000088 	.word	0x20000088

0800cf98 <_kill_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	4d07      	ldr	r5, [pc, #28]	@ (800cfb8 <_kill_r+0x20>)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	4608      	mov	r0, r1
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	602b      	str	r3, [r5, #0]
 800cfa6:	f7f7 fde7 	bl	8004b78 <_kill>
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	d102      	bne.n	800cfb4 <_kill_r+0x1c>
 800cfae:	682b      	ldr	r3, [r5, #0]
 800cfb0:	b103      	cbz	r3, 800cfb4 <_kill_r+0x1c>
 800cfb2:	6023      	str	r3, [r4, #0]
 800cfb4:	bd38      	pop	{r3, r4, r5, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20000fb0 	.word	0x20000fb0

0800cfbc <_getpid_r>:
 800cfbc:	f7f7 bdd4 	b.w	8004b68 <_getpid>

0800cfc0 <_malloc_usable_size_r>:
 800cfc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfc4:	1f18      	subs	r0, r3, #4
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	bfbc      	itt	lt
 800cfca:	580b      	ldrlt	r3, [r1, r0]
 800cfcc:	18c0      	addlt	r0, r0, r3
 800cfce:	4770      	bx	lr

0800cfd0 <__swhatbuf_r>:
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	460c      	mov	r4, r1
 800cfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd8:	2900      	cmp	r1, #0
 800cfda:	b096      	sub	sp, #88	@ 0x58
 800cfdc:	4615      	mov	r5, r2
 800cfde:	461e      	mov	r6, r3
 800cfe0:	da0d      	bge.n	800cffe <__swhatbuf_r+0x2e>
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfe8:	f04f 0100 	mov.w	r1, #0
 800cfec:	bf14      	ite	ne
 800cfee:	2340      	movne	r3, #64	@ 0x40
 800cff0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cff4:	2000      	movs	r0, #0
 800cff6:	6031      	str	r1, [r6, #0]
 800cff8:	602b      	str	r3, [r5, #0]
 800cffa:	b016      	add	sp, #88	@ 0x58
 800cffc:	bd70      	pop	{r4, r5, r6, pc}
 800cffe:	466a      	mov	r2, sp
 800d000:	f000 f848 	bl	800d094 <_fstat_r>
 800d004:	2800      	cmp	r0, #0
 800d006:	dbec      	blt.n	800cfe2 <__swhatbuf_r+0x12>
 800d008:	9901      	ldr	r1, [sp, #4]
 800d00a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d00e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d012:	4259      	negs	r1, r3
 800d014:	4159      	adcs	r1, r3
 800d016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d01a:	e7eb      	b.n	800cff4 <__swhatbuf_r+0x24>

0800d01c <__smakebuf_r>:
 800d01c:	898b      	ldrh	r3, [r1, #12]
 800d01e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d020:	079d      	lsls	r5, r3, #30
 800d022:	4606      	mov	r6, r0
 800d024:	460c      	mov	r4, r1
 800d026:	d507      	bpl.n	800d038 <__smakebuf_r+0x1c>
 800d028:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	6123      	str	r3, [r4, #16]
 800d030:	2301      	movs	r3, #1
 800d032:	6163      	str	r3, [r4, #20]
 800d034:	b003      	add	sp, #12
 800d036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d038:	ab01      	add	r3, sp, #4
 800d03a:	466a      	mov	r2, sp
 800d03c:	f7ff ffc8 	bl	800cfd0 <__swhatbuf_r>
 800d040:	9f00      	ldr	r7, [sp, #0]
 800d042:	4605      	mov	r5, r0
 800d044:	4639      	mov	r1, r7
 800d046:	4630      	mov	r0, r6
 800d048:	f7fe febc 	bl	800bdc4 <_malloc_r>
 800d04c:	b948      	cbnz	r0, 800d062 <__smakebuf_r+0x46>
 800d04e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d052:	059a      	lsls	r2, r3, #22
 800d054:	d4ee      	bmi.n	800d034 <__smakebuf_r+0x18>
 800d056:	f023 0303 	bic.w	r3, r3, #3
 800d05a:	f043 0302 	orr.w	r3, r3, #2
 800d05e:	81a3      	strh	r3, [r4, #12]
 800d060:	e7e2      	b.n	800d028 <__smakebuf_r+0xc>
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	6020      	str	r0, [r4, #0]
 800d066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d06a:	81a3      	strh	r3, [r4, #12]
 800d06c:	9b01      	ldr	r3, [sp, #4]
 800d06e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d072:	b15b      	cbz	r3, 800d08c <__smakebuf_r+0x70>
 800d074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d078:	4630      	mov	r0, r6
 800d07a:	f000 f81d 	bl	800d0b8 <_isatty_r>
 800d07e:	b128      	cbz	r0, 800d08c <__smakebuf_r+0x70>
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	f023 0303 	bic.w	r3, r3, #3
 800d086:	f043 0301 	orr.w	r3, r3, #1
 800d08a:	81a3      	strh	r3, [r4, #12]
 800d08c:	89a3      	ldrh	r3, [r4, #12]
 800d08e:	431d      	orrs	r5, r3
 800d090:	81a5      	strh	r5, [r4, #12]
 800d092:	e7cf      	b.n	800d034 <__smakebuf_r+0x18>

0800d094 <_fstat_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4d07      	ldr	r5, [pc, #28]	@ (800d0b4 <_fstat_r+0x20>)
 800d098:	2300      	movs	r3, #0
 800d09a:	4604      	mov	r4, r0
 800d09c:	4608      	mov	r0, r1
 800d09e:	4611      	mov	r1, r2
 800d0a0:	602b      	str	r3, [r5, #0]
 800d0a2:	f7f7 fdc9 	bl	8004c38 <_fstat>
 800d0a6:	1c43      	adds	r3, r0, #1
 800d0a8:	d102      	bne.n	800d0b0 <_fstat_r+0x1c>
 800d0aa:	682b      	ldr	r3, [r5, #0]
 800d0ac:	b103      	cbz	r3, 800d0b0 <_fstat_r+0x1c>
 800d0ae:	6023      	str	r3, [r4, #0]
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
 800d0b2:	bf00      	nop
 800d0b4:	20000fb0 	.word	0x20000fb0

0800d0b8 <_isatty_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4d06      	ldr	r5, [pc, #24]	@ (800d0d4 <_isatty_r+0x1c>)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4604      	mov	r4, r0
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	602b      	str	r3, [r5, #0]
 800d0c4:	f7f7 fdc8 	bl	8004c58 <_isatty>
 800d0c8:	1c43      	adds	r3, r0, #1
 800d0ca:	d102      	bne.n	800d0d2 <_isatty_r+0x1a>
 800d0cc:	682b      	ldr	r3, [r5, #0]
 800d0ce:	b103      	cbz	r3, 800d0d2 <_isatty_r+0x1a>
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	bd38      	pop	{r3, r4, r5, pc}
 800d0d4:	20000fb0 	.word	0x20000fb0

0800d0d8 <sqrt>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	ed2d 8b02 	vpush	{d8}
 800d0de:	ec55 4b10 	vmov	r4, r5, d0
 800d0e2:	f000 f825 	bl	800d130 <__ieee754_sqrt>
 800d0e6:	4622      	mov	r2, r4
 800d0e8:	462b      	mov	r3, r5
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800d0f2:	eef0 8a60 	vmov.f32	s17, s1
 800d0f6:	f7f3 fd11 	bl	8000b1c <__aeabi_dcmpun>
 800d0fa:	b990      	cbnz	r0, 800d122 <sqrt+0x4a>
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2300      	movs	r3, #0
 800d100:	4620      	mov	r0, r4
 800d102:	4629      	mov	r1, r5
 800d104:	f7f3 fce2 	bl	8000acc <__aeabi_dcmplt>
 800d108:	b158      	cbz	r0, 800d122 <sqrt+0x4a>
 800d10a:	f7ff f8a9 	bl	800c260 <__errno>
 800d10e:	2321      	movs	r3, #33	@ 0x21
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	2200      	movs	r2, #0
 800d114:	2300      	movs	r3, #0
 800d116:	4610      	mov	r0, r2
 800d118:	4619      	mov	r1, r3
 800d11a:	f7f3 fb8f 	bl	800083c <__aeabi_ddiv>
 800d11e:	ec41 0b18 	vmov	d8, r0, r1
 800d122:	eeb0 0a48 	vmov.f32	s0, s16
 800d126:	eef0 0a68 	vmov.f32	s1, s17
 800d12a:	ecbd 8b02 	vpop	{d8}
 800d12e:	bd38      	pop	{r3, r4, r5, pc}

0800d130 <__ieee754_sqrt>:
 800d130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	4a68      	ldr	r2, [pc, #416]	@ (800d2d8 <__ieee754_sqrt+0x1a8>)
 800d136:	ec55 4b10 	vmov	r4, r5, d0
 800d13a:	43aa      	bics	r2, r5
 800d13c:	462b      	mov	r3, r5
 800d13e:	4621      	mov	r1, r4
 800d140:	d110      	bne.n	800d164 <__ieee754_sqrt+0x34>
 800d142:	4622      	mov	r2, r4
 800d144:	4620      	mov	r0, r4
 800d146:	4629      	mov	r1, r5
 800d148:	f7f3 fa4e 	bl	80005e8 <__aeabi_dmul>
 800d14c:	4602      	mov	r2, r0
 800d14e:	460b      	mov	r3, r1
 800d150:	4620      	mov	r0, r4
 800d152:	4629      	mov	r1, r5
 800d154:	f7f3 f892 	bl	800027c <__adddf3>
 800d158:	4604      	mov	r4, r0
 800d15a:	460d      	mov	r5, r1
 800d15c:	ec45 4b10 	vmov	d0, r4, r5
 800d160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d164:	2d00      	cmp	r5, #0
 800d166:	dc0e      	bgt.n	800d186 <__ieee754_sqrt+0x56>
 800d168:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d16c:	4322      	orrs	r2, r4
 800d16e:	d0f5      	beq.n	800d15c <__ieee754_sqrt+0x2c>
 800d170:	b19d      	cbz	r5, 800d19a <__ieee754_sqrt+0x6a>
 800d172:	4622      	mov	r2, r4
 800d174:	4620      	mov	r0, r4
 800d176:	4629      	mov	r1, r5
 800d178:	f7f3 f87e 	bl	8000278 <__aeabi_dsub>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	f7f3 fb5c 	bl	800083c <__aeabi_ddiv>
 800d184:	e7e8      	b.n	800d158 <__ieee754_sqrt+0x28>
 800d186:	152a      	asrs	r2, r5, #20
 800d188:	d115      	bne.n	800d1b6 <__ieee754_sqrt+0x86>
 800d18a:	2000      	movs	r0, #0
 800d18c:	e009      	b.n	800d1a2 <__ieee754_sqrt+0x72>
 800d18e:	0acb      	lsrs	r3, r1, #11
 800d190:	3a15      	subs	r2, #21
 800d192:	0549      	lsls	r1, r1, #21
 800d194:	2b00      	cmp	r3, #0
 800d196:	d0fa      	beq.n	800d18e <__ieee754_sqrt+0x5e>
 800d198:	e7f7      	b.n	800d18a <__ieee754_sqrt+0x5a>
 800d19a:	462a      	mov	r2, r5
 800d19c:	e7fa      	b.n	800d194 <__ieee754_sqrt+0x64>
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	02dc      	lsls	r4, r3, #11
 800d1a4:	d5fb      	bpl.n	800d19e <__ieee754_sqrt+0x6e>
 800d1a6:	1e44      	subs	r4, r0, #1
 800d1a8:	1b12      	subs	r2, r2, r4
 800d1aa:	f1c0 0420 	rsb	r4, r0, #32
 800d1ae:	fa21 f404 	lsr.w	r4, r1, r4
 800d1b2:	4323      	orrs	r3, r4
 800d1b4:	4081      	lsls	r1, r0
 800d1b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d1be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1c2:	07d2      	lsls	r2, r2, #31
 800d1c4:	bf5c      	itt	pl
 800d1c6:	005b      	lslpl	r3, r3, #1
 800d1c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d1cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d1d0:	bf58      	it	pl
 800d1d2:	0049      	lslpl	r1, r1, #1
 800d1d4:	2600      	movs	r6, #0
 800d1d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d1da:	106d      	asrs	r5, r5, #1
 800d1dc:	0049      	lsls	r1, r1, #1
 800d1de:	2016      	movs	r0, #22
 800d1e0:	4632      	mov	r2, r6
 800d1e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d1e6:	1917      	adds	r7, r2, r4
 800d1e8:	429f      	cmp	r7, r3
 800d1ea:	bfde      	ittt	le
 800d1ec:	193a      	addle	r2, r7, r4
 800d1ee:	1bdb      	suble	r3, r3, r7
 800d1f0:	1936      	addle	r6, r6, r4
 800d1f2:	0fcf      	lsrs	r7, r1, #31
 800d1f4:	3801      	subs	r0, #1
 800d1f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d1fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d1fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d202:	d1f0      	bne.n	800d1e6 <__ieee754_sqrt+0xb6>
 800d204:	4604      	mov	r4, r0
 800d206:	2720      	movs	r7, #32
 800d208:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d20c:	429a      	cmp	r2, r3
 800d20e:	eb00 0e0c 	add.w	lr, r0, ip
 800d212:	db02      	blt.n	800d21a <__ieee754_sqrt+0xea>
 800d214:	d113      	bne.n	800d23e <__ieee754_sqrt+0x10e>
 800d216:	458e      	cmp	lr, r1
 800d218:	d811      	bhi.n	800d23e <__ieee754_sqrt+0x10e>
 800d21a:	f1be 0f00 	cmp.w	lr, #0
 800d21e:	eb0e 000c 	add.w	r0, lr, ip
 800d222:	da42      	bge.n	800d2aa <__ieee754_sqrt+0x17a>
 800d224:	2800      	cmp	r0, #0
 800d226:	db40      	blt.n	800d2aa <__ieee754_sqrt+0x17a>
 800d228:	f102 0801 	add.w	r8, r2, #1
 800d22c:	1a9b      	subs	r3, r3, r2
 800d22e:	458e      	cmp	lr, r1
 800d230:	bf88      	it	hi
 800d232:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d236:	eba1 010e 	sub.w	r1, r1, lr
 800d23a:	4464      	add	r4, ip
 800d23c:	4642      	mov	r2, r8
 800d23e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d242:	3f01      	subs	r7, #1
 800d244:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d248:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d24c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d250:	d1dc      	bne.n	800d20c <__ieee754_sqrt+0xdc>
 800d252:	4319      	orrs	r1, r3
 800d254:	d01b      	beq.n	800d28e <__ieee754_sqrt+0x15e>
 800d256:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d2dc <__ieee754_sqrt+0x1ac>
 800d25a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d2e0 <__ieee754_sqrt+0x1b0>
 800d25e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d262:	e9db 2300 	ldrd	r2, r3, [fp]
 800d266:	f7f3 f807 	bl	8000278 <__aeabi_dsub>
 800d26a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d26e:	4602      	mov	r2, r0
 800d270:	460b      	mov	r3, r1
 800d272:	4640      	mov	r0, r8
 800d274:	4649      	mov	r1, r9
 800d276:	f7f3 fc33 	bl	8000ae0 <__aeabi_dcmple>
 800d27a:	b140      	cbz	r0, 800d28e <__ieee754_sqrt+0x15e>
 800d27c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d280:	e9da 0100 	ldrd	r0, r1, [sl]
 800d284:	e9db 2300 	ldrd	r2, r3, [fp]
 800d288:	d111      	bne.n	800d2ae <__ieee754_sqrt+0x17e>
 800d28a:	3601      	adds	r6, #1
 800d28c:	463c      	mov	r4, r7
 800d28e:	1072      	asrs	r2, r6, #1
 800d290:	0863      	lsrs	r3, r4, #1
 800d292:	07f1      	lsls	r1, r6, #31
 800d294:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d298:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d29c:	bf48      	it	mi
 800d29e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d2a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	e756      	b.n	800d158 <__ieee754_sqrt+0x28>
 800d2aa:	4690      	mov	r8, r2
 800d2ac:	e7be      	b.n	800d22c <__ieee754_sqrt+0xfc>
 800d2ae:	f7f2 ffe5 	bl	800027c <__adddf3>
 800d2b2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	4640      	mov	r0, r8
 800d2bc:	4649      	mov	r1, r9
 800d2be:	f7f3 fc05 	bl	8000acc <__aeabi_dcmplt>
 800d2c2:	b120      	cbz	r0, 800d2ce <__ieee754_sqrt+0x19e>
 800d2c4:	1ca0      	adds	r0, r4, #2
 800d2c6:	bf08      	it	eq
 800d2c8:	3601      	addeq	r6, #1
 800d2ca:	3402      	adds	r4, #2
 800d2cc:	e7df      	b.n	800d28e <__ieee754_sqrt+0x15e>
 800d2ce:	1c63      	adds	r3, r4, #1
 800d2d0:	f023 0401 	bic.w	r4, r3, #1
 800d2d4:	e7db      	b.n	800d28e <__ieee754_sqrt+0x15e>
 800d2d6:	bf00      	nop
 800d2d8:	7ff00000 	.word	0x7ff00000
 800d2dc:	200000e0 	.word	0x200000e0
 800d2e0:	200000d8 	.word	0x200000d8

0800d2e4 <_init>:
 800d2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e6:	bf00      	nop
 800d2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ea:	bc08      	pop	{r3}
 800d2ec:	469e      	mov	lr, r3
 800d2ee:	4770      	bx	lr

0800d2f0 <_fini>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	bf00      	nop
 800d2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2f6:	bc08      	pop	{r3}
 800d2f8:	469e      	mov	lr, r3
 800d2fa:	4770      	bx	lr
