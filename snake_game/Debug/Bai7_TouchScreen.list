
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003474  0800d970  0800d970  0000e970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010de4  08010de4  000120e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010de4  08010de4  00011de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dec  08010dec  000120e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dec  08010dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010df0  08010df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08010df4  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000120e8  2**0
                  CONTENTS
 10 .bss          00000ed0  200000e8  200000e8  000120e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000fb8  20000fb8  000120e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000120e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c281  00000000  00000000  00012118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fc2  00000000  00000000  0002e399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00033360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001428  00000000  00000000  00034d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e5d  00000000  00000000  000361b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000266b2  00000000  00000000  0005f00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2344  00000000  00000000  000856bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00167a03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076fc  00000000  00000000  00167a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0016f144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d958 	.word	0x0800d958

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	0800d958 	.word	0x0800d958

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b96a 	b.w	8000f14 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	460c      	mov	r4, r1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d14e      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c64:	4694      	mov	ip, r2
 8000c66:	458c      	cmp	ip, r1
 8000c68:	4686      	mov	lr, r0
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	d962      	bls.n	8000d36 <__udivmoddi4+0xde>
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0320 	rsb	r3, r2, #32
 8000c76:	4091      	lsls	r1, r2
 8000c78:	fa20 f303 	lsr.w	r3, r0, r3
 8000c7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c80:	4319      	orrs	r1, r3
 8000c82:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f f68c 	uxth.w	r6, ip
 8000c8e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb07 1114 	mls	r1, r7, r4, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb04 f106 	mul.w	r1, r4, r6
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cae:	f080 8112 	bcs.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 810f 	bls.w	8000ed6 <__udivmoddi4+0x27e>
 8000cb8:	3c02      	subs	r4, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a59      	subs	r1, r3, r1
 8000cbe:	fa1f f38e 	uxth.w	r3, lr
 8000cc2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f606 	mul.w	r6, r0, r6
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x94>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cde:	f080 80fc 	bcs.w	8000eda <__udivmoddi4+0x282>
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	f240 80f9 	bls.w	8000eda <__udivmoddi4+0x282>
 8000ce8:	4463      	add	r3, ip
 8000cea:	3802      	subs	r0, #2
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	b11d      	cbz	r5, 8000cfe <__udivmoddi4+0xa6>
 8000cf6:	40d3      	lsrs	r3, r2
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d905      	bls.n	8000d12 <__udivmoddi4+0xba>
 8000d06:	b10d      	cbz	r5, 8000d0c <__udivmoddi4+0xb4>
 8000d08:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e7f5      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d12:	fab3 f183 	clz	r1, r3
 8000d16:	2900      	cmp	r1, #0
 8000d18:	d146      	bne.n	8000da8 <__udivmoddi4+0x150>
 8000d1a:	42a3      	cmp	r3, r4
 8000d1c:	d302      	bcc.n	8000d24 <__udivmoddi4+0xcc>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f0c0 80f0 	bcc.w	8000f04 <__udivmoddi4+0x2ac>
 8000d24:	1a86      	subs	r6, r0, r2
 8000d26:	eb64 0303 	sbc.w	r3, r4, r3
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	2d00      	cmp	r5, #0
 8000d2e:	d0e6      	beq.n	8000cfe <__udivmoddi4+0xa6>
 8000d30:	e9c5 6300 	strd	r6, r3, [r5]
 8000d34:	e7e3      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	f040 8090 	bne.w	8000e5c <__udivmoddi4+0x204>
 8000d3c:	eba1 040c 	sub.w	r4, r1, ip
 8000d40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d44:	fa1f f78c 	uxth.w	r7, ip
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb08 4416 	mls	r4, r8, r6, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb07 f006 	mul.w	r0, r7, r6
 8000d5e:	4298      	cmp	r0, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x11c>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x11a>
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d72:	4626      	mov	r6, r4
 8000d74:	1a1c      	subs	r4, r3, r0
 8000d76:	fa1f f38e 	uxth.w	r3, lr
 8000d7a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d86:	fb00 f707 	mul.w	r7, r0, r7
 8000d8a:	429f      	cmp	r7, r3
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x148>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x146>
 8000d98:	429f      	cmp	r7, r3
 8000d9a:	f200 80b0 	bhi.w	8000efe <__udivmoddi4+0x2a6>
 8000d9e:	4620      	mov	r0, r4
 8000da0:	1bdb      	subs	r3, r3, r7
 8000da2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da6:	e7a5      	b.n	8000cf4 <__udivmoddi4+0x9c>
 8000da8:	f1c1 0620 	rsb	r6, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 f706 	lsr.w	r7, r2, r6
 8000db2:	431f      	orrs	r7, r3
 8000db4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dbc:	ea43 030c 	orr.w	r3, r3, ip
 8000dc0:	40f4      	lsrs	r4, r6
 8000dc2:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc6:	0c38      	lsrs	r0, r7, #16
 8000dc8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dcc:	fbb4 fef0 	udiv	lr, r4, r0
 8000dd0:	fa1f fc87 	uxth.w	ip, r7
 8000dd4:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ddc:	fb0e f90c 	mul.w	r9, lr, ip
 8000de0:	45a1      	cmp	r9, r4
 8000de2:	fa02 f201 	lsl.w	r2, r2, r1
 8000de6:	d90a      	bls.n	8000dfe <__udivmoddi4+0x1a6>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dee:	f080 8084 	bcs.w	8000efa <__udivmoddi4+0x2a2>
 8000df2:	45a1      	cmp	r9, r4
 8000df4:	f240 8081 	bls.w	8000efa <__udivmoddi4+0x2a2>
 8000df8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	eba4 0409 	sub.w	r4, r4, r9
 8000e02:	fa1f f983 	uxth.w	r9, r3
 8000e06:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e0a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e12:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e16:	45a4      	cmp	ip, r4
 8000e18:	d907      	bls.n	8000e2a <__udivmoddi4+0x1d2>
 8000e1a:	193c      	adds	r4, r7, r4
 8000e1c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e20:	d267      	bcs.n	8000ef2 <__udivmoddi4+0x29a>
 8000e22:	45a4      	cmp	ip, r4
 8000e24:	d965      	bls.n	8000ef2 <__udivmoddi4+0x29a>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	443c      	add	r4, r7
 8000e2a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e32:	eba4 040c 	sub.w	r4, r4, ip
 8000e36:	429c      	cmp	r4, r3
 8000e38:	46ce      	mov	lr, r9
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	d351      	bcc.n	8000ee2 <__udivmoddi4+0x28a>
 8000e3e:	d04e      	beq.n	8000ede <__udivmoddi4+0x286>
 8000e40:	b155      	cbz	r5, 8000e58 <__udivmoddi4+0x200>
 8000e42:	ebb8 030e 	subs.w	r3, r8, lr
 8000e46:	eb64 040c 	sbc.w	r4, r4, ip
 8000e4a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4e:	40cb      	lsrs	r3, r1
 8000e50:	431e      	orrs	r6, r3
 8000e52:	40cc      	lsrs	r4, r1
 8000e54:	e9c5 6400 	strd	r6, r4, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	e750      	b.n	8000cfe <__udivmoddi4+0xa6>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f103 	lsr.w	r1, r0, r3
 8000e64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e68:	fa24 f303 	lsr.w	r3, r4, r3
 8000e6c:	4094      	lsls	r4, r2
 8000e6e:	430c      	orrs	r4, r1
 8000e70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e74:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e78:	fa1f f78c 	uxth.w	r7, ip
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3110 	mls	r1, r8, r0, r3
 8000e84:	0c23      	lsrs	r3, r4, #16
 8000e86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8a:	fb00 f107 	mul.w	r1, r0, r7
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x24c>
 8000e92:	eb1c 0303 	adds.w	r3, ip, r3
 8000e96:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e9a:	d22c      	bcs.n	8000ef6 <__udivmoddi4+0x29e>
 8000e9c:	4299      	cmp	r1, r3
 8000e9e:	d92a      	bls.n	8000ef6 <__udivmoddi4+0x29e>
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eac:	fb08 3311 	mls	r3, r8, r1, r3
 8000eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb4:	fb01 f307 	mul.w	r3, r1, r7
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x276>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec4:	d213      	bcs.n	8000eee <__udivmoddi4+0x296>
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	d911      	bls.n	8000eee <__udivmoddi4+0x296>
 8000eca:	3902      	subs	r1, #2
 8000ecc:	4464      	add	r4, ip
 8000ece:	1ae4      	subs	r4, r4, r3
 8000ed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed4:	e739      	b.n	8000d4a <__udivmoddi4+0xf2>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	e6f0      	b.n	8000cbc <__udivmoddi4+0x64>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e706      	b.n	8000cec <__udivmoddi4+0x94>
 8000ede:	45c8      	cmp	r8, r9
 8000ee0:	d2ae      	bcs.n	8000e40 <__udivmoddi4+0x1e8>
 8000ee2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eea:	3801      	subs	r0, #1
 8000eec:	e7a8      	b.n	8000e40 <__udivmoddi4+0x1e8>
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e7ed      	b.n	8000ece <__udivmoddi4+0x276>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	e799      	b.n	8000e2a <__udivmoddi4+0x1d2>
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e7d4      	b.n	8000ea4 <__udivmoddi4+0x24c>
 8000efa:	46d6      	mov	lr, sl
 8000efc:	e77f      	b.n	8000dfe <__udivmoddi4+0x1a6>
 8000efe:	4463      	add	r3, ip
 8000f00:	3802      	subs	r0, #2
 8000f02:	e74d      	b.n	8000da0 <__udivmoddi4+0x148>
 8000f04:	4606      	mov	r6, r0
 8000f06:	4623      	mov	r3, r4
 8000f08:	4608      	mov	r0, r1
 8000f0a:	e70f      	b.n	8000d2c <__udivmoddi4+0xd4>
 8000f0c:	3e02      	subs	r6, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	e730      	b.n	8000d74 <__udivmoddi4+0x11c>
 8000f12:	bf00      	nop

08000f14 <__aeabi_idiv0>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f2c:	4a3d      	ldr	r2, [pc, #244]	@ (8001024 <MX_ADC1_Init+0x10c>)
 8000f2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f30:	4b3b      	ldr	r3, [pc, #236]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f36:	4b3a      	ldr	r3, [pc, #232]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f3c:	4b38      	ldr	r3, [pc, #224]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f42:	4b37      	ldr	r3, [pc, #220]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f48:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f50:	4b33      	ldr	r3, [pc, #204]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f56:	4b32      	ldr	r3, [pc, #200]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f58:	4a33      	ldr	r2, [pc, #204]	@ (8001028 <MX_ADC1_Init+0x110>)
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5c:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000f62:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f64:	2205      	movs	r2, #5
 8000f66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f68:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f70:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f76:	482a      	ldr	r0, [pc, #168]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f78:	f005 fafa 	bl	8006570 <HAL_ADC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f002 fb63 	bl	800364c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f86:	2308      	movs	r3, #8
 8000f88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4822      	ldr	r0, [pc, #136]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000f98:	f005 fc5c 	bl	8006854 <HAL_ADC_ConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000fa2:	f002 fb53 	bl	800364c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fa6:	2309      	movs	r3, #9
 8000fa8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481b      	ldr	r0, [pc, #108]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000fb4:	f005 fc4e 	bl	8006854 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000fbe:	f002 fb45 	bl	800364c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fc2:	230a      	movs	r3, #10
 8000fc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4814      	ldr	r0, [pc, #80]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000fd0:	f005 fc40 	bl	8006854 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000fda:	f002 fb37 	bl	800364c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fde:	230b      	movs	r3, #11
 8000fe0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_ADC1_Init+0x108>)
 8000fec:	f005 fc32 	bl	8006854 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ff6:	f002 fb29 	bl	800364c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000ffe:	2305      	movs	r3, #5
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <MX_ADC1_Init+0x108>)
 8001008:	f005 fc24 	bl	8006854 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001012:	f002 fb1b 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000104 	.word	0x20000104
 8001024:	40012000 	.word	0x40012000
 8001028:	0f000001 	.word	0x0f000001

0800102c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a3c      	ldr	r2, [pc, #240]	@ (800113c <HAL_ADC_MspInit+0x110>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d171      	bne.n	8001132 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b3b      	ldr	r3, [pc, #236]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a3a      	ldr	r2, [pc, #232]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b38      	ldr	r3, [pc, #224]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b34      	ldr	r3, [pc, #208]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a33      	ldr	r2, [pc, #204]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a2c      	ldr	r2, [pc, #176]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <HAL_ADC_MspInit+0x114>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010a2:	2307      	movs	r3, #7
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a6:	2303      	movs	r3, #3
 80010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4823      	ldr	r0, [pc, #140]	@ (8001144 <HAL_ADC_MspInit+0x118>)
 80010b6:	f006 fb81 	bl	80077bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ba:	2303      	movs	r3, #3
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010be:	2303      	movs	r3, #3
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	481e      	ldr	r0, [pc, #120]	@ (8001148 <HAL_ADC_MspInit+0x11c>)
 80010ce:	f006 fb75 	bl	80077bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <HAL_ADC_MspInit+0x120>)
 80010d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <HAL_ADC_MspInit+0x124>)
 80010d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_ADC_MspInit+0x120>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010de:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <HAL_ADC_MspInit+0x120>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <HAL_ADC_MspInit+0x120>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010ea:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_ADC_MspInit+0x120>)
 80010ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f2:	4b16      	ldr	r3, [pc, #88]	@ (800114c <HAL_ADC_MspInit+0x120>)
 80010f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <HAL_ADC_MspInit+0x120>)
 80010fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001100:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_ADC_MspInit+0x120>)
 8001104:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001108:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <HAL_ADC_MspInit+0x120>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_ADC_MspInit+0x120>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001116:	480d      	ldr	r0, [pc, #52]	@ (800114c <HAL_ADC_MspInit+0x120>)
 8001118:	f005 ff4e 	bl	8006fb8 <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001122:	f002 fa93 	bl	800364c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_ADC_MspInit+0x120>)
 800112a:	639a      	str	r2, [r3, #56]	@ 0x38
 800112c:	4a07      	ldr	r2, [pc, #28]	@ (800114c <HAL_ADC_MspInit+0x120>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40012000 	.word	0x40012000
 8001140:	40023800 	.word	0x40023800
 8001144:	40020800 	.word	0x40020800
 8001148:	40020400 	.word	0x40020400
 800114c:	2000014c 	.word	0x2000014c
 8001150:	40026410 	.word	0x40026410

08001154 <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	at24c_Check();
 8001158:	f000 f83c 	bl	80011d4 <at24c_Check>
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af04      	add	r7, sp, #16
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 800116e:	88fa      	ldrh	r2, [r7, #6]
 8001170:	230a      	movs	r3, #10
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	2301      	movs	r3, #1
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	f107 030f 	add.w	r3, r7, #15
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2310      	movs	r3, #16
 8001180:	21a0      	movs	r1, #160	@ 0xa0
 8001182:	4804      	ldr	r0, [pc, #16]	@ (8001194 <at24c_ReadOneByte+0x34>)
 8001184:	f006 ff40 	bl	8008008 <HAL_I2C_Mem_Read>
	return temp;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000254 	.word	0x20000254

08001198 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af04      	add	r7, sp, #16
 800119e:	4603      	mov	r3, r0
 80011a0:	460a      	mov	r2, r1
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	4613      	mov	r3, r2
 80011a6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 80011a8:	88fa      	ldrh	r2, [r7, #6]
 80011aa:	230a      	movs	r3, #10
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	1d7b      	adds	r3, r7, #5
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2310      	movs	r3, #16
 80011b8:	21a0      	movs	r1, #160	@ 0xa0
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <at24c_WriteOneByte+0x38>)
 80011bc:	f006 fe2a 	bl	8007e14 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 80011c0:	2005      	movs	r0, #5
 80011c2:	f005 f9b1 	bl	8006528 <HAL_Delay>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000254 	.word	0x20000254

080011d4 <at24c_Check>:

uint8_t at24c_Check(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 80011da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011de:	f7ff ffbf 	bl	8001160 <at24c_ReadOneByte>
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b55      	cmp	r3, #85	@ 0x55
 80011ea:	d101      	bne.n	80011f0 <at24c_Check+0x1c>
 80011ec:	2300      	movs	r3, #0
 80011ee:	e010      	b.n	8001212 <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 80011f0:	2155      	movs	r1, #85	@ 0x55
 80011f2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011f6:	f7ff ffcf 	bl	8001198 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 80011fa:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80011fe:	f7ff ffaf 	bl	8001160 <at24c_ReadOneByte>
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b55      	cmp	r3, #85	@ 0x55
 800120a:	d101      	bne.n	8001210 <at24c_Check+0x3c>
 800120c:	2300      	movs	r3, #0
 800120e:	e000      	b.n	8001212 <at24c_Check+0x3e>
	}
	return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 800121a:	b590      	push	{r4, r7, lr}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	6039      	str	r1, [r7, #0]
 8001224:	80fb      	strh	r3, [r7, #6]
 8001226:	4613      	mov	r3, r2
 8001228:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 800122a:	e00d      	b.n	8001248 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	80fa      	strh	r2, [r7, #6]
 8001232:	683c      	ldr	r4, [r7, #0]
 8001234:	1c62      	adds	r2, r4, #1
 8001236:	603a      	str	r2, [r7, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff91 	bl	8001160 <at24c_ReadOneByte>
 800123e:	4603      	mov	r3, r0
 8001240:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 8001242:	88bb      	ldrh	r3, [r7, #4]
 8001244:	3b01      	subs	r3, #1
 8001246:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001248:	88bb      	ldrh	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1ee      	bne.n	800122c <at24c_Read+0x12>
	}
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bd90      	pop	{r4, r7, pc}

08001258 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4613      	mov	r3, r2
 8001266:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 8001268:	e00c      	b.n	8001284 <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff90 	bl	8001198 <at24c_WriteOneByte>
		WriteAddr++;
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	3301      	adds	r3, #1
 800127c:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	80ba      	strh	r2, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1ed      	bne.n	800126a <at24c_Write+0x12>
	}
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	2108      	movs	r1, #8
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <button_init+0x14>)
 80012a2:	f006 fc3f 	bl	8007b24 <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40020c00 	.word	0x40020c00

080012b0 <button_Scan>:

void button_Scan(){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2108      	movs	r1, #8
 80012ba:	482f      	ldr	r0, [pc, #188]	@ (8001378 <button_Scan+0xc8>)
 80012bc:	f006 fc32 	bl	8007b24 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2108      	movs	r1, #8
 80012c4:	482c      	ldr	r0, [pc, #176]	@ (8001378 <button_Scan+0xc8>)
 80012c6:	f006 fc2d 	bl	8007b24 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80012ca:	230a      	movs	r3, #10
 80012cc:	2202      	movs	r2, #2
 80012ce:	492b      	ldr	r1, [pc, #172]	@ (800137c <button_Scan+0xcc>)
 80012d0:	482b      	ldr	r0, [pc, #172]	@ (8001380 <button_Scan+0xd0>)
 80012d2:	f008 fa78 	bl	80097c6 <HAL_SPI_Receive>
	  int button_index = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80012da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012de:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	e03f      	b.n	8001366 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	db06      	blt.n	80012fa <button_Scan+0x4a>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	dc03      	bgt.n	80012fa <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3304      	adds	r3, #4
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	e018      	b.n	800132c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	dd07      	ble.n	8001310 <button_Scan+0x60>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b07      	cmp	r3, #7
 8001304:	dc04      	bgt.n	8001310 <button_Scan+0x60>
			  button_index = 7 - i;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f1c3 0307 	rsb	r3, r3, #7
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e00d      	b.n	800132c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b07      	cmp	r3, #7
 8001314:	dd06      	ble.n	8001324 <button_Scan+0x74>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0b      	cmp	r3, #11
 800131a:	dc03      	bgt.n	8001324 <button_Scan+0x74>
			  button_index = i + 4;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3304      	adds	r3, #4
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e003      	b.n	800132c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f1c3 0317 	rsb	r3, r3, #23
 800132a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <button_Scan+0xcc>)
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	897b      	ldrh	r3, [r7, #10]
 8001332:	4013      	ands	r3, r2
 8001334:	b29b      	uxth	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <button_Scan+0x96>
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <button_Scan+0xd4>)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2100      	movs	r1, #0
 8001340:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001344:	e009      	b.n	800135a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8001346:	4a0f      	ldr	r2, [pc, #60]	@ (8001384 <button_Scan+0xd4>)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800134e:	3301      	adds	r3, #1
 8001350:	b299      	uxth	r1, r3
 8001352:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <button_Scan+0xd4>)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800135a:	897b      	ldrh	r3, [r7, #10]
 800135c:	085b      	lsrs	r3, r3, #1
 800135e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3301      	adds	r3, #1
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	ddbc      	ble.n	80012e6 <button_Scan+0x36>
	  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40020c00 	.word	0x40020c00
 800137c:	200001cc 	.word	0x200001cc
 8001380:	20000b40 	.word	0x20000b40
 8001384:	200001ac 	.word	0x200001ac

08001388 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800138c:	2100      	movs	r1, #0
 800138e:	4802      	ldr	r0, [pc, #8]	@ (8001398 <buzzer_init+0x10>)
 8001390:	f008 ffc2 	bl	800a318 <HAL_TIM_PWM_Start>
}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000c2c 	.word	0x20000c2c

0800139c <buzzer_SetVolume>:

void buzzer_SetVolume(uint8_t _duty_cycle){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	duty_cycle = _duty_cycle;
 80013a6:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <buzzer_SetVolume+0x28>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	7013      	strb	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1,duty_cycle);
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <buzzer_SetVolume+0x28>)
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <buzzer_SetVolume+0x2c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200001ce 	.word	0x200001ce
 80013c8:	20000c2c 	.word	0x20000c2c

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_DMA_Init+0x3c>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <MX_DMA_Init+0x3c>)
 80013dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_DMA_Init+0x3c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2038      	movs	r0, #56	@ 0x38
 80013f4:	f005 fda9 	bl	8006f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f8:	2038      	movs	r0, #56	@ 0x38
 80013fa:	f005 fdc2 	bl	8006f82 <HAL_NVIC_EnableIRQ>

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800

0800140c <fsm_mode>:
int colon = 0;
int send_flag = 0;

struct player *leaderboard = NULL;

void fsm_mode(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	switch(mode){
 8001410:	4b1a      	ldr	r3, [pc, #104]	@ (800147c <fsm_mode+0x70>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d82e      	bhi.n	8001476 <fsm_mode+0x6a>
 8001418:	a201      	add	r2, pc, #4	@ (adr r2, 8001420 <fsm_mode+0x14>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001431 	.word	0x08001431
 8001424:	0800143f 	.word	0x0800143f
 8001428:	08001451 	.word	0x08001451
 800142c:	08001463 	.word	0x08001463
	case NORMAL:
		wall = 0;
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <fsm_mode+0x74>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
		walls = 0;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <fsm_mode+0x78>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
		break;
 800143c:	e01b      	b.n	8001476 <fsm_mode+0x6a>
	case WALL:
		wall = 1;
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <fsm_mode+0x74>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]
		walls = 0;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <fsm_mode+0x78>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
		spawn_wall();
 800144a:	f002 ffc1 	bl	80043d0 <spawn_wall>
		break;
 800144e:	e012      	b.n	8001476 <fsm_mode+0x6a>
	case WALLS:
		wall = 1;
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <fsm_mode+0x74>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
		walls = 1;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <fsm_mode+0x78>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
		spawn_wall();
 800145c:	f002 ffb8 	bl	80043d0 <spawn_wall>
		break;
 8001460:	e009      	b.n	8001476 <fsm_mode+0x6a>
	case TIMER:
		wall = 0;
 8001462:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <fsm_mode+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
		walls = 0;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <fsm_mode+0x78>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
		countdown = 180;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <fsm_mode+0x7c>)
 8001470:	22b4      	movs	r2, #180	@ 0xb4
 8001472:	601a      	str	r2, [r3, #0]
		break;
 8001474:	bf00      	nop
	}
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001d8 	.word	0x200001d8
 8001480:	200001e0 	.word	0x200001e0
 8001484:	200001e4 	.word	0x200001e4
 8001488:	20000008 	.word	0x20000008

0800148c <fsm_buzzer>:

void fsm_buzzer(){// gui canh bao do am > 70% loa bao hieu moi 1 giay, tan so 0.5Hz
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	switch (buzzer_flag) {
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <fsm_buzzer+0x58>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <fsm_buzzer+0x12>
 8001498:	2b01      	cmp	r3, #1
 800149a:	d012      	beq.n	80014c2 <fsm_buzzer+0x36>
				buzzer_flag = BUZZER_OFF;
			}
			buzzer_SetVolume(50);
			break;
		default:
			break;
 800149c:	e020      	b.n	80014e0 <fsm_buzzer+0x54>
			if(flag_timer7 == 1){
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <fsm_buzzer+0x5c>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d109      	bne.n	80014ba <fsm_buzzer+0x2e>
				uart_EspSendString("Humidity is higher than 70%\n/");
 80014a6:	4811      	ldr	r0, [pc, #68]	@ (80014ec <fsm_buzzer+0x60>)
 80014a8:	f004 fe74 	bl	8006194 <uart_EspSendString>
				setTimer7(1000);
 80014ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014b0:	f003 fa7a 	bl	80049a8 <setTimer7>
				buzzer_flag = BUZZER_ON;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <fsm_buzzer+0x58>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(0);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff ff6e 	bl	800139c <buzzer_SetVolume>
			break;
 80014c0:	e00e      	b.n	80014e0 <fsm_buzzer+0x54>
			if(flag_timer7 == 1){
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <fsm_buzzer+0x5c>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d106      	bne.n	80014d8 <fsm_buzzer+0x4c>
				setTimer7(1000);
 80014ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014ce:	f003 fa6b 	bl	80049a8 <setTimer7>
				buzzer_flag = BUZZER_OFF;
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <fsm_buzzer+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
			buzzer_SetVolume(50);
 80014d8:	2032      	movs	r0, #50	@ 0x32
 80014da:	f7ff ff5f 	bl	800139c <buzzer_SetVolume>
			break;
 80014de:	bf00      	nop
	}
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200001ec 	.word	0x200001ec
 80014e8:	20000b3a 	.word	0x20000b3a
 80014ec:	0800d970 	.word	0x0800d970

080014f0 <fsm_send_buzzer>:

void fsm_send_buzzer(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	switch (buzzer_check) {
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <fsm_send_buzzer+0x24>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <fsm_send_buzzer+0x12>
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d004      	beq.n	800150a <fsm_send_buzzer+0x1a>
			break;
		case 1:
			fsm_buzzer();
			break;
		default:
			break;
 8001500:	e006      	b.n	8001510 <fsm_send_buzzer+0x20>
			buzzer_SetVolume(0);
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ff4a 	bl	800139c <buzzer_SetVolume>
			break;
 8001508:	e002      	b.n	8001510 <fsm_send_buzzer+0x20>
			fsm_buzzer();
 800150a:	f7ff ffbf 	bl	800148c <fsm_buzzer>
			break;
 800150e:	bf00      	nop
	}
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200001f0 	.word	0x200001f0

08001518 <enter_ID>:

void enter_ID(){//nhap id nguoi choi
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	if(button_count[0] == 1)
 800151c:	4b4d      	ldr	r3, [pc, #308]	@ (8001654 <enter_ID+0x13c>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d108      	bne.n	8001536 <enter_ID+0x1e>
		ID = ID*10+1;
 8001524:	4b4c      	ldr	r3, [pc, #304]	@ (8001658 <enter_ID+0x140>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	3301      	adds	r3, #1
 8001532:	4a49      	ldr	r2, [pc, #292]	@ (8001658 <enter_ID+0x140>)
 8001534:	6013      	str	r3, [r2, #0]
	if(button_count[1] == 1)
 8001536:	4b47      	ldr	r3, [pc, #284]	@ (8001654 <enter_ID+0x13c>)
 8001538:	885b      	ldrh	r3, [r3, #2]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d108      	bne.n	8001550 <enter_ID+0x38>
		ID = ID*10+2;
 800153e:	4b46      	ldr	r3, [pc, #280]	@ (8001658 <enter_ID+0x140>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	3302      	adds	r3, #2
 800154c:	4a42      	ldr	r2, [pc, #264]	@ (8001658 <enter_ID+0x140>)
 800154e:	6013      	str	r3, [r2, #0]
	if(button_count[2] == 1)
 8001550:	4b40      	ldr	r3, [pc, #256]	@ (8001654 <enter_ID+0x13c>)
 8001552:	889b      	ldrh	r3, [r3, #4]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d108      	bne.n	800156a <enter_ID+0x52>
		ID = ID*10+3;
 8001558:	4b3f      	ldr	r3, [pc, #252]	@ (8001658 <enter_ID+0x140>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	3303      	adds	r3, #3
 8001566:	4a3c      	ldr	r2, [pc, #240]	@ (8001658 <enter_ID+0x140>)
 8001568:	6013      	str	r3, [r2, #0]
	if(button_count[4] == 1)
 800156a:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <enter_ID+0x13c>)
 800156c:	891b      	ldrh	r3, [r3, #8]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d108      	bne.n	8001584 <enter_ID+0x6c>
		ID = ID*10+4;
 8001572:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <enter_ID+0x140>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	3304      	adds	r3, #4
 8001580:	4a35      	ldr	r2, [pc, #212]	@ (8001658 <enter_ID+0x140>)
 8001582:	6013      	str	r3, [r2, #0]
	if(button_count[5] == 1)
 8001584:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <enter_ID+0x13c>)
 8001586:	895b      	ldrh	r3, [r3, #10]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d108      	bne.n	800159e <enter_ID+0x86>
		ID = ID*10+5;
 800158c:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <enter_ID+0x140>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	3305      	adds	r3, #5
 800159a:	4a2f      	ldr	r2, [pc, #188]	@ (8001658 <enter_ID+0x140>)
 800159c:	6013      	str	r3, [r2, #0]
	if(button_count[6] == 1)
 800159e:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <enter_ID+0x13c>)
 80015a0:	899b      	ldrh	r3, [r3, #12]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <enter_ID+0xa0>
		ID = ID*10+6;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <enter_ID+0x140>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	3306      	adds	r3, #6
 80015b4:	4a28      	ldr	r2, [pc, #160]	@ (8001658 <enter_ID+0x140>)
 80015b6:	6013      	str	r3, [r2, #0]
	if(button_count[8] == 1)
 80015b8:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <enter_ID+0x13c>)
 80015ba:	8a1b      	ldrh	r3, [r3, #16]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d108      	bne.n	80015d2 <enter_ID+0xba>
		ID = ID*10+7;
 80015c0:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <enter_ID+0x140>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	3307      	adds	r3, #7
 80015ce:	4a22      	ldr	r2, [pc, #136]	@ (8001658 <enter_ID+0x140>)
 80015d0:	6013      	str	r3, [r2, #0]
	if(button_count[9] == 1)
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <enter_ID+0x13c>)
 80015d4:	8a5b      	ldrh	r3, [r3, #18]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d108      	bne.n	80015ec <enter_ID+0xd4>
		ID = ID*10+8;
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <enter_ID+0x140>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	3308      	adds	r3, #8
 80015e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001658 <enter_ID+0x140>)
 80015ea:	6013      	str	r3, [r2, #0]
	if(button_count[10] == 1)
 80015ec:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <enter_ID+0x13c>)
 80015ee:	8a9b      	ldrh	r3, [r3, #20]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d108      	bne.n	8001606 <enter_ID+0xee>
		ID = ID*10+9;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <enter_ID+0x140>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	3309      	adds	r3, #9
 8001602:	4a15      	ldr	r2, [pc, #84]	@ (8001658 <enter_ID+0x140>)
 8001604:	6013      	str	r3, [r2, #0]
	if(button_count[13] == 1)
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <enter_ID+0x13c>)
 8001608:	8b5b      	ldrh	r3, [r3, #26]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d108      	bne.n	8001620 <enter_ID+0x108>
		ID = ID*10;
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <enter_ID+0x140>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4613      	mov	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	4413      	add	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	461a      	mov	r2, r3
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <enter_ID+0x140>)
 800161e:	601a      	str	r2, [r3, #0]
	if(ID > 9999)
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <enter_ID+0x140>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001628:	4293      	cmp	r3, r2
 800162a:	dd0e      	ble.n	800164a <enter_ID+0x132>
		ID = ID % 10;
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <enter_ID+0x140>)
 800162e:	6819      	ldr	r1, [r3, #0]
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <enter_ID+0x144>)
 8001632:	fb83 2301 	smull	r2, r3, r3, r1
 8001636:	109a      	asrs	r2, r3, #2
 8001638:	17cb      	asrs	r3, r1, #31
 800163a:	1ad2      	subs	r2, r2, r3
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	1aca      	subs	r2, r1, r3
 8001646:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <enter_ID+0x140>)
 8001648:	601a      	str	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	200001ac 	.word	0x200001ac
 8001658:	200001d4 	.word	0x200001d4
 800165c:	66666667 	.word	0x66666667

08001660 <change_mode>:

void change_mode(){// doi che do choi
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 8001666:	4b41      	ldr	r3, [pc, #260]	@ (800176c <change_mode+0x10c>)
 8001668:	8b1b      	ldrh	r3, [r3, #24]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <change_mode+0x1c>
		lcd_Clear(BLACK);
 800166e:	2000      	movs	r0, #0
 8001670:	f000 fe9e 	bl	80023b0 <lcd_Clear>
		status = INIT;
 8001674:	4b3e      	ldr	r3, [pc, #248]	@ (8001770 <change_mode+0x110>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
		return;
 800167a:	e074      	b.n	8001766 <change_mode+0x106>
	}
	lcd_ShowStr(0, 10, "1. NORMAL", WHITE, BLACK, 16, 0);
 800167c:	2300      	movs	r3, #0
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2310      	movs	r3, #16
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800168c:	4a39      	ldr	r2, [pc, #228]	@ (8001774 <change_mode+0x114>)
 800168e:	210a      	movs	r1, #10
 8001690:	2000      	movs	r0, #0
 8001692:	f001 fbff 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. WALL", WHITE, BLACK, 16, 0);
 8001696:	2300      	movs	r3, #0
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	2310      	movs	r3, #16
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016a6:	4a34      	ldr	r2, [pc, #208]	@ (8001778 <change_mode+0x118>)
 80016a8:	211e      	movs	r1, #30
 80016aa:	2000      	movs	r0, #0
 80016ac:	f001 fbf2 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. WALLS", WHITE, BLACK, 16, 0);
 80016b0:	2300      	movs	r3, #0
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	2310      	movs	r3, #16
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	2300      	movs	r3, #0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016c0:	4a2e      	ldr	r2, [pc, #184]	@ (800177c <change_mode+0x11c>)
 80016c2:	2132      	movs	r1, #50	@ 0x32
 80016c4:	2000      	movs	r0, #0
 80016c6:	f001 fbe5 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(0, 70, "4. TIMER", WHITE, BLACK, 16, 0);
 80016ca:	2300      	movs	r3, #0
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2310      	movs	r3, #16
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2300      	movs	r3, #0
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016da:	4a29      	ldr	r2, [pc, #164]	@ (8001780 <change_mode+0x120>)
 80016dc:	2146      	movs	r1, #70	@ 0x46
 80016de:	2000      	movs	r0, #0
 80016e0:	f001 fbd8 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(0, 90, "E. EXIT", WHITE, BLACK, 16, 0);
 80016e4:	2300      	movs	r3, #0
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	2310      	movs	r3, #16
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016f4:	4a23      	ldr	r2, [pc, #140]	@ (8001784 <change_mode+0x124>)
 80016f6:	215a      	movs	r1, #90	@ 0x5a
 80016f8:	2000      	movs	r0, #0
 80016fa:	f001 fbcb 	bl	8002e94 <lcd_ShowStr>

	if(button_count[0] == 1){
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <change_mode+0x10c>)
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d108      	bne.n	8001718 <change_mode+0xb8>
		mode = NORMAL;
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <change_mode+0x128>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800170c:	2000      	movs	r0, #0
 800170e:	f000 fe4f 	bl	80023b0 <lcd_Clear>
		status = INIT;
 8001712:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <change_mode+0x110>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
	}
	if(button_count[1] == 1){
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <change_mode+0x10c>)
 800171a:	885b      	ldrh	r3, [r3, #2]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <change_mode+0xd2>
		mode = WALL;
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <change_mode+0x128>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001726:	2000      	movs	r0, #0
 8001728:	f000 fe42 	bl	80023b0 <lcd_Clear>
		status = INIT;
 800172c:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <change_mode+0x110>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
	}
	if(button_count[2] == 1){
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <change_mode+0x10c>)
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <change_mode+0xec>
		mode = WALLS;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <change_mode+0x128>)
 800173c:	2202      	movs	r2, #2
 800173e:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001740:	2000      	movs	r0, #0
 8001742:	f000 fe35 	bl	80023b0 <lcd_Clear>
		status = INIT;
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <change_mode+0x110>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
	}
	if(button_count[4] == 1){
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <change_mode+0x10c>)
 800174e:	891b      	ldrh	r3, [r3, #8]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <change_mode+0x106>
		mode = TIMER;
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <change_mode+0x128>)
 8001756:	2203      	movs	r2, #3
 8001758:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800175a:	2000      	movs	r0, #0
 800175c:	f000 fe28 	bl	80023b0 <lcd_Clear>
		status = INIT;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <change_mode+0x110>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
	}
}
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200001ac 	.word	0x200001ac
 8001770:	200001d0 	.word	0x200001d0
 8001774:	0800d990 	.word	0x0800d990
 8001778:	0800d99c 	.word	0x0800d99c
 800177c:	0800d9a4 	.word	0x0800d9a4
 8001780:	0800d9b0 	.word	0x0800d9b0
 8001784:	0800d9bc 	.word	0x0800d9bc
 8001788:	200001d8 	.word	0x200001d8

0800178c <change_speed>:

void change_speed(){// doi toc do ran
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 8001792:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <change_speed+0xdc>)
 8001794:	8b1b      	ldrh	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <change_speed+0x1c>
		lcd_Clear(BLACK);
 800179a:	2000      	movs	r0, #0
 800179c:	f000 fe08 	bl	80023b0 <lcd_Clear>
		status = INIT;
 80017a0:	4b32      	ldr	r3, [pc, #200]	@ (800186c <change_speed+0xe0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
		return;
 80017a6:	e05c      	b.n	8001862 <change_speed+0xd6>
	}
	lcd_ShowStr(0, 10, "1. EASY", WHITE, BLACK, 16, 0);
 80017a8:	2300      	movs	r3, #0
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	2310      	movs	r3, #16
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	2300      	movs	r3, #0
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001870 <change_speed+0xe4>)
 80017ba:	210a      	movs	r1, #10
 80017bc:	2000      	movs	r0, #0
 80017be:	f001 fb69 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. MEDIUM", WHITE, BLACK, 16, 0);
 80017c2:	2300      	movs	r3, #0
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2310      	movs	r3, #16
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	2300      	movs	r3, #0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017d2:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <change_speed+0xe8>)
 80017d4:	211e      	movs	r1, #30
 80017d6:	2000      	movs	r0, #0
 80017d8:	f001 fb5c 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. HARD", WHITE, BLACK, 16, 0);
 80017dc:	2300      	movs	r3, #0
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	2310      	movs	r3, #16
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017ec:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <change_speed+0xec>)
 80017ee:	2132      	movs	r1, #50	@ 0x32
 80017f0:	2000      	movs	r0, #0
 80017f2:	f001 fb4f 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(0, 70, "E. EXIT", WHITE, BLACK, 16, 0);
 80017f6:	2300      	movs	r3, #0
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2310      	movs	r3, #16
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001806:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <change_speed+0xf0>)
 8001808:	2146      	movs	r1, #70	@ 0x46
 800180a:	2000      	movs	r0, #0
 800180c:	f001 fb42 	bl	8002e94 <lcd_ShowStr>

	if(button_count[0] == 1){
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <change_speed+0xdc>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d109      	bne.n	800182c <change_speed+0xa0>
		speed = 1000;
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <change_speed+0xf4>)
 800181a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800181e:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001820:	2000      	movs	r0, #0
 8001822:	f000 fdc5 	bl	80023b0 <lcd_Clear>
		status = INIT;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <change_speed+0xe0>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	}
	if(button_count[1] == 1){
 800182c:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <change_speed+0xdc>)
 800182e:	885b      	ldrh	r3, [r3, #2]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d109      	bne.n	8001848 <change_speed+0xbc>
		speed = 500;
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <change_speed+0xf4>)
 8001836:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800183a:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 fdb7 	bl	80023b0 <lcd_Clear>
		status = INIT;
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <change_speed+0xe0>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
	}
	if(button_count[2] == 1){
 8001848:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <change_speed+0xdc>)
 800184a:	889b      	ldrh	r3, [r3, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d108      	bne.n	8001862 <change_speed+0xd6>
		speed = 100;
 8001850:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <change_speed+0xf4>)
 8001852:	2264      	movs	r2, #100	@ 0x64
 8001854:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001856:	2000      	movs	r0, #0
 8001858:	f000 fdaa 	bl	80023b0 <lcd_Clear>
		status = INIT;
 800185c:	4b03      	ldr	r3, [pc, #12]	@ (800186c <change_speed+0xe0>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
	}
}
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200001ac 	.word	0x200001ac
 800186c:	200001d0 	.word	0x200001d0
 8001870:	0800d9c4 	.word	0x0800d9c4
 8001874:	0800d9cc 	.word	0x0800d9cc
 8001878:	0800d9d8 	.word	0x0800d9d8
 800187c:	0800d9bc 	.word	0x0800d9bc
 8001880:	20000000 	.word	0x20000000

08001884 <displayLeaderBoard>:

void displayLeaderBoard(struct player *head){
 8001884:	b580      	push	{r7, lr}
 8001886:	b0a0      	sub	sp, #128	@ 0x80
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
	struct player *temp = head;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	677b      	str	r3, [r7, #116]	@ 0x74
	int count_leaderboard = 1;
 8001890:	2301      	movs	r3, #1
 8001892:	673b      	str	r3, [r7, #112]	@ 0x70
	uart_EspSendString("Leaderboard :\n");
 8001894:	482e      	ldr	r0, [pc, #184]	@ (8001950 <displayLeaderBoard+0xcc>)
 8001896:	f004 fc7d 	bl	8006194 <uart_EspSendString>
	while(temp != NULL){
 800189a:	e04c      	b.n	8001936 <displayLeaderBoard+0xb2>
		if(count_leaderboard < 7){
 800189c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800189e:	2b06      	cmp	r3, #6
 80018a0:	dc4d      	bgt.n	800193e <displayLeaderBoard+0xba>
		char res[100];
		if(temp->player_mode == NORMAL)
 80018a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <displayLeaderBoard+0x40>
			sprintf(res, "#%d ID: %d, score: %d, mode : NORMAL\n", count_leaderboard, temp->player_ID, temp->player_score);
 80018aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f107 000c 	add.w	r0, r7, #12
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018bc:	4925      	ldr	r1, [pc, #148]	@ (8001954 <displayLeaderBoard+0xd0>)
 80018be:	f00a ff47 	bl	800c750 <siprintf>
 80018c2:	e02d      	b.n	8001920 <displayLeaderBoard+0x9c>
		else if(temp->player_mode == WALL)
 80018c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d10c      	bne.n	80018e6 <displayLeaderBoard+0x62>
			sprintf(res, "#%d ID: %d, score: %d, mode : WALL\n", count_leaderboard, temp->player_ID, temp->player_score);
 80018cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f107 000c 	add.w	r0, r7, #12
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80018de:	491e      	ldr	r1, [pc, #120]	@ (8001958 <displayLeaderBoard+0xd4>)
 80018e0:	f00a ff36 	bl	800c750 <siprintf>
 80018e4:	e01c      	b.n	8001920 <displayLeaderBoard+0x9c>
		else if(temp->player_mode == WALLS)
 80018e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d10c      	bne.n	8001908 <displayLeaderBoard+0x84>
			sprintf(res, "#%d ID: %d, score: %d, mode : WALLS\n", count_leaderboard, temp->player_ID, temp->player_score);
 80018ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f107 000c 	add.w	r0, r7, #12
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001900:	4916      	ldr	r1, [pc, #88]	@ (800195c <displayLeaderBoard+0xd8>)
 8001902:	f00a ff25 	bl	800c750 <siprintf>
 8001906:	e00b      	b.n	8001920 <displayLeaderBoard+0x9c>
		else
			sprintf(res, "#%d ID: %d, score: %d, mode : TIMER\n", count_leaderboard, temp->player_ID, temp->player_score);
 8001908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f107 000c 	add.w	r0, r7, #12
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4613      	mov	r3, r2
 8001918:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800191a:	4911      	ldr	r1, [pc, #68]	@ (8001960 <displayLeaderBoard+0xdc>)
 800191c:	f00a ff18 	bl	800c750 <siprintf>
		uart_EspSendString(res);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4618      	mov	r0, r3
 8001926:	f004 fc35 	bl	8006194 <uart_EspSendString>
		count_leaderboard++;
 800192a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800192c:	3301      	adds	r3, #1
 800192e:	673b      	str	r3, [r7, #112]	@ 0x70
		temp = temp -> next;
 8001930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	677b      	str	r3, [r7, #116]	@ 0x74
	while(temp != NULL){
 8001936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1af      	bne.n	800189c <displayLeaderBoard+0x18>
 800193c:	e000      	b.n	8001940 <displayLeaderBoard+0xbc>
		}else
			break;
 800193e:	bf00      	nop
	}
	uart_EspSendString("/");
 8001940:	4808      	ldr	r0, [pc, #32]	@ (8001964 <displayLeaderBoard+0xe0>)
 8001942:	f004 fc27 	bl	8006194 <uart_EspSendString>
}
 8001946:	bf00      	nop
 8001948:	3778      	adds	r7, #120	@ 0x78
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800d9e0 	.word	0x0800d9e0
 8001954:	0800d9f0 	.word	0x0800d9f0
 8001958:	0800da18 	.word	0x0800da18
 800195c:	0800da3c 	.word	0x0800da3c
 8001960:	0800da64 	.word	0x0800da64
 8001964:	0800da8c 	.word	0x0800da8c

08001968 <fsm_machine>:

void fsm_machine(){
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196a:	b09f      	sub	sp, #124	@ 0x7c
 800196c:	af04      	add	r7, sp, #16
	switch (status) {
 800196e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <fsm_machine+0xf0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b04      	cmp	r3, #4
 8001974:	f200 8228 	bhi.w	8001dc8 <fsm_machine+0x460>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <fsm_machine+0x18>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	080019a1 	.word	0x080019a1
 8001984:	08001a2f 	.word	0x08001a2f
 8001988:	08001d45 	.word	0x08001d45
 800198c:	08001995 	.word	0x08001995
 8001990:	0800199b 	.word	0x0800199b
	case CHANGE_MODE:
		change_mode();
 8001994:	f7ff fe64 	bl	8001660 <change_mode>
		break;
 8001998:	e21d      	b.n	8001dd6 <fsm_machine+0x46e>
	case CHANGE_SPEED:
		change_speed();
 800199a:	f7ff fef7 	bl	800178c <change_speed>
		break;
 800199e:	e21a      	b.n	8001dd6 <fsm_machine+0x46e>
	case INIT:
		screen_init();
 80019a0:	f001 fe5a 	bl	8003658 <screen_init>
		enter_ID();
 80019a4:	f7ff fdb8 	bl	8001518 <enter_ID>
		//test_Adc();

		if(button_count[14] == 1){
 80019a8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <fsm_machine+0xf4>)
 80019aa:	8b9b      	ldrh	r3, [r3, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <fsm_machine+0x54>
			lcd_Clear(BLACK);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 fcfd 	bl	80023b0 <lcd_Clear>
			status = CHANGE_MODE;
 80019b6:	4b28      	ldr	r3, [pc, #160]	@ (8001a58 <fsm_machine+0xf0>)
 80019b8:	2203      	movs	r2, #3
 80019ba:	601a      	str	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <fsm_machine+0xf4>)
 80019be:	8b1b      	ldrh	r3, [r3, #24]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d105      	bne.n	80019d0 <fsm_machine+0x68>
			lcd_Clear(BLACK);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 fcf3 	bl	80023b0 <lcd_Clear>
			status = CHANGE_SPEED;
 80019ca:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <fsm_machine+0xf0>)
 80019cc:	2204      	movs	r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
		}
		if(button_count[15] == 1){
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <fsm_machine+0xf4>)
 80019d2:	8bdb      	ldrh	r3, [r3, #30]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d104      	bne.n	80019e2 <fsm_machine+0x7a>
			displayLeaderBoard(leaderboard);
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <fsm_machine+0xf8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff51 	bl	8001884 <displayLeaderBoard>
		}

		if(isButtonStart()){
 80019e2:	f004 faef 	bl	8005fc4 <isButtonStart>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 81ef 	beq.w	8001dcc <fsm_machine+0x464>
			status = PLAY;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <fsm_machine+0xf0>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//gui len Wifi
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <fsm_machine+0xfc>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <fsm_machine+0x100>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	1d38      	adds	r0, r7, #4
 80019fe:	491b      	ldr	r1, [pc, #108]	@ (8001a6c <fsm_machine+0x104>)
 8001a00:	f00a fea6 	bl	800c750 <siprintf>
			uart_EspSendString(res);
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fbc4 	bl	8006194 <uart_EspSendString>
			count = 0;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <fsm_machine+0x108>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 fccc 	bl	80023b0 <lcd_Clear>
			re_init();
 8001a18:	f002 fc64 	bl	80042e4 <re_init>
			screen_play();
 8001a1c:	f001 ff22 	bl	8003864 <screen_play>
			fsm_mode();
 8001a20:	f7ff fcf4 	bl	800140c <fsm_mode>
			setTimer4(1000);
 8001a24:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a28:	f002 ff86 	bl	8004938 <setTimer4>
		}
		break;
 8001a2c:	e1ce      	b.n	8001dcc <fsm_machine+0x464>
	case PLAY:
		if(flag_timer4 == 1){
 8001a2e:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <fsm_machine+0x10c>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	f040 80b3 	bne.w	8001b9e <fsm_machine+0x236>
			setTimer4(1000);
 8001a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a3c:	f002 ff7c 	bl	8004938 <setTimer4>
			if(colon == 0){
 8001a40:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <fsm_machine+0x110>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d119      	bne.n	8001a7c <fsm_machine+0x114>
				led7_SetColon(1);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f001 fb81 	bl	8003150 <led7_SetColon>
				colon = 1;
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <fsm_machine+0x110>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e018      	b.n	8001a88 <fsm_machine+0x120>
 8001a56:	bf00      	nop
 8001a58:	200001d0 	.word	0x200001d0
 8001a5c:	200001ac 	.word	0x200001ac
 8001a60:	200001fc 	.word	0x200001fc
 8001a64:	200001d4 	.word	0x200001d4
 8001a68:	20000004 	.word	0x20000004
 8001a6c:	0800da90 	.word	0x0800da90
 8001a70:	200001dc 	.word	0x200001dc
 8001a74:	20000b28 	.word	0x20000b28
 8001a78:	200001f4 	.word	0x200001f4
			}else{
				led7_SetColon(0);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f001 fb67 	bl	8003150 <led7_SetColon>
				colon = 0;
 8001a82:	4b98      	ldr	r3, [pc, #608]	@ (8001ce4 <fsm_machine+0x37c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
			}
			count++;
 8001a88:	4b97      	ldr	r3, [pc, #604]	@ (8001ce8 <fsm_machine+0x380>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	4a96      	ldr	r2, [pc, #600]	@ (8001ce8 <fsm_machine+0x380>)
 8001a90:	6013      	str	r3, [r2, #0]
			timer = count;
 8001a92:	4b95      	ldr	r3, [pc, #596]	@ (8001ce8 <fsm_machine+0x380>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a95      	ldr	r2, [pc, #596]	@ (8001cec <fsm_machine+0x384>)
 8001a98:	6013      	str	r3, [r2, #0]
			if(wall == 1){
 8001a9a:	4b95      	ldr	r3, [pc, #596]	@ (8001cf0 <fsm_machine+0x388>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d115      	bne.n	8001ace <fsm_machine+0x166>
				if(count%5 == 0){
 8001aa2:	4b91      	ldr	r3, [pc, #580]	@ (8001ce8 <fsm_machine+0x380>)
 8001aa4:	6819      	ldr	r1, [r3, #0]
 8001aa6:	4b93      	ldr	r3, [pc, #588]	@ (8001cf4 <fsm_machine+0x38c>)
 8001aa8:	fb83 2301 	smull	r2, r3, r3, r1
 8001aac:	105a      	asrs	r2, r3, #1
 8001aae:	17cb      	asrs	r3, r1, #31
 8001ab0:	1ad2      	subs	r2, r2, r3
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	1aca      	subs	r2, r1, r3
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	d107      	bne.n	8001ace <fsm_machine+0x166>
					if(walls == 0){
 8001abe:	4b8e      	ldr	r3, [pc, #568]	@ (8001cf8 <fsm_machine+0x390>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <fsm_machine+0x162>
						delete_wall();
 8001ac6:	f002 fad5 	bl	8004074 <delete_wall>
					}
					spawn_wall();
 8001aca:	f002 fc81 	bl	80043d0 <spawn_wall>
				}
			}
			if(mode == TIMER){
 8001ace:	4b8b      	ldr	r3, [pc, #556]	@ (8001cfc <fsm_machine+0x394>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d108      	bne.n	8001ae8 <fsm_machine+0x180>
				countdown--;
 8001ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8001d00 <fsm_machine+0x398>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	4a88      	ldr	r2, [pc, #544]	@ (8001d00 <fsm_machine+0x398>)
 8001ade:	6013      	str	r3, [r2, #0]
				timer = countdown;
 8001ae0:	4b87      	ldr	r3, [pc, #540]	@ (8001d00 <fsm_machine+0x398>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a81      	ldr	r2, [pc, #516]	@ (8001cec <fsm_machine+0x384>)
 8001ae6:	6013      	str	r3, [r2, #0]
			}
			led7_SetDigit((timer%60)%10, 3, 0);
 8001ae8:	4b80      	ldr	r3, [pc, #512]	@ (8001cec <fsm_machine+0x384>)
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	4b85      	ldr	r3, [pc, #532]	@ (8001d04 <fsm_machine+0x39c>)
 8001aee:	fb83 2301 	smull	r2, r3, r3, r1
 8001af2:	440b      	add	r3, r1
 8001af4:	115a      	asrs	r2, r3, #5
 8001af6:	17cb      	asrs	r3, r1, #31
 8001af8:	1ad2      	subs	r2, r2, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	011b      	lsls	r3, r3, #4
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	1aca      	subs	r2, r1, r3
 8001b04:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf4 <fsm_machine+0x38c>)
 8001b06:	fb83 1302 	smull	r1, r3, r3, r2
 8001b0a:	1099      	asrs	r1, r3, #2
 8001b0c:	17d3      	asrs	r3, r2, #31
 8001b0e:	1ac8      	subs	r0, r1, r3
 8001b10:	4603      	mov	r3, r0
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4403      	add	r3, r0
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	1ad0      	subs	r0, r2, r3
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2103      	movs	r1, #3
 8001b1e:	f001 faf3 	bl	8003108 <led7_SetDigit>
			led7_SetDigit((timer%60)/10, 2, 0);
 8001b22:	4b72      	ldr	r3, [pc, #456]	@ (8001cec <fsm_machine+0x384>)
 8001b24:	6819      	ldr	r1, [r3, #0]
 8001b26:	4b77      	ldr	r3, [pc, #476]	@ (8001d04 <fsm_machine+0x39c>)
 8001b28:	fb83 2301 	smull	r2, r3, r3, r1
 8001b2c:	440b      	add	r3, r1
 8001b2e:	115a      	asrs	r2, r3, #5
 8001b30:	17cb      	asrs	r3, r1, #31
 8001b32:	1ad2      	subs	r2, r2, r3
 8001b34:	4613      	mov	r3, r2
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	1aca      	subs	r2, r1, r3
 8001b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf4 <fsm_machine+0x38c>)
 8001b40:	fb83 1302 	smull	r1, r3, r3, r2
 8001b44:	1099      	asrs	r1, r3, #2
 8001b46:	17d3      	asrs	r3, r2, #31
 8001b48:	1acb      	subs	r3, r1, r3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 fada 	bl	8003108 <led7_SetDigit>
			led7_SetDigit((timer/60)%10, 1, 0);
 8001b54:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <fsm_machine+0x384>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6a      	ldr	r2, [pc, #424]	@ (8001d04 <fsm_machine+0x39c>)
 8001b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b5e:	441a      	add	r2, r3
 8001b60:	1152      	asrs	r2, r2, #5
 8001b62:	17db      	asrs	r3, r3, #31
 8001b64:	1ad2      	subs	r2, r2, r3
 8001b66:	4b63      	ldr	r3, [pc, #396]	@ (8001cf4 <fsm_machine+0x38c>)
 8001b68:	fb83 1302 	smull	r1, r3, r3, r2
 8001b6c:	1099      	asrs	r1, r3, #2
 8001b6e:	17d3      	asrs	r3, r2, #31
 8001b70:	1ac8      	subs	r0, r1, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4403      	add	r3, r0
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	1ad0      	subs	r0, r2, r3
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2101      	movs	r1, #1
 8001b80:	f001 fac2 	bl	8003108 <led7_SetDigit>
			led7_SetDigit((timer/60)/10, 0, 0);
 8001b84:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <fsm_machine+0x384>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <fsm_machine+0x3a0>)
 8001b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b8e:	1192      	asrs	r2, r2, #6
 8001b90:	17db      	asrs	r3, r3, #31
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f001 fab5 	bl	8003108 <led7_SetDigit>
		}
		if(isButtonUp()){
 8001b9e:	f004 fa35 	bl	800600c <isButtonUp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <fsm_machine+0x258>
			sw_up = 0;
 8001ba8:	4b58      	ldr	r3, [pc, #352]	@ (8001d0c <fsm_machine+0x3a4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001bae:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <fsm_machine+0x3a8>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001bb4:	4b57      	ldr	r3, [pc, #348]	@ (8001d14 <fsm_machine+0x3ac>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001bba:	4b57      	ldr	r3, [pc, #348]	@ (8001d18 <fsm_machine+0x3b0>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonDown()){
 8001bc0:	f004 fa47 	bl	8006052 <isButtonDown>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <fsm_machine+0x27a>
			sw_up = 1;
 8001bca:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <fsm_machine+0x3a4>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
			sw_down = 0;
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8001d10 <fsm_machine+0x3a8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d14 <fsm_machine+0x3ac>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8001d18 <fsm_machine+0x3b0>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonLeft()){
 8001be2:	f004 fa5b 	bl	800609c <isButtonLeft>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <fsm_machine+0x29c>
			sw_up = 1;
 8001bec:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <fsm_machine+0x3a4>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001bf2:	4b47      	ldr	r3, [pc, #284]	@ (8001d10 <fsm_machine+0x3a8>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
			sw_left = 0;
 8001bf8:	4b46      	ldr	r3, [pc, #280]	@ (8001d14 <fsm_machine+0x3ac>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001bfe:	4b46      	ldr	r3, [pc, #280]	@ (8001d18 <fsm_machine+0x3b0>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonRight()){
 8001c04:	f004 fa6f 	bl	80060e6 <isButtonRight>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <fsm_machine+0x2be>
			sw_up = 1;
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d0c <fsm_machine+0x3a4>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001c14:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <fsm_machine+0x3a8>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <fsm_machine+0x3ac>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
			sw_right = 0;
 8001c20:	4b3d      	ldr	r3, [pc, #244]	@ (8001d18 <fsm_machine+0x3b0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		wait_check();
 8001c26:	f002 fdaf 	bl	8004788 <wait_check>
		update_grid();
 8001c2a:	f002 f985 	bl	8003f38 <update_grid>
		if(flag_timer3 == 1){
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d1c <fsm_machine+0x3b4>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d10b      	bne.n	8001c4e <fsm_machine+0x2e6>
			//wait_check();
			setTimer3(speed);
 8001c36:	4b3a      	ldr	r3, [pc, #232]	@ (8001d20 <fsm_machine+0x3b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 fe5f 	bl	8004900 <setTimer3>
			move_snake();
 8001c42:	f002 fa77 	bl	8004134 <move_snake>
			//check_food();
			//check_collision();
			screen_score();
 8001c46:	f001 fe43 	bl	80038d0 <screen_score>
			update_grid();
 8001c4a:	f002 f975 	bl	8003f38 <update_grid>
		}
		if(lose == 1){
 8001c4e:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <fsm_machine+0x3bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	f040 80bc 	bne.w	8001dd0 <fsm_machine+0x468>
			status = GAME_OVER;
 8001c58:	4b33      	ldr	r3, [pc, #204]	@ (8001d28 <fsm_machine+0x3c0>)
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	601a      	str	r2, [r3, #0]
			addPlayer(&leaderboard, ID, score, mode);
 8001c5e:	4b33      	ldr	r3, [pc, #204]	@ (8001d2c <fsm_machine+0x3c4>)
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	4b33      	ldr	r3, [pc, #204]	@ (8001d30 <fsm_machine+0x3c8>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b24      	ldr	r3, [pc, #144]	@ (8001cfc <fsm_machine+0x394>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4831      	ldr	r0, [pc, #196]	@ (8001d34 <fsm_machine+0x3cc>)
 8001c6e:	f001 f975 	bl	8002f5c <addPlayer>
			send_flag = 1;
 8001c72:	4b31      	ldr	r3, [pc, #196]	@ (8001d38 <fsm_machine+0x3d0>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d was game over\nScore : %d\nTime : %d:%d %c", ID, score, count/60, count%60, sec);//STM32 -> wifi
 8001c78:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <fsm_machine+0x3c4>)
 8001c7a:	681d      	ldr	r5, [r3, #0]
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001d30 <fsm_machine+0x3c8>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461e      	mov	r6, r3
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <fsm_machine+0x380>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <fsm_machine+0x39c>)
 8001c88:	fb82 1203 	smull	r1, r2, r2, r3
 8001c8c:	441a      	add	r2, r3
 8001c8e:	1152      	asrs	r2, r2, #5
 8001c90:	17db      	asrs	r3, r3, #31
 8001c92:	1ad0      	subs	r0, r2, r3
 8001c94:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <fsm_machine+0x380>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <fsm_machine+0x39c>)
 8001c9a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	1159      	asrs	r1, r3, #5
 8001ca2:	17d3      	asrs	r3, r2, #31
 8001ca4:	1ac9      	subs	r1, r1, r3
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	1a5b      	subs	r3, r3, r1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	1ad1      	subs	r1, r2, r3
 8001cb0:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <fsm_machine+0x3d4>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	1d3c      	adds	r4, r7, #4
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	9101      	str	r1, [sp, #4]
 8001cba:	9000      	str	r0, [sp, #0]
 8001cbc:	4633      	mov	r3, r6
 8001cbe:	462a      	mov	r2, r5
 8001cc0:	491f      	ldr	r1, [pc, #124]	@ (8001d40 <fsm_machine+0x3d8>)
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f00a fd44 	bl	800c750 <siprintf>
			uart_EspSendString(res);
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fa62 	bl	8006194 <uart_EspSendString>
			send_flag =0;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <fsm_machine+0x3d0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f000 fb6a 	bl	80023b0 <lcd_Clear>
			lose = 0;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	@ (8001d24 <fsm_machine+0x3bc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
		}
		break;
 8001ce2:	e075      	b.n	8001dd0 <fsm_machine+0x468>
 8001ce4:	200001f4 	.word	0x200001f4
 8001ce8:	200001dc 	.word	0x200001dc
 8001cec:	200001e8 	.word	0x200001e8
 8001cf0:	200001e0 	.word	0x200001e0
 8001cf4:	66666667 	.word	0x66666667
 8001cf8:	200001e4 	.word	0x200001e4
 8001cfc:	200001d8 	.word	0x200001d8
 8001d00:	20000008 	.word	0x20000008
 8001d04:	88888889 	.word	0x88888889
 8001d08:	1b4e81b5 	.word	0x1b4e81b5
 8001d0c:	20000028 	.word	0x20000028
 8001d10:	2000002c 	.word	0x2000002c
 8001d14:	20000034 	.word	0x20000034
 8001d18:	20000030 	.word	0x20000030
 8001d1c:	20000b22 	.word	0x20000b22
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20000b18 	.word	0x20000b18
 8001d28:	200001d0 	.word	0x200001d0
 8001d2c:	200001d4 	.word	0x200001d4
 8001d30:	20000b14 	.word	0x20000b14
 8001d34:	200001fc 	.word	0x200001fc
 8001d38:	200001f8 	.word	0x200001f8
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	0800daa4 	.word	0x0800daa4
	case GAME_OVER:
		enter_ID();
 8001d44:	f7ff fbe8 	bl	8001518 <enter_ID>
		screen_game_over();
 8001d48:	f001 fdea 	bl	8003920 <screen_game_over>
		if(button_count[14] == 1){
 8001d4c:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <fsm_machine+0x478>)
 8001d4e:	8b9b      	ldrh	r3, [r3, #28]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <fsm_machine+0x3f8>
			lcd_Clear(BLACK);
 8001d54:	2000      	movs	r0, #0
 8001d56:	f000 fb2b 	bl	80023b0 <lcd_Clear>
			status = CHANGE_MODE;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <fsm_machine+0x47c>)
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	601a      	str	r2, [r3, #0]
		}

		if(button_count[12] == 1){
 8001d60:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <fsm_machine+0x478>)
 8001d62:	8b1b      	ldrh	r3, [r3, #24]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <fsm_machine+0x40c>
			lcd_Clear(BLACK);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f000 fb21 	bl	80023b0 <lcd_Clear>
			status = CHANGE_SPEED;
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <fsm_machine+0x47c>)
 8001d70:	2204      	movs	r2, #4
 8001d72:	601a      	str	r2, [r3, #0]
		}

		if(button_count[15] == 1){
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <fsm_machine+0x478>)
 8001d76:	8bdb      	ldrh	r3, [r3, #30]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d104      	bne.n	8001d86 <fsm_machine+0x41e>
			displayLeaderBoard(leaderboard);
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <fsm_machine+0x480>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fd7f 	bl	8001884 <displayLeaderBoard>
		}

		if(isButtonRestart()){
 8001d86:	f004 f9d3 	bl	8006130 <isButtonRestart>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <fsm_machine+0x46c>
//			status = INIT;
//			lcd_Clear(BLACK);
//			re_init();
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//STM32->Wifi
 8001d90:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <fsm_machine+0x484>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <fsm_machine+0x488>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	1d38      	adds	r0, r7, #4
 8001d9a:	4916      	ldr	r1, [pc, #88]	@ (8001df4 <fsm_machine+0x48c>)
 8001d9c:	f00a fcd8 	bl	800c750 <siprintf>
			uart_EspSendString(res);
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 f9f6 	bl	8006194 <uart_EspSendString>
			count = 0;
 8001da8:	4b13      	ldr	r3, [pc, #76]	@ (8001df8 <fsm_machine+0x490>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
			status = PLAY;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	@ (8001de4 <fsm_machine+0x47c>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 fafb 	bl	80023b0 <lcd_Clear>
			re_init();
 8001dba:	f002 fa93 	bl	80042e4 <re_init>
			screen_play();
 8001dbe:	f001 fd51 	bl	8003864 <screen_play>
			fsm_mode();
 8001dc2:	f7ff fb23 	bl	800140c <fsm_mode>
		}
		break;
 8001dc6:	e005      	b.n	8001dd4 <fsm_machine+0x46c>
	default:
		break;
 8001dc8:	bf00      	nop
 8001dca:	e004      	b.n	8001dd6 <fsm_machine+0x46e>
		break;
 8001dcc:	bf00      	nop
 8001dce:	e002      	b.n	8001dd6 <fsm_machine+0x46e>
		break;
 8001dd0:	bf00      	nop
 8001dd2:	e000      	b.n	8001dd6 <fsm_machine+0x46e>
		break;
 8001dd4:	bf00      	nop
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	376c      	adds	r7, #108	@ 0x6c
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200001ac 	.word	0x200001ac
 8001de4:	200001d0 	.word	0x200001d0
 8001de8:	200001fc 	.word	0x200001fc
 8001dec:	200001d4 	.word	0x200001d4
 8001df0:	20000004 	.word	0x20000004
 8001df4:	0800da90 	.word	0x0800da90
 8001df8:	200001dc 	.word	0x200001dc

08001dfc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	@ 0x38
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001e16:	463b      	mov	r3, r7
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001e28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e2a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001e2e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001e30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e32:	4a2e      	ldr	r2, [pc, #184]	@ (8001eec <MX_FSMC_Init+0xf0>)
 8001e34:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001e36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001e42:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001e48:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001e4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001e54:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001e5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001e60:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8001e8e:	230f      	movs	r3, #15
 8001e90:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001e92:	230f      	movs	r3, #15
 8001e94:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001e96:	233c      	movs	r3, #60	@ 0x3c
 8001e98:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8001ea2:	2311      	movs	r3, #17
 8001ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001eae:	230f      	movs	r3, #15
 8001eb0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001eba:	2310      	movs	r3, #16
 8001ebc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001ebe:	2311      	movs	r3, #17
 8001ec0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001ec6:	463a      	mov	r2, r7
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4806      	ldr	r0, [pc, #24]	@ (8001ee8 <MX_FSMC_Init+0xec>)
 8001ed0:	f008 f85c 	bl	8009f8c <HAL_SRAM_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001eda:	f001 fbb7 	bl	800364c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001ede:	bf00      	nop
 8001ee0:	3738      	adds	r7, #56	@ 0x38
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000200 	.word	0x20000200
 8001eec:	a0000104 	.word	0xa0000104

08001ef0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001f04:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <HAL_FSMC_MspInit+0x88>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d131      	bne.n	8001f70 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <HAL_FSMC_MspInit+0x88>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_FSMC_MspInit+0x8c>)
 8001f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f1a:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_FSMC_MspInit+0x8c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f22:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <HAL_FSMC_MspInit+0x8c>)
 8001f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001f2e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8001f32:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f40:	230c      	movs	r3, #12
 8001f42:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	4619      	mov	r1, r3
 8001f48:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <HAL_FSMC_MspInit+0x90>)
 8001f4a:	f005 fc37 	bl	80077bc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f4e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8001f52:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001f60:	230c      	movs	r3, #12
 8001f62:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	4806      	ldr	r0, [pc, #24]	@ (8001f84 <HAL_FSMC_MspInit+0x94>)
 8001f6a:	f005 fc27 	bl	80077bc <HAL_GPIO_Init>
 8001f6e:	e000      	b.n	8001f72 <HAL_FSMC_MspInit+0x82>
    return;
 8001f70:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000250 	.word	0x20000250
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40020c00 	.word	0x40020c00

08001f88 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001f90:	f7ff ffae 	bl	8001ef0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	@ 0x38
 8001fa0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	4b7e      	ldr	r3, [pc, #504]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a7d      	ldr	r2, [pc, #500]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b7b      	ldr	r3, [pc, #492]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	623b      	str	r3, [r7, #32]
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	4b77      	ldr	r3, [pc, #476]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a76      	ldr	r2, [pc, #472]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b74      	ldr	r3, [pc, #464]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	4b70      	ldr	r3, [pc, #448]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a6f      	ldr	r2, [pc, #444]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001ff4:	f043 0320 	orr.w	r3, r3, #32
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	4b69      	ldr	r3, [pc, #420]	@ (80021b0 <MX_GPIO_Init+0x214>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	4a68      	ldr	r2, [pc, #416]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002014:	6313      	str	r3, [r2, #48]	@ 0x30
 8002016:	4b66      	ldr	r3, [pc, #408]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b62      	ldr	r3, [pc, #392]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a61      	ldr	r2, [pc, #388]	@ (80021b0 <MX_GPIO_Init+0x214>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b5f      	ldr	r3, [pc, #380]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b5b      	ldr	r3, [pc, #364]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a5a      	ldr	r2, [pc, #360]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b58      	ldr	r3, [pc, #352]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b54      	ldr	r3, [pc, #336]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	4a53      	ldr	r2, [pc, #332]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6313      	str	r3, [r2, #48]	@ 0x30
 800206a:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <MX_GPIO_Init+0x214>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	4b4d      	ldr	r3, [pc, #308]	@ (80021b0 <MX_GPIO_Init+0x214>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	4a4c      	ldr	r2, [pc, #304]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002084:	6313      	str	r3, [r2, #48]	@ 0x30
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <MX_GPIO_Init+0x214>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	2170      	movs	r1, #112	@ 0x70
 8002096:	4847      	ldr	r0, [pc, #284]	@ (80021b4 <MX_GPIO_Init+0x218>)
 8002098:	f005 fd44 	bl	8007b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 80020a2:	4845      	ldr	r0, [pc, #276]	@ (80021b8 <MX_GPIO_Init+0x21c>)
 80020a4:	f005 fd3e 	bl	8007b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80020ae:	4843      	ldr	r0, [pc, #268]	@ (80021bc <MX_GPIO_Init+0x220>)
 80020b0:	f005 fd38 	bl	8007b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020ba:	4841      	ldr	r0, [pc, #260]	@ (80021c0 <MX_GPIO_Init+0x224>)
 80020bc:	f005 fd32 	bl	8007b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2108      	movs	r1, #8
 80020c4:	483f      	ldr	r0, [pc, #252]	@ (80021c4 <MX_GPIO_Init+0x228>)
 80020c6:	f005 fd2d 	bl	8007b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80020ca:	2370      	movs	r3, #112	@ 0x70
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ce:	2301      	movs	r3, #1
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020de:	4619      	mov	r1, r3
 80020e0:	4834      	ldr	r0, [pc, #208]	@ (80021b4 <MX_GPIO_Init+0x218>)
 80020e2:	f005 fb6b 	bl	80077bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80020e6:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ec:	2301      	movs	r3, #1
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fc:	4619      	mov	r1, r3
 80020fe:	482e      	ldr	r0, [pc, #184]	@ (80021b8 <MX_GPIO_Init+0x21c>)
 8002100:	f005 fb5c 	bl	80077bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8002104:	23c0      	movs	r3, #192	@ 0xc0
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002108:	2300      	movs	r3, #0
 800210a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	482a      	ldr	r0, [pc, #168]	@ (80021c0 <MX_GPIO_Init+0x224>)
 8002118:	f005 fb50 	bl	80077bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800211c:	2330      	movs	r3, #48	@ 0x30
 800211e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800212c:	4619      	mov	r1, r3
 800212e:	4822      	ldr	r0, [pc, #136]	@ (80021b8 <MX_GPIO_Init+0x21c>)
 8002130:	f005 fb44 	bl	80077bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002134:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213a:	2301      	movs	r3, #1
 800213c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2300      	movs	r3, #0
 8002144:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800214a:	4619      	mov	r1, r3
 800214c:	481b      	ldr	r0, [pc, #108]	@ (80021bc <MX_GPIO_Init+0x220>)
 800214e:	f005 fb35 	bl	80077bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8002152:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002158:	2300      	movs	r3, #0
 800215a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800215c:	2301      	movs	r3, #1
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002164:	4619      	mov	r1, r3
 8002166:	4814      	ldr	r0, [pc, #80]	@ (80021b8 <MX_GPIO_Init+0x21c>)
 8002168:	f005 fb28 	bl	80077bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800216c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002182:	4619      	mov	r1, r3
 8002184:	480e      	ldr	r0, [pc, #56]	@ (80021c0 <MX_GPIO_Init+0x224>)
 8002186:	f005 fb19 	bl	80077bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800218a:	2308      	movs	r3, #8
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218e:	2301      	movs	r3, #1
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800219a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800219e:	4619      	mov	r1, r3
 80021a0:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <MX_GPIO_Init+0x228>)
 80021a2:	f005 fb0b 	bl	80077bc <HAL_GPIO_Init>

}
 80021a6:	bf00      	nop
 80021a8:	3738      	adds	r7, #56	@ 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40021800 	.word	0x40021800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020c00 	.word	0x40020c00

080021c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021ce:	4a13      	ldr	r2, [pc, #76]	@ (800221c <MX_I2C1_Init+0x54>)
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <MX_I2C1_Init+0x58>)
 80021d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	@ (8002218 <MX_I2C1_Init+0x50>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_I2C1_Init+0x50>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <MX_I2C1_Init+0x50>)
 8002206:	f005 fcc1 	bl	8007b8c <HAL_I2C_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002210:	f001 fa1c 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000254 	.word	0x20000254
 800221c:	40005400 	.word	0x40005400
 8002220:	000186a0 	.word	0x000186a0

08002224 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	@ 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a19      	ldr	r2, [pc, #100]	@ (80022a8 <HAL_I2C_MspInit+0x84>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d12b      	bne.n	800229e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <HAL_I2C_MspInit+0x88>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_I2C_MspInit+0x88>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	6313      	str	r3, [r2, #48]	@ 0x30
 8002256:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <HAL_I2C_MspInit+0x88>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002262:	23c0      	movs	r3, #192	@ 0xc0
 8002264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002266:	2312      	movs	r3, #18
 8002268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226e:	2303      	movs	r3, #3
 8002270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002272:	2304      	movs	r3, #4
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4619      	mov	r1, r3
 800227c:	480c      	ldr	r0, [pc, #48]	@ (80022b0 <HAL_I2C_MspInit+0x8c>)
 800227e:	f005 fa9d 	bl	80077bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_I2C_MspInit+0x88>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <HAL_I2C_MspInit+0x88>)
 800228c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002290:	6413      	str	r3, [r2, #64]	@ 0x40
 8002292:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <HAL_I2C_MspInit+0x88>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40005400 	.word	0x40005400
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40020400 	.word	0x40020400

080022b4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80022be:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <LCD_WR_REG+0x1c>)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	8013      	strh	r3, [r2, #0]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	600ffffe 	.word	0x600ffffe

080022d4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80022de:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <LCD_WR_DATA+0x1c>)
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	8053      	strh	r3, [r2, #2]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	600ffffe 	.word	0x600ffffe

080022f4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <LCD_RD_DATA+0x20>)
 80022fc:	885b      	ldrh	r3, [r3, #2]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	b29b      	uxth	r3, r3
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	600ffffe 	.word	0x600ffffe

08002318 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4604      	mov	r4, r0
 8002320:	4608      	mov	r0, r1
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	4623      	mov	r3, r4
 8002328:	80fb      	strh	r3, [r7, #6]
 800232a:	4603      	mov	r3, r0
 800232c:	80bb      	strh	r3, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	807b      	strh	r3, [r7, #2]
 8002332:	4613      	mov	r3, r2
 8002334:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8002336:	202a      	movs	r0, #42	@ 0x2a
 8002338:	f7ff ffbc 	bl	80022b4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ffc6 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	b29b      	uxth	r3, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ffc0 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b29b      	uxth	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ffba 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	b29b      	uxth	r3, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ffb4 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800236c:	202b      	movs	r0, #43	@ 0x2b
 800236e:	f7ff ffa1 	bl	80022b4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002372:	88bb      	ldrh	r3, [r7, #4]
 8002374:	0a1b      	lsrs	r3, r3, #8
 8002376:	b29b      	uxth	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ffab 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800237e:	88bb      	ldrh	r3, [r7, #4]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	b29b      	uxth	r3, r3
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ffa5 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800238a:	883b      	ldrh	r3, [r7, #0]
 800238c:	0a1b      	lsrs	r3, r3, #8
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff9f 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8002396:	883b      	ldrh	r3, [r7, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	b29b      	uxth	r3, r3
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff99 	bl	80022d4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80023a2:	202c      	movs	r0, #44	@ 0x2c
 80023a4:	f7ff ff86 	bl	80022b4 <LCD_WR_REG>
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80023ba:	4b15      	ldr	r3, [pc, #84]	@ (8002410 <lcd_Clear+0x60>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	4b13      	ldr	r3, [pc, #76]	@ (8002410 <lcd_Clear+0x60>)
 80023c4:	885b      	ldrh	r3, [r3, #2]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff ffa3 	bl	8002318 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80023d2:	2300      	movs	r3, #0
 80023d4:	81fb      	strh	r3, [r7, #14]
 80023d6:	e011      	b.n	80023fc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80023d8:	2300      	movs	r3, #0
 80023da:	81bb      	strh	r3, [r7, #12]
 80023dc:	e006      	b.n	80023ec <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff77 	bl	80022d4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80023e6:	89bb      	ldrh	r3, [r7, #12]
 80023e8:	3301      	adds	r3, #1
 80023ea:	81bb      	strh	r3, [r7, #12]
 80023ec:	4b08      	ldr	r3, [pc, #32]	@ (8002410 <lcd_Clear+0x60>)
 80023ee:	885b      	ldrh	r3, [r3, #2]
 80023f0:	89ba      	ldrh	r2, [r7, #12]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3f3      	bcc.n	80023de <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	3301      	adds	r3, #1
 80023fa:	81fb      	strh	r3, [r7, #14]
 80023fc:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <lcd_Clear+0x60>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	89fa      	ldrh	r2, [r7, #14]
 8002402:	429a      	cmp	r2, r3
 8002404:	d3e8      	bcc.n	80023d8 <lcd_Clear+0x28>
		}
	}
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200002a8 	.word	0x200002a8

08002414 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	4604      	mov	r4, r0
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4623      	mov	r3, r4
 8002424:	80fb      	strh	r3, [r7, #6]
 8002426:	4603      	mov	r3, r0
 8002428:	80bb      	strh	r3, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	807b      	strh	r3, [r7, #2]
 800242e:	4613      	mov	r3, r2
 8002430:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	883b      	ldrh	r3, [r7, #0]
 800243a:	3b01      	subs	r3, #1
 800243c:	b29b      	uxth	r3, r3
 800243e:	88b9      	ldrh	r1, [r7, #4]
 8002440:	88f8      	ldrh	r0, [r7, #6]
 8002442:	f7ff ff69 	bl	8002318 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8002446:	88bb      	ldrh	r3, [r7, #4]
 8002448:	81fb      	strh	r3, [r7, #14]
 800244a:	e010      	b.n	800246e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	81bb      	strh	r3, [r7, #12]
 8002450:	e006      	b.n	8002460 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002452:	8c3b      	ldrh	r3, [r7, #32]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff3d 	bl	80022d4 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800245a:	89bb      	ldrh	r3, [r7, #12]
 800245c:	3301      	adds	r3, #1
 800245e:	81bb      	strh	r3, [r7, #12]
 8002460:	89ba      	ldrh	r2, [r7, #12]
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3f4      	bcc.n	8002452 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	3301      	adds	r3, #1
 800246c:	81fb      	strh	r3, [r7, #14]
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	883b      	ldrh	r3, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d3ea      	bcc.n	800244c <lcd_Fill+0x38>
		}
	}
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
 800248a:	460b      	mov	r3, r1
 800248c:	80bb      	strh	r3, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002492:	88bb      	ldrh	r3, [r7, #4]
 8002494:	88fa      	ldrh	r2, [r7, #6]
 8002496:	88b9      	ldrh	r1, [r7, #4]
 8002498:	88f8      	ldrh	r0, [r7, #6]
 800249a:	f7ff ff3d 	bl	8002318 <lcd_AddressSet>
	LCD_WR_DATA(color);
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff17 	bl	80022d4 <LCD_WR_DATA>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80024ae:	b590      	push	{r4, r7, lr}
 80024b0:	b08d      	sub	sp, #52	@ 0x34
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4604      	mov	r4, r0
 80024b6:	4608      	mov	r0, r1
 80024b8:	4611      	mov	r1, r2
 80024ba:	461a      	mov	r2, r3
 80024bc:	4623      	mov	r3, r4
 80024be:	80fb      	strh	r3, [r7, #6]
 80024c0:	4603      	mov	r3, r0
 80024c2:	80bb      	strh	r3, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d0:	2300      	movs	r3, #0
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80024d4:	887a      	ldrh	r2, [r7, #2]
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80024dc:	883a      	ldrh	r2, [r7, #0]
 80024de:	88bb      	ldrh	r3, [r7, #4]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80024e8:	88bb      	ldrh	r3, [r7, #4]
 80024ea:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	dd02      	ble.n	80024f8 <lcd_DrawLine+0x4a>
 80024f2:	2301      	movs	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e00b      	b.n	8002510 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <lcd_DrawLine+0x56>
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e005      	b.n	8002510 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8002504:	f04f 33ff 	mov.w	r3, #4294967295
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	425b      	negs	r3, r3
 800250e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	dd02      	ble.n	800251c <lcd_DrawLine+0x6e>
 8002516:	2301      	movs	r3, #1
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	e00b      	b.n	8002534 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <lcd_DrawLine+0x7a>
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	e005      	b.n	8002534 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8002528:	f04f 33ff 	mov.w	r3, #4294967295
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	425b      	negs	r3, r3
 8002532:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	429a      	cmp	r2, r3
 800253a:	dd02      	ble.n	8002542 <lcd_DrawLine+0x94>
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e001      	b.n	8002546 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8002546:	2300      	movs	r3, #0
 8002548:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800254a:	e02b      	b.n	80025a4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	b29b      	uxth	r3, r3
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	b291      	uxth	r1, r2
 8002554:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff91 	bl	8002480 <lcd_DrawPoint>
		xerr+=delta_x;
 800255e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	4413      	add	r3, r2
 8002564:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8002566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	4413      	add	r3, r2
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 800256e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	429a      	cmp	r2, r3
 8002574:	dd07      	ble.n	8002586 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8002576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	4413      	add	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8002586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	429a      	cmp	r2, r3
 800258c:	dd07      	ble.n	800259e <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 800258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4413      	add	r3, r2
 800259c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 800259e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025a0:	3301      	adds	r3, #1
 80025a2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80025a4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dacf      	bge.n	800254c <lcd_DrawLine+0x9e>
		}
	}
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3734      	adds	r7, #52	@ 0x34
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd90      	pop	{r4, r7, pc}
	...

080025b8 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	80fb      	strh	r3, [r7, #6]
 80025ca:	4603      	mov	r3, r0
 80025cc:	80bb      	strh	r3, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	70fb      	strb	r3, [r7, #3]
 80025d2:	4613      	mov	r3, r2
 80025d4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80025d6:	2300      	movs	r3, #0
 80025d8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80025de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	bf14      	ite	ne
 80025fa:	2301      	movne	r3, #1
 80025fc:	2300      	moveq	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4413      	add	r3, r2
 8002602:	b29a      	uxth	r2, r3
 8002604:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002608:	b29b      	uxth	r3, r3
 800260a:	fb12 f303 	smulbb	r3, r2, r3
 800260e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	3b20      	subs	r3, #32
 8002614:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	b29a      	uxth	r2, r3
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	4413      	add	r3, r2
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29c      	uxth	r4, r3
 8002624:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002628:	b29a      	uxth	r2, r3
 800262a:	88bb      	ldrh	r3, [r7, #4]
 800262c:	4413      	add	r3, r2
 800262e:	b29b      	uxth	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b29b      	uxth	r3, r3
 8002634:	88b9      	ldrh	r1, [r7, #4]
 8002636:	88f8      	ldrh	r0, [r7, #6]
 8002638:	4622      	mov	r2, r4
 800263a:	f7ff fe6d 	bl	8002318 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800263e:	2300      	movs	r3, #0
 8002640:	827b      	strh	r3, [r7, #18]
 8002642:	e07a      	b.n	800273a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002644:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d028      	beq.n	800269e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 800264c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002650:	2b10      	cmp	r3, #16
 8002652:	d108      	bne.n	8002666 <lcd_ShowChar+0xae>
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	8a7b      	ldrh	r3, [r7, #18]
 8002658:	493c      	ldr	r1, [pc, #240]	@ (800274c <lcd_ShowChar+0x194>)
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	440a      	add	r2, r1
 800265e:	4413      	add	r3, r2
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	75fb      	strb	r3, [r7, #23]
 8002664:	e01b      	b.n	800269e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8002666:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800266a:	2b18      	cmp	r3, #24
 800266c:	d10b      	bne.n	8002686 <lcd_ShowChar+0xce>
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	8a79      	ldrh	r1, [r7, #18]
 8002672:	4837      	ldr	r0, [pc, #220]	@ (8002750 <lcd_ShowChar+0x198>)
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4403      	add	r3, r0
 800267e:	440b      	add	r3, r1
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	75fb      	strb	r3, [r7, #23]
 8002684:	e00b      	b.n	800269e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8002686:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800268a:	2b20      	cmp	r3, #32
 800268c:	d15a      	bne.n	8002744 <lcd_ShowChar+0x18c>
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	8a7b      	ldrh	r3, [r7, #18]
 8002692:	4930      	ldr	r1, [pc, #192]	@ (8002754 <lcd_ShowChar+0x19c>)
 8002694:	0192      	lsls	r2, r2, #6
 8002696:	440a      	add	r2, r1
 8002698:	4413      	add	r3, r2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800269e:	2300      	movs	r3, #0
 80026a0:	75bb      	strb	r3, [r7, #22]
 80026a2:	e044      	b.n	800272e <lcd_ShowChar+0x176>
		{
			if(!mode)
 80026a4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d120      	bne.n	80026ee <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 80026ac:	7dfa      	ldrb	r2, [r7, #23]
 80026ae:	7dbb      	ldrb	r3, [r7, #22]
 80026b0:	fa42 f303 	asr.w	r3, r2, r3
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <lcd_ShowChar+0x10e>
 80026bc:	883b      	ldrh	r3, [r7, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe08 	bl	80022d4 <LCD_WR_DATA>
 80026c4:	e003      	b.n	80026ce <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 80026c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fe03 	bl	80022d4 <LCD_WR_DATA>
				m++;
 80026ce:	7d7b      	ldrb	r3, [r7, #21]
 80026d0:	3301      	adds	r3, #1
 80026d2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80026d4:	7d7b      	ldrb	r3, [r7, #21]
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80026dc:	fb01 f202 	mul.w	r2, r1, r2
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d11f      	bne.n	8002728 <lcd_ShowChar+0x170>
				{
					m=0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	757b      	strb	r3, [r7, #21]
					break;
 80026ec:	e022      	b.n	8002734 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80026ee:	7dfa      	ldrb	r2, [r7, #23]
 80026f0:	7dbb      	ldrb	r3, [r7, #22]
 80026f2:	fa42 f303 	asr.w	r3, r2, r3
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <lcd_ShowChar+0x152>
 80026fe:	883a      	ldrh	r2, [r7, #0]
 8002700:	88b9      	ldrh	r1, [r7, #4]
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff febb 	bl	8002480 <lcd_DrawPoint>
				x++;
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	3301      	adds	r3, #1
 800270e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8002710:	88fa      	ldrh	r2, [r7, #6]
 8002712:	8a3b      	ldrh	r3, [r7, #16]
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	429a      	cmp	r2, r3
 800271a:	d105      	bne.n	8002728 <lcd_ShowChar+0x170>
				{
					x=x0;
 800271c:	8a3b      	ldrh	r3, [r7, #16]
 800271e:	80fb      	strh	r3, [r7, #6]
					y++;
 8002720:	88bb      	ldrh	r3, [r7, #4]
 8002722:	3301      	adds	r3, #1
 8002724:	80bb      	strh	r3, [r7, #4]
					break;
 8002726:	e005      	b.n	8002734 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8002728:	7dbb      	ldrb	r3, [r7, #22]
 800272a:	3301      	adds	r3, #1
 800272c:	75bb      	strb	r3, [r7, #22]
 800272e:	7dbb      	ldrb	r3, [r7, #22]
 8002730:	2b07      	cmp	r3, #7
 8002732:	d9b7      	bls.n	80026a4 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002734:	8a7b      	ldrh	r3, [r7, #18]
 8002736:	3301      	adds	r3, #1
 8002738:	827b      	strh	r3, [r7, #18]
 800273a:	8a7a      	ldrh	r2, [r7, #18]
 800273c:	89bb      	ldrh	r3, [r7, #12]
 800273e:	429a      	cmp	r2, r3
 8002740:	d380      	bcc.n	8002644 <lcd_ShowChar+0x8c>
 8002742:	e000      	b.n	8002746 <lcd_ShowChar+0x18e>
		else return;
 8002744:	bf00      	nop
				}
			}
		}
	}
}
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd90      	pop	{r4, r7, pc}
 800274c:	0800dd64 	.word	0x0800dd64
 8002750:	0800e354 	.word	0x0800e354
 8002754:	0800f524 	.word	0x0800f524

08002758 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	460a      	mov	r2, r1
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	4613      	mov	r3, r2
 8002766:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8002768:	2301      	movs	r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800276c:	e004      	b.n	8002778 <mypow+0x20>
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	79bb      	ldrb	r3, [r7, #6]
 800277a:	1e5a      	subs	r2, r3, #1
 800277c:	71ba      	strb	r2, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f5      	bne.n	800276e <mypow+0x16>
	return result;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af04      	add	r7, sp, #16
 8002796:	4604      	mov	r4, r0
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4623      	mov	r3, r4
 80027a0:	80fb      	strh	r3, [r7, #6]
 80027a2:	4603      	mov	r3, r0
 80027a4:	80bb      	strh	r3, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	807b      	strh	r3, [r7, #2]
 80027aa:	4613      	mov	r3, r2
 80027ac:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 80027b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e059      	b.n	8002874 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 80027c0:	887c      	ldrh	r4, [r7, #2]
 80027c2:	787a      	ldrb	r2, [r7, #1]
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	4619      	mov	r1, r3
 80027d0:	200a      	movs	r0, #10
 80027d2:	f7ff ffc1 	bl	8002758 <mypow>
 80027d6:	4603      	mov	r3, r0
 80027d8:	fbb4 f1f3 	udiv	r1, r4, r3
 80027dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <lcd_ShowIntNum+0xf8>)
 80027de:	fba3 2301 	umull	r2, r3, r3, r1
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	1aca      	subs	r2, r1, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80027f2:	7bbb      	ldrb	r3, [r7, #14]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d121      	bne.n	800283c <lcd_ShowIntNum+0xac>
 80027f8:	7bfa      	ldrb	r2, [r7, #15]
 80027fa:	787b      	ldrb	r3, [r7, #1]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	429a      	cmp	r2, r3
 8002800:	da1c      	bge.n	800283c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8002802:	7b3b      	ldrb	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d117      	bne.n	8002838 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	b29a      	uxth	r2, r3
 800280c:	7b7b      	ldrb	r3, [r7, #13]
 800280e:	b29b      	uxth	r3, r3
 8002810:	fb12 f303 	smulbb	r3, r2, r3
 8002814:	b29a      	uxth	r2, r3
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4413      	add	r3, r2
 800281a:	b298      	uxth	r0, r3
 800281c:	8c3a      	ldrh	r2, [r7, #32]
 800281e:	88b9      	ldrh	r1, [r7, #4]
 8002820:	2300      	movs	r3, #0
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	2220      	movs	r2, #32
 8002832:	f7ff fec1 	bl	80025b8 <lcd_ShowChar>
				continue;
 8002836:	e01a      	b.n	800286e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002838:	2301      	movs	r3, #1
 800283a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	b29a      	uxth	r2, r3
 8002840:	7b7b      	ldrb	r3, [r7, #13]
 8002842:	b29b      	uxth	r3, r3
 8002844:	fb12 f303 	smulbb	r3, r2, r3
 8002848:	b29a      	uxth	r2, r3
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4413      	add	r3, r2
 800284e:	b298      	uxth	r0, r3
 8002850:	7b3b      	ldrb	r3, [r7, #12]
 8002852:	3330      	adds	r3, #48	@ 0x30
 8002854:	b2da      	uxtb	r2, r3
 8002856:	8c3c      	ldrh	r4, [r7, #32]
 8002858:	88b9      	ldrh	r1, [r7, #4]
 800285a:	2300      	movs	r3, #0
 800285c:	9302      	str	r3, [sp, #8]
 800285e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4623      	mov	r3, r4
 800286a:	f7ff fea5 	bl	80025b8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800286e:	7bfb      	ldrb	r3, [r7, #15]
 8002870:	3301      	adds	r3, #1
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	787b      	ldrb	r3, [r7, #1]
 8002878:	429a      	cmp	r2, r3
 800287a:	d3a1      	bcc.n	80027c0 <lcd_ShowIntNum+0x30>
	}
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	bf00      	nop
 8002888:	cccccccd 	.word	0xcccccccd

0800288c <lcd_ShowFloatNum>:


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b08b      	sub	sp, #44	@ 0x2c
 8002890:	af04      	add	r7, sp, #16
 8002892:	4604      	mov	r4, r0
 8002894:	4608      	mov	r0, r1
 8002896:	ed87 0a02 	vstr	s0, [r7, #8]
 800289a:	4611      	mov	r1, r2
 800289c:	461a      	mov	r2, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	81fb      	strh	r3, [r7, #14]
 80028a2:	4603      	mov	r3, r0
 80028a4:	81bb      	strh	r3, [r7, #12]
 80028a6:	460b      	mov	r3, r1
 80028a8:	71fb      	strb	r3, [r7, #7]
 80028aa:	4613      	mov	r3, r2
 80028ac:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 80028ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 80028b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ba:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8002994 <lcd_ShowFloatNum+0x108>
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c6:	ee17 3a90 	vmov	r3, s15
 80028ca:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	75fb      	strb	r3, [r7, #23]
 80028d0:	e057      	b.n	8002982 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 80028d2:	8abc      	ldrh	r4, [r7, #20]
 80028d4:	79fa      	ldrb	r2, [r7, #7]
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4619      	mov	r1, r3
 80028e2:	200a      	movs	r0, #10
 80028e4:	f7ff ff38 	bl	8002758 <mypow>
 80028e8:	4603      	mov	r3, r0
 80028ea:	fbb4 f1f3 	udiv	r1, r4, r3
 80028ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <lcd_ShowFloatNum+0x10c>)
 80028f0:	fba3 2301 	umull	r2, r3, r3, r1
 80028f4:	08da      	lsrs	r2, r3, #3
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	1aca      	subs	r2, r1, r3
 8002900:	4613      	mov	r3, r2
 8002902:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8002904:	7dfa      	ldrb	r2, [r7, #23]
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	3b02      	subs	r3, #2
 800290a:	429a      	cmp	r2, r3
 800290c:	d11d      	bne.n	800294a <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	3b02      	subs	r3, #2
 8002912:	b29a      	uxth	r2, r3
 8002914:	7dbb      	ldrb	r3, [r7, #22]
 8002916:	b29b      	uxth	r3, r3
 8002918:	fb12 f303 	smulbb	r3, r2, r3
 800291c:	b29a      	uxth	r2, r3
 800291e:	89fb      	ldrh	r3, [r7, #14]
 8002920:	4413      	add	r3, r2
 8002922:	b298      	uxth	r0, r3
 8002924:	88ba      	ldrh	r2, [r7, #4]
 8002926:	89b9      	ldrh	r1, [r7, #12]
 8002928:	2300      	movs	r3, #0
 800292a:	9302      	str	r3, [sp, #8]
 800292c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	4613      	mov	r3, r2
 8002938:	222e      	movs	r2, #46	@ 0x2e
 800293a:	f7ff fe3d 	bl	80025b8 <lcd_ShowChar>
			t++;
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	3301      	adds	r3, #1
 8002942:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	3301      	adds	r3, #1
 8002948:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	b29a      	uxth	r2, r3
 800294e:	7dbb      	ldrb	r3, [r7, #22]
 8002950:	b29b      	uxth	r3, r3
 8002952:	fb12 f303 	smulbb	r3, r2, r3
 8002956:	b29a      	uxth	r2, r3
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	4413      	add	r3, r2
 800295c:	b298      	uxth	r0, r3
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	3330      	adds	r3, #48	@ 0x30
 8002962:	b2da      	uxtb	r2, r3
 8002964:	88bc      	ldrh	r4, [r7, #4]
 8002966:	89b9      	ldrh	r1, [r7, #12]
 8002968:	2300      	movs	r3, #0
 800296a:	9302      	str	r3, [sp, #8]
 800296c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	4623      	mov	r3, r4
 8002978:	f7ff fe1e 	bl	80025b8 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	3301      	adds	r3, #1
 8002980:	75fb      	strb	r3, [r7, #23]
 8002982:	7dfa      	ldrb	r2, [r7, #23]
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	429a      	cmp	r2, r3
 8002988:	d3a3      	bcc.n	80028d2 <lcd_ShowFloatNum+0x46>
	}
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	42c80000 	.word	0x42c80000
 8002998:	cccccccd 	.word	0xcccccccd

0800299c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <lcd_SetDir+0x44>)
 80029b8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80029bc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80029be:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <lcd_SetDir+0x44>)
 80029c0:	22f0      	movs	r2, #240	@ 0xf0
 80029c2:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80029c4:	e006      	b.n	80029d4 <lcd_SetDir+0x38>
		lcddev.width=240;
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <lcd_SetDir+0x44>)
 80029c8:	22f0      	movs	r2, #240	@ 0xf0
 80029ca:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <lcd_SetDir+0x44>)
 80029ce:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80029d2:	805a      	strh	r2, [r3, #2]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	200002a8 	.word	0x200002a8

080029e4 <lcd_init>:


void lcd_init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029ee:	48aa      	ldr	r0, [pc, #680]	@ (8002c98 <lcd_init+0x2b4>)
 80029f0:	f005 f898 	bl	8007b24 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80029f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029f8:	f003 fd96 	bl	8006528 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80029fc:	2201      	movs	r2, #1
 80029fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a02:	48a5      	ldr	r0, [pc, #660]	@ (8002c98 <lcd_init+0x2b4>)
 8002a04:	f005 f88e 	bl	8007b24 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002a08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002a0c:	f003 fd8c 	bl	8006528 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff ffc3 	bl	800299c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002a16:	20d3      	movs	r0, #211	@ 0xd3
 8002a18:	f7ff fc4c 	bl	80022b4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002a1c:	f7ff fc6a 	bl	80022f4 <LCD_RD_DATA>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b9d      	ldr	r3, [pc, #628]	@ (8002c9c <lcd_init+0x2b8>)
 8002a26:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002a28:	f7ff fc64 	bl	80022f4 <LCD_RD_DATA>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b9a      	ldr	r3, [pc, #616]	@ (8002c9c <lcd_init+0x2b8>)
 8002a32:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002a34:	f7ff fc5e 	bl	80022f4 <LCD_RD_DATA>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4b97      	ldr	r3, [pc, #604]	@ (8002c9c <lcd_init+0x2b8>)
 8002a3e:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002a40:	4b96      	ldr	r3, [pc, #600]	@ (8002c9c <lcd_init+0x2b8>)
 8002a42:	889b      	ldrh	r3, [r3, #4]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	4b94      	ldr	r3, [pc, #592]	@ (8002c9c <lcd_init+0x2b8>)
 8002a4a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002a4c:	f7ff fc52 	bl	80022f4 <LCD_RD_DATA>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b91      	ldr	r3, [pc, #580]	@ (8002c9c <lcd_init+0x2b8>)
 8002a56:	889b      	ldrh	r3, [r3, #4]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c9c <lcd_init+0x2b8>)
 8002a5e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002a60:	20cf      	movs	r0, #207	@ 0xcf
 8002a62:	f7ff fc27 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7ff fc34 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002a6c:	20c1      	movs	r0, #193	@ 0xc1
 8002a6e:	f7ff fc31 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002a72:	2030      	movs	r0, #48	@ 0x30
 8002a74:	f7ff fc2e 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002a78:	20ed      	movs	r0, #237	@ 0xed
 8002a7a:	f7ff fc1b 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002a7e:	2064      	movs	r0, #100	@ 0x64
 8002a80:	f7ff fc28 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002a84:	2003      	movs	r0, #3
 8002a86:	f7ff fc25 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002a8a:	2012      	movs	r0, #18
 8002a8c:	f7ff fc22 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002a90:	2081      	movs	r0, #129	@ 0x81
 8002a92:	f7ff fc1f 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002a96:	20e8      	movs	r0, #232	@ 0xe8
 8002a98:	f7ff fc0c 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002a9c:	2085      	movs	r0, #133	@ 0x85
 8002a9e:	f7ff fc19 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002aa2:	2010      	movs	r0, #16
 8002aa4:	f7ff fc16 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002aa8:	207a      	movs	r0, #122	@ 0x7a
 8002aaa:	f7ff fc13 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002aae:	20cb      	movs	r0, #203	@ 0xcb
 8002ab0:	f7ff fc00 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002ab4:	2039      	movs	r0, #57	@ 0x39
 8002ab6:	f7ff fc0d 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002aba:	202c      	movs	r0, #44	@ 0x2c
 8002abc:	f7ff fc0a 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff fc07 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002ac6:	2034      	movs	r0, #52	@ 0x34
 8002ac8:	f7ff fc04 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7ff fc01 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002ad2:	20f7      	movs	r0, #247	@ 0xf7
 8002ad4:	f7ff fbee 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002ad8:	2020      	movs	r0, #32
 8002ada:	f7ff fbfb 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002ade:	20ea      	movs	r0, #234	@ 0xea
 8002ae0:	f7ff fbe8 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	f7ff fbf5 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff fbf2 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002af0:	20c0      	movs	r0, #192	@ 0xc0
 8002af2:	f7ff fbdf 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002af6:	201b      	movs	r0, #27
 8002af8:	f7ff fbec 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002afc:	20c1      	movs	r0, #193	@ 0xc1
 8002afe:	f7ff fbd9 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7ff fbe6 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002b08:	20c5      	movs	r0, #197	@ 0xc5
 8002b0a:	f7ff fbd3 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002b0e:	2030      	movs	r0, #48	@ 0x30
 8002b10:	f7ff fbe0 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002b14:	2030      	movs	r0, #48	@ 0x30
 8002b16:	f7ff fbdd 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002b1a:	20c7      	movs	r0, #199	@ 0xc7
 8002b1c:	f7ff fbca 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002b20:	20b7      	movs	r0, #183	@ 0xb7
 8002b22:	f7ff fbd7 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002b26:	2036      	movs	r0, #54	@ 0x36
 8002b28:	f7ff fbc4 	bl	80022b4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002b2c:	2008      	movs	r0, #8
 8002b2e:	f7ff fbd1 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002b32:	203a      	movs	r0, #58	@ 0x3a
 8002b34:	f7ff fbbe 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002b38:	2055      	movs	r0, #85	@ 0x55
 8002b3a:	f7ff fbcb 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002b3e:	20b1      	movs	r0, #177	@ 0xb1
 8002b40:	f7ff fbb8 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7ff fbc5 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002b4a:	201a      	movs	r0, #26
 8002b4c:	f7ff fbc2 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002b50:	20b6      	movs	r0, #182	@ 0xb6
 8002b52:	f7ff fbaf 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002b56:	200a      	movs	r0, #10
 8002b58:	f7ff fbbc 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002b5c:	20a2      	movs	r0, #162	@ 0xa2
 8002b5e:	f7ff fbb9 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002b62:	20f2      	movs	r0, #242	@ 0xf2
 8002b64:	f7ff fba6 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7ff fbb3 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002b6e:	2026      	movs	r0, #38	@ 0x26
 8002b70:	f7ff fba0 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002b74:	2001      	movs	r0, #1
 8002b76:	f7ff fbad 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002b7a:	20e0      	movs	r0, #224	@ 0xe0
 8002b7c:	f7ff fb9a 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002b80:	200f      	movs	r0, #15
 8002b82:	f7ff fba7 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002b86:	202a      	movs	r0, #42	@ 0x2a
 8002b88:	f7ff fba4 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002b8c:	2028      	movs	r0, #40	@ 0x28
 8002b8e:	f7ff fba1 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002b92:	2008      	movs	r0, #8
 8002b94:	f7ff fb9e 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002b98:	200e      	movs	r0, #14
 8002b9a:	f7ff fb9b 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002b9e:	2008      	movs	r0, #8
 8002ba0:	f7ff fb98 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002ba4:	2054      	movs	r0, #84	@ 0x54
 8002ba6:	f7ff fb95 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002baa:	20a9      	movs	r0, #169	@ 0xa9
 8002bac:	f7ff fb92 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002bb0:	2043      	movs	r0, #67	@ 0x43
 8002bb2:	f7ff fb8f 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002bb6:	200a      	movs	r0, #10
 8002bb8:	f7ff fb8c 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002bbc:	200f      	movs	r0, #15
 8002bbe:	f7ff fb89 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7ff fb86 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f7ff fb83 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7ff fb80 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f7ff fb7d 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002bda:	20e1      	movs	r0, #225	@ 0xe1
 8002bdc:	f7ff fb6a 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7ff fb77 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002be6:	2015      	movs	r0, #21
 8002be8:	f7ff fb74 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002bec:	2017      	movs	r0, #23
 8002bee:	f7ff fb71 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002bf2:	2007      	movs	r0, #7
 8002bf4:	f7ff fb6e 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002bf8:	2011      	movs	r0, #17
 8002bfa:	f7ff fb6b 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002bfe:	2006      	movs	r0, #6
 8002c00:	f7ff fb68 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002c04:	202b      	movs	r0, #43	@ 0x2b
 8002c06:	f7ff fb65 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002c0a:	2056      	movs	r0, #86	@ 0x56
 8002c0c:	f7ff fb62 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002c10:	203c      	movs	r0, #60	@ 0x3c
 8002c12:	f7ff fb5f 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002c16:	2005      	movs	r0, #5
 8002c18:	f7ff fb5c 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002c1c:	2010      	movs	r0, #16
 8002c1e:	f7ff fb59 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002c22:	200f      	movs	r0, #15
 8002c24:	f7ff fb56 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002c28:	203f      	movs	r0, #63	@ 0x3f
 8002c2a:	f7ff fb53 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002c2e:	203f      	movs	r0, #63	@ 0x3f
 8002c30:	f7ff fb50 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002c34:	200f      	movs	r0, #15
 8002c36:	f7ff fb4d 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002c3a:	202b      	movs	r0, #43	@ 0x2b
 8002c3c:	f7ff fb3a 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7ff fb47 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7ff fb44 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7ff fb41 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002c52:	203f      	movs	r0, #63	@ 0x3f
 8002c54:	f7ff fb3e 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002c58:	202a      	movs	r0, #42	@ 0x2a
 8002c5a:	f7ff fb2b 	bl	80022b4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7ff fb38 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7ff fb35 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7ff fb32 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002c70:	20ef      	movs	r0, #239	@ 0xef
 8002c72:	f7ff fb2f 	bl	80022d4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002c76:	2011      	movs	r0, #17
 8002c78:	f7ff fb1c 	bl	80022b4 <LCD_WR_REG>
	HAL_Delay(120);
 8002c7c:	2078      	movs	r0, #120	@ 0x78
 8002c7e:	f003 fc53 	bl	8006528 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002c82:	2029      	movs	r0, #41	@ 0x29
 8002c84:	f7ff fb16 	bl	80022b4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c8e:	4804      	ldr	r0, [pc, #16]	@ (8002ca0 <lcd_init+0x2bc>)
 8002c90:	f004 ff48 	bl	8007b24 <HAL_GPIO_WritePin>
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	200002a8 	.word	0x200002a8
 8002ca0:	40020000 	.word	0x40020000

08002ca4 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	b298      	uxth	r0, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	8b3a      	ldrh	r2, [r7, #24]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f7ff fbd7 	bl	8002480 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	b298      	uxth	r0, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8b3a      	ldrh	r2, [r7, #24]
 8002cec:	4619      	mov	r1, r3
 8002cee:	f7ff fbc7 	bl	8002480 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	b298      	uxth	r0, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	8b3a      	ldrh	r2, [r7, #24]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7ff fbb7 	bl	8002480 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b298      	uxth	r0, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	8b3a      	ldrh	r2, [r7, #24]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7ff fba7 	bl	8002480 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	b298      	uxth	r0, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4413      	add	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	8b3a      	ldrh	r2, [r7, #24]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f7ff fb97 	bl	8002480 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	b298      	uxth	r0, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	4413      	add	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	8b3a      	ldrh	r2, [r7, #24]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f7ff fb87 	bl	8002480 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b298      	uxth	r0, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	8b3a      	ldrh	r2, [r7, #24]
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	f7ff fb77 	bl	8002480 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b298      	uxth	r0, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	8b3a      	ldrh	r2, [r7, #24]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f7ff fb67 	bl	8002480 <lcd_DrawPoint>
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b08a      	sub	sp, #40	@ 0x28
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	f1c3 0303 	rsb	r3, r3, #3
 8002dda:	613b      	str	r3, [r7, #16]


	if (fill)
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d04f      	beq.n	8002e82 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002de2:	e029      	b.n	8002e38 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e00a      	b.n	8002e00 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7ff ff55 	bl	8002ca4 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	ddf0      	ble.n	8002dea <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da06      	bge.n	8002e1c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4413      	add	r3, r2
 8002e16:	3306      	adds	r3, #6
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e00a      	b.n	8002e32 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	009a      	lsls	r2, r3, #2
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	330a      	adds	r3, #10
 8002e2a:	613b      	str	r3, [r7, #16]
				y--;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3301      	adds	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	ddd1      	ble.n	8002de4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002e40:	e023      	b.n	8002e8a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff ff29 	bl	8002ca4 <_draw_circle_8>
			if (d < 0) {
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da06      	bge.n	8002e66 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	009a      	lsls	r2, r3, #2
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	3306      	adds	r3, #6
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	e00a      	b.n	8002e7c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	330a      	adds	r3, #10
 8002e74:	613b      	str	r3, [r7, #16]
				y--;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	61bb      	str	r3, [r7, #24]
			x++;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	dddb      	ble.n	8002e42 <lcd_DrawCircle+0x88>
}
 8002e8a:	bf00      	nop
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b08b      	sub	sp, #44	@ 0x2c
 8002e98:	af04      	add	r7, sp, #16
 8002e9a:	60ba      	str	r2, [r7, #8]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	81fb      	strh	r3, [r7, #14]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	81bb      	strh	r3, [r7, #12]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002eb2:	e048      	b.n	8002f46 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d145      	bne.n	8002f46 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002eba:	89fa      	ldrh	r2, [r7, #14]
 8002ebc:	4b26      	ldr	r3, [pc, #152]	@ (8002f58 <lcd_ShowStr+0xc4>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002ec6:	085b      	lsrs	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	1acb      	subs	r3, r1, r3
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dc3f      	bgt.n	8002f50 <lcd_ShowStr+0xbc>
 8002ed0:	89ba      	ldrh	r2, [r7, #12]
 8002ed2:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <lcd_ShowStr+0xc4>)
 8002ed4:	885b      	ldrh	r3, [r3, #2]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002edc:	1acb      	subs	r3, r1, r3
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	dc36      	bgt.n	8002f50 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d902      	bls.n	8002ef0 <lcd_ShowStr+0x5c>
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
 8002eee:	e02a      	b.n	8002f46 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b0d      	cmp	r3, #13
 8002ef6:	d10b      	bne.n	8002f10 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002ef8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	89bb      	ldrh	r3, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002f04:	8abb      	ldrh	r3, [r7, #20]
 8002f06:	81fb      	strh	r3, [r7, #14]
					str++;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	e017      	b.n	8002f40 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	88fc      	ldrh	r4, [r7, #6]
 8002f16:	89b9      	ldrh	r1, [r7, #12]
 8002f18:	89f8      	ldrh	r0, [r7, #14]
 8002f1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	4623      	mov	r3, r4
 8002f2c:	f7ff fb44 	bl	80025b8 <lcd_ShowChar>
					x+=sizey/2;
 8002f30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	89fb      	ldrh	r3, [r7, #14]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	3301      	adds	r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1b2      	bne.n	8002eb4 <lcd_ShowStr+0x20>
 8002f4e:	e000      	b.n	8002f52 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002f50:	bf00      	nop
			}
		}
	}
}
 8002f52:	371c      	adds	r7, #28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd90      	pop	{r4, r7, pc}
 8002f58:	200002a8 	.word	0x200002a8

08002f5c <addPlayer>:
 *  Created on: Dec 28, 2023
 *      Author: Windows
 */
#include "leaderboard.h"

void addPlayer(struct player **head, int ID, int score, int mode){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
    struct player *newPlayer = (struct player *)malloc(sizeof(struct player));
 8002f6a:	2010      	movs	r0, #16
 8002f6c:	f009 fa3a 	bl	800c3e4 <malloc>
 8002f70:	4603      	mov	r3, r0
 8002f72:	613b      	str	r3, [r7, #16]
    if (newPlayer == NULL) {
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d036      	beq.n	8002fe8 <addPlayer+0x8c>
        return;
    }
    newPlayer->player_ID = ID;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	601a      	str	r2, [r3, #0]
    newPlayer->player_score = score;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	605a      	str	r2, [r3, #4]
    newPlayer->player_mode = mode;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	609a      	str	r2, [r3, #8]
    newPlayer->next = NULL;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]

    if (*head == NULL || score > (*head)->player_score) {
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <addPlayer+0x4a>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	dd07      	ble.n	8002fb6 <addPlayer+0x5a>
        newPlayer->next = *head;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	60da      	str	r2, [r3, #12]
        *head = newPlayer;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e019      	b.n	8002fea <addPlayer+0x8e>
    } else {
        struct player *current = *head;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 8002fbc:	e002      	b.n	8002fc4 <addPlayer+0x68>
            current = current->next;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <addPlayer+0x7c>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	ddf2      	ble.n	8002fbe <addPlayer+0x62>
        }
        newPlayer->next = current->next;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	60da      	str	r2, [r3, #12]
        current->next = newPlayer;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	e000      	b.n	8002fea <addPlayer+0x8e>
        return;
 8002fe8:	bf00      	nop
    }
}
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <led7_Scan>:

void led7_init(){//khoi tao
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){//quet led
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8002ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80030f4 <led7_Scan+0x104>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80030f4 <led7_Scan+0x104>)
 8002ffe:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8003000:	4b3d      	ldr	r3, [pc, #244]	@ (80030f8 <led7_Scan+0x108>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3d      	ldr	r2, [pc, #244]	@ (80030fc <led7_Scan+0x10c>)
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	b21a      	sxth	r2, r3
 800300c:	4b39      	ldr	r3, [pc, #228]	@ (80030f4 <led7_Scan+0x104>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b21b      	sxth	r3, r3
 8003012:	4313      	orrs	r3, r2
 8003014:	b21b      	sxth	r3, r3
 8003016:	b29a      	uxth	r2, r3
 8003018:	4b36      	ldr	r3, [pc, #216]	@ (80030f4 <led7_Scan+0x104>)
 800301a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800301c:	4b36      	ldr	r3, [pc, #216]	@ (80030f8 <led7_Scan+0x108>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d847      	bhi.n	80030b4 <led7_Scan+0xc4>
 8003024:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <led7_Scan+0x3c>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	0800303d 	.word	0x0800303d
 8003030:	0800305b 	.word	0x0800305b
 8003034:	08003079 	.word	0x08003079
 8003038:	08003097 	.word	0x08003097
	case 0:
		spi_buffer |= 0x00b0;
 800303c:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <led7_Scan+0x104>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b2b      	ldr	r3, [pc, #172]	@ (80030f4 <led7_Scan+0x104>)
 8003048:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800304a:	4b2a      	ldr	r3, [pc, #168]	@ (80030f4 <led7_Scan+0x104>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003052:	b29a      	uxth	r2, r3
 8003054:	4b27      	ldr	r3, [pc, #156]	@ (80030f4 <led7_Scan+0x104>)
 8003056:	801a      	strh	r2, [r3, #0]
		break;
 8003058:	e02d      	b.n	80030b6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800305a:	4b26      	ldr	r3, [pc, #152]	@ (80030f4 <led7_Scan+0x104>)
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <led7_Scan+0x104>)
 8003066:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8003068:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <led7_Scan+0x104>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	f023 0320 	bic.w	r3, r3, #32
 8003070:	b29a      	uxth	r2, r3
 8003072:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <led7_Scan+0x104>)
 8003074:	801a      	strh	r2, [r3, #0]
		break;
 8003076:	e01e      	b.n	80030b6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8003078:	4b1e      	ldr	r3, [pc, #120]	@ (80030f4 <led7_Scan+0x104>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8003080:	b29a      	uxth	r2, r3
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <led7_Scan+0x104>)
 8003084:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8003086:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <led7_Scan+0x104>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	f023 0310 	bic.w	r3, r3, #16
 800308e:	b29a      	uxth	r2, r3
 8003090:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <led7_Scan+0x104>)
 8003092:	801a      	strh	r2, [r3, #0]
		break;
 8003094:	e00f      	b.n	80030b6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8003096:	4b17      	ldr	r3, [pc, #92]	@ (80030f4 <led7_Scan+0x104>)
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800309e:	b29a      	uxth	r2, r3
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <led7_Scan+0x104>)
 80030a2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <led7_Scan+0x104>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <led7_Scan+0x104>)
 80030b0:	801a      	strh	r2, [r3, #0]
		break;
 80030b2:	e000      	b.n	80030b6 <led7_Scan+0xc6>
	default:
		break;
 80030b4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80030b6:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <led7_Scan+0x108>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	425a      	negs	r2, r3
 80030be:	f003 0303 	and.w	r3, r3, #3
 80030c2:	f002 0203 	and.w	r2, r2, #3
 80030c6:	bf58      	it	pl
 80030c8:	4253      	negpl	r3, r2
 80030ca:	4a0b      	ldr	r2, [pc, #44]	@ (80030f8 <led7_Scan+0x108>)
 80030cc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2140      	movs	r1, #64	@ 0x40
 80030d2:	480b      	ldr	r0, [pc, #44]	@ (8003100 <led7_Scan+0x110>)
 80030d4:	f004 fd26 	bl	8007b24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80030d8:	2301      	movs	r3, #1
 80030da:	2202      	movs	r2, #2
 80030dc:	4905      	ldr	r1, [pc, #20]	@ (80030f4 <led7_Scan+0x104>)
 80030de:	4809      	ldr	r0, [pc, #36]	@ (8003104 <led7_Scan+0x114>)
 80030e0:	f006 fa35 	bl	800954e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80030e4:	2201      	movs	r2, #1
 80030e6:	2140      	movs	r1, #64	@ 0x40
 80030e8:	4805      	ldr	r0, [pc, #20]	@ (8003100 <led7_Scan+0x110>)
 80030ea:	f004 fd1b 	bl	8007b24 <HAL_GPIO_WritePin>
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	2000001a 	.word	0x2000001a
 80030f8:	200002b0 	.word	0x200002b0
 80030fc:	2000000c 	.word	0x2000000c
 8003100:	40021800 	.word	0x40021800
 8003104:	20000b40 	.word	0x20000b40

08003108 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){//set so cho led
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	db0e      	blt.n	800313a <led7_SetDigit+0x32>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b09      	cmp	r3, #9
 8003120:	dc0b      	bgt.n	800313a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8003122:	4a09      	ldr	r2, [pc, #36]	@ (8003148 <led7_SetDigit+0x40>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	b2d9      	uxtb	r1, r3
 8003130:	4a06      	ldr	r2, [pc, #24]	@ (800314c <led7_SetDigit+0x44>)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4413      	add	r3, r2
 8003136:	460a      	mov	r2, r1
 8003138:	701a      	strb	r2, [r3, #0]
	}
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000010 	.word	0x20000010
 800314c:	2000000c 	.word	0x2000000c

08003150 <led7_SetColon>:

void led7_SetColon(uint8_t status){// :
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <led7_SetColon+0x20>
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <led7_SetColon+0x3c>)
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	f023 0308 	bic.w	r3, r3, #8
 8003168:	b29a      	uxth	r2, r3
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <led7_SetColon+0x3c>)
 800316c:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 800316e:	e006      	b.n	800317e <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <led7_SetColon+0x3c>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f043 0308 	orr.w	r3, r3, #8
 8003178:	b29a      	uxth	r2, r3
 800317a:	4b04      	ldr	r3, [pc, #16]	@ (800318c <led7_SetColon+0x3c>)
 800317c:	801a      	strh	r2, [r3, #0]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	2000001a 	.word	0x2000001a

08003190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003194:	f003 f956 	bl	8006444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003198:	f000 f872 	bl	8003280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800319c:	f7fe fefe 	bl	8001f9c <MX_GPIO_Init>
  MX_TIM2_Init();
 80031a0:	f001 ff10 	bl	8004fc4 <MX_TIM2_Init>
  MX_SPI1_Init();
 80031a4:	f001 fce8 	bl	8004b78 <MX_SPI1_Init>
  MX_FSMC_Init();
 80031a8:	f7fe fe28 	bl	8001dfc <MX_FSMC_Init>
  MX_I2C1_Init();
 80031ac:	f7ff f80c 	bl	80021c8 <MX_I2C1_Init>
  MX_TIM13_Init();
 80031b0:	f001 ff54 	bl	800505c <MX_TIM13_Init>
  MX_DMA_Init();
 80031b4:	f7fe f90a 	bl	80013cc <MX_DMA_Init>
  MX_ADC1_Init();
 80031b8:	f7fd feae 	bl	8000f18 <MX_ADC1_Init>
  MX_TIM1_Init();
 80031bc:	f001 feb2 	bl	8004f24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80031c0:	f003 f836 	bl	8006230 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80031c4:	f003 f85e 	bl	8006284 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80031c8:	f000 f8c4 	bl	8003354 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 //touch_Adjust();
 lcd_Clear(BLACK);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7ff f8ef 	bl	80023b0 <lcd_Clear>
 setTimer3(100);
 80031d2:	2064      	movs	r0, #100	@ 0x64
 80031d4:	f001 fb94 	bl	8004900 <setTimer3>
 setTimer5(10);
 80031d8:	200a      	movs	r0, #10
 80031da:	f001 fbc9 	bl	8004970 <setTimer5>
 setTimer7(10);
 80031de:	200a      	movs	r0, #10
 80031e0:	f001 fbe2 	bl	80049a8 <setTimer7>
	  /*if(touch_IsTouched() && draw_Status == DRAW){
            //draw a point at the touch position
		  lcd_DrawPoint(touch_GetX(), touch_GetY(), RED);
	  }*/
	  // 50ms task
	  while(!flag_timer2);
 80031e4:	bf00      	nop
 80031e6:	4b21      	ldr	r3, [pc, #132]	@ (800326c <main+0xdc>)
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0fb      	beq.n	80031e6 <main+0x56>
	  flag_timer2 = 0;
 80031ee:	4b1f      	ldr	r3, [pc, #124]	@ (800326c <main+0xdc>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	801a      	strh	r2, [r3, #0]
	  touch_Scan();
 80031f4:	f002 feb2 	bl	8005f5c <touch_Scan>
	  button_Scan();
 80031f8:	f7fe f85a 	bl	80012b0 <button_Scan>
	  if(flag_timer5 == 1){
 80031fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <main+0xe0>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <main+0x80>
		  sendSensor();
 8003204:	f000 f9b0 	bl	8003568 <sendSensor>
		  setTimer5(5000);
 8003208:	f241 3088 	movw	r0, #5000	@ 0x1388
 800320c:	f001 fbb0 	bl	8004970 <setTimer5>
	  }
	  if(isHumidity()){
 8003210:	f000 fe12 	bl	8003e38 <isHumidity>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <main+0x92>
		  buzzer_check = 1;
 800321a:	4b16      	ldr	r3, [pc, #88]	@ (8003274 <main+0xe4>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e002      	b.n	8003228 <main+0x98>
	  }else{
		  buzzer_check = 0;
 8003222:	4b14      	ldr	r3, [pc, #80]	@ (8003274 <main+0xe4>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
	  }
	  if (isLight()){
 8003228:	f000 fde8 	bl	8003dfc <isLight>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <main+0xae>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, SET);
 8003232:	2201      	movs	r2, #1
 8003234:	2120      	movs	r1, #32
 8003236:	4810      	ldr	r0, [pc, #64]	@ (8003278 <main+0xe8>)
 8003238:	f004 fc74 	bl	8007b24 <HAL_GPIO_WritePin>
 800323c:	e004      	b.n	8003248 <main+0xb8>
	  }else{
		  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, RESET);
 800323e:	2200      	movs	r2, #0
 8003240:	2120      	movs	r1, #32
 8003242:	480d      	ldr	r0, [pc, #52]	@ (8003278 <main+0xe8>)
 8003244:	f004 fc6e 	bl	8007b24 <HAL_GPIO_WritePin>
	  }
	  if(status == INIT || status == GAME_OVER)
 8003248:	4b0c      	ldr	r3, [pc, #48]	@ (800327c <main+0xec>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <main+0xc8>
 8003250:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <main+0xec>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d101      	bne.n	800325c <main+0xcc>
		  test_Adc();
 8003258:	f000 f890 	bl	800337c <test_Adc>
	  //touchProcess();
	  fsm_machine();
 800325c:	f7fe fb84 	bl	8001968 <fsm_machine>
	  test_LedDebug();
 8003260:	f000 f95e 	bl	8003520 <test_LedDebug>
	  fsm_send_buzzer();
 8003264:	f7fe f944 	bl	80014f0 <fsm_send_buzzer>
	  while(!flag_timer2);
 8003268:	e7bc      	b.n	80031e4 <main+0x54>
 800326a:	bf00      	nop
 800326c:	20000b1c 	.word	0x20000b1c
 8003270:	20000b2e 	.word	0x20000b2e
 8003274:	200001f0 	.word	0x200001f0
 8003278:	40021000 	.word	0x40021000
 800327c:	200001d0 	.word	0x200001d0

08003280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b094      	sub	sp, #80	@ 0x50
 8003284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003286:	f107 0320 	add.w	r3, r7, #32
 800328a:	2230      	movs	r2, #48	@ 0x30
 800328c:	2100      	movs	r1, #0
 800328e:	4618      	mov	r0, r3
 8003290:	f009 fac1 	bl	800c816 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	4b28      	ldr	r3, [pc, #160]	@ (800334c <SystemClock_Config+0xcc>)
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	4a27      	ldr	r2, [pc, #156]	@ (800334c <SystemClock_Config+0xcc>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <SystemClock_Config+0xcc>)
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032c0:	2300      	movs	r3, #0
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	4b22      	ldr	r3, [pc, #136]	@ (8003350 <SystemClock_Config+0xd0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <SystemClock_Config+0xd0>)
 80032ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <SystemClock_Config+0xd0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032d8:	607b      	str	r3, [r7, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80032dc:	2302      	movs	r3, #2
 80032de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032e0:	2301      	movs	r3, #1
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032e4:	2310      	movs	r3, #16
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032e8:	2302      	movs	r3, #2
 80032ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80032ec:	2300      	movs	r3, #0
 80032ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032f0:	2308      	movs	r3, #8
 80032f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80032f4:	23a8      	movs	r3, #168	@ 0xa8
 80032f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032f8:	2302      	movs	r3, #2
 80032fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80032fc:	2304      	movs	r3, #4
 80032fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003300:	f107 0320 	add.w	r3, r7, #32
 8003304:	4618      	mov	r0, r3
 8003306:	f005 fc01 	bl	8008b0c <HAL_RCC_OscConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003310:	f000 f99c 	bl	800364c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003314:	230f      	movs	r3, #15
 8003316:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003318:	2302      	movs	r3, #2
 800331a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003320:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003326:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800332a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	2105      	movs	r1, #5
 8003332:	4618      	mov	r0, r3
 8003334:	f005 fe62 	bl	8008ffc <HAL_RCC_ClockConfig>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800333e:	f000 f985 	bl	800364c <Error_Handler>
  }
}
 8003342:	bf00      	nop
 8003344:	3750      	adds	r7, #80	@ 0x50
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40007000 	.word	0x40007000

08003354 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	  timer_init();
 8003358:	f001 faa8 	bl	80048ac <timer_init>
	  button_init();
 800335c:	f7fd ff9c 	bl	8001298 <button_init>
	  buzzer_init();
 8003360:	f7fe f812 	bl	8001388 <buzzer_init>
	  lcd_init();
 8003364:	f7ff fb3e 	bl	80029e4 <lcd_init>
	  touch_init();
 8003368:	f002 fde8 	bl	8005f3c <touch_init>
	  setTimer2(50);
 800336c:	2032      	movs	r0, #50	@ 0x32
 800336e:	f001 faab 	bl	80048c8 <setTimer2>
	  uart_init_esp();
 8003372:	f002 ff01 	bl	8006178 <uart_init_esp>
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <test_Adc>:

uint8_t count_adc = 0;

void test_Adc(){
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af04      	add	r7, sp, #16
	count_adc = (count_adc + 1)%20;
 8003382:	4b5d      	ldr	r3, [pc, #372]	@ (80034f8 <test_Adc+0x17c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	4b5c      	ldr	r3, [pc, #368]	@ (80034fc <test_Adc+0x180>)
 800338a:	fb83 1302 	smull	r1, r3, r3, r2
 800338e:	10d9      	asrs	r1, r3, #3
 8003390:	17d3      	asrs	r3, r2, #31
 8003392:	1ac9      	subs	r1, r1, r3
 8003394:	460b      	mov	r3, r1
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	1ad1      	subs	r1, r2, r3
 800339e:	b2ca      	uxtb	r2, r1
 80033a0:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <test_Adc+0x17c>)
 80033a2:	701a      	strb	r2, [r3, #0]
	if(count_adc == 0){
 80033a4:	4b54      	ldr	r3, [pc, #336]	@ (80034f8 <test_Adc+0x17c>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 80a1 	bne.w	80034f0 <test_Adc+0x174>
		sensor_Read();
 80033ae:	f000 fc33 	bl	8003c18 <sensor_Read>
		lcd_ShowStr(10, 0, "Wattage:", RED, BLACK, 16, 0);
 80033b2:	2300      	movs	r3, #0
 80033b4:	9302      	str	r3, [sp, #8]
 80033b6:	2310      	movs	r3, #16
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	2300      	movs	r3, #0
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80033c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003500 <test_Adc+0x184>)
 80033c4:	2100      	movs	r1, #0
 80033c6:	200a      	movs	r0, #10
 80033c8:	f7ff fd64 	bl	8002e94 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 0,getWattage(), 4, RED, BLACK, 16);
 80033cc:	f000 fd02 	bl	8003dd4 <getWattage>
 80033d0:	eef0 7a40 	vmov.f32	s15, s0
 80033d4:	2310      	movs	r3, #16
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2300      	movs	r3, #0
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80033e0:	2204      	movs	r2, #4
 80033e2:	eeb0 0a67 	vmov.f32	s0, s15
 80033e6:	2100      	movs	r1, #0
 80033e8:	2082      	movs	r0, #130	@ 0x82
 80033ea:	f7ff fa4f 	bl	800288c <lcd_ShowFloatNum>
		if(!isLight()){
 80033ee:	f000 fd05 	bl	8003dfc <isLight>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11a      	bne.n	800342e <test_Adc+0xb2>
			lcd_ShowStr(10, 20, "Light:", RED, BLACK, 16, 0);
 80033f8:	2300      	movs	r3, #0
 80033fa:	9302      	str	r3, [sp, #8]
 80033fc:	2310      	movs	r3, #16
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	2300      	movs	r3, #0
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003408:	4a3e      	ldr	r2, [pc, #248]	@ (8003504 <test_Adc+0x188>)
 800340a:	2114      	movs	r1, #20
 800340c:	200a      	movs	r0, #10
 800340e:	f7ff fd41 	bl	8002e94 <lcd_ShowStr>
			lcd_ShowStr(130, 20,"Strong", RED, BLACK, 16, 0);
 8003412:	2300      	movs	r3, #0
 8003414:	9302      	str	r3, [sp, #8]
 8003416:	2310      	movs	r3, #16
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	2300      	movs	r3, #0
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003422:	4a39      	ldr	r2, [pc, #228]	@ (8003508 <test_Adc+0x18c>)
 8003424:	2114      	movs	r1, #20
 8003426:	2082      	movs	r0, #130	@ 0x82
 8003428:	f7ff fd34 	bl	8002e94 <lcd_ShowStr>
 800342c:	e019      	b.n	8003462 <test_Adc+0xe6>
		}else{
			lcd_ShowStr(10, 20, "Light:", RED, BLACK, 16, 0);
 800342e:	2300      	movs	r3, #0
 8003430:	9302      	str	r3, [sp, #8]
 8003432:	2310      	movs	r3, #16
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800343e:	4a31      	ldr	r2, [pc, #196]	@ (8003504 <test_Adc+0x188>)
 8003440:	2114      	movs	r1, #20
 8003442:	200a      	movs	r0, #10
 8003444:	f7ff fd26 	bl	8002e94 <lcd_ShowStr>
			lcd_ShowStr(130, 20,"Weak  ", RED, BLACK, 16, 0);
 8003448:	2300      	movs	r3, #0
 800344a:	9302      	str	r3, [sp, #8]
 800344c:	2310      	movs	r3, #16
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	2300      	movs	r3, #0
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003458:	4a2c      	ldr	r2, [pc, #176]	@ (800350c <test_Adc+0x190>)
 800345a:	2114      	movs	r1, #20
 800345c:	2082      	movs	r0, #130	@ 0x82
 800345e:	f7ff fd19 	bl	8002e94 <lcd_ShowStr>
		}
		//lcd_ShowStr(10, 140, "Light:", RED, BLACK, 16, 0);
		//lcd_ShowIntNum(130, 140, sensor_GetLight(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 40, "Potentiometer:", RED, BLACK, 16, 0);
 8003462:	2300      	movs	r3, #0
 8003464:	9302      	str	r3, [sp, #8]
 8003466:	2310      	movs	r3, #16
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8003472:	4a27      	ldr	r2, [pc, #156]	@ (8003510 <test_Adc+0x194>)
 8003474:	2128      	movs	r1, #40	@ 0x28
 8003476:	200a      	movs	r0, #10
 8003478:	f7ff fd0c 	bl	8002e94 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 40, ((float)sensor_GetPotentiometer()/4095)*100, 4, RED, BLACK, 16);
 800347c:	f000 fbe6 	bl	8003c4c <sensor_GetPotentiometer>
 8003480:	4603      	mov	r3, r0
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800348a:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8003514 <test_Adc+0x198>
 800348e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003492:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003518 <test_Adc+0x19c>
 8003496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349a:	2310      	movs	r3, #16
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034a6:	2204      	movs	r2, #4
 80034a8:	eeb0 0a67 	vmov.f32	s0, s15
 80034ac:	2128      	movs	r1, #40	@ 0x28
 80034ae:	2082      	movs	r0, #130	@ 0x82
 80034b0:	f7ff f9ec 	bl	800288c <lcd_ShowFloatNum>
		//lcd_ShowIntNum(130, 40, sensor_GetPotentiometer(), 4, RED, BLACK, 16);
		lcd_ShowStr(10, 60, "Temperature:", RED, BLACK, 16, 0);
 80034b4:	2300      	movs	r3, #0
 80034b6:	9302      	str	r3, [sp, #8]
 80034b8:	2310      	movs	r3, #16
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034c4:	4a15      	ldr	r2, [pc, #84]	@ (800351c <test_Adc+0x1a0>)
 80034c6:	213c      	movs	r1, #60	@ 0x3c
 80034c8:	200a      	movs	r0, #10
 80034ca:	f7ff fce3 	bl	8002e94 <lcd_ShowStr>
		lcd_ShowFloatNum(130, 60,sensor_GetTemperature(), 4, RED, BLACK, 16);
 80034ce:	f000 fc63 	bl	8003d98 <sensor_GetTemperature>
 80034d2:	eef0 7a40 	vmov.f32	s15, s0
 80034d6:	2310      	movs	r3, #16
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80034e2:	2204      	movs	r2, #4
 80034e4:	eeb0 0a67 	vmov.f32	s0, s15
 80034e8:	213c      	movs	r1, #60	@ 0x3c
 80034ea:	2082      	movs	r0, #130	@ 0x82
 80034ec:	f7ff f9ce 	bl	800288c <lcd_ShowFloatNum>
	}
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200002b4 	.word	0x200002b4
 80034fc:	66666667 	.word	0x66666667
 8003500:	0800dad0 	.word	0x0800dad0
 8003504:	0800dadc 	.word	0x0800dadc
 8003508:	0800dae4 	.word	0x0800dae4
 800350c:	0800daec 	.word	0x0800daec
 8003510:	0800daf4 	.word	0x0800daf4
 8003514:	457ff000 	.word	0x457ff000
 8003518:	42c80000 	.word	0x42c80000
 800351c:	0800db04 	.word	0x0800db04

08003520 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 8003524:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <test_LedDebug+0x3c>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <test_LedDebug+0x40>)
 800352c:	fb83 1302 	smull	r1, r3, r3, r2
 8003530:	10d9      	asrs	r1, r3, #3
 8003532:	17d3      	asrs	r3, r2, #31
 8003534:	1ac9      	subs	r1, r1, r3
 8003536:	460b      	mov	r3, r1
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	1ad1      	subs	r1, r2, r3
 8003540:	b2ca      	uxtb	r2, r1
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <test_LedDebug+0x3c>)
 8003544:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8003546:	4b05      	ldr	r3, [pc, #20]	@ (800355c <test_LedDebug+0x3c>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800354e:	2110      	movs	r1, #16
 8003550:	4804      	ldr	r0, [pc, #16]	@ (8003564 <test_LedDebug+0x44>)
 8003552:	f004 fb00 	bl	8007b56 <HAL_GPIO_TogglePin>
	}
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200002b5 	.word	0x200002b5
 8003560:	66666667 	.word	0x66666667
 8003564:	40021000 	.word	0x40021000

08003568 <sendSensor>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void sendSensor(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	b0a4      	sub	sp, #144	@ 0x90
 800356c:	af06      	add	r7, sp, #24
	if(send_flag == 0){
 800356e:	4b2d      	ldr	r3, [pc, #180]	@ (8003624 <sendSensor+0xbc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d152      	bne.n	800361c <sendSensor+0xb4>
		char res[100];
		char light[10];
		if(!isLight()){
 8003576:	f000 fc41 	bl	8003dfc <isLight>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <sendSensor+0x26>
			sprintf(light, "Strong");
 8003580:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003584:	4928      	ldr	r1, [pc, #160]	@ (8003628 <sendSensor+0xc0>)
 8003586:	4618      	mov	r0, r3
 8003588:	f009 f8e2 	bl	800c750 <siprintf>
 800358c:	e005      	b.n	800359a <sendSensor+0x32>
		}else{
			sprintf(light, "Weak");
 800358e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003592:	4926      	ldr	r1, [pc, #152]	@ (800362c <sendSensor+0xc4>)
 8003594:	4618      	mov	r0, r3
 8003596:	f009 f8db 	bl	800c750 <siprintf>
		}
		//int light = sensor_GetLight();
		int po1 = sensor_GetPotentiometer();
 800359a:	f000 fb57 	bl	8003c4c <sensor_GetPotentiometer>
 800359e:	4603      	mov	r3, r0
 80035a0:	677b      	str	r3, [r7, #116]	@ 0x74
		int temp1 = sensor_GetTemperature();
 80035a2:	f000 fbf9 	bl	8003d98 <sensor_GetTemperature>
 80035a6:	eef0 7a40 	vmov.f32	s15, s0
 80035aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035ae:	ee17 3a90 	vmov	r3, s15
 80035b2:	673b      	str	r3, [r7, #112]	@ 0x70
		if(status != PLAY){
 80035b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003630 <sendSensor+0xc8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d00f      	beq.n	80035dc <sendSensor+0x74>
			sprintf(res, "Light : %s\nPotentiometer : %d \nTemperature : %d\nNo one is playing\n%c",light, po1, temp1, sec);// khong co ai choi
 80035bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <sendSensor+0xcc>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80035c4:	4638      	mov	r0, r7
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035ce:	491a      	ldr	r1, [pc, #104]	@ (8003638 <sendSensor+0xd0>)
 80035d0:	f009 f8be 	bl	800c750 <siprintf>
			uart_EspSendString(res);
 80035d4:	463b      	mov	r3, r7
 80035d6:	4618      	mov	r0, r3
 80035d8:	f002 fddc 	bl	8006194 <uart_EspSendString>
		}
		if(status == PLAY){
 80035dc:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <sendSensor+0xc8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d11b      	bne.n	800361c <sendSensor+0xb4>
			sprintf(res, "Light : %s\nPotentiometer : %d \nTemperature : %d\n%d is playing\nTime : %d sec\nScore : %d\n%c",light, po1, temp1, ID, count, score, sec);//dang co nguoi choi
 80035e4:	4b15      	ldr	r3, [pc, #84]	@ (800363c <sendSensor+0xd4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <sendSensor+0xd8>)
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	4915      	ldr	r1, [pc, #84]	@ (8003644 <sendSensor+0xdc>)
 80035ee:	7809      	ldrb	r1, [r1, #0]
 80035f0:	460c      	mov	r4, r1
 80035f2:	4910      	ldr	r1, [pc, #64]	@ (8003634 <sendSensor+0xcc>)
 80035f4:	7809      	ldrb	r1, [r1, #0]
 80035f6:	460d      	mov	r5, r1
 80035f8:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80035fc:	4638      	mov	r0, r7
 80035fe:	9504      	str	r5, [sp, #16]
 8003600:	9403      	str	r4, [sp, #12]
 8003602:	9202      	str	r2, [sp, #8]
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800360c:	460a      	mov	r2, r1
 800360e:	490e      	ldr	r1, [pc, #56]	@ (8003648 <sendSensor+0xe0>)
 8003610:	f009 f89e 	bl	800c750 <siprintf>
			uart_EspSendString(res);
 8003614:	463b      	mov	r3, r7
 8003616:	4618      	mov	r0, r3
 8003618:	f002 fdbc 	bl	8006194 <uart_EspSendString>
		}
	}
}
 800361c:	bf00      	nop
 800361e:	3778      	adds	r7, #120	@ 0x78
 8003620:	46bd      	mov	sp, r7
 8003622:	bdb0      	pop	{r4, r5, r7, pc}
 8003624:	200001f8 	.word	0x200001f8
 8003628:	0800dae4 	.word	0x0800dae4
 800362c:	0800db1c 	.word	0x0800db1c
 8003630:	200001d0 	.word	0x200001d0
 8003634:	20000004 	.word	0x20000004
 8003638:	0800db24 	.word	0x0800db24
 800363c:	200001d4 	.word	0x200001d4
 8003640:	200001dc 	.word	0x200001dc
 8003644:	20000b14 	.word	0x20000b14
 8003648:	0800db6c 	.word	0x0800db6c

0800364c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003650:	b672      	cpsid	i
}
 8003652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <Error_Handler+0x8>

08003658 <screen_init>:
 *      Author: Admin
 */

#include "screen.h"

void screen_init(){
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af04      	add	r7, sp, #16
	lcd_ShowStr(60,90,"SNAKE GAME",WHITE,WHITE,24,1);
 800365e:	2301      	movs	r3, #1
 8003660:	9302      	str	r3, [sp, #8]
 8003662:	2318      	movs	r3, #24
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003670:	4a6c      	ldr	r2, [pc, #432]	@ (8003824 <screen_init+0x1cc>)
 8003672:	215a      	movs	r1, #90	@ 0x5a
 8003674:	203c      	movs	r0, #60	@ 0x3c
 8003676:	f7ff fc0d 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(40,120,"Player ID:",WHITE,BLACK,16,0);
 800367a:	2300      	movs	r3, #0
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	2310      	movs	r3, #16
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	2300      	movs	r3, #0
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800368a:	4a67      	ldr	r2, [pc, #412]	@ (8003828 <screen_init+0x1d0>)
 800368c:	2178      	movs	r1, #120	@ 0x78
 800368e:	2028      	movs	r0, #40	@ 0x28
 8003690:	f7ff fc00 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowIntNum(120, 120, ID, 4, WHITE, BLACK, 16);
 8003694:	4b65      	ldr	r3, [pc, #404]	@ (800382c <screen_init+0x1d4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b29a      	uxth	r2, r3
 800369a:	2310      	movs	r3, #16
 800369c:	9302      	str	r3, [sp, #8]
 800369e:	2300      	movs	r3, #0
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2304      	movs	r3, #4
 80036aa:	2178      	movs	r1, #120	@ 0x78
 80036ac:	2078      	movs	r0, #120	@ 0x78
 80036ae:	f7ff f86f 	bl	8002790 <lcd_ShowIntNum>
	lcd_Fill(50, 200, 190, 300, GREEN);
 80036b2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80036bc:	22be      	movs	r2, #190	@ 0xbe
 80036be:	21c8      	movs	r1, #200	@ 0xc8
 80036c0:	2032      	movs	r0, #50	@ 0x32
 80036c2:	f7fe fea7 	bl	8002414 <lcd_Fill>
	lcd_ShowStr(40, 140, "Mode (B):", WHITE, BLACK, 16, 0);
 80036c6:	2300      	movs	r3, #0
 80036c8:	9302      	str	r3, [sp, #8]
 80036ca:	2310      	movs	r3, #16
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036d6:	4a56      	ldr	r2, [pc, #344]	@ (8003830 <screen_init+0x1d8>)
 80036d8:	218c      	movs	r1, #140	@ 0x8c
 80036da:	2028      	movs	r0, #40	@ 0x28
 80036dc:	f7ff fbda 	bl	8002e94 <lcd_ShowStr>
	if(mode == NORMAL)
 80036e0:	4b54      	ldr	r3, [pc, #336]	@ (8003834 <screen_init+0x1dc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10c      	bne.n	8003702 <screen_init+0xaa>
		lcd_ShowStr(120, 140, "NORMAL", WHITE, BLACK, 16, 0);
 80036e8:	2300      	movs	r3, #0
 80036ea:	9302      	str	r3, [sp, #8]
 80036ec:	2310      	movs	r3, #16
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003838 <screen_init+0x1e0>)
 80036fa:	218c      	movs	r1, #140	@ 0x8c
 80036fc:	2078      	movs	r0, #120	@ 0x78
 80036fe:	f7ff fbc9 	bl	8002e94 <lcd_ShowStr>
	if(mode == WALL)
 8003702:	4b4c      	ldr	r3, [pc, #304]	@ (8003834 <screen_init+0x1dc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d10c      	bne.n	8003724 <screen_init+0xcc>
		lcd_ShowStr(120, 140, "WALL", WHITE, BLACK, 16, 0);
 800370a:	2300      	movs	r3, #0
 800370c:	9302      	str	r3, [sp, #8]
 800370e:	2310      	movs	r3, #16
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2300      	movs	r3, #0
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800371a:	4a48      	ldr	r2, [pc, #288]	@ (800383c <screen_init+0x1e4>)
 800371c:	218c      	movs	r1, #140	@ 0x8c
 800371e:	2078      	movs	r0, #120	@ 0x78
 8003720:	f7ff fbb8 	bl	8002e94 <lcd_ShowStr>
	if(mode == WALLS)
 8003724:	4b43      	ldr	r3, [pc, #268]	@ (8003834 <screen_init+0x1dc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d10c      	bne.n	8003746 <screen_init+0xee>
		lcd_ShowStr(120, 140, "WALLS", WHITE, BLACK, 16, 0);
 800372c:	2300      	movs	r3, #0
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	2310      	movs	r3, #16
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	2300      	movs	r3, #0
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800373c:	4a40      	ldr	r2, [pc, #256]	@ (8003840 <screen_init+0x1e8>)
 800373e:	218c      	movs	r1, #140	@ 0x8c
 8003740:	2078      	movs	r0, #120	@ 0x78
 8003742:	f7ff fba7 	bl	8002e94 <lcd_ShowStr>
	if(mode == TIMER)
 8003746:	4b3b      	ldr	r3, [pc, #236]	@ (8003834 <screen_init+0x1dc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d10c      	bne.n	8003768 <screen_init+0x110>
		lcd_ShowStr(120, 140, "TIMER", WHITE, BLACK, 16, 0);
 800374e:	2300      	movs	r3, #0
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	2310      	movs	r3, #16
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	2300      	movs	r3, #0
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800375e:	4a39      	ldr	r2, [pc, #228]	@ (8003844 <screen_init+0x1ec>)
 8003760:	218c      	movs	r1, #140	@ 0x8c
 8003762:	2078      	movs	r0, #120	@ 0x78
 8003764:	f7ff fb96 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(40, 160, "Speed (E):", WHITE, BLACK, 16, 0);
 8003768:	2300      	movs	r3, #0
 800376a:	9302      	str	r3, [sp, #8]
 800376c:	2310      	movs	r3, #16
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003778:	4a33      	ldr	r2, [pc, #204]	@ (8003848 <screen_init+0x1f0>)
 800377a:	21a0      	movs	r1, #160	@ 0xa0
 800377c:	2028      	movs	r0, #40	@ 0x28
 800377e:	f7ff fb89 	bl	8002e94 <lcd_ShowStr>
	if(speed == 1000)
 8003782:	4b32      	ldr	r3, [pc, #200]	@ (800384c <screen_init+0x1f4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800378a:	d10c      	bne.n	80037a6 <screen_init+0x14e>
		lcd_ShowStr(120, 160, "EASY", WHITE, BLACK, 16, 0);
 800378c:	2300      	movs	r3, #0
 800378e:	9302      	str	r3, [sp, #8]
 8003790:	2310      	movs	r3, #16
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2300      	movs	r3, #0
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800379c:	4a2c      	ldr	r2, [pc, #176]	@ (8003850 <screen_init+0x1f8>)
 800379e:	21a0      	movs	r1, #160	@ 0xa0
 80037a0:	2078      	movs	r0, #120	@ 0x78
 80037a2:	f7ff fb77 	bl	8002e94 <lcd_ShowStr>
	if(speed == 500)
 80037a6:	4b29      	ldr	r3, [pc, #164]	@ (800384c <screen_init+0x1f4>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80037ae:	d10c      	bne.n	80037ca <screen_init+0x172>
		lcd_ShowStr(120, 160, "MEDIUM", WHITE, BLACK, 16, 0);
 80037b0:	2300      	movs	r3, #0
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	2310      	movs	r3, #16
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	2300      	movs	r3, #0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037c0:	4a24      	ldr	r2, [pc, #144]	@ (8003854 <screen_init+0x1fc>)
 80037c2:	21a0      	movs	r1, #160	@ 0xa0
 80037c4:	2078      	movs	r0, #120	@ 0x78
 80037c6:	f7ff fb65 	bl	8002e94 <lcd_ShowStr>
	if(speed == 100)
 80037ca:	4b20      	ldr	r3, [pc, #128]	@ (800384c <screen_init+0x1f4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b64      	cmp	r3, #100	@ 0x64
 80037d0:	d10c      	bne.n	80037ec <screen_init+0x194>
		lcd_ShowStr(120, 160, "HARD", WHITE, BLACK, 16, 0);
 80037d2:	2300      	movs	r3, #0
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	2310      	movs	r3, #16
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	2300      	movs	r3, #0
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003858 <screen_init+0x200>)
 80037e4:	21a0      	movs	r1, #160	@ 0xa0
 80037e6:	2078      	movs	r0, #120	@ 0x78
 80037e8:	f7ff fb54 	bl	8002e94 <lcd_ShowStr>

	lcd_ShowStr(40,180,"Leaderboard (<)",WHITE,BLACK,16,0);
 80037ec:	2300      	movs	r3, #0
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	2310      	movs	r3, #16
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2300      	movs	r3, #0
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037fc:	4a17      	ldr	r2, [pc, #92]	@ (800385c <screen_init+0x204>)
 80037fe:	21b4      	movs	r1, #180	@ 0xb4
 8003800:	2028      	movs	r0, #40	@ 0x28
 8003802:	f7ff fb47 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
 8003806:	2301      	movs	r3, #1
 8003808:	9302      	str	r3, [sp, #8]
 800380a:	2318      	movs	r3, #24
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2300      	movs	r3, #0
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	4a12      	ldr	r2, [pc, #72]	@ (8003860 <screen_init+0x208>)
 8003816:	21eb      	movs	r1, #235	@ 0xeb
 8003818:	205a      	movs	r0, #90	@ 0x5a
 800381a:	f7ff fb3b 	bl	8002e94 <lcd_ShowStr>
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	0800dbc8 	.word	0x0800dbc8
 8003828:	0800dbd4 	.word	0x0800dbd4
 800382c:	200001d4 	.word	0x200001d4
 8003830:	0800dbe0 	.word	0x0800dbe0
 8003834:	200001d8 	.word	0x200001d8
 8003838:	0800dbec 	.word	0x0800dbec
 800383c:	0800dbf4 	.word	0x0800dbf4
 8003840:	0800dbfc 	.word	0x0800dbfc
 8003844:	0800dc04 	.word	0x0800dc04
 8003848:	0800dc0c 	.word	0x0800dc0c
 800384c:	20000000 	.word	0x20000000
 8003850:	0800dc18 	.word	0x0800dc18
 8003854:	0800dc20 	.word	0x0800dc20
 8003858:	0800dc28 	.word	0x0800dc28
 800385c:	0800dc30 	.word	0x0800dc30
 8003860:	0800dc40 	.word	0x0800dc40

08003864 <screen_play>:

void screen_play(){
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af02      	add	r7, sp, #8
	lcd_Fill(0, 0, 240, 200, WHITE);
 800386a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	23c8      	movs	r3, #200	@ 0xc8
 8003872:	22f0      	movs	r2, #240	@ 0xf0
 8003874:	2100      	movs	r1, #0
 8003876:	2000      	movs	r0, #0
 8003878:	f7fe fdcc 	bl	8002414 <lcd_Fill>
	lcd_Fill(90, 210, 150, 250, BLUE);//UP
 800387c:	231f      	movs	r3, #31
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	23fa      	movs	r3, #250	@ 0xfa
 8003882:	2296      	movs	r2, #150	@ 0x96
 8003884:	21d2      	movs	r1, #210	@ 0xd2
 8003886:	205a      	movs	r0, #90	@ 0x5a
 8003888:	f7fe fdc4 	bl	8002414 <lcd_Fill>
	lcd_Fill(90, 260, 150, 300, BLUE);//DOWN
 800388c:	231f      	movs	r3, #31
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003894:	2296      	movs	r2, #150	@ 0x96
 8003896:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800389a:	205a      	movs	r0, #90	@ 0x5a
 800389c:	f7fe fdba 	bl	8002414 <lcd_Fill>
	lcd_Fill(20, 260, 80, 300, BLUE);//LEFT
 80038a0:	231f      	movs	r3, #31
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80038a8:	2250      	movs	r2, #80	@ 0x50
 80038aa:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80038ae:	2014      	movs	r0, #20
 80038b0:	f7fe fdb0 	bl	8002414 <lcd_Fill>
	lcd_Fill(160, 260, 220, 300, BLUE);//RIGHT
 80038b4:	231f      	movs	r3, #31
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80038bc:	22dc      	movs	r2, #220	@ 0xdc
 80038be:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80038c2:	20a0      	movs	r0, #160	@ 0xa0
 80038c4:	f7fe fda6 	bl	8002414 <lcd_Fill>
}
 80038c8:	bf00      	nop
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <screen_score>:

void screen_score(){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af04      	add	r7, sp, #16
	lcd_ShowStr(0, 205, "Score: ", WHITE, WHITE, 24, 1);
 80038d6:	2301      	movs	r3, #1
 80038d8:	9302      	str	r3, [sp, #8]
 80038da:	2318      	movs	r3, #24
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003918 <screen_score+0x48>)
 80038ea:	21cd      	movs	r1, #205	@ 0xcd
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7ff fad1 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowIntNum(0, 230, score, 4, WHITE, BLACK, 24);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <screen_score+0x4c>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	2318      	movs	r3, #24
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	2300      	movs	r3, #0
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2304      	movs	r3, #4
 8003908:	21e6      	movs	r1, #230	@ 0xe6
 800390a:	2000      	movs	r0, #0
 800390c:	f7fe ff40 	bl	8002790 <lcd_ShowIntNum>
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	0800dc48 	.word	0x0800dc48
 800391c:	20000b14 	.word	0x20000b14

08003920 <screen_game_over>:

void screen_game_over(){
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af04      	add	r7, sp, #16
	lcd_ShowStr(70,90,"GAME OVER",WHITE,WHITE,24,1);
 8003926:	2301      	movs	r3, #1
 8003928:	9302      	str	r3, [sp, #8]
 800392a:	2318      	movs	r3, #24
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003938:	4aa1      	ldr	r2, [pc, #644]	@ (8003bc0 <screen_game_over+0x2a0>)
 800393a:	215a      	movs	r1, #90	@ 0x5a
 800393c:	2046      	movs	r0, #70	@ 0x46
 800393e:	f7ff faa9 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(80, 220, "Score: ", WHITE, WHITE, 24, 1);
 8003942:	2301      	movs	r3, #1
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	2318      	movs	r3, #24
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003954:	4a9b      	ldr	r2, [pc, #620]	@ (8003bc4 <screen_game_over+0x2a4>)
 8003956:	21dc      	movs	r1, #220	@ 0xdc
 8003958:	2050      	movs	r0, #80	@ 0x50
 800395a:	f7ff fa9b 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(40,120,"Player ID:",WHITE,BLACK,16,0);
 800395e:	2300      	movs	r3, #0
 8003960:	9302      	str	r3, [sp, #8]
 8003962:	2310      	movs	r3, #16
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800396e:	4a96      	ldr	r2, [pc, #600]	@ (8003bc8 <screen_game_over+0x2a8>)
 8003970:	2178      	movs	r1, #120	@ 0x78
 8003972:	2028      	movs	r0, #40	@ 0x28
 8003974:	f7ff fa8e 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowIntNum(120, 120, ID, 4, WHITE, BLACK, 16);
 8003978:	4b94      	ldr	r3, [pc, #592]	@ (8003bcc <screen_game_over+0x2ac>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	b29a      	uxth	r2, r3
 800397e:	2310      	movs	r3, #16
 8003980:	9302      	str	r3, [sp, #8]
 8003982:	2300      	movs	r3, #0
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2304      	movs	r3, #4
 800398e:	2178      	movs	r1, #120	@ 0x78
 8003990:	2078      	movs	r0, #120	@ 0x78
 8003992:	f7fe fefd 	bl	8002790 <lcd_ShowIntNum>
	lcd_ShowStr(40, 140, "Mode (B):", WHITE, BLACK, 16, 0);
 8003996:	2300      	movs	r3, #0
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	2310      	movs	r3, #16
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	2300      	movs	r3, #0
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039a6:	4a8a      	ldr	r2, [pc, #552]	@ (8003bd0 <screen_game_over+0x2b0>)
 80039a8:	218c      	movs	r1, #140	@ 0x8c
 80039aa:	2028      	movs	r0, #40	@ 0x28
 80039ac:	f7ff fa72 	bl	8002e94 <lcd_ShowStr>
	if(mode == NORMAL)
 80039b0:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <screen_game_over+0x2b4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10c      	bne.n	80039d2 <screen_game_over+0xb2>
		lcd_ShowStr(120, 140, "NORMAL", WHITE, BLACK, 16, 0);
 80039b8:	2300      	movs	r3, #0
 80039ba:	9302      	str	r3, [sp, #8]
 80039bc:	2310      	movs	r3, #16
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c8:	4a83      	ldr	r2, [pc, #524]	@ (8003bd8 <screen_game_over+0x2b8>)
 80039ca:	218c      	movs	r1, #140	@ 0x8c
 80039cc:	2078      	movs	r0, #120	@ 0x78
 80039ce:	f7ff fa61 	bl	8002e94 <lcd_ShowStr>
	if(mode == WALL)
 80039d2:	4b80      	ldr	r3, [pc, #512]	@ (8003bd4 <screen_game_over+0x2b4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d10c      	bne.n	80039f4 <screen_game_over+0xd4>
		lcd_ShowStr(120, 140, "WALL", WHITE, BLACK, 16, 0);
 80039da:	2300      	movs	r3, #0
 80039dc:	9302      	str	r3, [sp, #8]
 80039de:	2310      	movs	r3, #16
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ea:	4a7c      	ldr	r2, [pc, #496]	@ (8003bdc <screen_game_over+0x2bc>)
 80039ec:	218c      	movs	r1, #140	@ 0x8c
 80039ee:	2078      	movs	r0, #120	@ 0x78
 80039f0:	f7ff fa50 	bl	8002e94 <lcd_ShowStr>
	if(mode == WALLS)
 80039f4:	4b77      	ldr	r3, [pc, #476]	@ (8003bd4 <screen_game_over+0x2b4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d10c      	bne.n	8003a16 <screen_game_over+0xf6>
		lcd_ShowStr(120, 140, "WALLS", WHITE, BLACK, 16, 0);
 80039fc:	2300      	movs	r3, #0
 80039fe:	9302      	str	r3, [sp, #8]
 8003a00:	2310      	movs	r3, #16
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	2300      	movs	r3, #0
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a0c:	4a74      	ldr	r2, [pc, #464]	@ (8003be0 <screen_game_over+0x2c0>)
 8003a0e:	218c      	movs	r1, #140	@ 0x8c
 8003a10:	2078      	movs	r0, #120	@ 0x78
 8003a12:	f7ff fa3f 	bl	8002e94 <lcd_ShowStr>
	if(mode == TIMER)
 8003a16:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <screen_game_over+0x2b4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d10c      	bne.n	8003a38 <screen_game_over+0x118>
		lcd_ShowStr(120, 140, "TIMER", WHITE, BLACK, 16, 0);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	2310      	movs	r3, #16
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8003be4 <screen_game_over+0x2c4>)
 8003a30:	218c      	movs	r1, #140	@ 0x8c
 8003a32:	2078      	movs	r0, #120	@ 0x78
 8003a34:	f7ff fa2e 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(40, 160, "Speed (E):", WHITE, BLACK, 16, 0);
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a48:	4a67      	ldr	r2, [pc, #412]	@ (8003be8 <screen_game_over+0x2c8>)
 8003a4a:	21a0      	movs	r1, #160	@ 0xa0
 8003a4c:	2028      	movs	r0, #40	@ 0x28
 8003a4e:	f7ff fa21 	bl	8002e94 <lcd_ShowStr>
	if(speed == 1000)
 8003a52:	4b66      	ldr	r3, [pc, #408]	@ (8003bec <screen_game_over+0x2cc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a5a:	d10c      	bne.n	8003a76 <screen_game_over+0x156>
		lcd_ShowStr(120, 160, "EASY", WHITE, BLACK, 16, 0);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9302      	str	r3, [sp, #8]
 8003a60:	2310      	movs	r3, #16
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2300      	movs	r3, #0
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a6c:	4a60      	ldr	r2, [pc, #384]	@ (8003bf0 <screen_game_over+0x2d0>)
 8003a6e:	21a0      	movs	r1, #160	@ 0xa0
 8003a70:	2078      	movs	r0, #120	@ 0x78
 8003a72:	f7ff fa0f 	bl	8002e94 <lcd_ShowStr>
	if(speed == 500)
 8003a76:	4b5d      	ldr	r3, [pc, #372]	@ (8003bec <screen_game_over+0x2cc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003a7e:	d10c      	bne.n	8003a9a <screen_game_over+0x17a>
		lcd_ShowStr(120, 160, "MEDIUM", WHITE, BLACK, 16, 0);
 8003a80:	2300      	movs	r3, #0
 8003a82:	9302      	str	r3, [sp, #8]
 8003a84:	2310      	movs	r3, #16
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a90:	4a58      	ldr	r2, [pc, #352]	@ (8003bf4 <screen_game_over+0x2d4>)
 8003a92:	21a0      	movs	r1, #160	@ 0xa0
 8003a94:	2078      	movs	r0, #120	@ 0x78
 8003a96:	f7ff f9fd 	bl	8002e94 <lcd_ShowStr>
	if(speed == 100)
 8003a9a:	4b54      	ldr	r3, [pc, #336]	@ (8003bec <screen_game_over+0x2cc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b64      	cmp	r3, #100	@ 0x64
 8003aa0:	d10c      	bne.n	8003abc <screen_game_over+0x19c>
		lcd_ShowStr(120, 160, "HARD", WHITE, BLACK, 16, 0);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	9302      	str	r3, [sp, #8]
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ab2:	4a51      	ldr	r2, [pc, #324]	@ (8003bf8 <screen_game_over+0x2d8>)
 8003ab4:	21a0      	movs	r1, #160	@ 0xa0
 8003ab6:	2078      	movs	r0, #120	@ 0x78
 8003ab8:	f7ff f9ec 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(40, 180, "Leaderboard (<)", WHITE, BLACK, 16, 0);
 8003abc:	2300      	movs	r3, #0
 8003abe:	9302      	str	r3, [sp, #8]
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003acc:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <screen_game_over+0x2dc>)
 8003ace:	21b4      	movs	r1, #180	@ 0xb4
 8003ad0:	2028      	movs	r0, #40	@ 0x28
 8003ad2:	f7ff f9df 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowStr(40, 200, "Time:", WHITE, BLACK, 16, 0);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9302      	str	r3, [sp, #8]
 8003ada:	2310      	movs	r3, #16
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ae6:	4a46      	ldr	r2, [pc, #280]	@ (8003c00 <screen_game_over+0x2e0>)
 8003ae8:	21c8      	movs	r1, #200	@ 0xc8
 8003aea:	2028      	movs	r0, #40	@ 0x28
 8003aec:	f7ff f9d2 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowIntNum(90, 200, count/60, 2, WHITE, BLACK, 16);
 8003af0:	4b44      	ldr	r3, [pc, #272]	@ (8003c04 <screen_game_over+0x2e4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a44      	ldr	r2, [pc, #272]	@ (8003c08 <screen_game_over+0x2e8>)
 8003af6:	fb82 1203 	smull	r1, r2, r2, r3
 8003afa:	441a      	add	r2, r3
 8003afc:	1152      	asrs	r2, r2, #5
 8003afe:	17db      	asrs	r3, r3, #31
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	2310      	movs	r3, #16
 8003b06:	9302      	str	r3, [sp, #8]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2302      	movs	r3, #2
 8003b14:	21c8      	movs	r1, #200	@ 0xc8
 8003b16:	205a      	movs	r0, #90	@ 0x5a
 8003b18:	f7fe fe3a 	bl	8002790 <lcd_ShowIntNum>
	lcd_ShowStr(110, 200, ":", WHITE, BLACK, 16, 0);
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9302      	str	r3, [sp, #8]
 8003b20:	2310      	movs	r3, #16
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2300      	movs	r3, #0
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b2c:	4a37      	ldr	r2, [pc, #220]	@ (8003c0c <screen_game_over+0x2ec>)
 8003b2e:	21c8      	movs	r1, #200	@ 0xc8
 8003b30:	206e      	movs	r0, #110	@ 0x6e
 8003b32:	f7ff f9af 	bl	8002e94 <lcd_ShowStr>
	lcd_ShowIntNum(120, 200, count%60, 2, WHITE, BLACK, 16);
 8003b36:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <screen_game_over+0x2e4>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b33      	ldr	r3, [pc, #204]	@ (8003c08 <screen_game_over+0x2e8>)
 8003b3c:	fb83 1302 	smull	r1, r3, r3, r2
 8003b40:	4413      	add	r3, r2
 8003b42:	1159      	asrs	r1, r3, #5
 8003b44:	17d3      	asrs	r3, r2, #31
 8003b46:	1ac9      	subs	r1, r1, r3
 8003b48:	460b      	mov	r3, r1
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	1a5b      	subs	r3, r3, r1
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	1ad1      	subs	r1, r2, r3
 8003b52:	b28a      	uxth	r2, r1
 8003b54:	2310      	movs	r3, #16
 8003b56:	9302      	str	r3, [sp, #8]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2302      	movs	r3, #2
 8003b64:	21c8      	movs	r1, #200	@ 0xc8
 8003b66:	2078      	movs	r0, #120	@ 0x78
 8003b68:	f7fe fe12 	bl	8002790 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 220, score, 2, WHITE, BLACK, 24);
 8003b6c:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <screen_game_over+0x2f0>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	2318      	movs	r3, #24
 8003b74:	9302      	str	r3, [sp, #8]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2302      	movs	r3, #2
 8003b82:	21dc      	movs	r1, #220	@ 0xdc
 8003b84:	2096      	movs	r0, #150	@ 0x96
 8003b86:	f7fe fe03 	bl	8002790 <lcd_ShowIntNum>
	lcd_Fill(50, 250, 190, 300, GREEN);
 8003b8a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8003b94:	22be      	movs	r2, #190	@ 0xbe
 8003b96:	21fa      	movs	r1, #250	@ 0xfa
 8003b98:	2032      	movs	r0, #50	@ 0x32
 8003b9a:	f7fe fc3b 	bl	8002414 <lcd_Fill>
	lcd_ShowStr(80,260,"RESTART",BLACK,BLACK,24,1);
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	9302      	str	r3, [sp, #8]
 8003ba2:	2318      	movs	r3, #24
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2300      	movs	r3, #0
 8003bac:	4a19      	ldr	r2, [pc, #100]	@ (8003c14 <screen_game_over+0x2f4>)
 8003bae:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8003bb2:	2050      	movs	r0, #80	@ 0x50
 8003bb4:	f7ff f96e 	bl	8002e94 <lcd_ShowStr>
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	0800dc50 	.word	0x0800dc50
 8003bc4:	0800dc48 	.word	0x0800dc48
 8003bc8:	0800dbd4 	.word	0x0800dbd4
 8003bcc:	200001d4 	.word	0x200001d4
 8003bd0:	0800dbe0 	.word	0x0800dbe0
 8003bd4:	200001d8 	.word	0x200001d8
 8003bd8:	0800dbec 	.word	0x0800dbec
 8003bdc:	0800dbf4 	.word	0x0800dbf4
 8003be0:	0800dbfc 	.word	0x0800dbfc
 8003be4:	0800dc04 	.word	0x0800dc04
 8003be8:	0800dc0c 	.word	0x0800dc0c
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	0800dc18 	.word	0x0800dc18
 8003bf4:	0800dc20 	.word	0x0800dc20
 8003bf8:	0800dc28 	.word	0x0800dc28
 8003bfc:	0800dc30 	.word	0x0800dc30
 8003c00:	0800dc5c 	.word	0x0800dc5c
 8003c04:	200001dc 	.word	0x200001dc
 8003c08:	88888889 	.word	0x88888889
 8003c0c:	0800dc64 	.word	0x0800dc64
 8003c10:	20000b14 	.word	0x20000b14
 8003c14:	0800dc68 	.word	0x0800dc68

08003c18 <sensor_Read>:

void sensor_init(){
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
}

void sensor_Read(){
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8003c1c:	2205      	movs	r2, #5
 8003c1e:	4903      	ldr	r1, [pc, #12]	@ (8003c2c <sensor_Read+0x14>)
 8003c20:	4803      	ldr	r0, [pc, #12]	@ (8003c30 <sensor_Read+0x18>)
 8003c22:	f002 fce9 	bl	80065f8 <HAL_ADC_Start_DMA>
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200002b8 	.word	0x200002b8
 8003c30:	20000104 	.word	0x20000104

08003c34 <sensor_GetLight>:

uint16_t sensor_GetLight(){//do sang
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8003c38:	4b03      	ldr	r3, [pc, #12]	@ (8003c48 <sensor_GetLight+0x14>)
 8003c3a:	889b      	ldrh	r3, [r3, #4]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	200002b8 	.word	0x200002b8

08003c4c <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8003c50:	4b03      	ldr	r3, [pc, #12]	@ (8003c60 <sensor_GetPotentiometer+0x14>)
 8003c52:	88db      	ldrh	r3, [r3, #6]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	200002b8 	.word	0x200002b8
 8003c64:	00000000 	.word	0x00000000

08003c68 <sensor_GetVoltage>:

float sensor_GetVoltage(){
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[0]*3.3*12)/(4095*1.565);
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <sensor_GetVoltage+0x70>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	ee07 3a90 	vmov	s15, r3
 8003c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c78:	ee17 0a90 	vmov	r0, s15
 8003c7c:	f7fc fc5c 	bl	8000538 <__aeabi_f2d>
 8003c80:	a311      	add	r3, pc, #68	@ (adr r3, 8003cc8 <sensor_GetVoltage+0x60>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fcaf 	bl	80005e8 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	4b11      	ldr	r3, [pc, #68]	@ (8003cdc <sensor_GetVoltage+0x74>)
 8003c98:	f7fc fca6 	bl	80005e8 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	a30a      	add	r3, pc, #40	@ (adr r3, 8003cd0 <sensor_GetVoltage+0x68>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f7fc fdc7 	bl	800083c <__aeabi_ddiv>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7fc ff67 	bl	8000b88 <__aeabi_d2f>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	ee07 3a90 	vmov	s15, r3
}
 8003cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	66666666 	.word	0x66666666
 8003ccc:	400a6666 	.word	0x400a6666
 8003cd0:	cccccccd 	.word	0xcccccccd
 8003cd4:	40b908ac 	.word	0x40b908ac
 8003cd8:	200002b8 	.word	0x200002b8
 8003cdc:	40280000 	.word	0x40280000

08003ce0 <sensor_GetCurrent>:

float sensor_GetCurrent(){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
 8003ce4:	4b28      	ldr	r3, [pc, #160]	@ (8003d88 <sensor_GetCurrent+0xa8>)
 8003ce6:	885b      	ldrh	r3, [r3, #2]
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf0:	ee17 0a90 	vmov	r0, s15
 8003cf4:	f7fc fc20 	bl	8000538 <__aeabi_f2d>
 8003cf8:	a31f      	add	r3, pc, #124	@ (adr r3, 8003d78 <sensor_GetCurrent+0x98>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fc73 	bl	80005e8 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d8c <sensor_GetCurrent+0xac>)
 8003d10:	f7fc fc6a 	bl	80005e8 <__aeabi_dmul>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4610      	mov	r0, r2
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	a318      	add	r3, pc, #96	@ (adr r3, 8003d80 <sensor_GetCurrent+0xa0>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fd8b 	bl	800083c <__aeabi_ddiv>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	4b17      	ldr	r3, [pc, #92]	@ (8003d90 <sensor_GetCurrent+0xb0>)
 8003d34:	f7fc faa0 	bl	8000278 <__aeabi_dsub>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	4b13      	ldr	r3, [pc, #76]	@ (8003d94 <sensor_GetCurrent+0xb4>)
 8003d46:	f7fc fc4f 	bl	80005e8 <__aeabi_dmul>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4610      	mov	r0, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	4b0e      	ldr	r3, [pc, #56]	@ (8003d90 <sensor_GetCurrent+0xb0>)
 8003d58:	f7fc fd70 	bl	800083c <__aeabi_ddiv>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f7fc ff10 	bl	8000b88 <__aeabi_d2f>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	ee07 3a90 	vmov	s15, r3
}
 8003d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	f3af 8000 	nop.w
 8003d78:	66666666 	.word	0x66666666
 8003d7c:	400a6666 	.word	0x400a6666
 8003d80:	147ae148 	.word	0x147ae148
 8003d84:	40a4b2ee 	.word	0x40a4b2ee
 8003d88:	200002b8 	.word	0x200002b8
 8003d8c:	408f4000 	.word	0x408f4000
 8003d90:	40040000 	.word	0x40040000
 8003d94:	40140000 	.word	0x40140000

08003d98 <sensor_GetTemperature>:

float sensor_GetTemperature(){//Nhiet do
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <sensor_GetTemperature+0x30>)
 8003d9e:	891b      	ldrh	r3, [r3, #8]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003dcc <sensor_GetTemperature+0x34>
 8003dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003dd0 <sensor_GetTemperature+0x38>
 8003db4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003db8:	eef0 7a66 	vmov.f32	s15, s13
}
 8003dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	200002b8 	.word	0x200002b8
 8003dcc:	43a50000 	.word	0x43a50000
 8003dd0:	457ff000 	.word	0x457ff000

08003dd4 <getWattage>:

float getWattage(){
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	ed2d 8b02 	vpush	{d8}
 8003dda:	af00      	add	r7, sp, #0
	return sensor_GetVoltage() * sensor_GetCurrent();
 8003ddc:	f7ff ff44 	bl	8003c68 <sensor_GetVoltage>
 8003de0:	eeb0 8a40 	vmov.f32	s16, s0
 8003de4:	f7ff ff7c 	bl	8003ce0 <sensor_GetCurrent>
 8003de8:	eef0 7a40 	vmov.f32	s15, s0
 8003dec:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8003df0:	eeb0 0a67 	vmov.f32	s0, s15
 8003df4:	46bd      	mov	sp, r7
 8003df6:	ecbd 8b02 	vpop	{d8}
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <isLight>:

uint16_t isLight(){//> 0.5 nguoc anh sang manh
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
	if((float)sensor_GetLight()/4095 > 0.5)
 8003e00:	f7ff ff18 	bl	8003c34 <sensor_GetLight>
 8003e04:	4603      	mov	r3, r0
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e0e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8003e30 <isLight+0x34>
 8003e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e16:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e22:	dd01      	ble.n	8003e28 <isLight+0x2c>
		return 1;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <isLight+0x2e>
	return 0;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	457ff000 	.word	0x457ff000
 8003e34:	00000000 	.word	0x00000000

08003e38 <isHumidity>:

uint16_t isHumidity(){//Do am (nut van bien tro)
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	if((float)sensor_GetPotentiometer()/4094 > 0.7)
 8003e3c:	f7ff ff06 	bl	8003c4c <sensor_GetPotentiometer>
 8003e40:	4603      	mov	r3, r0
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003e80 <isHumidity+0x48>
 8003e4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e52:	ee16 0a90 	vmov	r0, s13
 8003e56:	f7fc fb6f 	bl	8000538 <__aeabi_f2d>
 8003e5a:	a307      	add	r3, pc, #28	@ (adr r3, 8003e78 <isHumidity+0x40>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fe52 	bl	8000b08 <__aeabi_dcmpgt>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <isHumidity+0x36>
		return 1;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <isHumidity+0x38>
	return 0;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	f3af 8000 	nop.w
 8003e78:	66666666 	.word	0x66666666
 8003e7c:	3fe66666 	.word	0x3fe66666
 8003e80:	457fe000 	.word	0x457fe000

08003e84 <draw_snake>:
int sw_right = 1;
int sw_left = 1;
uint8_t score = 0;
int lose = 0;

void draw_snake(int x,int y){
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GREEN, 5, 1);
 8003e8e:	2301      	movs	r3, #1
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	2305      	movs	r3, #5
 8003e94:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fe ff8d 	bl	8002dba <lcd_DrawCircle>
}
 8003ea0:	bf00      	nop
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <draw_food>:

void draw_food(int x,int y){
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, RED, 5, 1);
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2305      	movs	r3, #5
 8003eb8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fe ff7b 	bl	8002dba <lcd_DrawCircle>
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <draw_head>:

void draw_head(int x, int y){
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, LIGHTGREEN, 5, 1);
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2305      	movs	r3, #5
 8003edc:	f248 421f 	movw	r2, #33823	@ 0x841f
 8003ee0:	6839      	ldr	r1, [r7, #0]
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fe ff69 	bl	8002dba <lcd_DrawCircle>
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <draw_wall>:

void draw_wall(int x, int y){
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GRAY, 5, 1);
 8003efa:	2301      	movs	r3, #1
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2305      	movs	r3, #5
 8003f00:	f248 4230 	movw	r2, #33840	@ 0x8430
 8003f04:	6839      	ldr	r1, [r7, #0]
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fe ff57 	bl	8002dba <lcd_DrawCircle>
}
 8003f0c:	bf00      	nop
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <clear_block>:

void clear_block(int x,int y){
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, WHITE, 5, 1);
 8003f1e:	2301      	movs	r3, #1
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2305      	movs	r3, #5
 8003f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f28:	6839      	ldr	r1, [r7, #0]
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7fe ff45 	bl	8002dba <lcd_DrawCircle>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <update_grid>:

void update_grid(){
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	e08b      	b.n	800405c <update_grid+0x124>
		for(int j=0;j<20;j++){
 8003f44:	2300      	movs	r3, #0
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	e081      	b.n	800404e <update_grid+0x116>
			if(draw_grid[i][j]==2){
 8003f4a:	4949      	ldr	r1, [pc, #292]	@ (8004070 <update_grid+0x138>)
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d10f      	bne.n	8003f82 <update_grid+0x4a>
				draw_snake(i*10+5,j*10+5);
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	1d58      	adds	r0, r3, #5
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	3305      	adds	r3, #5
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f7ff ff82 	bl	8003e84 <draw_snake>
 8003f80:	e062      	b.n	8004048 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==4){
 8003f82:	493b      	ldr	r1, [pc, #236]	@ (8004070 <update_grid+0x138>)
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	4413      	add	r3, r2
 8003f92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d10f      	bne.n	8003fba <update_grid+0x82>
				draw_head(i*10+5,j*10+5);
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	1d58      	adds	r0, r3, #5
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	3305      	adds	r3, #5
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7ff ff8a 	bl	8003ecc <draw_head>
 8003fb8:	e046      	b.n	8004048 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==1){
 8003fba:	492d      	ldr	r1, [pc, #180]	@ (8004070 <update_grid+0x138>)
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10f      	bne.n	8003ff2 <update_grid+0xba>
				draw_food(i*10+5,j*10+5);
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	1d58      	adds	r0, r3, #5
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	3305      	adds	r3, #5
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7ff ff5c 	bl	8003ea8 <draw_food>
 8003ff0:	e02a      	b.n	8004048 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==3){
 8003ff2:	491f      	ldr	r1, [pc, #124]	@ (8004070 <update_grid+0x138>)
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	4413      	add	r3, r2
 8004002:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d10f      	bne.n	800402a <update_grid+0xf2>
				draw_wall(i*10+5,j*10+5);
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	1d58      	adds	r0, r3, #5
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	3305      	adds	r3, #5
 8004022:	4619      	mov	r1, r3
 8004024:	f7ff ff64 	bl	8003ef0 <draw_wall>
 8004028:	e00e      	b.n	8004048 <update_grid+0x110>
			}
			else{
				clear_block(i*10+5,j*10+5);
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	1d58      	adds	r0, r3, #5
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	3305      	adds	r3, #5
 8004042:	4619      	mov	r1, r3
 8004044:	f7ff ff66 	bl	8003f14 <clear_block>
		for(int j=0;j<20;j++){
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b13      	cmp	r3, #19
 8004052:	f77f af7a 	ble.w	8003f4a <update_grid+0x12>
	for(int i=0;i<24;i++){
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3301      	adds	r3, #1
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b17      	cmp	r3, #23
 8004060:	f77f af70 	ble.w	8003f44 <update_grid+0xc>
			}
		}
	}
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200002c4 	.word	0x200002c4

08004074 <delete_wall>:

void delete_wall(void){
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
 800407e:	e022      	b.n	80040c6 <delete_wall+0x52>
		for(int j=0;j<20;j++){
 8004080:	2300      	movs	r3, #0
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	e019      	b.n	80040ba <delete_wall+0x46>
			if(draw_grid[i][j]==3){
 8004086:	4915      	ldr	r1, [pc, #84]	@ (80040dc <delete_wall+0x68>)
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	4413      	add	r3, r2
 8004096:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800409a:	2b03      	cmp	r3, #3
 800409c:	d10a      	bne.n	80040b4 <delete_wall+0x40>
				draw_grid[i][j]=0;
 800409e:	490f      	ldr	r1, [pc, #60]	@ (80040dc <delete_wall+0x68>)
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4413      	add	r3, r2
 80040ae:	2200      	movs	r2, #0
 80040b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	3301      	adds	r3, #1
 80040b8:	603b      	str	r3, [r7, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b13      	cmp	r3, #19
 80040be:	dde2      	ble.n	8004086 <delete_wall+0x12>
	for(int i=0;i<24;i++){
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3301      	adds	r3, #1
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b17      	cmp	r3, #23
 80040ca:	ddd9      	ble.n	8004080 <delete_wall+0xc>
			}
		}
	}
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	200002c4 	.word	0x200002c4

080040e0 <init_grid>:

void init_grid(void){
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
	for(int i=0; i<24;i++){
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	e016      	b.n	800411a <init_grid+0x3a>
		for(int j=0;j<20;j++){
 80040ec:	2300      	movs	r3, #0
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	e00d      	b.n	800410e <init_grid+0x2e>
			draw_grid[i][j]=0;
 80040f2:	490f      	ldr	r1, [pc, #60]	@ (8004130 <init_grid+0x50>)
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4413      	add	r3, r2
 8004102:	2200      	movs	r2, #0
 8004104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	3301      	adds	r3, #1
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b13      	cmp	r3, #19
 8004112:	ddee      	ble.n	80040f2 <init_grid+0x12>
	for(int i=0; i<24;i++){
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3301      	adds	r3, #1
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b17      	cmp	r3, #23
 800411e:	dde5      	ble.n	80040ec <init_grid+0xc>
		}
	}
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	200002c4 	.word	0x200002c4

08004134 <move_snake>:

void move_snake(){
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
		for(int i=size_of_snake-1;i>=0;i--){
 800413a:	4b63      	ldr	r3, [pc, #396]	@ (80042c8 <move_snake+0x194>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	e014      	b.n	800416e <move_snake+0x3a>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=0;
 8004144:	4a61      	ldr	r2, [pc, #388]	@ (80042cc <move_snake+0x198>)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800414c:	495f      	ldr	r1, [pc, #380]	@ (80042cc <move_snake+0x198>)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	3318      	adds	r3, #24
 8004152:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004156:	485e      	ldr	r0, [pc, #376]	@ (80042d0 <move_snake+0x19c>)
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	2200      	movs	r2, #0
 8004164:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-1;i>=0;i--){
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	3b01      	subs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	dae7      	bge.n	8004144 <move_snake+0x10>
		}
		draw_grid[snake_pos[0][0]][snake_pos[1][0]] = 0;
 8004174:	4b55      	ldr	r3, [pc, #340]	@ (80042cc <move_snake+0x198>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b54      	ldr	r3, [pc, #336]	@ (80042cc <move_snake+0x198>)
 800417a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800417c:	4854      	ldr	r0, [pc, #336]	@ (80042d0 <move_snake+0x19c>)
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	2200      	movs	r2, #0
 800418a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		old_poshx=snake_pos[0][size_of_snake-1];
 800418e:	4b4e      	ldr	r3, [pc, #312]	@ (80042c8 <move_snake+0x194>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3b01      	subs	r3, #1
 8004194:	4a4d      	ldr	r2, [pc, #308]	@ (80042cc <move_snake+0x198>)
 8004196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419a:	4a4e      	ldr	r2, [pc, #312]	@ (80042d4 <move_snake+0x1a0>)
 800419c:	6013      	str	r3, [r2, #0]
		old_poshy=snake_pos[1][size_of_snake-1];
 800419e:	4b4a      	ldr	r3, [pc, #296]	@ (80042c8 <move_snake+0x194>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	4a49      	ldr	r2, [pc, #292]	@ (80042cc <move_snake+0x198>)
 80041a6:	3318      	adds	r3, #24
 80041a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	@ (80042d8 <move_snake+0x1a4>)
 80041ae:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=snake_pos[0][size_of_snake-1]+snake_speed[0];
 80041b0:	4b45      	ldr	r3, [pc, #276]	@ (80042c8 <move_snake+0x194>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	4a45      	ldr	r2, [pc, #276]	@ (80042cc <move_snake+0x198>)
 80041b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041bc:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <move_snake+0x1a8>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4b41      	ldr	r3, [pc, #260]	@ (80042c8 <move_snake+0x194>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	440a      	add	r2, r1
 80041c8:	4940      	ldr	r1, [pc, #256]	@ (80042cc <move_snake+0x198>)
 80041ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=snake_pos[1][size_of_snake-1]+snake_speed[1];
 80041ce:	4b3e      	ldr	r3, [pc, #248]	@ (80042c8 <move_snake+0x194>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	4a3d      	ldr	r2, [pc, #244]	@ (80042cc <move_snake+0x198>)
 80041d6:	3318      	adds	r3, #24
 80041d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041dc:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <move_snake+0x1a8>)
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <move_snake+0x194>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3b01      	subs	r3, #1
 80041e6:	440a      	add	r2, r1
 80041e8:	4938      	ldr	r1, [pc, #224]	@ (80042cc <move_snake+0x198>)
 80041ea:	3318      	adds	r3, #24
 80041ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pos_head[0]=snake_pos[0][size_of_snake-1];
 80041f0:	4b35      	ldr	r3, [pc, #212]	@ (80042c8 <move_snake+0x194>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	4a35      	ldr	r2, [pc, #212]	@ (80042cc <move_snake+0x198>)
 80041f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fc:	4a38      	ldr	r2, [pc, #224]	@ (80042e0 <move_snake+0x1ac>)
 80041fe:	6013      	str	r3, [r2, #0]
		pos_head[1]=snake_pos[1][size_of_snake-1];
 8004200:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <move_snake+0x194>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3b01      	subs	r3, #1
 8004206:	4a31      	ldr	r2, [pc, #196]	@ (80042cc <move_snake+0x198>)
 8004208:	3318      	adds	r3, #24
 800420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420e:	4a34      	ldr	r2, [pc, #208]	@ (80042e0 <move_snake+0x1ac>)
 8004210:	6053      	str	r3, [r2, #4]
		for(int i=size_of_snake-2;i>=0;i--){
 8004212:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <move_snake+0x194>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3b02      	subs	r3, #2
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e020      	b.n	800425e <move_snake+0x12a>
			int nx = snake_pos[0][i];
 800421c:	4a2b      	ldr	r2, [pc, #172]	@ (80042cc <move_snake+0x198>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	60bb      	str	r3, [r7, #8]
			int ny = snake_pos[1][i];
 8004226:	4a29      	ldr	r2, [pc, #164]	@ (80042cc <move_snake+0x198>)
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	3318      	adds	r3, #24
 800422c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004230:	607b      	str	r3, [r7, #4]
			snake_pos[0][i]=old_poshx;
 8004232:	4b28      	ldr	r3, [pc, #160]	@ (80042d4 <move_snake+0x1a0>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4925      	ldr	r1, [pc, #148]	@ (80042cc <move_snake+0x198>)
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			snake_pos[1][i]=old_poshy;
 800423e:	4b26      	ldr	r3, [pc, #152]	@ (80042d8 <move_snake+0x1a4>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4922      	ldr	r1, [pc, #136]	@ (80042cc <move_snake+0x198>)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3318      	adds	r3, #24
 8004248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			old_poshx=nx;
 800424c:	4a21      	ldr	r2, [pc, #132]	@ (80042d4 <move_snake+0x1a0>)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6013      	str	r3, [r2, #0]
			old_poshy=ny;
 8004252:	4a21      	ldr	r2, [pc, #132]	@ (80042d8 <move_snake+0x1a4>)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6013      	str	r3, [r2, #0]
		for(int i=size_of_snake-2;i>=0;i--){
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	3b01      	subs	r3, #1
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	dadb      	bge.n	800421c <move_snake+0xe8>
		}
		for(int i=size_of_snake-2;i>=0;i--){
 8004264:	4b18      	ldr	r3, [pc, #96]	@ (80042c8 <move_snake+0x194>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3b02      	subs	r3, #2
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e014      	b.n	8004298 <move_snake+0x164>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=2;
 800426e:	4a17      	ldr	r2, [pc, #92]	@ (80042cc <move_snake+0x198>)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004276:	4915      	ldr	r1, [pc, #84]	@ (80042cc <move_snake+0x198>)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3318      	adds	r3, #24
 800427c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004280:	4813      	ldr	r0, [pc, #76]	@ (80042d0 <move_snake+0x19c>)
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	2202      	movs	r2, #2
 800428e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-2;i>=0;i--){
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b01      	subs	r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2b00      	cmp	r3, #0
 800429c:	dae7      	bge.n	800426e <move_snake+0x13a>
		}
		check_collision();
 800429e:	f000 fa21 	bl	80046e4 <check_collision>
		check_food();
 80042a2:	f000 fac9 	bl	8004838 <check_food>
		draw_grid[pos_head[0]][pos_head[1]]=4;
 80042a6:	4b0e      	ldr	r3, [pc, #56]	@ (80042e0 <move_snake+0x1ac>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b0d      	ldr	r3, [pc, #52]	@ (80042e0 <move_snake+0x1ac>)
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	4808      	ldr	r0, [pc, #32]	@ (80042d0 <move_snake+0x19c>)
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	2204      	movs	r2, #4
 80042bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80042c0:	bf00      	nop
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	2000001c 	.word	0x2000001c
 80042cc:	20000a44 	.word	0x20000a44
 80042d0:	200002c4 	.word	0x200002c4
 80042d4:	20000b04 	.word	0x20000b04
 80042d8:	20000b08 	.word	0x20000b08
 80042dc:	20000020 	.word	0x20000020
 80042e0:	20000b0c 	.word	0x20000b0c

080042e4 <re_init>:

void re_init(void){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
	init_grid();
 80042e8:	f7ff fefa 	bl	80040e0 <init_grid>
	draw_grid[0][0]=2;
 80042ec:	4b16      	ldr	r3, [pc, #88]	@ (8004348 <re_init+0x64>)
 80042ee:	2202      	movs	r2, #2
 80042f0:	601a      	str	r2, [r3, #0]
	draw_grid[1][0]=2;
 80042f2:	4b15      	ldr	r3, [pc, #84]	@ (8004348 <re_init+0x64>)
 80042f4:	2202      	movs	r2, #2
 80042f6:	651a      	str	r2, [r3, #80]	@ 0x50
	snake_pos[0][0]=0;
 80042f8:	4b14      	ldr	r3, [pc, #80]	@ (800434c <re_init+0x68>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
	snake_pos[1][0]=0;
 80042fe:	4b13      	ldr	r3, [pc, #76]	@ (800434c <re_init+0x68>)
 8004300:	2200      	movs	r2, #0
 8004302:	661a      	str	r2, [r3, #96]	@ 0x60
	snake_pos[0][1]=1;
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <re_init+0x68>)
 8004306:	2201      	movs	r2, #1
 8004308:	605a      	str	r2, [r3, #4]
	snake_pos[1][1]=0;
 800430a:	4b10      	ldr	r3, [pc, #64]	@ (800434c <re_init+0x68>)
 800430c:	2200      	movs	r2, #0
 800430e:	665a      	str	r2, [r3, #100]	@ 0x64
	size_of_snake=2;
 8004310:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <re_init+0x6c>)
 8004312:	2202      	movs	r2, #2
 8004314:	601a      	str	r2, [r3, #0]
	snake_speed[0]=1;
 8004316:	4b0f      	ldr	r3, [pc, #60]	@ (8004354 <re_init+0x70>)
 8004318:	2201      	movs	r2, #1
 800431a:	601a      	str	r2, [r3, #0]
	snake_speed[1]=0;
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <re_init+0x70>)
 800431e:	2200      	movs	r2, #0
 8004320:	605a      	str	r2, [r3, #4]
	sw_up=1;
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <re_init+0x74>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
	sw_down=1;
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <re_init+0x78>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]
	sw_right=1;
 800432e:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <re_init+0x7c>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]
	sw_left=1;
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <re_init+0x80>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]
	score=0;
 800433a:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <re_init+0x84>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
	spawn_food();
 8004340:	f000 f814 	bl	800436c <spawn_food>
}
 8004344:	bf00      	nop
 8004346:	bd80      	pop	{r7, pc}
 8004348:	200002c4 	.word	0x200002c4
 800434c:	20000a44 	.word	0x20000a44
 8004350:	2000001c 	.word	0x2000001c
 8004354:	20000020 	.word	0x20000020
 8004358:	20000028 	.word	0x20000028
 800435c:	2000002c 	.word	0x2000002c
 8004360:	20000030 	.word	0x20000030
 8004364:	20000034 	.word	0x20000034
 8004368:	20000b14 	.word	0x20000b14

0800436c <spawn_food>:

void spawn_food(void){
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
	int xf=rand_no(23);
 8004372:	2017      	movs	r0, #23
 8004374:	f000 f9a2 	bl	80046bc <rand_no>
 8004378:	6078      	str	r0, [r7, #4]
	int yf=rand_no(19);
 800437a:	2013      	movs	r0, #19
 800437c:	f000 f99e 	bl	80046bc <rand_no>
 8004380:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 8004382:	e007      	b.n	8004394 <spawn_food+0x28>
		xf=rand_no(23);
 8004384:	2017      	movs	r0, #23
 8004386:	f000 f999 	bl	80046bc <rand_no>
 800438a:	6078      	str	r0, [r7, #4]
		yf=rand_no(19);
 800438c:	2013      	movs	r0, #19
 800438e:	f000 f995 	bl	80046bc <rand_no>
 8004392:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 8004394:	490d      	ldr	r1, [pc, #52]	@ (80043cc <spawn_food+0x60>)
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	4413      	add	r3, r2
 80043a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d0eb      	beq.n	8004384 <spawn_food+0x18>
	}
	draw_grid[xf][yf]=1;
 80043ac:	4907      	ldr	r1, [pc, #28]	@ (80043cc <spawn_food+0x60>)
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	4413      	add	r3, r2
 80043bc:	2201      	movs	r2, #1
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200002c4 	.word	0x200002c4

080043d0 <spawn_wall>:

void spawn_wall(void){
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
	int xw=rand_no(23);
 80043d6:	2017      	movs	r0, #23
 80043d8:	f000 f970 	bl	80046bc <rand_no>
 80043dc:	60f8      	str	r0, [r7, #12]
	int yw=rand_no(19);
 80043de:	2013      	movs	r0, #19
 80043e0:	f000 f96c 	bl	80046bc <rand_no>
 80043e4:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 80043e6:	e007      	b.n	80043f8 <spawn_wall+0x28>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
		xw=rand_no(23);
 80043e8:	2017      	movs	r0, #23
 80043ea:	f000 f967 	bl	80046bc <rand_no>
 80043ee:	60f8      	str	r0, [r7, #12]
		yw=rand_no(19);
 80043f0:	2013      	movs	r0, #19
 80043f2:	f000 f963 	bl	80046bc <rand_no>
 80043f6:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 80043f8:	49af      	ldr	r1, [pc, #700]	@ (80046b8 <spawn_wall+0x2e8>)
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	4413      	add	r3, r2
 8004408:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d0eb      	beq.n	80043e8 <spawn_wall+0x18>
 8004410:	49a9      	ldr	r1, [pc, #676]	@ (80046b8 <spawn_wall+0x2e8>)
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	4413      	add	r3, r2
 8004420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d0df      	beq.n	80043e8 <spawn_wall+0x18>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	49a2      	ldr	r1, [pc, #648]	@ (80046b8 <spawn_wall+0x2e8>)
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4413      	add	r3, r2
 800443a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 800443e:	2b02      	cmp	r3, #2
 8004440:	d00c      	beq.n	800445c <spawn_wall+0x8c>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	499c      	ldr	r1, [pc, #624]	@ (80046b8 <spawn_wall+0x2e8>)
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	4413      	add	r3, r2
 8004454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d14e      	bne.n	80044fa <spawn_wall+0x12a>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1e5a      	subs	r2, r3, #1
 8004460:	4995      	ldr	r1, [pc, #596]	@ (80046b8 <spawn_wall+0x2e8>)
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	4413      	add	r3, r2
 800446e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d00c      	beq.n	8004490 <spawn_wall+0xc0>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1e5a      	subs	r2, r3, #1
 800447a:	498f      	ldr	r1, [pc, #572]	@ (80046b8 <spawn_wall+0x2e8>)
 800447c:	4613      	mov	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	4413      	add	r3, r2
 8004488:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d134      	bne.n	80044fa <spawn_wall+0x12a>
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	4888      	ldr	r0, [pc, #544]	@ (80046b8 <spawn_wall+0x2e8>)
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d00c      	beq.n	80044c4 <spawn_wall+0xf4>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1c59      	adds	r1, r3, #1
 80044ae:	4882      	ldr	r0, [pc, #520]	@ (80046b8 <spawn_wall+0x2e8>)
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4613      	mov	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d11a      	bne.n	80044fa <spawn_wall+0x12a>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	1e59      	subs	r1, r3, #1
 80044c8:	487b      	ldr	r0, [pc, #492]	@ (80046b8 <spawn_wall+0x2e8>)
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d084      	beq.n	80043e8 <spawn_wall+0x18>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1e59      	subs	r1, r3, #1
 80044e2:	4875      	ldr	r0, [pc, #468]	@ (80046b8 <spawn_wall+0x2e8>)
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f43f af77 	beq.w	80043e8 <spawn_wall+0x18>
	}
	draw_grid[xw][yw]=3;
 80044fa:	496f      	ldr	r1, [pc, #444]	@ (80046b8 <spawn_wall+0x2e8>)
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4413      	add	r3, r2
 800450a:	2203      	movs	r2, #3
 800450c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	int d=rand_no(4);
 8004510:	2004      	movs	r0, #4
 8004512:	f000 f8d3 	bl	80046bc <rand_no>
 8004516:	6038      	str	r0, [r7, #0]
	int flag = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	607b      	str	r3, [r7, #4]
	while(flag == 0){
 800451c:	e0c3      	b.n	80046a6 <spawn_wall+0x2d6>
		d = rand_no(4);
 800451e:	2004      	movs	r0, #4
 8004520:	f000 f8cc 	bl	80046bc <rand_no>
 8004524:	6038      	str	r0, [r7, #0]
		switch (d){
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	3b01      	subs	r3, #1
 800452a:	2b03      	cmp	r3, #3
 800452c:	f200 80b2 	bhi.w	8004694 <spawn_wall+0x2c4>
 8004530:	a201      	add	r2, pc, #4	@ (adr r2, 8004538 <spawn_wall+0x168>)
 8004532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004536:	bf00      	nop
 8004538:	08004549 	.word	0x08004549
 800453c:	0800459f 	.word	0x0800459f
 8004540:	080045f1 	.word	0x080045f1
 8004544:	08004643 	.word	0x08004643
		case 1:
			if(draw_grid[xw+1][yw]!=2 && draw_grid[xw+1][yw]!=1){
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	495a      	ldr	r1, [pc, #360]	@ (80046b8 <spawn_wall+0x2e8>)
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	4413      	add	r3, r2
 800455a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800455e:	2b02      	cmp	r3, #2
 8004560:	f000 809a 	beq.w	8004698 <spawn_wall+0x2c8>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1c5a      	adds	r2, r3, #1
 8004568:	4953      	ldr	r1, [pc, #332]	@ (80046b8 <spawn_wall+0x2e8>)
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4413      	add	r3, r2
 8004576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800457a:	2b01      	cmp	r3, #1
 800457c:	f000 808c 	beq.w	8004698 <spawn_wall+0x2c8>
				draw_grid[xw+1][yw]=3;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	494c      	ldr	r1, [pc, #304]	@ (80046b8 <spawn_wall+0x2e8>)
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4413      	add	r3, r2
 8004592:	2203      	movs	r2, #3
 8004594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 8004598:	2301      	movs	r3, #1
 800459a:	607b      	str	r3, [r7, #4]
			}
			break;
 800459c:	e07c      	b.n	8004698 <spawn_wall+0x2c8>
		case 2:
			if(draw_grid[xw-1][yw]!=2 && draw_grid[xw-1][yw]!=1){
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1e5a      	subs	r2, r3, #1
 80045a2:	4945      	ldr	r1, [pc, #276]	@ (80046b8 <spawn_wall+0x2e8>)
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4413      	add	r3, r2
 80045b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d071      	beq.n	800469c <spawn_wall+0x2cc>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	1e5a      	subs	r2, r3, #1
 80045bc:	493e      	ldr	r1, [pc, #248]	@ (80046b8 <spawn_wall+0x2e8>)
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	4413      	add	r3, r2
 80045ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d064      	beq.n	800469c <spawn_wall+0x2cc>
				draw_grid[xw-1][yw]=3;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1e5a      	subs	r2, r3, #1
 80045d6:	4938      	ldr	r1, [pc, #224]	@ (80046b8 <spawn_wall+0x2e8>)
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	4413      	add	r3, r2
 80045e4:	2203      	movs	r2, #3
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
			}
			break;
 80045ee:	e055      	b.n	800469c <spawn_wall+0x2cc>
		case 3:
			if(draw_grid[xw][yw+1]!=2 && draw_grid[xw][yw+1]!=1){
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	4830      	ldr	r0, [pc, #192]	@ (80046b8 <spawn_wall+0x2e8>)
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d04a      	beq.n	80046a0 <spawn_wall+0x2d0>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	482a      	ldr	r0, [pc, #168]	@ (80046b8 <spawn_wall+0x2e8>)
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d03d      	beq.n	80046a0 <spawn_wall+0x2d0>
				draw_grid[xw][yw+1]=3;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	4823      	ldr	r0, [pc, #140]	@ (80046b8 <spawn_wall+0x2e8>)
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	2203      	movs	r2, #3
 8004638:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 800463c:	2301      	movs	r3, #1
 800463e:	607b      	str	r3, [r7, #4]
			}
			break;
 8004640:	e02e      	b.n	80046a0 <spawn_wall+0x2d0>
		case 4:
			if(draw_grid[xw][yw-1]!=2 && draw_grid[xw][yw-1]!=1){
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1e59      	subs	r1, r3, #1
 8004646:	481c      	ldr	r0, [pc, #112]	@ (80046b8 <spawn_wall+0x2e8>)
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4613      	mov	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d023      	beq.n	80046a4 <spawn_wall+0x2d4>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	1e59      	subs	r1, r3, #1
 8004660:	4815      	ldr	r0, [pc, #84]	@ (80046b8 <spawn_wall+0x2e8>)
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d016      	beq.n	80046a4 <spawn_wall+0x2d4>
				draw_grid[xw][yw-1]=3;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	1e59      	subs	r1, r3, #1
 800467a:	480f      	ldr	r0, [pc, #60]	@ (80046b8 <spawn_wall+0x2e8>)
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	2203      	movs	r2, #3
 800468a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 800468e:	2301      	movs	r3, #1
 8004690:	607b      	str	r3, [r7, #4]
			}
			break;
 8004692:	e007      	b.n	80046a4 <spawn_wall+0x2d4>
		default:
			break;
 8004694:	bf00      	nop
 8004696:	e006      	b.n	80046a6 <spawn_wall+0x2d6>
			break;
 8004698:	bf00      	nop
 800469a:	e004      	b.n	80046a6 <spawn_wall+0x2d6>
			break;
 800469c:	bf00      	nop
 800469e:	e002      	b.n	80046a6 <spawn_wall+0x2d6>
			break;
 80046a0:	bf00      	nop
 80046a2:	e000      	b.n	80046a6 <spawn_wall+0x2d6>
			break;
 80046a4:	bf00      	nop
	while(flag == 0){
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f43f af38 	beq.w	800451e <spawn_wall+0x14e>
		}
	}
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200002c4 	.word	0x200002c4

080046bc <rand_no>:

int rand_no(int m){
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	int num = (rand()%(m+1));
 80046c4:	f007 ff44 	bl	800c550 <rand>
 80046c8:	4602      	mov	r2, r0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3301      	adds	r3, #1
 80046ce:	fb92 f1f3 	sdiv	r1, r2, r3
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	60fb      	str	r3, [r7, #12]
	return num;
 80046da:	68fb      	ldr	r3, [r7, #12]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <check_collision>:

void check_collision(void){
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
	if(pos_head[0]>23 || pos_head[0]<0){
 80046e8:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <check_collision+0x94>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b17      	cmp	r3, #23
 80046ee:	dc03      	bgt.n	80046f8 <check_collision+0x14>
 80046f0:	4b21      	ldr	r3, [pc, #132]	@ (8004778 <check_collision+0x94>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da02      	bge.n	80046fe <check_collision+0x1a>
		lose = 1;
 80046f8:	4b20      	ldr	r3, [pc, #128]	@ (800477c <check_collision+0x98>)
 80046fa:	2201      	movs	r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
	}
	if(pos_head[1]>19 || pos_head[1]<0){
 80046fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004778 <check_collision+0x94>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b13      	cmp	r3, #19
 8004704:	dc03      	bgt.n	800470e <check_collision+0x2a>
 8004706:	4b1c      	ldr	r3, [pc, #112]	@ (8004778 <check_collision+0x94>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	da02      	bge.n	8004714 <check_collision+0x30>
		lose = 1;
 800470e:	4b1b      	ldr	r3, [pc, #108]	@ (800477c <check_collision+0x98>)
 8004710:	2201      	movs	r2, #1
 8004712:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==2){
 8004714:	4b18      	ldr	r3, [pc, #96]	@ (8004778 <check_collision+0x94>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b17      	ldr	r3, [pc, #92]	@ (8004778 <check_collision+0x94>)
 800471a:	6859      	ldr	r1, [r3, #4]
 800471c:	4818      	ldr	r0, [pc, #96]	@ (8004780 <check_collision+0x9c>)
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	440b      	add	r3, r1
 8004728:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d102      	bne.n	8004736 <check_collision+0x52>
		lose = 1;
 8004730:	4b12      	ldr	r3, [pc, #72]	@ (800477c <check_collision+0x98>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==3){
 8004736:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <check_collision+0x94>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <check_collision+0x94>)
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	4810      	ldr	r0, [pc, #64]	@ (8004780 <check_collision+0x9c>)
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d102      	bne.n	8004758 <check_collision+0x74>
		lose = 1;
 8004752:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <check_collision+0x98>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
	}
	if(countdown == 0){
 8004758:	4b0a      	ldr	r3, [pc, #40]	@ (8004784 <check_collision+0xa0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <check_collision+0x88>
		lose = 1;
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <check_collision+0x98>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]
		countdown = 180;
 8004766:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <check_collision+0xa0>)
 8004768:	22b4      	movs	r2, #180	@ 0xb4
 800476a:	601a      	str	r2, [r3, #0]
	}
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000b0c 	.word	0x20000b0c
 800477c:	20000b18 	.word	0x20000b18
 8004780:	200002c4 	.word	0x200002c4
 8004784:	20000008 	.word	0x20000008

08004788 <wait_check>:

void wait_check(void){
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
	if(sw_down==0 && snake_speed[1]==0){
 800478c:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <wait_check+0x9c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <wait_check+0x26>
 8004794:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <wait_check+0xa0>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d108      	bne.n	80047ae <wait_check+0x26>
		snake_speed[0]=0;
 800479c:	4b22      	ldr	r3, [pc, #136]	@ (8004828 <wait_check+0xa0>)
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
		snake_speed[1]=1;
 80047a2:	4b21      	ldr	r3, [pc, #132]	@ (8004828 <wait_check+0xa0>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	605a      	str	r2, [r3, #4]
		sw_down=1;
 80047a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004824 <wait_check+0x9c>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
	}
	if(sw_up==0 && snake_speed[1]==0){
 80047ae:	4b1f      	ldr	r3, [pc, #124]	@ (800482c <wait_check+0xa4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <wait_check+0x4a>
 80047b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004828 <wait_check+0xa0>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <wait_check+0x4a>
		snake_speed[0]=0;
 80047be:	4b1a      	ldr	r3, [pc, #104]	@ (8004828 <wait_check+0xa0>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
		snake_speed[1]=-1;
 80047c4:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <wait_check+0xa0>)
 80047c6:	f04f 32ff 	mov.w	r2, #4294967295
 80047ca:	605a      	str	r2, [r3, #4]
		sw_up=1;
 80047cc:	4b17      	ldr	r3, [pc, #92]	@ (800482c <wait_check+0xa4>)
 80047ce:	2201      	movs	r2, #1
 80047d0:	601a      	str	r2, [r3, #0]
	}
	if(sw_right==0 && snake_speed[0]==0){
 80047d2:	4b17      	ldr	r3, [pc, #92]	@ (8004830 <wait_check+0xa8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <wait_check+0x6c>
 80047da:	4b13      	ldr	r3, [pc, #76]	@ (8004828 <wait_check+0xa0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <wait_check+0x6c>
		snake_speed[0]=1;
 80047e2:	4b11      	ldr	r3, [pc, #68]	@ (8004828 <wait_check+0xa0>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 80047e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <wait_check+0xa0>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	605a      	str	r2, [r3, #4]
		sw_right=1;
 80047ee:	4b10      	ldr	r3, [pc, #64]	@ (8004830 <wait_check+0xa8>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
	}
	if(sw_left==0 && snake_speed[0]==0){
 80047f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004834 <wait_check+0xac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <wait_check+0x90>
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <wait_check+0xa0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <wait_check+0x90>
		snake_speed[0]=-1;
 8004804:	4b08      	ldr	r3, [pc, #32]	@ (8004828 <wait_check+0xa0>)
 8004806:	f04f 32ff 	mov.w	r2, #4294967295
 800480a:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 800480c:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <wait_check+0xa0>)
 800480e:	2200      	movs	r2, #0
 8004810:	605a      	str	r2, [r3, #4]
		sw_left=1;
 8004812:	4b08      	ldr	r3, [pc, #32]	@ (8004834 <wait_check+0xac>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
	}
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2000002c 	.word	0x2000002c
 8004828:	20000020 	.word	0x20000020
 800482c:	20000028 	.word	0x20000028
 8004830:	20000030 	.word	0x20000030
 8004834:	20000034 	.word	0x20000034

08004838 <check_food>:

void check_food(void){
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
	if(draw_grid[pos_head[0]][pos_head[1]]==1){
 800483c:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <check_food+0x60>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b15      	ldr	r3, [pc, #84]	@ (8004898 <check_food+0x60>)
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	4815      	ldr	r0, [pc, #84]	@ (800489c <check_food+0x64>)
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d11d      	bne.n	8004894 <check_food+0x5c>
		score++;
 8004858:	4b11      	ldr	r3, [pc, #68]	@ (80048a0 <check_food+0x68>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	4b0f      	ldr	r3, [pc, #60]	@ (80048a0 <check_food+0x68>)
 8004862:	701a      	strb	r2, [r3, #0]
		size_of_snake++;
 8004864:	4b0f      	ldr	r3, [pc, #60]	@ (80048a4 <check_food+0x6c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	4a0e      	ldr	r2, [pc, #56]	@ (80048a4 <check_food+0x6c>)
 800486c:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=pos_head[0];
 800486e:	4b0d      	ldr	r3, [pc, #52]	@ (80048a4 <check_food+0x6c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3b01      	subs	r3, #1
 8004874:	4a08      	ldr	r2, [pc, #32]	@ (8004898 <check_food+0x60>)
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	490b      	ldr	r1, [pc, #44]	@ (80048a8 <check_food+0x70>)
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=pos_head[1];
 800487e:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <check_food+0x6c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3b01      	subs	r3, #1
 8004884:	4a04      	ldr	r2, [pc, #16]	@ (8004898 <check_food+0x60>)
 8004886:	6852      	ldr	r2, [r2, #4]
 8004888:	4907      	ldr	r1, [pc, #28]	@ (80048a8 <check_food+0x70>)
 800488a:	3318      	adds	r3, #24
 800488c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		spawn_food();
 8004890:	f7ff fd6c 	bl	800436c <spawn_food>
	}
}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000b0c 	.word	0x20000b0c
 800489c:	200002c4 	.word	0x200002c4
 80048a0:	20000b14 	.word	0x20000b14
 80048a4:	2000001c 	.word	0x2000001c
 80048a8:	20000a44 	.word	0x20000a44

080048ac <timer_init>:

uint16_t flag_timer7 = 0;
uint16_t timer7_counter = 0;
uint16_t timer7_MUL = 0;

void timer_init(){
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80048b0:	4803      	ldr	r0, [pc, #12]	@ (80048c0 <timer_init+0x14>)
 80048b2:	f005 fc67 	bl	800a184 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 80048b6:	4803      	ldr	r0, [pc, #12]	@ (80048c4 <timer_init+0x18>)
 80048b8:	f005 fbfc 	bl	800a0b4 <HAL_TIM_Base_Start>
}
 80048bc:	bf00      	nop
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000be4 	.word	0x20000be4
 80048c4:	20000b9c 	.word	0x20000b9c

080048c8 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	4603      	mov	r3, r0
 80048d0:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80048d2:	4a08      	ldr	r2, [pc, #32]	@ (80048f4 <setTimer2+0x2c>)
 80048d4:	88fb      	ldrh	r3, [r7, #6]
 80048d6:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80048d8:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <setTimer2+0x2c>)
 80048da:	881a      	ldrh	r2, [r3, #0]
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <setTimer2+0x30>)
 80048de:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <setTimer2+0x34>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	801a      	strh	r2, [r3, #0]
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000b20 	.word	0x20000b20
 80048f8:	20000b1e 	.word	0x20000b1e
 80048fc:	20000b1c 	.word	0x20000b1c

08004900 <setTimer3>:

void setTimer3(uint16_t duration){
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 800490a:	4a08      	ldr	r2, [pc, #32]	@ (800492c <setTimer3+0x2c>)
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004910:	4b06      	ldr	r3, [pc, #24]	@ (800492c <setTimer3+0x2c>)
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <setTimer3+0x30>)
 8004916:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004918:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <setTimer3+0x34>)
 800491a:	2200      	movs	r2, #0
 800491c:	801a      	strh	r2, [r3, #0]
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	20000b26 	.word	0x20000b26
 8004930:	20000b24 	.word	0x20000b24
 8004934:	20000b22 	.word	0x20000b22

08004938 <setTimer4>:

void setTimer4(uint16_t duration){
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 8004942:	4a08      	ldr	r2, [pc, #32]	@ (8004964 <setTimer4+0x2c>)
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 8004948:	4b06      	ldr	r3, [pc, #24]	@ (8004964 <setTimer4+0x2c>)
 800494a:	881a      	ldrh	r2, [r3, #0]
 800494c:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <setTimer4+0x30>)
 800494e:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 8004950:	4b06      	ldr	r3, [pc, #24]	@ (800496c <setTimer4+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	801a      	strh	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	20000b2c 	.word	0x20000b2c
 8004968:	20000b2a 	.word	0x20000b2a
 800496c:	20000b28 	.word	0x20000b28

08004970 <setTimer5>:

void setTimer5(uint16_t duration){
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 800497a:	4a08      	ldr	r2, [pc, #32]	@ (800499c <setTimer5+0x2c>)
 800497c:	88fb      	ldrh	r3, [r7, #6]
 800497e:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 8004980:	4b06      	ldr	r3, [pc, #24]	@ (800499c <setTimer5+0x2c>)
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <setTimer5+0x30>)
 8004986:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 8004988:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <setTimer5+0x34>)
 800498a:	2200      	movs	r2, #0
 800498c:	801a      	strh	r2, [r3, #0]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000b32 	.word	0x20000b32
 80049a0:	20000b30 	.word	0x20000b30
 80049a4:	20000b2e 	.word	0x20000b2e

080049a8 <setTimer7>:
	timer6_MUL = duration/TIMER_CYCLE_2;
	timer6_counter = timer6_MUL;
	flag_timer6 = 0;
}

void setTimer7(uint16_t duration){
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	80fb      	strh	r3, [r7, #6]
	timer7_MUL = duration/TIMER_CYCLE_2;
 80049b2:	4a08      	ldr	r2, [pc, #32]	@ (80049d4 <setTimer7+0x2c>)
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	8013      	strh	r3, [r2, #0]
	timer7_counter = timer7_MUL;
 80049b8:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <setTimer7+0x2c>)
 80049ba:	881a      	ldrh	r2, [r3, #0]
 80049bc:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <setTimer7+0x30>)
 80049be:	801a      	strh	r2, [r3, #0]
	flag_timer7 = 0;
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <setTimer7+0x34>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	801a      	strh	r2, [r3, #0]
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	20000b3e 	.word	0x20000b3e
 80049d8:	20000b3c 	.word	0x20000b3c
 80049dc:	20000b3a 	.word	0x20000b3a

080049e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f0:	d17f      	bne.n	8004af2 <HAL_TIM_PeriodElapsedCallback+0x112>
		if(timer2_counter > 0){
 80049f2:	4b42      	ldr	r3, [pc, #264]	@ (8004afc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d010      	beq.n	8004a1c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80049fa:	4b40      	ldr	r3, [pc, #256]	@ (8004afc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a04:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8004a06:	4b3d      	ldr	r3, [pc, #244]	@ (8004afc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8004b00 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8004a14:	4b3b      	ldr	r3, [pc, #236]	@ (8004b04 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004a16:	881a      	ldrh	r2, [r3, #0]
 8004a18:	4b38      	ldr	r3, [pc, #224]	@ (8004afc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004a1a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d010      	beq.n	8004a46 <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 8004a24:	4b38      	ldr	r3, [pc, #224]	@ (8004b08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	4b36      	ldr	r3, [pc, #216]	@ (8004b08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a2e:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8004a30:	4b35      	ldr	r3, [pc, #212]	@ (8004b08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 8004a38:	4b34      	ldr	r3, [pc, #208]	@ (8004b0c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 8004a3e:	4b34      	ldr	r3, [pc, #208]	@ (8004b10 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8004a40:	881a      	ldrh	r2, [r3, #0]
 8004a42:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004a44:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 8004a46:	4b33      	ldr	r3, [pc, #204]	@ (8004b14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d010      	beq.n	8004a70 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 8004a4e:	4b31      	ldr	r3, [pc, #196]	@ (8004b14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	4b2f      	ldr	r3, [pc, #188]	@ (8004b14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a58:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 8004a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004b14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 8004a62:	4b2d      	ldr	r3, [pc, #180]	@ (8004b18 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 8004a68:	4b2c      	ldr	r3, [pc, #176]	@ (8004b1c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004a6a:	881a      	ldrh	r2, [r3, #0]
 8004a6c:	4b29      	ldr	r3, [pc, #164]	@ (8004b14 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8004a6e:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 8004a70:	4b2b      	ldr	r3, [pc, #172]	@ (8004b20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d010      	beq.n	8004a9a <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 8004a78:	4b29      	ldr	r3, [pc, #164]	@ (8004b20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	4b27      	ldr	r3, [pc, #156]	@ (8004b20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a82:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0) {
 8004a84:	4b26      	ldr	r3, [pc, #152]	@ (8004b20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 8004a8c:	4b25      	ldr	r3, [pc, #148]	@ (8004b24 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 8004a92:	4b25      	ldr	r3, [pc, #148]	@ (8004b28 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004a94:	881a      	ldrh	r2, [r3, #0]
 8004a96:	4b22      	ldr	r3, [pc, #136]	@ (8004b20 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004a98:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer6_counter > 0){
 8004a9a:	4b24      	ldr	r3, [pc, #144]	@ (8004b2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d010      	beq.n	8004ac4 <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer6_counter--;
 8004aa2:	4b22      	ldr	r3, [pc, #136]	@ (8004b2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004aac:	801a      	strh	r2, [r3, #0]
			if(timer6_counter == 0) {
 8004aae:	4b1f      	ldr	r3, [pc, #124]	@ (8004b2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer6 = 1;
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b30 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004ab8:	2201      	movs	r2, #1
 8004aba:	801a      	strh	r2, [r3, #0]
				timer6_counter = timer6_MUL;
 8004abc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b34 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004abe:	881a      	ldrh	r2, [r3, #0]
 8004ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b2c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004ac2:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer7_counter > 0){
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d010      	beq.n	8004aee <HAL_TIM_PeriodElapsedCallback+0x10e>
			timer7_counter--;
 8004acc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	4b18      	ldr	r3, [pc, #96]	@ (8004b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ad6:	801a      	strh	r2, [r3, #0]
			if(timer7_counter == 0) {
 8004ad8:	4b17      	ldr	r3, [pc, #92]	@ (8004b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_TIM_PeriodElapsedCallback+0x10e>
				flag_timer7 = 1;
 8004ae0:	4b16      	ldr	r3, [pc, #88]	@ (8004b3c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	801a      	strh	r2, [r3, #0]
				timer7_counter = timer7_MUL;
 8004ae6:	4b16      	ldr	r3, [pc, #88]	@ (8004b40 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004ae8:	881a      	ldrh	r2, [r3, #0]
 8004aea:	4b13      	ldr	r3, [pc, #76]	@ (8004b38 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004aec:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004aee:	f7fe fa7f 	bl	8002ff0 <led7_Scan>
		//touch_Scan();
	}
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000b1e 	.word	0x20000b1e
 8004b00:	20000b1c 	.word	0x20000b1c
 8004b04:	20000b20 	.word	0x20000b20
 8004b08:	20000b24 	.word	0x20000b24
 8004b0c:	20000b22 	.word	0x20000b22
 8004b10:	20000b26 	.word	0x20000b26
 8004b14:	20000b2a 	.word	0x20000b2a
 8004b18:	20000b28 	.word	0x20000b28
 8004b1c:	20000b2c 	.word	0x20000b2c
 8004b20:	20000b30 	.word	0x20000b30
 8004b24:	20000b2e 	.word	0x20000b2e
 8004b28:	20000b32 	.word	0x20000b32
 8004b2c:	20000b36 	.word	0x20000b36
 8004b30:	20000b34 	.word	0x20000b34
 8004b34:	20000b38 	.word	0x20000b38
 8004b38:	20000b3c 	.word	0x20000b3c
 8004b3c:	20000b3a 	.word	0x20000b3a
 8004b40:	20000b3e 	.word	0x20000b3e

08004b44 <delay_us>:

void delay_us (uint16_t us)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004b4e:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <delay_us+0x30>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2200      	movs	r2, #0
 8004b54:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004b56:	bf00      	nop
 8004b58:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <delay_us+0x30>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d3f9      	bcc.n	8004b58 <delay_us+0x14>
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000b9c 	.word	0x20000b9c

08004b78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004b7c:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004b7e:	4a18      	ldr	r2, [pc, #96]	@ (8004be0 <MX_SPI1_Init+0x68>)
 8004b80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004b82:	4b16      	ldr	r3, [pc, #88]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004b84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004b88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004b8a:	4b14      	ldr	r3, [pc, #80]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b90:	4b12      	ldr	r3, [pc, #72]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b96:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ba8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004baa:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bb6:	4b09      	ldr	r3, [pc, #36]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bbc:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004bc2:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004bc4:	220a      	movs	r2, #10
 8004bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004bc8:	4804      	ldr	r0, [pc, #16]	@ (8004bdc <MX_SPI1_Init+0x64>)
 8004bca:	f004 fc37 	bl	800943c <HAL_SPI_Init>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004bd4:	f7fe fd3a 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004bd8:	bf00      	nop
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000b40 	.word	0x20000b40
 8004be0:	40013000 	.word	0x40013000

08004be4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	@ 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bec:	f107 0314 	add.w	r3, r7, #20
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	60da      	str	r2, [r3, #12]
 8004bfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a19      	ldr	r2, [pc, #100]	@ (8004c68 <HAL_SPI_MspInit+0x84>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d12b      	bne.n	8004c5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	4b18      	ldr	r3, [pc, #96]	@ (8004c6c <HAL_SPI_MspInit+0x88>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	4a17      	ldr	r2, [pc, #92]	@ (8004c6c <HAL_SPI_MspInit+0x88>)
 8004c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c16:	4b15      	ldr	r3, [pc, #84]	@ (8004c6c <HAL_SPI_MspInit+0x88>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <HAL_SPI_MspInit+0x88>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2a:	4a10      	ldr	r2, [pc, #64]	@ (8004c6c <HAL_SPI_MspInit+0x88>)
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c32:	4b0e      	ldr	r3, [pc, #56]	@ (8004c6c <HAL_SPI_MspInit+0x88>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004c3e:	2338      	movs	r3, #56	@ 0x38
 8004c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	2302      	movs	r3, #2
 8004c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c4e:	2305      	movs	r3, #5
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c52:	f107 0314 	add.w	r3, r7, #20
 8004c56:	4619      	mov	r1, r3
 8004c58:	4805      	ldr	r0, [pc, #20]	@ (8004c70 <HAL_SPI_MspInit+0x8c>)
 8004c5a:	f002 fdaf 	bl	80077bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004c5e:	bf00      	nop
 8004c60:	3728      	adds	r7, #40	@ 0x28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40013000 	.word	0x40013000
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40020400 	.word	0x40020400

08004c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	607b      	str	r3, [r7, #4]
 8004c7e:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <HAL_MspInit+0x4c>)
 8004c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c82:	4a0f      	ldr	r2, [pc, #60]	@ (8004cc0 <HAL_MspInit+0x4c>)
 8004c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <HAL_MspInit+0x4c>)
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c92:	607b      	str	r3, [r7, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	603b      	str	r3, [r7, #0]
 8004c9a:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <HAL_MspInit+0x4c>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	4a08      	ldr	r2, [pc, #32]	@ (8004cc0 <HAL_MspInit+0x4c>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca6:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <HAL_MspInit+0x4c>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800

08004cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <NMI_Handler+0x4>

08004ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <HardFault_Handler+0x4>

08004cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cd8:	bf00      	nop
 8004cda:	e7fd      	b.n	8004cd8 <MemManage_Handler+0x4>

08004cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <BusFault_Handler+0x4>

08004ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ce8:	bf00      	nop
 8004cea:	e7fd      	b.n	8004ce8 <UsageFault_Handler+0x4>

08004cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cfe:	bf00      	nop
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d0c:	bf00      	nop
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d1a:	f001 fbe5 	bl	80064e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d1e:	bf00      	nop
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d28:	4802      	ldr	r0, [pc, #8]	@ (8004d34 <TIM2_IRQHandler+0x10>)
 8004d2a:	f005 fbbd 	bl	800a4a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000be4 	.word	0x20000be4

08004d38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d3c:	4802      	ldr	r0, [pc, #8]	@ (8004d48 <USART1_IRQHandler+0x10>)
 8004d3e:	f006 fb1d 	bl	800b37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004d42:	bf00      	nop
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000de0 	.word	0x20000de0

08004d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d50:	4802      	ldr	r0, [pc, #8]	@ (8004d5c <USART2_IRQHandler+0x10>)
 8004d52:	f006 fb13 	bl	800b37c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d56:	bf00      	nop
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000e24 	.word	0x20000e24

08004d60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d64:	4802      	ldr	r0, [pc, #8]	@ (8004d70 <DMA2_Stream0_IRQHandler+0x10>)
 8004d66:	f002 fabf 	bl	80072e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	2000014c 	.word	0x2000014c

08004d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	return 1;
 8004d78:	2301      	movs	r3, #1
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <_kill>:

int _kill(int pid, int sig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004d8e:	f007 fda1 	bl	800c8d4 <__errno>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2216      	movs	r2, #22
 8004d96:	601a      	str	r2, [r3, #0]
	return -1;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <_exit>:

void _exit (int status)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004dac:	f04f 31ff 	mov.w	r1, #4294967295
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ffe7 	bl	8004d84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <_exit+0x12>

08004dba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b086      	sub	sp, #24
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e00a      	b.n	8004de2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	4601      	mov	r1, r0
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	60ba      	str	r2, [r7, #8]
 8004dd8:	b2ca      	uxtb	r2, r1
 8004dda:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	dbf0      	blt.n	8004dcc <_read+0x12>
	}

return len;
 8004dea:	687b      	ldr	r3, [r7, #4]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	e009      	b.n	8004e1a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	60ba      	str	r2, [r7, #8]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	3301      	adds	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	dbf1      	blt.n	8004e06 <_write+0x12>
	}
	return len;
 8004e22:	687b      	ldr	r3, [r7, #4]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_close>:

int _close(int file)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	return -1;
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e54:	605a      	str	r2, [r3, #4]
	return 0;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <_isatty>:

int _isatty(int file)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	return 1;
 8004e6c:	2301      	movs	r3, #1
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
	return 0;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e9c:	4a14      	ldr	r2, [pc, #80]	@ (8004ef0 <_sbrk+0x5c>)
 8004e9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ef4 <_sbrk+0x60>)
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ea8:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <_sbrk+0x64>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d102      	bne.n	8004eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004eb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ef8 <_sbrk+0x64>)
 8004eb2:	4a12      	ldr	r2, [pc, #72]	@ (8004efc <_sbrk+0x68>)
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004eb6:	4b10      	ldr	r3, [pc, #64]	@ (8004ef8 <_sbrk+0x64>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d207      	bcs.n	8004ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ec4:	f007 fd06 	bl	800c8d4 <__errno>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	220c      	movs	r2, #12
 8004ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ece:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed2:	e009      	b.n	8004ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ed4:	4b08      	ldr	r3, [pc, #32]	@ (8004ef8 <_sbrk+0x64>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004eda:	4b07      	ldr	r3, [pc, #28]	@ (8004ef8 <_sbrk+0x64>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4a05      	ldr	r2, [pc, #20]	@ (8004ef8 <_sbrk+0x64>)
 8004ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20020000 	.word	0x20020000
 8004ef4:	00000400 	.word	0x00000400
 8004ef8:	20000b98 	.word	0x20000b98
 8004efc:	20000fb8 	.word	0x20000fb8

08004f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <SystemInit+0x20>)
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0a:	4a05      	ldr	r2, [pc, #20]	@ (8004f20 <SystemInit+0x20>)
 8004f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
 8004f34:	609a      	str	r2, [r3, #8]
 8004f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f38:	463b      	mov	r3, r7
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f40:	4b1e      	ldr	r3, [pc, #120]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f42:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc0 <MX_TIM1_Init+0x9c>)
 8004f44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8004f46:	4b1d      	ldr	r3, [pc, #116]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f48:	2253      	movs	r2, #83	@ 0x53
 8004f4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004f52:	4b1a      	ldr	r3, [pc, #104]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5a:	4b18      	ldr	r3, [pc, #96]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f60:	4b16      	ldr	r3, [pc, #88]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f66:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f6c:	4813      	ldr	r0, [pc, #76]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f6e:	f005 f851 	bl	800a014 <HAL_TIM_Base_Init>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8004f78:	f7fe fb68 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f82:	f107 0308 	add.w	r3, r7, #8
 8004f86:	4619      	mov	r1, r3
 8004f88:	480c      	ldr	r0, [pc, #48]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004f8a:	f005 fc57 	bl	800a83c <HAL_TIM_ConfigClockSource>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8004f94:	f7fe fb5a 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4805      	ldr	r0, [pc, #20]	@ (8004fbc <MX_TIM1_Init+0x98>)
 8004fa6:	f006 f849 	bl	800b03c <HAL_TIMEx_MasterConfigSynchronization>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004fb0:	f7fe fb4c 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004fb4:	bf00      	nop
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000b9c 	.word	0x20000b9c
 8004fc0:	40010000 	.word	0x40010000

08004fc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	605a      	str	r2, [r3, #4]
 8004fd4:	609a      	str	r2, [r3, #8]
 8004fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fd8:	463b      	mov	r3, r7
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <MX_TIM2_Init+0x94>)
 8004fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8005058 <MX_TIM2_Init+0x94>)
 8004fea:	f240 3247 	movw	r2, #839	@ 0x347
 8004fee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ff0:	4b19      	ldr	r3, [pc, #100]	@ (8005058 <MX_TIM2_Init+0x94>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004ff6:	4b18      	ldr	r3, [pc, #96]	@ (8005058 <MX_TIM2_Init+0x94>)
 8004ff8:	2263      	movs	r2, #99	@ 0x63
 8004ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ffc:	4b16      	ldr	r3, [pc, #88]	@ (8005058 <MX_TIM2_Init+0x94>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005002:	4b15      	ldr	r3, [pc, #84]	@ (8005058 <MX_TIM2_Init+0x94>)
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005008:	4813      	ldr	r0, [pc, #76]	@ (8005058 <MX_TIM2_Init+0x94>)
 800500a:	f005 f803 	bl	800a014 <HAL_TIM_Base_Init>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005014:	f7fe fb1a 	bl	800364c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800501c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800501e:	f107 0308 	add.w	r3, r7, #8
 8005022:	4619      	mov	r1, r3
 8005024:	480c      	ldr	r0, [pc, #48]	@ (8005058 <MX_TIM2_Init+0x94>)
 8005026:	f005 fc09 	bl	800a83c <HAL_TIM_ConfigClockSource>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8005030:	f7fe fb0c 	bl	800364c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005034:	2300      	movs	r3, #0
 8005036:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005038:	2300      	movs	r3, #0
 800503a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800503c:	463b      	mov	r3, r7
 800503e:	4619      	mov	r1, r3
 8005040:	4805      	ldr	r0, [pc, #20]	@ (8005058 <MX_TIM2_Init+0x94>)
 8005042:	f005 fffb 	bl	800b03c <HAL_TIMEx_MasterConfigSynchronization>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800504c:	f7fe fafe 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005050:	bf00      	nop
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	20000be4 	.word	0x20000be4

0800505c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005062:	1d3b      	adds	r3, r7, #4
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
 8005070:	615a      	str	r2, [r3, #20]
 8005072:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005074:	4b1e      	ldr	r3, [pc, #120]	@ (80050f0 <MX_TIM13_Init+0x94>)
 8005076:	4a1f      	ldr	r2, [pc, #124]	@ (80050f4 <MX_TIM13_Init+0x98>)
 8005078:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800507a:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <MX_TIM13_Init+0x94>)
 800507c:	f240 3247 	movw	r2, #839	@ 0x347
 8005080:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005082:	4b1b      	ldr	r3, [pc, #108]	@ (80050f0 <MX_TIM13_Init+0x94>)
 8005084:	2200      	movs	r2, #0
 8005086:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8005088:	4b19      	ldr	r3, [pc, #100]	@ (80050f0 <MX_TIM13_Init+0x94>)
 800508a:	2263      	movs	r2, #99	@ 0x63
 800508c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800508e:	4b18      	ldr	r3, [pc, #96]	@ (80050f0 <MX_TIM13_Init+0x94>)
 8005090:	2200      	movs	r2, #0
 8005092:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005094:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <MX_TIM13_Init+0x94>)
 8005096:	2200      	movs	r2, #0
 8005098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800509a:	4815      	ldr	r0, [pc, #84]	@ (80050f0 <MX_TIM13_Init+0x94>)
 800509c:	f004 ffba 	bl	800a014 <HAL_TIM_Base_Init>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80050a6:	f7fe fad1 	bl	800364c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80050aa:	4811      	ldr	r0, [pc, #68]	@ (80050f0 <MX_TIM13_Init+0x94>)
 80050ac:	f005 f8da 	bl	800a264 <HAL_TIM_PWM_Init>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80050b6:	f7fe fac9 	bl	800364c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050ba:	2360      	movs	r3, #96	@ 0x60
 80050bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050ca:	1d3b      	adds	r3, r7, #4
 80050cc:	2200      	movs	r2, #0
 80050ce:	4619      	mov	r1, r3
 80050d0:	4807      	ldr	r0, [pc, #28]	@ (80050f0 <MX_TIM13_Init+0x94>)
 80050d2:	f005 faf1 	bl	800a6b8 <HAL_TIM_PWM_ConfigChannel>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80050dc:	f7fe fab6 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80050e0:	4803      	ldr	r0, [pc, #12]	@ (80050f0 <MX_TIM13_Init+0x94>)
 80050e2:	f000 f85b 	bl	800519c <HAL_TIM_MspPostInit>

}
 80050e6:	bf00      	nop
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000c2c 	.word	0x20000c2c
 80050f4:	40001c00 	.word	0x40001c00

080050f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a22      	ldr	r2, [pc, #136]	@ (8005190 <HAL_TIM_Base_MspInit+0x98>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	4b21      	ldr	r3, [pc, #132]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	4a20      	ldr	r2, [pc, #128]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	6453      	str	r3, [r2, #68]	@ 0x44
 800511a:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8005126:	e02e      	b.n	8005186 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005130:	d116      	bne.n	8005160 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	4b17      	ldr	r3, [pc, #92]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	4a16      	ldr	r2, [pc, #88]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	6413      	str	r3, [r2, #64]	@ 0x40
 8005142:	4b14      	ldr	r3, [pc, #80]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800514e:	2200      	movs	r2, #0
 8005150:	2100      	movs	r1, #0
 8005152:	201c      	movs	r0, #28
 8005154:	f001 fef9 	bl	8006f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005158:	201c      	movs	r0, #28
 800515a:	f001 ff12 	bl	8006f82 <HAL_NVIC_EnableIRQ>
}
 800515e:	e012      	b.n	8005186 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a0c      	ldr	r2, [pc, #48]	@ (8005198 <HAL_TIM_Base_MspInit+0xa0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10d      	bne.n	8005186 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b09      	ldr	r3, [pc, #36]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	4a08      	ldr	r2, [pc, #32]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 8005174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005178:	6413      	str	r3, [r2, #64]	@ 0x40
 800517a:	4b06      	ldr	r3, [pc, #24]	@ (8005194 <HAL_TIM_Base_MspInit+0x9c>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	bf00      	nop
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40010000 	.word	0x40010000
 8005194:	40023800 	.word	0x40023800
 8005198:	40001c00 	.word	0x40001c00

0800519c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	60da      	str	r2, [r3, #12]
 80051b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a12      	ldr	r2, [pc, #72]	@ (8005204 <HAL_TIM_MspPostInit+0x68>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d11e      	bne.n	80051fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <HAL_TIM_MspPostInit+0x6c>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	4a10      	ldr	r2, [pc, #64]	@ (8005208 <HAL_TIM_MspPostInit+0x6c>)
 80051c8:	f043 0320 	orr.w	r3, r3, #32
 80051cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005208 <HAL_TIM_MspPostInit+0x6c>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80051ec:	2309      	movs	r3, #9
 80051ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051f0:	f107 030c 	add.w	r3, r7, #12
 80051f4:	4619      	mov	r1, r3
 80051f6:	4805      	ldr	r0, [pc, #20]	@ (800520c <HAL_TIM_MspPostInit+0x70>)
 80051f8:	f002 fae0 	bl	80077bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80051fc:	bf00      	nop
 80051fe:	3720      	adds	r7, #32
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40001c00 	.word	0x40001c00
 8005208:	40023800 	.word	0x40023800
 800520c:	40021400 	.word	0x40021400

08005210 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	4603      	mov	r3, r0
 8005218:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
 8005222:	e025      	b.n	8005270 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8005224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005228:	2b00      	cmp	r3, #0
 800522a:	da06      	bge.n	800523a <TP_Write_Byte+0x2a>
 800522c:	2201      	movs	r2, #1
 800522e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005232:	4813      	ldr	r0, [pc, #76]	@ (8005280 <TP_Write_Byte+0x70>)
 8005234:	f002 fc76 	bl	8007b24 <HAL_GPIO_WritePin>
 8005238:	e005      	b.n	8005246 <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 800523a:	2200      	movs	r2, #0
 800523c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005240:	480f      	ldr	r0, [pc, #60]	@ (8005280 <TP_Write_Byte+0x70>)
 8005242:	f002 fc6f 	bl	8007b24 <HAL_GPIO_WritePin>
		num<<=1;
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005252:	480c      	ldr	r0, [pc, #48]	@ (8005284 <TP_Write_Byte+0x74>)
 8005254:	f002 fc66 	bl	8007b24 <HAL_GPIO_WritePin>
		delay_us(1);
 8005258:	2001      	movs	r0, #1
 800525a:	f7ff fc73 	bl	8004b44 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 800525e:	2201      	movs	r2, #1
 8005260:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005264:	4807      	ldr	r0, [pc, #28]	@ (8005284 <TP_Write_Byte+0x74>)
 8005266:	f002 fc5d 	bl	8007b24 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 800526a:	7bfb      	ldrb	r3, [r7, #15]
 800526c:	3301      	adds	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b07      	cmp	r3, #7
 8005274:	d9d6      	bls.n	8005224 <TP_Write_Byte+0x14>
	}
}
 8005276:	bf00      	nop
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40020800 	.word	0x40020800
 8005284:	40021800 	.word	0x40021800

08005288 <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8005296:	2300      	movs	r3, #0
 8005298:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 800529a:	2200      	movs	r2, #0
 800529c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052a0:	482f      	ldr	r0, [pc, #188]	@ (8005360 <TP_Read_AD+0xd8>)
 80052a2:	f002 fc3f 	bl	8007b24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 80052a6:	2200      	movs	r2, #0
 80052a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80052ac:	482d      	ldr	r0, [pc, #180]	@ (8005364 <TP_Read_AD+0xdc>)
 80052ae:	f002 fc39 	bl	8007b24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 80052b2:	2200      	movs	r2, #0
 80052b4:	2180      	movs	r1, #128	@ 0x80
 80052b6:	482a      	ldr	r0, [pc, #168]	@ (8005360 <TP_Read_AD+0xd8>)
 80052b8:	f002 fc34 	bl	8007b24 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff ffa6 	bl	8005210 <TP_Write_Byte>
	delay_us(6);
 80052c4:	2006      	movs	r0, #6
 80052c6:	f7ff fc3d 	bl	8004b44 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052d0:	4823      	ldr	r0, [pc, #140]	@ (8005360 <TP_Read_AD+0xd8>)
 80052d2:	f002 fc27 	bl	8007b24 <HAL_GPIO_WritePin>
	delay_us(1);
 80052d6:	2001      	movs	r0, #1
 80052d8:	f7ff fc34 	bl	8004b44 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 80052dc:	2201      	movs	r2, #1
 80052de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052e2:	481f      	ldr	r0, [pc, #124]	@ (8005360 <TP_Read_AD+0xd8>)
 80052e4:	f002 fc1e 	bl	8007b24 <HAL_GPIO_WritePin>
	delay_us(1);
 80052e8:	2001      	movs	r0, #1
 80052ea:	f7ff fc2b 	bl	8004b44 <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 80052ee:	2200      	movs	r2, #0
 80052f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052f4:	481a      	ldr	r0, [pc, #104]	@ (8005360 <TP_Read_AD+0xd8>)
 80052f6:	f002 fc15 	bl	8007b24 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
 80052fe:	e01f      	b.n	8005340 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8005300:	89bb      	ldrh	r3, [r7, #12]
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8005306:	2200      	movs	r2, #0
 8005308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800530c:	4814      	ldr	r0, [pc, #80]	@ (8005360 <TP_Read_AD+0xd8>)
 800530e:	f002 fc09 	bl	8007b24 <HAL_GPIO_WritePin>
		delay_us(1);
 8005312:	2001      	movs	r0, #1
 8005314:	f7ff fc16 	bl	8004b44 <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8005318:	2201      	movs	r2, #1
 800531a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800531e:	4810      	ldr	r0, [pc, #64]	@ (8005360 <TP_Read_AD+0xd8>)
 8005320:	f002 fc00 	bl	8007b24 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8005324:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005328:	480e      	ldr	r0, [pc, #56]	@ (8005364 <TP_Read_AD+0xdc>)
 800532a:	f002 fbe3 	bl	8007af4 <HAL_GPIO_ReadPin>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <TP_Read_AD+0xb2>
 8005334:	89bb      	ldrh	r3, [r7, #12]
 8005336:	3301      	adds	r3, #1
 8005338:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	3301      	adds	r3, #1
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b0f      	cmp	r3, #15
 8005344:	d9dc      	bls.n	8005300 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8005346:	89bb      	ldrh	r3, [r7, #12]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 800534c:	2201      	movs	r2, #1
 800534e:	2180      	movs	r1, #128	@ 0x80
 8005350:	4803      	ldr	r0, [pc, #12]	@ (8005360 <TP_Read_AD+0xd8>)
 8005352:	f002 fbe7 	bl	8007b24 <HAL_GPIO_WritePin>
	return(Num);
 8005356:	89bb      	ldrh	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40021800 	.word	0x40021800
 8005364:	40020800 	.word	0x40020800

08005368 <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8005368:	b590      	push	{r4, r7, lr}
 800536a:	b089      	sub	sp, #36	@ 0x24
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8005372:	2300      	movs	r3, #0
 8005374:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8005376:	2300      	movs	r3, #0
 8005378:	83fb      	strh	r3, [r7, #30]
 800537a:	e00e      	b.n	800539a <TP_Read_XOY+0x32>
 800537c:	8bfc      	ldrh	r4, [r7, #30]
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff ff81 	bl	8005288 <TP_Read_AD>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	0063      	lsls	r3, r4, #1
 800538c:	3320      	adds	r3, #32
 800538e:	443b      	add	r3, r7
 8005390:	f823 2c14 	strh.w	r2, [r3, #-20]
 8005394:	8bfb      	ldrh	r3, [r7, #30]
 8005396:	3301      	adds	r3, #1
 8005398:	83fb      	strh	r3, [r7, #30]
 800539a:	8bfb      	ldrh	r3, [r7, #30]
 800539c:	2b04      	cmp	r3, #4
 800539e:	d9ed      	bls.n	800537c <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	83fb      	strh	r3, [r7, #30]
 80053a4:	e035      	b.n	8005412 <TP_Read_XOY+0xaa>
	{
		for(j=i+1;j<READ_TIMES;j++)
 80053a6:	8bfb      	ldrh	r3, [r7, #30]
 80053a8:	3301      	adds	r3, #1
 80053aa:	83bb      	strh	r3, [r7, #28]
 80053ac:	e02b      	b.n	8005406 <TP_Read_XOY+0x9e>
		{
			if(buf[i]>buf[j])
 80053ae:	8bfb      	ldrh	r3, [r7, #30]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	3320      	adds	r3, #32
 80053b4:	443b      	add	r3, r7
 80053b6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80053ba:	8bbb      	ldrh	r3, [r7, #28]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	3320      	adds	r3, #32
 80053c0:	443b      	add	r3, r7
 80053c2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d91a      	bls.n	8005400 <TP_Read_XOY+0x98>
			{
				temp=buf[i];
 80053ca:	8bfb      	ldrh	r3, [r7, #30]
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	3320      	adds	r3, #32
 80053d0:	443b      	add	r3, r7
 80053d2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80053d6:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 80053d8:	8bbb      	ldrh	r3, [r7, #28]
 80053da:	8bfa      	ldrh	r2, [r7, #30]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	3320      	adds	r3, #32
 80053e0:	443b      	add	r3, r7
 80053e2:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80053e6:	0053      	lsls	r3, r2, #1
 80053e8:	3320      	adds	r3, #32
 80053ea:	443b      	add	r3, r7
 80053ec:	460a      	mov	r2, r1
 80053ee:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 80053f2:	8bbb      	ldrh	r3, [r7, #28]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	3320      	adds	r3, #32
 80053f8:	443b      	add	r3, r7
 80053fa:	8b3a      	ldrh	r2, [r7, #24]
 80053fc:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8005400:	8bbb      	ldrh	r3, [r7, #28]
 8005402:	3301      	adds	r3, #1
 8005404:	83bb      	strh	r3, [r7, #28]
 8005406:	8bbb      	ldrh	r3, [r7, #28]
 8005408:	2b04      	cmp	r3, #4
 800540a:	d9d0      	bls.n	80053ae <TP_Read_XOY+0x46>
	for(i=0;i<READ_TIMES-1; i++)
 800540c:	8bfb      	ldrh	r3, [r7, #30]
 800540e:	3301      	adds	r3, #1
 8005410:	83fb      	strh	r3, [r7, #30]
 8005412:	8bfb      	ldrh	r3, [r7, #30]
 8005414:	2b03      	cmp	r3, #3
 8005416:	d9c6      	bls.n	80053a6 <TP_Read_XOY+0x3e>
			}
		}
	}
	sum=0;
 8005418:	2300      	movs	r3, #0
 800541a:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 800541c:	2301      	movs	r3, #1
 800541e:	83fb      	strh	r3, [r7, #30]
 8005420:	e00b      	b.n	800543a <TP_Read_XOY+0xd2>
 8005422:	8bfb      	ldrh	r3, [r7, #30]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	3320      	adds	r3, #32
 8005428:	443b      	add	r3, r7
 800542a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800542e:	8b7b      	ldrh	r3, [r7, #26]
 8005430:	4413      	add	r3, r2
 8005432:	837b      	strh	r3, [r7, #26]
 8005434:	8bfb      	ldrh	r3, [r7, #30]
 8005436:	3301      	adds	r3, #1
 8005438:	83fb      	strh	r3, [r7, #30]
 800543a:	8bfb      	ldrh	r3, [r7, #30]
 800543c:	2b03      	cmp	r3, #3
 800543e:	d9f0      	bls.n	8005422 <TP_Read_XOY+0xba>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8005440:	8b7b      	ldrh	r3, [r7, #26]
 8005442:	4a05      	ldr	r2, [pc, #20]	@ (8005458 <TP_Read_XOY+0xf0>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	833b      	strh	r3, [r7, #24]
	return temp;
 800544c:	8b3b      	ldrh	r3, [r7, #24]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3724      	adds	r7, #36	@ 0x24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd90      	pop	{r4, r7, pc}
 8005456:	bf00      	nop
 8005458:	aaaaaaab 	.word	0xaaaaaaab

0800545c <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8005466:	4b0c      	ldr	r3, [pc, #48]	@ (8005498 <TP_Read_XY+0x3c>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff7c 	bl	8005368 <TP_Read_XOY>
 8005470:	4603      	mov	r3, r0
 8005472:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8005474:	4b09      	ldr	r3, [pc, #36]	@ (800549c <TP_Read_XY+0x40>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff ff75 	bl	8005368 <TP_Read_XOY>
 800547e:	4603      	mov	r3, r0
 8005480:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	89fa      	ldrh	r2, [r7, #14]
 8005486:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	89ba      	ldrh	r2, [r7, #12]
 800548c:	801a      	strh	r2, [r3, #0]
	return 1;
 800548e:	2301      	movs	r3, #1
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	20000070 	.word	0x20000070
 800549c:	20000071 	.word	0x20000071

080054a0 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 80054aa:	f107 0212 	add.w	r2, r7, #18
 80054ae:	f107 0314 	add.w	r3, r7, #20
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff ffd1 	bl	800545c <TP_Read_XY>
 80054ba:	4603      	mov	r3, r0
 80054bc:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80054be:	7dfb      	ldrb	r3, [r7, #23]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <TP_Read_XY2+0x28>
 80054c4:	2300      	movs	r3, #0
 80054c6:	e049      	b.n	800555c <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 80054c8:	f107 020e 	add.w	r2, r7, #14
 80054cc:	f107 0310 	add.w	r3, r7, #16
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff ffc2 	bl	800545c <TP_Read_XY>
 80054d8:	4603      	mov	r3, r0
 80054da:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <TP_Read_XY2+0x46>
 80054e2:	2300      	movs	r3, #0
 80054e4:	e03a      	b.n	800555c <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 80054e6:	8a3a      	ldrh	r2, [r7, #16]
 80054e8:	8abb      	ldrh	r3, [r7, #20]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d804      	bhi.n	80054f8 <TP_Read_XY2+0x58>
 80054ee:	8a3b      	ldrh	r3, [r7, #16]
 80054f0:	3363      	adds	r3, #99	@ 0x63
 80054f2:	8aba      	ldrh	r2, [r7, #20]
 80054f4:	4293      	cmp	r3, r2
 80054f6:	da08      	bge.n	800550a <TP_Read_XY2+0x6a>
 80054f8:	8aba      	ldrh	r2, [r7, #20]
 80054fa:	8a3b      	ldrh	r3, [r7, #16]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d82c      	bhi.n	800555a <TP_Read_XY2+0xba>
 8005500:	8abb      	ldrh	r3, [r7, #20]
 8005502:	3363      	adds	r3, #99	@ 0x63
 8005504:	8a3a      	ldrh	r2, [r7, #16]
 8005506:	4293      	cmp	r3, r2
 8005508:	db27      	blt.n	800555a <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 800550a:	89fa      	ldrh	r2, [r7, #14]
 800550c:	8a7b      	ldrh	r3, [r7, #18]
 800550e:	429a      	cmp	r2, r3
 8005510:	d804      	bhi.n	800551c <TP_Read_XY2+0x7c>
 8005512:	89fb      	ldrh	r3, [r7, #14]
 8005514:	3363      	adds	r3, #99	@ 0x63
 8005516:	8a7a      	ldrh	r2, [r7, #18]
 8005518:	4293      	cmp	r3, r2
 800551a:	da08      	bge.n	800552e <TP_Read_XY2+0x8e>
 800551c:	8a7a      	ldrh	r2, [r7, #18]
 800551e:	89fb      	ldrh	r3, [r7, #14]
 8005520:	429a      	cmp	r2, r3
 8005522:	d81a      	bhi.n	800555a <TP_Read_XY2+0xba>
 8005524:	8a7b      	ldrh	r3, [r7, #18]
 8005526:	3363      	adds	r3, #99	@ 0x63
 8005528:	89fa      	ldrh	r2, [r7, #14]
 800552a:	4293      	cmp	r3, r2
 800552c:	db15      	blt.n	800555a <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 800552e:	8abb      	ldrh	r3, [r7, #20]
 8005530:	461a      	mov	r2, r3
 8005532:	8a3b      	ldrh	r3, [r7, #16]
 8005534:	4413      	add	r3, r2
 8005536:	0fda      	lsrs	r2, r3, #31
 8005538:	4413      	add	r3, r2
 800553a:	105b      	asrs	r3, r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8005542:	8a7b      	ldrh	r3, [r7, #18]
 8005544:	461a      	mov	r2, r3
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	4413      	add	r3, r2
 800554a:	0fda      	lsrs	r2, r3, #31
 800554c:	4413      	add	r3, r2
 800554e:	105b      	asrs	r3, r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	801a      	strh	r2, [r3, #0]
		return 1;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <TP_Read_XY2+0xbc>
	}else return 0;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8005564:	b590      	push	{r4, r7, lr}
 8005566:	b085      	sub	sp, #20
 8005568:	af02      	add	r7, sp, #8
 800556a:	4603      	mov	r3, r0
 800556c:	80fb      	strh	r3, [r7, #6]
 800556e:	460b      	mov	r3, r1
 8005570:	80bb      	strh	r3, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	3b0c      	subs	r3, #12
 800557a:	b298      	uxth	r0, r3
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	330d      	adds	r3, #13
 8005580:	b29a      	uxth	r2, r3
 8005582:	88bc      	ldrh	r4, [r7, #4]
 8005584:	88b9      	ldrh	r1, [r7, #4]
 8005586:	887b      	ldrh	r3, [r7, #2]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	4623      	mov	r3, r4
 800558c:	f7fc ff8f 	bl	80024ae <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8005590:	88bb      	ldrh	r3, [r7, #4]
 8005592:	3b0c      	subs	r3, #12
 8005594:	b299      	uxth	r1, r3
 8005596:	88bb      	ldrh	r3, [r7, #4]
 8005598:	330d      	adds	r3, #13
 800559a:	b29c      	uxth	r4, r3
 800559c:	88fa      	ldrh	r2, [r7, #6]
 800559e:	88f8      	ldrh	r0, [r7, #6]
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4623      	mov	r3, r4
 80055a6:	f7fc ff82 	bl	80024ae <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	3301      	adds	r3, #1
 80055ae:	b298      	uxth	r0, r3
 80055b0:	88bb      	ldrh	r3, [r7, #4]
 80055b2:	3301      	adds	r3, #1
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	887a      	ldrh	r2, [r7, #2]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f7fc ff61 	bl	8002480 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b298      	uxth	r0, r3
 80055c4:	88bb      	ldrh	r3, [r7, #4]
 80055c6:	3301      	adds	r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	887a      	ldrh	r2, [r7, #2]
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7fc ff57 	bl	8002480 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	3301      	adds	r3, #1
 80055d6:	b298      	uxth	r0, r3
 80055d8:	88bb      	ldrh	r3, [r7, #4]
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29b      	uxth	r3, r3
 80055de:	887a      	ldrh	r2, [r7, #2]
 80055e0:	4619      	mov	r1, r3
 80055e2:	f7fc ff4d 	bl	8002480 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b298      	uxth	r0, r3
 80055ec:	88bb      	ldrh	r3, [r7, #4]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	887a      	ldrh	r2, [r7, #2]
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fc ff43 	bl	8002480 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 80055fa:	88f8      	ldrh	r0, [r7, #6]
 80055fc:	88b9      	ldrh	r1, [r7, #4]
 80055fe:	887a      	ldrh	r2, [r7, #2]
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2306      	movs	r3, #6
 8005606:	f7fd fbd8 	bl	8002dba <lcd_DrawCircle>
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	bd90      	pop	{r4, r7, pc}
	...

08005614 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 800561e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005622:	4843      	ldr	r0, [pc, #268]	@ (8005730 <TP_Scan+0x11c>)
 8005624:	f002 fa66 	bl	8007af4 <HAL_GPIO_ReadPin>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d157      	bne.n	80056de <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d004      	beq.n	800563e <TP_Scan+0x2a>
 8005634:	493f      	ldr	r1, [pc, #252]	@ (8005734 <TP_Scan+0x120>)
 8005636:	4840      	ldr	r0, [pc, #256]	@ (8005738 <TP_Scan+0x124>)
 8005638:	f7ff ff32 	bl	80054a0 <TP_Read_XY2>
 800563c:	e03c      	b.n	80056b8 <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 800563e:	493d      	ldr	r1, [pc, #244]	@ (8005734 <TP_Scan+0x120>)
 8005640:	483d      	ldr	r0, [pc, #244]	@ (8005738 <TP_Scan+0x124>)
 8005642:	f7ff ff2d 	bl	80054a0 <TP_Read_XY2>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d035      	beq.n	80056b8 <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 800564c:	4b3b      	ldr	r3, [pc, #236]	@ (800573c <TP_Scan+0x128>)
 800564e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005652:	4b3a      	ldr	r3, [pc, #232]	@ (800573c <TP_Scan+0x128>)
 8005654:	899b      	ldrh	r3, [r3, #12]
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800565e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005662:	4b36      	ldr	r3, [pc, #216]	@ (800573c <TP_Scan+0x128>)
 8005664:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005674:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005678:	ee17 3a90 	vmov	r3, s15
 800567c:	b29a      	uxth	r2, r3
 800567e:	4b2f      	ldr	r3, [pc, #188]	@ (800573c <TP_Scan+0x128>)
 8005680:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8005682:	4b2e      	ldr	r3, [pc, #184]	@ (800573c <TP_Scan+0x128>)
 8005684:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8005688:	4b2c      	ldr	r3, [pc, #176]	@ (800573c <TP_Scan+0x128>)
 800568a:	8adb      	ldrh	r3, [r3, #22]
 800568c:	ee07 3a90 	vmov	s15, r3
 8005690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005698:	4b28      	ldr	r3, [pc, #160]	@ (800573c <TP_Scan+0x128>)
 800569a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ae:	ee17 3a90 	vmov	r3, s15
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	4b21      	ldr	r3, [pc, #132]	@ (800573c <TP_Scan+0x128>)
 80056b6:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 80056b8:	4b20      	ldr	r3, [pc, #128]	@ (800573c <TP_Scan+0x128>)
 80056ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	db2a      	blt.n	800571a <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 80056c4:	4b1d      	ldr	r3, [pc, #116]	@ (800573c <TP_Scan+0x128>)
 80056c6:	22c0      	movs	r2, #192	@ 0xc0
 80056c8:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 80056cc:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <TP_Scan+0x128>)
 80056ce:	899a      	ldrh	r2, [r3, #12]
 80056d0:	4b1a      	ldr	r3, [pc, #104]	@ (800573c <TP_Scan+0x128>)
 80056d2:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 80056d4:	4b19      	ldr	r3, [pc, #100]	@ (800573c <TP_Scan+0x128>)
 80056d6:	8ada      	ldrh	r2, [r3, #22]
 80056d8:	4b18      	ldr	r3, [pc, #96]	@ (800573c <TP_Scan+0x128>)
 80056da:	83da      	strh	r2, [r3, #30]
 80056dc:	e01d      	b.n	800571a <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 80056de:	4b17      	ldr	r3, [pc, #92]	@ (800573c <TP_Scan+0x128>)
 80056e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da09      	bge.n	80056fe <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 80056ea:	4b14      	ldr	r3, [pc, #80]	@ (800573c <TP_Scan+0x128>)
 80056ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	4b11      	ldr	r3, [pc, #68]	@ (800573c <TP_Scan+0x128>)
 80056f8:	f883 2020 	strb.w	r2, [r3, #32]
 80056fc:	e00d      	b.n	800571a <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 80056fe:	4b0f      	ldr	r3, [pc, #60]	@ (800573c <TP_Scan+0x128>)
 8005700:	2200      	movs	r2, #0
 8005702:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8005704:	4b0d      	ldr	r3, [pc, #52]	@ (800573c <TP_Scan+0x128>)
 8005706:	2200      	movs	r2, #0
 8005708:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 800570a:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <TP_Scan+0x128>)
 800570c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005710:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8005712:	4b0a      	ldr	r3, [pc, #40]	@ (800573c <TP_Scan+0x128>)
 8005714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005718:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 800571a:	4b08      	ldr	r3, [pc, #32]	@ (800573c <TP_Scan+0x128>)
 800571c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005720:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005724:	b2db      	uxtb	r3, r3
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	40020800 	.word	0x40020800
 8005734:	20000052 	.word	0x20000052
 8005738:	20000048 	.word	0x20000048
 800573c:	2000003c 	.word	0x2000003c

08005740 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8005744:	220e      	movs	r2, #14
 8005746:	4905      	ldr	r1, [pc, #20]	@ (800575c <TP_Save_Adjdata+0x1c>)
 8005748:	2000      	movs	r0, #0
 800574a:	f7fb fd85 	bl	8001258 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 800574e:	2100      	movs	r1, #0
 8005750:	200e      	movs	r0, #14
 8005752:	f7fb fd21 	bl	8001198 <at24c_WriteOneByte>
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000060 	.word	0x20000060

08005760 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 800576a:	200e      	movs	r0, #14
 800576c:	f7fb fcf8 	bl	8001160 <at24c_ReadOneByte>
 8005770:	4603      	mov	r3, r0
 8005772:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 800577a:	220e      	movs	r2, #14
 800577c:	4905      	ldr	r1, [pc, #20]	@ (8005794 <TP_Get_Adjdata+0x34>)
 800577e:	2000      	movs	r0, #0
 8005780:	f7fb fd4b 	bl	800121a <at24c_Read>
		return 1;
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000060 	.word	0x20000060

08005798 <touch_Adjust>:


void touch_Adjust(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	@ 0x38
 800579c:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 800579e:	2300      	movs	r3, #0
 80057a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 80057aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005928 <touch_Adjust+0x190>)
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	4b5e      	ldr	r3, [pc, #376]	@ (8005928 <touch_Adjust+0x190>)
 80057b0:	885b      	ldrh	r3, [r3, #2]
 80057b2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80057b6:	9100      	str	r1, [sp, #0]
 80057b8:	2100      	movs	r1, #0
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7fc fe2a 	bl	8002414 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 80057c0:	2300      	movs	r3, #0
 80057c2:	9302      	str	r3, [sp, #8]
 80057c4:	2310      	movs	r3, #16
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80057d2:	4a56      	ldr	r2, [pc, #344]	@ (800592c <touch_Adjust+0x194>)
 80057d4:	2128      	movs	r1, #40	@ 0x28
 80057d6:	2005      	movs	r0, #5
 80057d8:	f7fd fb5c 	bl	8002e94 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 80057dc:	2300      	movs	r3, #0
 80057de:	9302      	str	r3, [sp, #8]
 80057e0:	2310      	movs	r3, #16
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80057ee:	4a50      	ldr	r2, [pc, #320]	@ (8005930 <touch_Adjust+0x198>)
 80057f0:	2141      	movs	r1, #65	@ 0x41
 80057f2:	2005      	movs	r0, #5
 80057f4:	f7fd fb4e 	bl	8002e94 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 80057f8:	2300      	movs	r3, #0
 80057fa:	9302      	str	r3, [sp, #8]
 80057fc:	2310      	movs	r3, #16
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800580a:	4a4a      	ldr	r2, [pc, #296]	@ (8005934 <touch_Adjust+0x19c>)
 800580c:	215a      	movs	r1, #90	@ 0x5a
 800580e:	2005      	movs	r0, #5
 8005810:	f7fd fb40 	bl	8002e94 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 8005814:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005818:	2114      	movs	r1, #20
 800581a:	2014      	movs	r0, #20
 800581c:	f7ff fea2 	bl	8005564 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005820:	4b45      	ldr	r3, [pc, #276]	@ (8005938 <touch_Adjust+0x1a0>)
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005828:	4b43      	ldr	r3, [pc, #268]	@ (8005938 <touch_Adjust+0x1a0>)
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(1)
	{
		HAL_Delay(50);
 8005830:	2032      	movs	r0, #50	@ 0x32
 8005832:	f000 fe79 	bl	8006528 <HAL_Delay>
		tp_dev.scan(1);
 8005836:	4b40      	ldr	r3, [pc, #256]	@ (8005938 <touch_Adjust+0x1a0>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2001      	movs	r0, #1
 800583c:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 800583e:	4b3e      	ldr	r3, [pc, #248]	@ (8005938 <touch_Adjust+0x1a0>)
 8005840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005844:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d1f1      	bne.n	8005830 <touch_Adjust+0x98>
		{
			tp_dev.sta&=~(1<<6);
 800584c:	4b3a      	ldr	r3, [pc, #232]	@ (8005938 <touch_Adjust+0x1a0>)
 800584e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005856:	b2da      	uxtb	r2, r3
 8005858:	4b37      	ldr	r3, [pc, #220]	@ (8005938 <touch_Adjust+0x1a0>)
 800585a:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 800585e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005862:	4a35      	ldr	r2, [pc, #212]	@ (8005938 <touch_Adjust+0x1a0>)
 8005864:	8992      	ldrh	r2, [r2, #12]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	3328      	adds	r3, #40	@ 0x28
 800586a:	443b      	add	r3, r7
 800586c:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 8005870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005874:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <touch_Adjust+0x1a0>)
 8005876:	8ad2      	ldrh	r2, [r2, #22]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	3328      	adds	r3, #40	@ 0x28
 800587c:	443b      	add	r3, r7
 800587e:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8005882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005886:	3301      	adds	r3, #1
 8005888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			switch(cnt)
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005890:	3b01      	subs	r3, #1
 8005892:	2b03      	cmp	r3, #3
 8005894:	d8cc      	bhi.n	8005830 <touch_Adjust+0x98>
 8005896:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <touch_Adjust+0x104>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058ad 	.word	0x080058ad
 80058a0:	080058cf 	.word	0x080058cf
 80058a4:	080058f9 	.word	0x080058f9
 80058a8:	0800593d 	.word	0x0800593d
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80058ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058b0:	2114      	movs	r1, #20
 80058b2:	2014      	movs	r0, #20
 80058b4:	f7ff fe56 	bl	8005564 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 80058b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005928 <touch_Adjust+0x190>)
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	3b14      	subs	r3, #20
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80058c4:	2114      	movs	r1, #20
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fe4c 	bl	8005564 <TP_Drow_Touch_Point>
					break;
 80058cc:	e319      	b.n	8005f02 <touch_Adjust+0x76a>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 80058ce:	4b16      	ldr	r3, [pc, #88]	@ (8005928 <touch_Adjust+0x190>)
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	3b14      	subs	r3, #20
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058da:	2114      	movs	r1, #20
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fe41 	bl	8005564 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 80058e2:	4b11      	ldr	r3, [pc, #68]	@ (8005928 <touch_Adjust+0x190>)
 80058e4:	885b      	ldrh	r3, [r3, #2]
 80058e6:	3b14      	subs	r3, #20
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80058ee:	4619      	mov	r1, r3
 80058f0:	2014      	movs	r0, #20
 80058f2:	f7ff fe37 	bl	8005564 <TP_Drow_Touch_Point>
					break;
 80058f6:	e304      	b.n	8005f02 <touch_Adjust+0x76a>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <touch_Adjust+0x190>)
 80058fa:	885b      	ldrh	r3, [r3, #2]
 80058fc:	3b14      	subs	r3, #20
 80058fe:	b29b      	uxth	r3, r3
 8005900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005904:	4619      	mov	r1, r3
 8005906:	2014      	movs	r0, #20
 8005908:	f7ff fe2c 	bl	8005564 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 800590c:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <touch_Adjust+0x190>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	3b14      	subs	r3, #20
 8005912:	b298      	uxth	r0, r3
 8005914:	4b04      	ldr	r3, [pc, #16]	@ (8005928 <touch_Adjust+0x190>)
 8005916:	885b      	ldrh	r3, [r3, #2]
 8005918:	3b14      	subs	r3, #20
 800591a:	b29b      	uxth	r3, r3
 800591c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005920:	4619      	mov	r1, r3
 8005922:	f7ff fe1f 	bl	8005564 <TP_Drow_Touch_Point>
					break;
 8005926:	e2ec      	b.n	8005f02 <touch_Adjust+0x76a>
 8005928:	200002a8 	.word	0x200002a8
 800592c:	0800dc70 	.word	0x0800dc70
 8005930:	0800dc8c 	.word	0x0800dc8c
 8005934:	0800dca4 	.word	0x0800dca4
 8005938:	2000003c 	.word	0x2000003c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 800593c:	883b      	ldrh	r3, [r7, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	88bb      	ldrh	r3, [r7, #4]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfb8      	it	lt
 8005948:	425b      	neglt	r3, r3
 800594a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 800594c:	887b      	ldrh	r3, [r7, #2]
 800594e:	461a      	mov	r2, r3
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	bfb8      	it	lt
 8005958:	425b      	neglt	r3, r3
 800595a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	fb03 f303 	mul.w	r3, r3, r3
 8005962:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	fb03 f303 	mul.w	r3, r3, r3
 800596a:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	4618      	mov	r0, r3
 8005974:	f7fa fdbe 	bl	80004f4 <__aeabi_ui2d>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	ec43 2b10 	vmov	d0, r2, r3
 8005980:	f007 fee4 	bl	800d74c <sqrt>
 8005984:	ec53 2b10 	vmov	r2, r3, d0
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	f7fb f8dc 	bl	8000b48 <__aeabi_d2uiz>
 8005990:	4603      	mov	r3, r0
 8005992:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 8005994:	893b      	ldrh	r3, [r7, #8]
 8005996:	461a      	mov	r2, r3
 8005998:	89bb      	ldrh	r3, [r7, #12]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	bfb8      	it	lt
 80059a0:	425b      	neglt	r3, r3
 80059a2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80059a4:	897b      	ldrh	r3, [r7, #10]
 80059a6:	461a      	mov	r2, r3
 80059a8:	89fb      	ldrh	r3, [r7, #14]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bfb8      	it	lt
 80059b0:	425b      	neglt	r3, r3
 80059b2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	fb03 f303 	mul.w	r3, r3, r3
 80059ba:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	fb03 f303 	mul.w	r3, r3, r3
 80059c2:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fa fd92 	bl	80004f4 <__aeabi_ui2d>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	ec43 2b10 	vmov	d0, r2, r3
 80059d8:	f007 feb8 	bl	800d74c <sqrt>
 80059dc:	ec53 2b10 	vmov	r2, r3, d0
 80059e0:	4610      	mov	r0, r2
 80059e2:	4619      	mov	r1, r3
 80059e4:	f7fb f8b0 	bl	8000b48 <__aeabi_d2uiz>
 80059e8:	4603      	mov	r3, r0
 80059ea:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80059ec:	8b7b      	ldrh	r3, [r7, #26]
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059f6:	8b3b      	ldrh	r3, [r7, #24]
 80059f8:	ee07 3a90 	vmov	s15, r3
 80059fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a04:	ee16 0a90 	vmov	r0, s13
 8005a08:	f7fa fd96 	bl	8000538 <__aeabi_f2d>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8005a14:	a384      	add	r3, pc, #528	@ (adr r3, 8005c28 <touch_Adjust+0x490>)
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a1e:	f7fb f855 	bl	8000acc <__aeabi_dcmplt>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10f      	bne.n	8005a48 <touch_Adjust+0x2b0>
 8005a28:	a381      	add	r3, pc, #516	@ (adr r3, 8005c30 <touch_Adjust+0x498>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005a32:	f7fb f869 	bl	8000b08 <__aeabi_dcmpgt>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d105      	bne.n	8005a48 <touch_Adjust+0x2b0>
 8005a3c:	8b7b      	ldrh	r3, [r7, #26]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <touch_Adjust+0x2b0>
 8005a42:	8b3b      	ldrh	r3, [r7, #24]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d136      	bne.n	8005ab6 <touch_Adjust+0x31e>
					{
						cnt=0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005c38 <touch_Adjust+0x4a0>)
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	3b14      	subs	r3, #20
 8005a54:	b298      	uxth	r0, r3
 8005a56:	4b78      	ldr	r3, [pc, #480]	@ (8005c38 <touch_Adjust+0x4a0>)
 8005a58:	885b      	ldrh	r3, [r3, #2]
 8005a5a:	3b14      	subs	r3, #20
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a62:	4619      	mov	r1, r3
 8005a64:	f7ff fd7e 	bl	8005564 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005a68:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005a6c:	2114      	movs	r1, #20
 8005a6e:	2014      	movs	r0, #20
 8005a70:	f7ff fd78 	bl	8005564 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005a74:	2300      	movs	r3, #0
 8005a76:	9302      	str	r3, [sp, #8]
 8005a78:	2310      	movs	r3, #16
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005a86:	4a6d      	ldr	r2, [pc, #436]	@ (8005c3c <touch_Adjust+0x4a4>)
 8005a88:	2128      	movs	r1, #40	@ 0x28
 8005a8a:	2005      	movs	r0, #5
 8005a8c:	f7fd fa02 	bl	8002e94 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005a90:	2300      	movs	r3, #0
 8005a92:	9302      	str	r3, [sp, #8]
 8005a94:	2310      	movs	r3, #16
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005aa2:	4a67      	ldr	r2, [pc, #412]	@ (8005c40 <touch_Adjust+0x4a8>)
 8005aa4:	213c      	movs	r1, #60	@ 0x3c
 8005aa6:	2005      	movs	r0, #5
 8005aa8:	f7fd f9f4 	bl	8002e94 <lcd_ShowStr>
						HAL_Delay(1000);
 8005aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ab0:	f000 fd3a 	bl	8006528 <HAL_Delay>
 						continue;
 8005ab4:	e225      	b.n	8005f02 <touch_Adjust+0x76a>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8005ab6:	883b      	ldrh	r3, [r7, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	893b      	ldrh	r3, [r7, #8]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	425b      	neglt	r3, r3
 8005ac4:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	897b      	ldrh	r3, [r7, #10]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfb8      	it	lt
 8005ad2:	425b      	neglt	r3, r3
 8005ad4:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	fb03 f303 	mul.w	r3, r3, r3
 8005adc:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	fb03 f303 	mul.w	r3, r3, r3
 8005ae4:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005ae6:	6a3a      	ldr	r2, [r7, #32]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fa fd01 	bl	80004f4 <__aeabi_ui2d>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	ec43 2b10 	vmov	d0, r2, r3
 8005afa:	f007 fe27 	bl	800d74c <sqrt>
 8005afe:	ec53 2b10 	vmov	r2, r3, d0
 8005b02:	4610      	mov	r0, r2
 8005b04:	4619      	mov	r1, r3
 8005b06:	f7fb f81f 	bl	8000b48 <__aeabi_d2uiz>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 8005b0e:	88bb      	ldrh	r3, [r7, #4]
 8005b10:	461a      	mov	r2, r3
 8005b12:	89bb      	ldrh	r3, [r7, #12]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfb8      	it	lt
 8005b1a:	425b      	neglt	r3, r3
 8005b1c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	461a      	mov	r2, r3
 8005b22:	89fb      	ldrh	r3, [r7, #14]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bfb8      	it	lt
 8005b2a:	425b      	neglt	r3, r3
 8005b2c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	fb03 f303 	mul.w	r3, r3, r3
 8005b34:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	fb03 f303 	mul.w	r3, r3, r3
 8005b3c:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005b3e:	6a3a      	ldr	r2, [r7, #32]
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fa fcd5 	bl	80004f4 <__aeabi_ui2d>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	ec43 2b10 	vmov	d0, r2, r3
 8005b52:	f007 fdfb 	bl	800d74c <sqrt>
 8005b56:	ec53 2b10 	vmov	r2, r3, d0
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f7fa fff3 	bl	8000b48 <__aeabi_d2uiz>
 8005b62:	4603      	mov	r3, r0
 8005b64:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005b66:	8b7b      	ldrh	r3, [r7, #26]
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b70:	8b3b      	ldrh	r3, [r7, #24]
 8005b72:	ee07 3a90 	vmov	s15, r3
 8005b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b7e:	ee16 0a90 	vmov	r0, s13
 8005b82:	f7fa fcd9 	bl	8000538 <__aeabi_f2d>
 8005b86:	4602      	mov	r2, r0
 8005b88:	460b      	mov	r3, r1
 8005b8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005b8e:	a326      	add	r3, pc, #152	@ (adr r3, 8005c28 <touch_Adjust+0x490>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b98:	f7fa ff98 	bl	8000acc <__aeabi_dcmplt>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <touch_Adjust+0x41e>
 8005ba2:	a323      	add	r3, pc, #140	@ (adr r3, 8005c30 <touch_Adjust+0x498>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bac:	f7fa ffac 	bl	8000b08 <__aeabi_dcmpgt>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d046      	beq.n	8005c44 <touch_Adjust+0x4ac>
					{
						cnt=0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c38 <touch_Adjust+0x4a0>)
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	3b14      	subs	r3, #20
 8005bc2:	b298      	uxth	r0, r3
 8005bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8005c38 <touch_Adjust+0x4a0>)
 8005bc6:	885b      	ldrh	r3, [r3, #2]
 8005bc8:	3b14      	subs	r3, #20
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	f7ff fcc7 	bl	8005564 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005bd6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005bda:	2114      	movs	r1, #20
 8005bdc:	2014      	movs	r0, #20
 8005bde:	f7ff fcc1 	bl	8005564 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005be2:	2300      	movs	r3, #0
 8005be4:	9302      	str	r3, [sp, #8]
 8005be6:	2310      	movs	r3, #16
 8005be8:	9301      	str	r3, [sp, #4]
 8005bea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005bf4:	4a11      	ldr	r2, [pc, #68]	@ (8005c3c <touch_Adjust+0x4a4>)
 8005bf6:	2128      	movs	r1, #40	@ 0x28
 8005bf8:	2005      	movs	r0, #5
 8005bfa:	f7fd f94b 	bl	8002e94 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9302      	str	r3, [sp, #8]
 8005c02:	2310      	movs	r3, #16
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005c10:	4a0b      	ldr	r2, [pc, #44]	@ (8005c40 <touch_Adjust+0x4a8>)
 8005c12:	213c      	movs	r1, #60	@ 0x3c
 8005c14:	2005      	movs	r0, #5
 8005c16:	f7fd f93d 	bl	8002e94 <lcd_ShowStr>
						HAL_Delay(1000);
 8005c1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005c1e:	f000 fc83 	bl	8006528 <HAL_Delay>
						continue;
 8005c22:	e16e      	b.n	8005f02 <touch_Adjust+0x76a>
 8005c24:	f3af 8000 	nop.w
 8005c28:	66666666 	.word	0x66666666
 8005c2c:	3fee6666 	.word	0x3fee6666
 8005c30:	cccccccd 	.word	0xcccccccd
 8005c34:	3ff0cccc 	.word	0x3ff0cccc
 8005c38:	200002a8 	.word	0x200002a8
 8005c3c:	0800dcb8 	.word	0x0800dcb8
 8005c40:	0800dcd8 	.word	0x0800dcd8
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8005c44:	88bb      	ldrh	r3, [r7, #4]
 8005c46:	461a      	mov	r2, r3
 8005c48:	893b      	ldrh	r3, [r7, #8]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfb8      	it	lt
 8005c50:	425b      	neglt	r3, r3
 8005c52:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	461a      	mov	r2, r3
 8005c58:	897b      	ldrh	r3, [r7, #10]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfb8      	it	lt
 8005c60:	425b      	neglt	r3, r3
 8005c62:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	fb03 f303 	mul.w	r3, r3, r3
 8005c6a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	fb03 f303 	mul.w	r3, r3, r3
 8005c72:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fa fc3a 	bl	80004f4 <__aeabi_ui2d>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	ec43 2b10 	vmov	d0, r2, r3
 8005c88:	f007 fd60 	bl	800d74c <sqrt>
 8005c8c:	ec53 2b10 	vmov	r2, r3, d0
 8005c90:	4610      	mov	r0, r2
 8005c92:	4619      	mov	r1, r3
 8005c94:	f7fa ff58 	bl	8000b48 <__aeabi_d2uiz>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 8005c9c:	883b      	ldrh	r3, [r7, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	89bb      	ldrh	r3, [r7, #12]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfb8      	it	lt
 8005ca8:	425b      	neglt	r3, r3
 8005caa:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 8005cac:	887b      	ldrh	r3, [r7, #2]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	89fb      	ldrh	r3, [r7, #14]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	bfb8      	it	lt
 8005cb8:	425b      	neglt	r3, r3
 8005cba:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	fb03 f303 	mul.w	r3, r3, r3
 8005cc2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	fb03 f303 	mul.w	r3, r3, r3
 8005cca:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fa fc0e 	bl	80004f4 <__aeabi_ui2d>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	ec43 2b10 	vmov	d0, r2, r3
 8005ce0:	f007 fd34 	bl	800d74c <sqrt>
 8005ce4:	ec53 2b10 	vmov	r2, r3, d0
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4619      	mov	r1, r3
 8005cec:	f7fa ff2c 	bl	8000b48 <__aeabi_d2uiz>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005cf4:	8b7b      	ldrh	r3, [r7, #26]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cfe:	8b3b      	ldrh	r3, [r7, #24]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d0c:	ee16 0a90 	vmov	r0, s13
 8005d10:	f7fa fc12 	bl	8000538 <__aeabi_f2d>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 8005d1c:	a383      	add	r3, pc, #524	@ (adr r3, 8005f2c <touch_Adjust+0x794>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d26:	f7fa fed1 	bl	8000acc <__aeabi_dcmplt>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <touch_Adjust+0x5ac>
 8005d30:	a380      	add	r3, pc, #512	@ (adr r3, 8005f34 <touch_Adjust+0x79c>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005d3a:	f7fa fee5 	bl	8000b08 <__aeabi_dcmpgt>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d036      	beq.n	8005db2 <touch_Adjust+0x61a>
					{
						cnt=0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005d4a:	4b71      	ldr	r3, [pc, #452]	@ (8005f10 <touch_Adjust+0x778>)
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	3b14      	subs	r3, #20
 8005d50:	b298      	uxth	r0, r3
 8005d52:	4b6f      	ldr	r3, [pc, #444]	@ (8005f10 <touch_Adjust+0x778>)
 8005d54:	885b      	ldrh	r3, [r3, #2]
 8005d56:	3b14      	subs	r3, #20
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f7ff fc00 	bl	8005564 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005d64:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8005d68:	2114      	movs	r1, #20
 8005d6a:	2014      	movs	r0, #20
 8005d6c:	f7ff fbfa 	bl	8005564 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005d70:	2300      	movs	r3, #0
 8005d72:	9302      	str	r3, [sp, #8]
 8005d74:	2310      	movs	r3, #16
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005d82:	4a64      	ldr	r2, [pc, #400]	@ (8005f14 <touch_Adjust+0x77c>)
 8005d84:	2128      	movs	r1, #40	@ 0x28
 8005d86:	2005      	movs	r0, #5
 8005d88:	f7fd f884 	bl	8002e94 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9302      	str	r3, [sp, #8]
 8005d90:	2310      	movs	r3, #16
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005f18 <touch_Adjust+0x780>)
 8005da0:	213c      	movs	r1, #60	@ 0x3c
 8005da2:	2005      	movs	r0, #5
 8005da4:	f7fd f876 	bl	8002e94 <lcd_ShowStr>

						HAL_Delay(1000);
 8005da8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005dac:	f000 fbbc 	bl	8006528 <HAL_Delay>
 							continue;
 8005db0:	e0a7      	b.n	8005f02 <touch_Adjust+0x76a>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8005db2:	4b57      	ldr	r3, [pc, #348]	@ (8005f10 <touch_Adjust+0x778>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	3b28      	subs	r3, #40	@ 0x28
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005dc0:	88bb      	ldrh	r3, [r7, #4]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	883b      	ldrh	r3, [r7, #0]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	ee07 3a90 	vmov	s15, r3
 8005dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dd4:	4b51      	ldr	r3, [pc, #324]	@ (8005f1c <touch_Adjust+0x784>)
 8005dd6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 8005dda:	4b4d      	ldr	r3, [pc, #308]	@ (8005f10 <touch_Adjust+0x778>)
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005de6:	4b4d      	ldr	r3, [pc, #308]	@ (8005f1c <touch_Adjust+0x784>)
 8005de8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005dec:	88bb      	ldrh	r3, [r7, #4]
 8005dee:	461a      	mov	r2, r3
 8005df0:	883b      	ldrh	r3, [r7, #0]
 8005df2:	4413      	add	r3, r2
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e04:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e10:	ee17 3a90 	vmov	r3, s15
 8005e14:	b21a      	sxth	r2, r3
 8005e16:	4b41      	ldr	r3, [pc, #260]	@ (8005f1c <touch_Adjust+0x784>)
 8005e18:	859a      	strh	r2, [r3, #44]	@ 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 8005e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f10 <touch_Adjust+0x778>)
 8005e1c:	885b      	ldrh	r3, [r3, #2]
 8005e1e:	3b28      	subs	r3, #40	@ 0x28
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e28:	897b      	ldrh	r3, [r7, #10]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	887b      	ldrh	r3, [r7, #2]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	ee07 3a90 	vmov	s15, r3
 8005e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3c:	4b37      	ldr	r3, [pc, #220]	@ (8005f1c <touch_Adjust+0x784>)
 8005e3e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8005e42:	4b33      	ldr	r3, [pc, #204]	@ (8005f10 <touch_Adjust+0x778>)
 8005e44:	885b      	ldrh	r3, [r3, #2]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e4e:	4b33      	ldr	r3, [pc, #204]	@ (8005f1c <touch_Adjust+0x784>)
 8005e50:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8005e54:	897b      	ldrh	r3, [r7, #10]
 8005e56:	461a      	mov	r2, r3
 8005e58:	887b      	ldrh	r3, [r7, #2]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e6c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005e70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e78:	ee17 3a90 	vmov	r3, s15
 8005e7c:	b21a      	sxth	r2, r3
 8005e7e:	4b27      	ldr	r3, [pc, #156]	@ (8005f1c <touch_Adjust+0x784>)
 8005e80:	85da      	strh	r2, [r3, #46]	@ 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 8005e82:	4b23      	ldr	r3, [pc, #140]	@ (8005f10 <touch_Adjust+0x778>)
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	3b14      	subs	r3, #20
 8005e88:	b298      	uxth	r0, r3
 8005e8a:	4b21      	ldr	r3, [pc, #132]	@ (8005f10 <touch_Adjust+0x778>)
 8005e8c:	885b      	ldrh	r3, [r3, #2]
 8005e8e:	3b14      	subs	r3, #20
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e96:	4619      	mov	r1, r3
 8005e98:	f7ff fb64 	bl	8005564 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9302      	str	r3, [sp, #8]
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005eae:	4a1c      	ldr	r2, [pc, #112]	@ (8005f20 <touch_Adjust+0x788>)
 8005eb0:	2128      	movs	r1, #40	@ 0x28
 8005eb2:	2005      	movs	r0, #5
 8005eb4:	f7fc ffee 	bl	8002e94 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005eca:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <touch_Adjust+0x78c>)
 8005ecc:	213c      	movs	r1, #60	@ 0x3c
 8005ece:	2005      	movs	r0, #5
 8005ed0:	f7fc ffe0 	bl	8002e94 <lcd_ShowStr>
					HAL_Delay(1000);
 8005ed4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005ed8:	f000 fb26 	bl	8006528 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 8005edc:	2300      	movs	r3, #0
 8005ede:	9302      	str	r3, [sp, #8]
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8005eee:	4a0e      	ldr	r2, [pc, #56]	@ (8005f28 <touch_Adjust+0x790>)
 8005ef0:	2128      	movs	r1, #40	@ 0x28
 8005ef2:	2005      	movs	r0, #5
 8005ef4:	f7fc ffce 	bl	8002e94 <lcd_ShowStr>
					TP_Save_Adjdata();
 8005ef8:	f7ff fc22 	bl	8005740 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 8005efc:	f7ff fc30 	bl	8005760 <TP_Get_Adjdata>
					return;
 8005f00:	e000      	b.n	8005f04 <touch_Adjust+0x76c>
		HAL_Delay(50);
 8005f02:	e495      	b.n	8005830 <touch_Adjust+0x98>
			}
		}
 	}
}
 8005f04:	3728      	adds	r7, #40	@ 0x28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
 8005f10:	200002a8 	.word	0x200002a8
 8005f14:	0800dcb8 	.word	0x0800dcb8
 8005f18:	0800dcd8 	.word	0x0800dcd8
 8005f1c:	2000003c 	.word	0x2000003c
 8005f20:	0800dcf8 	.word	0x0800dcf8
 8005f24:	0800dd18 	.word	0x0800dd18
 8005f28:	0800dd38 	.word	0x0800dd38
 8005f2c:	66666666 	.word	0x66666666
 8005f30:	3fee6666 	.word	0x3fee6666
 8005f34:	cccccccd 	.word	0xcccccccd
 8005f38:	3ff0cccc 	.word	0x3ff0cccc

08005f3c <touch_init>:

void touch_init(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8005f40:	4904      	ldr	r1, [pc, #16]	@ (8005f54 <touch_init+0x18>)
 8005f42:	4805      	ldr	r0, [pc, #20]	@ (8005f58 <touch_init+0x1c>)
 8005f44:	f7ff fa8a 	bl	800545c <TP_Read_XY>
	at24c_init();
 8005f48:	f7fb f904 	bl	8001154 <at24c_init>
	TP_Get_Adjdata();
 8005f4c:	f7ff fc08 	bl	8005760 <TP_Get_Adjdata>
}
 8005f50:	bf00      	nop
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000052 	.word	0x20000052
 8005f58:	20000048 	.word	0x20000048

08005f5c <touch_Scan>:

void touch_Scan(){
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 8005f60:	4b02      	ldr	r3, [pc, #8]	@ (8005f6c <touch_Scan+0x10>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	2000      	movs	r0, #0
 8005f66:	4798      	blx	r3
}
 8005f68:	bf00      	nop
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	2000003c 	.word	0x2000003c

08005f70 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 8005f74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f78:	4805      	ldr	r0, [pc, #20]	@ (8005f90 <touch_IsTouched+0x20>)
 8005f7a:	f001 fdbb 	bl	8007af4 <HAL_GPIO_ReadPin>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40020800 	.word	0x40020800

08005f94 <touch_GetX>:

uint16_t touch_GetX(){
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 8005f98:	4b03      	ldr	r3, [pc, #12]	@ (8005fa8 <touch_GetX+0x14>)
 8005f9a:	899b      	ldrh	r3, [r3, #12]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	2000003c 	.word	0x2000003c

08005fac <touch_GetY>:

uint16_t touch_GetY(){
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005fb0:	4b03      	ldr	r3, [pc, #12]	@ (8005fc0 <touch_GetY+0x14>)
 8005fb2:	8adb      	ldrh	r3, [r3, #22]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	2000003c 	.word	0x2000003c

08005fc4 <isButtonStart>:
 *      Author: Admin
 */

#include "touch_screen.h"

uint8_t isButtonStart(){
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005fc8:	f7ff ffd2 	bl	8005f70 <touch_IsTouched>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <isButtonStart+0x12>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e018      	b.n	8006008 <isButtonStart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 200 && touch_GetY() < 300;
 8005fd6:	f7ff ffdd 	bl	8005f94 <touch_GetX>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b32      	cmp	r3, #50	@ 0x32
 8005fde:	d911      	bls.n	8006004 <isButtonStart+0x40>
 8005fe0:	f7ff ffd8 	bl	8005f94 <touch_GetX>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2bbd      	cmp	r3, #189	@ 0xbd
 8005fe8:	d80c      	bhi.n	8006004 <isButtonStart+0x40>
 8005fea:	f7ff ffdf 	bl	8005fac <touch_GetY>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ff2:	d907      	bls.n	8006004 <isButtonStart+0x40>
 8005ff4:	f7ff ffda 	bl	8005fac <touch_GetY>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005ffe:	d201      	bcs.n	8006004 <isButtonStart+0x40>
 8006000:	2301      	movs	r3, #1
 8006002:	e000      	b.n	8006006 <isButtonStart+0x42>
 8006004:	2300      	movs	r3, #0
 8006006:	b2db      	uxtb	r3, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}

0800600c <isButtonUp>:
uint8_t isButtonUp(){
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8006010:	f7ff ffae 	bl	8005f70 <touch_IsTouched>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <isButtonUp+0x12>
 800601a:	2300      	movs	r3, #0
 800601c:	e017      	b.n	800604e <isButtonUp+0x42>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 210 && touch_GetY() < 250;
 800601e:	f7ff ffb9 	bl	8005f94 <touch_GetX>
 8006022:	4603      	mov	r3, r0
 8006024:	2b5a      	cmp	r3, #90	@ 0x5a
 8006026:	d910      	bls.n	800604a <isButtonUp+0x3e>
 8006028:	f7ff ffb4 	bl	8005f94 <touch_GetX>
 800602c:	4603      	mov	r3, r0
 800602e:	2b95      	cmp	r3, #149	@ 0x95
 8006030:	d80b      	bhi.n	800604a <isButtonUp+0x3e>
 8006032:	f7ff ffbb 	bl	8005fac <touch_GetY>
 8006036:	4603      	mov	r3, r0
 8006038:	2bd2      	cmp	r3, #210	@ 0xd2
 800603a:	d906      	bls.n	800604a <isButtonUp+0x3e>
 800603c:	f7ff ffb6 	bl	8005fac <touch_GetY>
 8006040:	4603      	mov	r3, r0
 8006042:	2bf9      	cmp	r3, #249	@ 0xf9
 8006044:	d801      	bhi.n	800604a <isButtonUp+0x3e>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <isButtonUp+0x40>
 800604a:	2300      	movs	r3, #0
 800604c:	b2db      	uxtb	r3, r3
}
 800604e:	4618      	mov	r0, r3
 8006050:	bd80      	pop	{r7, pc}

08006052 <isButtonDown>:
uint8_t isButtonDown(){
 8006052:	b580      	push	{r7, lr}
 8006054:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8006056:	f7ff ff8b 	bl	8005f70 <touch_IsTouched>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <isButtonDown+0x12>
 8006060:	2300      	movs	r3, #0
 8006062:	e019      	b.n	8006098 <isButtonDown+0x46>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 260 && touch_GetY() < 300;
 8006064:	f7ff ff96 	bl	8005f94 <touch_GetX>
 8006068:	4603      	mov	r3, r0
 800606a:	2b5a      	cmp	r3, #90	@ 0x5a
 800606c:	d912      	bls.n	8006094 <isButtonDown+0x42>
 800606e:	f7ff ff91 	bl	8005f94 <touch_GetX>
 8006072:	4603      	mov	r3, r0
 8006074:	2b95      	cmp	r3, #149	@ 0x95
 8006076:	d80d      	bhi.n	8006094 <isButtonDown+0x42>
 8006078:	f7ff ff98 	bl	8005fac <touch_GetY>
 800607c:	4603      	mov	r3, r0
 800607e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006082:	d907      	bls.n	8006094 <isButtonDown+0x42>
 8006084:	f7ff ff92 	bl	8005fac <touch_GetY>
 8006088:	4603      	mov	r3, r0
 800608a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800608e:	d201      	bcs.n	8006094 <isButtonDown+0x42>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <isButtonDown+0x44>
 8006094:	2300      	movs	r3, #0
 8006096:	b2db      	uxtb	r3, r3
}
 8006098:	4618      	mov	r0, r3
 800609a:	bd80      	pop	{r7, pc}

0800609c <isButtonLeft>:
uint8_t isButtonLeft(){
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80060a0:	f7ff ff66 	bl	8005f70 <touch_IsTouched>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <isButtonLeft+0x12>
 80060aa:	2300      	movs	r3, #0
 80060ac:	e019      	b.n	80060e2 <isButtonLeft+0x46>
	return touch_GetX() > 20 && touch_GetX() < 80 && touch_GetY() > 260 && touch_GetY() < 300;
 80060ae:	f7ff ff71 	bl	8005f94 <touch_GetX>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b14      	cmp	r3, #20
 80060b6:	d912      	bls.n	80060de <isButtonLeft+0x42>
 80060b8:	f7ff ff6c 	bl	8005f94 <touch_GetX>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b4f      	cmp	r3, #79	@ 0x4f
 80060c0:	d80d      	bhi.n	80060de <isButtonLeft+0x42>
 80060c2:	f7ff ff73 	bl	8005fac <touch_GetY>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060cc:	d907      	bls.n	80060de <isButtonLeft+0x42>
 80060ce:	f7ff ff6d 	bl	8005fac <touch_GetY>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80060d8:	d201      	bcs.n	80060de <isButtonLeft+0x42>
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <isButtonLeft+0x44>
 80060de:	2300      	movs	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <isButtonRight>:
uint8_t isButtonRight(){
 80060e6:	b580      	push	{r7, lr}
 80060e8:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80060ea:	f7ff ff41 	bl	8005f70 <touch_IsTouched>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <isButtonRight+0x12>
 80060f4:	2300      	movs	r3, #0
 80060f6:	e019      	b.n	800612c <isButtonRight+0x46>
	return touch_GetX() > 160 && touch_GetX() < 220 && touch_GetY() > 260 && touch_GetY() < 300;
 80060f8:	f7ff ff4c 	bl	8005f94 <touch_GetX>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8006100:	d912      	bls.n	8006128 <isButtonRight+0x42>
 8006102:	f7ff ff47 	bl	8005f94 <touch_GetX>
 8006106:	4603      	mov	r3, r0
 8006108:	2bdb      	cmp	r3, #219	@ 0xdb
 800610a:	d80d      	bhi.n	8006128 <isButtonRight+0x42>
 800610c:	f7ff ff4e 	bl	8005fac <touch_GetY>
 8006110:	4603      	mov	r3, r0
 8006112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006116:	d907      	bls.n	8006128 <isButtonRight+0x42>
 8006118:	f7ff ff48 	bl	8005fac <touch_GetY>
 800611c:	4603      	mov	r3, r0
 800611e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8006122:	d201      	bcs.n	8006128 <isButtonRight+0x42>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <isButtonRight+0x44>
 8006128:	2300      	movs	r3, #0
 800612a:	b2db      	uxtb	r3, r3
}
 800612c:	4618      	mov	r0, r3
 800612e:	bd80      	pop	{r7, pc}

08006130 <isButtonRestart>:
uint8_t isButtonRestart(){
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8006134:	f7ff ff1c 	bl	8005f70 <touch_IsTouched>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <isButtonRestart+0x12>
 800613e:	2300      	movs	r3, #0
 8006140:	e018      	b.n	8006174 <isButtonRestart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 350;
 8006142:	f7ff ff27 	bl	8005f94 <touch_GetX>
 8006146:	4603      	mov	r3, r0
 8006148:	2b32      	cmp	r3, #50	@ 0x32
 800614a:	d911      	bls.n	8006170 <isButtonRestart+0x40>
 800614c:	f7ff ff22 	bl	8005f94 <touch_GetX>
 8006150:	4603      	mov	r3, r0
 8006152:	2bbd      	cmp	r3, #189	@ 0xbd
 8006154:	d80c      	bhi.n	8006170 <isButtonRestart+0x40>
 8006156:	f7ff ff29 	bl	8005fac <touch_GetY>
 800615a:	4603      	mov	r3, r0
 800615c:	2bfa      	cmp	r3, #250	@ 0xfa
 800615e:	d907      	bls.n	8006170 <isButtonRestart+0x40>
 8006160:	f7ff ff24 	bl	8005fac <touch_GetY>
 8006164:	4603      	mov	r3, r0
 8006166:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800616a:	d201      	bcs.n	8006170 <isButtonRestart+0x40>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <isButtonRestart+0x42>
 8006170:	2300      	movs	r3, #0
 8006172:	b2db      	uxtb	r3, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}

08006178 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){// khoi tao uart gui den wifi
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800617c:	2201      	movs	r2, #1
 800617e:	4903      	ldr	r1, [pc, #12]	@ (800618c <uart_init_esp+0x14>)
 8006180:	4803      	ldr	r0, [pc, #12]	@ (8006190 <uart_init_esp+0x18>)
 8006182:	f005 f8ca 	bl	800b31a <HAL_UART_Receive_IT>
}
 8006186:	bf00      	nop
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000c75 	.word	0x20000c75
 8006190:	20000e24 	.word	0x20000e24

08006194 <uart_EspSendString>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void uart_EspSendString(uint8_t* str){// gui chuoi
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	4907      	ldr	r1, [pc, #28]	@ (80061bc <uart_EspSendString+0x28>)
 80061a0:	4807      	ldr	r0, [pc, #28]	@ (80061c0 <uart_EspSendString+0x2c>)
 80061a2:	f006 fad5 	bl	800c750 <siprintf>
 80061a6:	4603      	mov	r3, r0
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	230a      	movs	r3, #10
 80061ac:	4904      	ldr	r1, [pc, #16]	@ (80061c0 <uart_EspSendString+0x2c>)
 80061ae:	4805      	ldr	r0, [pc, #20]	@ (80061c4 <uart_EspSendString+0x30>)
 80061b0:	f005 f821 	bl	800b1f6 <HAL_UART_Transmit>
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	0800dd50 	.word	0x0800dd50
 80061c0:	20000c78 	.word	0x20000c78
 80061c4:	20000e24 	.word	0x20000e24

080061c8 <HAL_UART_RxCpltCallback>:
        }
        num %= mypow(10, i-1);
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a11      	ldr	r2, [pc, #68]	@ (800621c <HAL_UART_RxCpltCallback+0x54>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d11c      	bne.n	8006214 <HAL_UART_RxCpltCallback+0x4c>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80061da:	230a      	movs	r3, #10
 80061dc:	2201      	movs	r2, #1
 80061de:	4910      	ldr	r1, [pc, #64]	@ (8006220 <HAL_UART_RxCpltCallback+0x58>)
 80061e0:	4810      	ldr	r0, [pc, #64]	@ (8006224 <HAL_UART_RxCpltCallback+0x5c>)
 80061e2:	f005 f808 	bl	800b1f6 <HAL_UART_Transmit>

		// turn on the receice interrupt
		rxBuffer[rxHead] = receive_buffer1;
 80061e6:	4b10      	ldr	r3, [pc, #64]	@ (8006228 <HAL_UART_RxCpltCallback+0x60>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	4b0c      	ldr	r3, [pc, #48]	@ (8006220 <HAL_UART_RxCpltCallback+0x58>)
 80061ee:	7819      	ldrb	r1, [r3, #0]
 80061f0:	4b0e      	ldr	r3, [pc, #56]	@ (800622c <HAL_UART_RxCpltCallback+0x64>)
 80061f2:	5499      	strb	r1, [r3, r2]
		rxHead = (rxHead + 1)%BUFFER_SIZE;
 80061f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <HAL_UART_RxCpltCallback+0x60>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	425a      	negs	r2, r3
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	b2d2      	uxtb	r2, r2
 8006200:	bf58      	it	pl
 8006202:	4253      	negpl	r3, r2
 8006204:	b2da      	uxtb	r2, r3
 8006206:	4b08      	ldr	r3, [pc, #32]	@ (8006228 <HAL_UART_RxCpltCallback+0x60>)
 8006208:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800620a:	2201      	movs	r2, #1
 800620c:	4904      	ldr	r1, [pc, #16]	@ (8006220 <HAL_UART_RxCpltCallback+0x58>)
 800620e:	4805      	ldr	r0, [pc, #20]	@ (8006224 <HAL_UART_RxCpltCallback+0x5c>)
 8006210:	f005 f883 	bl	800b31a <HAL_UART_Receive_IT>
	}
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	40011000 	.word	0x40011000
 8006220:	20000c74 	.word	0x20000c74
 8006224:	20000de0 	.word	0x20000de0
 8006228:	20000ddc 	.word	0x20000ddc
 800622c:	20000cdc 	.word	0x20000cdc

08006230 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006234:	4b11      	ldr	r3, [pc, #68]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 8006236:	4a12      	ldr	r2, [pc, #72]	@ (8006280 <MX_USART1_UART_Init+0x50>)
 8006238:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800623a:	4b10      	ldr	r3, [pc, #64]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 800623c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006240:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006242:	4b0e      	ldr	r3, [pc, #56]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 8006244:	2200      	movs	r2, #0
 8006246:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006248:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 800624a:	2200      	movs	r2, #0
 800624c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800624e:	4b0b      	ldr	r3, [pc, #44]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 8006250:	2200      	movs	r2, #0
 8006252:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006254:	4b09      	ldr	r3, [pc, #36]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 8006256:	220c      	movs	r2, #12
 8006258:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800625a:	4b08      	ldr	r3, [pc, #32]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 800625c:	2200      	movs	r2, #0
 800625e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006260:	4b06      	ldr	r3, [pc, #24]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 8006262:	2200      	movs	r2, #0
 8006264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006266:	4805      	ldr	r0, [pc, #20]	@ (800627c <MX_USART1_UART_Init+0x4c>)
 8006268:	f004 ff78 	bl	800b15c <HAL_UART_Init>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006272:	f7fd f9eb 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006276:	bf00      	nop
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000de0 	.word	0x20000de0
 8006280:	40011000 	.word	0x40011000

08006284 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006288:	4b11      	ldr	r3, [pc, #68]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 800628a:	4a12      	ldr	r2, [pc, #72]	@ (80062d4 <MX_USART2_UART_Init+0x50>)
 800628c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 8006290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006296:	4b0e      	ldr	r3, [pc, #56]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 8006298:	2200      	movs	r2, #0
 800629a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800629c:	4b0c      	ldr	r3, [pc, #48]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 800629e:	2200      	movs	r2, #0
 80062a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80062a2:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062a8:	4b09      	ldr	r3, [pc, #36]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 80062aa:	220c      	movs	r2, #12
 80062ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062ae:	4b08      	ldr	r3, [pc, #32]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062b4:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80062ba:	4805      	ldr	r0, [pc, #20]	@ (80062d0 <MX_USART2_UART_Init+0x4c>)
 80062bc:	f004 ff4e 	bl	800b15c <HAL_UART_Init>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80062c6:	f7fd f9c1 	bl	800364c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000e24 	.word	0x20000e24
 80062d4:	40004400 	.word	0x40004400

080062d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	@ 0x30
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e0:	f107 031c 	add.w	r3, r7, #28
 80062e4:	2200      	movs	r2, #0
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	609a      	str	r2, [r3, #8]
 80062ec:	60da      	str	r2, [r3, #12]
 80062ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a3a      	ldr	r2, [pc, #232]	@ (80063e0 <HAL_UART_MspInit+0x108>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d135      	bne.n	8006366 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	4b39      	ldr	r3, [pc, #228]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006302:	4a38      	ldr	r2, [pc, #224]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006304:	f043 0310 	orr.w	r3, r3, #16
 8006308:	6453      	str	r3, [r2, #68]	@ 0x44
 800630a:	4b36      	ldr	r3, [pc, #216]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 800630c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	4b32      	ldr	r3, [pc, #200]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800631e:	4a31      	ldr	r2, [pc, #196]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006320:	f043 0301 	orr.w	r3, r3, #1
 8006324:	6313      	str	r3, [r2, #48]	@ 0x30
 8006326:	4b2f      	ldr	r3, [pc, #188]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006332:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006338:	2302      	movs	r3, #2
 800633a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006340:	2303      	movs	r3, #3
 8006342:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006344:	2307      	movs	r3, #7
 8006346:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006348:	f107 031c 	add.w	r3, r7, #28
 800634c:	4619      	mov	r1, r3
 800634e:	4826      	ldr	r0, [pc, #152]	@ (80063e8 <HAL_UART_MspInit+0x110>)
 8006350:	f001 fa34 	bl	80077bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006354:	2200      	movs	r2, #0
 8006356:	2100      	movs	r1, #0
 8006358:	2025      	movs	r0, #37	@ 0x25
 800635a:	f000 fdf6 	bl	8006f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800635e:	2025      	movs	r0, #37	@ 0x25
 8006360:	f000 fe0f 	bl	8006f82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006364:	e038      	b.n	80063d8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a20      	ldr	r2, [pc, #128]	@ (80063ec <HAL_UART_MspInit+0x114>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d133      	bne.n	80063d8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	4b1b      	ldr	r3, [pc, #108]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	4a1a      	ldr	r2, [pc, #104]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 800637a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800637e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006380:	4b18      	ldr	r3, [pc, #96]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	4b14      	ldr	r3, [pc, #80]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	4a13      	ldr	r2, [pc, #76]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6313      	str	r3, [r2, #48]	@ 0x30
 800639c:	4b11      	ldr	r3, [pc, #68]	@ (80063e4 <HAL_UART_MspInit+0x10c>)
 800639e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063a8:	230c      	movs	r3, #12
 80063aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ac:	2302      	movs	r3, #2
 80063ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b4:	2303      	movs	r3, #3
 80063b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063b8:	2307      	movs	r3, #7
 80063ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063bc:	f107 031c 	add.w	r3, r7, #28
 80063c0:	4619      	mov	r1, r3
 80063c2:	4809      	ldr	r0, [pc, #36]	@ (80063e8 <HAL_UART_MspInit+0x110>)
 80063c4:	f001 f9fa 	bl	80077bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	2026      	movs	r0, #38	@ 0x26
 80063ce:	f000 fdbc 	bl	8006f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063d2:	2026      	movs	r0, #38	@ 0x26
 80063d4:	f000 fdd5 	bl	8006f82 <HAL_NVIC_EnableIRQ>
}
 80063d8:	bf00      	nop
 80063da:	3730      	adds	r7, #48	@ 0x30
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40011000 	.word	0x40011000
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40020000 	.word	0x40020000
 80063ec:	40004400 	.word	0x40004400

080063f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80063f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80063f4:	480d      	ldr	r0, [pc, #52]	@ (800642c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80063f6:	490e      	ldr	r1, [pc, #56]	@ (8006430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80063f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80063fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80063fc:	e002      	b.n	8006404 <LoopCopyDataInit>

080063fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80063fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006402:	3304      	adds	r3, #4

08006404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006408:	d3f9      	bcc.n	80063fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800640a:	4a0b      	ldr	r2, [pc, #44]	@ (8006438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800640c:	4c0b      	ldr	r4, [pc, #44]	@ (800643c <LoopFillZerobss+0x26>)
  movs r3, #0
 800640e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006410:	e001      	b.n	8006416 <LoopFillZerobss>

08006412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006414:	3204      	adds	r2, #4

08006416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006418:	d3fb      	bcc.n	8006412 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800641a:	f7fe fd71 	bl	8004f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800641e:	f006 fa5f 	bl	800c8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006422:	f7fc feb5 	bl	8003190 <main>
  bx  lr    
 8006426:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800642c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006430:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8006434:	08010df4 	.word	0x08010df4
  ldr r2, =_sbss
 8006438:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800643c:	20000fb8 	.word	0x20000fb8

08006440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006440:	e7fe      	b.n	8006440 <ADC_IRQHandler>
	...

08006444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006448:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <HAL_Init+0x40>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0d      	ldr	r2, [pc, #52]	@ (8006484 <HAL_Init+0x40>)
 800644e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006454:	4b0b      	ldr	r3, [pc, #44]	@ (8006484 <HAL_Init+0x40>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <HAL_Init+0x40>)
 800645a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800645e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006460:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <HAL_Init+0x40>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a07      	ldr	r2, [pc, #28]	@ (8006484 <HAL_Init+0x40>)
 8006466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800646a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800646c:	2003      	movs	r0, #3
 800646e:	f000 fd61 	bl	8006f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006472:	200f      	movs	r0, #15
 8006474:	f000 f808 	bl	8006488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006478:	f7fe fbfc 	bl	8004c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40023c00 	.word	0x40023c00

08006488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006490:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <HAL_InitTick+0x54>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <HAL_InitTick+0x58>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	4619      	mov	r1, r3
 800649a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800649e:	fbb3 f3f1 	udiv	r3, r3, r1
 80064a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fd79 	bl	8006f9e <HAL_SYSTICK_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e00e      	b.n	80064d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b0f      	cmp	r3, #15
 80064ba:	d80a      	bhi.n	80064d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064bc:	2200      	movs	r2, #0
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	f000 fd41 	bl	8006f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064c8:	4a06      	ldr	r2, [pc, #24]	@ (80064e4 <HAL_InitTick+0x5c>)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	e000      	b.n	80064d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000038 	.word	0x20000038
 80064e0:	20000078 	.word	0x20000078
 80064e4:	20000074 	.word	0x20000074

080064e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064ec:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <HAL_IncTick+0x20>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	4b06      	ldr	r3, [pc, #24]	@ (800650c <HAL_IncTick+0x24>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4413      	add	r3, r2
 80064f8:	4a04      	ldr	r2, [pc, #16]	@ (800650c <HAL_IncTick+0x24>)
 80064fa:	6013      	str	r3, [r2, #0]
}
 80064fc:	bf00      	nop
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000078 	.word	0x20000078
 800650c:	20000e68 	.word	0x20000e68

08006510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return uwTick;
 8006514:	4b03      	ldr	r3, [pc, #12]	@ (8006524 <HAL_GetTick+0x14>)
 8006516:	681b      	ldr	r3, [r3, #0]
}
 8006518:	4618      	mov	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000e68 	.word	0x20000e68

08006528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006530:	f7ff ffee 	bl	8006510 <HAL_GetTick>
 8006534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d005      	beq.n	800654e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006542:	4b0a      	ldr	r3, [pc, #40]	@ (800656c <HAL_Delay+0x44>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800654e:	bf00      	nop
 8006550:	f7ff ffde 	bl	8006510 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	429a      	cmp	r2, r3
 800655e:	d8f7      	bhi.n	8006550 <HAL_Delay+0x28>
  {
  }
}
 8006560:	bf00      	nop
 8006562:	bf00      	nop
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000078 	.word	0x20000078

08006570 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e033      	b.n	80065ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fa fd4c 	bl	800102c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d118      	bne.n	80065e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80065b6:	f023 0302 	bic.w	r3, r3, #2
 80065ba:	f043 0202 	orr.w	r2, r3, #2
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 fa68 	bl	8006a98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	f043 0201 	orr.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80065de:	e001      	b.n	80065e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_ADC_Start_DMA+0x1e>
 8006612:	2302      	movs	r3, #2
 8006614:	e0e9      	b.n	80067ea <HAL_ADC_Start_DMA+0x1f2>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b01      	cmp	r3, #1
 800662a:	d018      	beq.n	800665e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800663c:	4b6d      	ldr	r3, [pc, #436]	@ (80067f4 <HAL_ADC_Start_DMA+0x1fc>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a6d      	ldr	r2, [pc, #436]	@ (80067f8 <HAL_ADC_Start_DMA+0x200>)
 8006642:	fba2 2303 	umull	r2, r3, r2, r3
 8006646:	0c9a      	lsrs	r2, r3, #18
 8006648:	4613      	mov	r3, r2
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	4413      	add	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006650:	e002      	b.n	8006658 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	3b01      	subs	r3, #1
 8006656:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f9      	bne.n	8006652 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800666c:	d107      	bne.n	800667e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800667c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b01      	cmp	r3, #1
 800668a:	f040 80a1 	bne.w	80067d0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006696:	f023 0301 	bic.w	r3, r3, #1
 800669a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80066b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066cc:	d106      	bne.n	80066dc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	f023 0206 	bic.w	r2, r3, #6
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	645a      	str	r2, [r3, #68]	@ 0x44
 80066da:	e002      	b.n	80066e2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066ea:	4b44      	ldr	r3, [pc, #272]	@ (80067fc <HAL_ADC_Start_DMA+0x204>)
 80066ec:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f2:	4a43      	ldr	r2, [pc, #268]	@ (8006800 <HAL_ADC_Start_DMA+0x208>)
 80066f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fa:	4a42      	ldr	r2, [pc, #264]	@ (8006804 <HAL_ADC_Start_DMA+0x20c>)
 80066fc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006702:	4a41      	ldr	r2, [pc, #260]	@ (8006808 <HAL_ADC_Start_DMA+0x210>)
 8006704:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800670e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800671e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800672e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	334c      	adds	r3, #76	@ 0x4c
 800673a:	4619      	mov	r1, r3
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f000 fce8 	bl	8007114 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f003 031f 	and.w	r3, r3, #31
 800674c:	2b00      	cmp	r3, #0
 800674e:	d12a      	bne.n	80067a6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2d      	ldr	r2, [pc, #180]	@ (800680c <HAL_ADC_Start_DMA+0x214>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d015      	beq.n	8006786 <HAL_ADC_Start_DMA+0x18e>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2c      	ldr	r2, [pc, #176]	@ (8006810 <HAL_ADC_Start_DMA+0x218>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d105      	bne.n	8006770 <HAL_ADC_Start_DMA+0x178>
 8006764:	4b25      	ldr	r3, [pc, #148]	@ (80067fc <HAL_ADC_Start_DMA+0x204>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a27      	ldr	r2, [pc, #156]	@ (8006814 <HAL_ADC_Start_DMA+0x21c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d136      	bne.n	80067e8 <HAL_ADC_Start_DMA+0x1f0>
 800677a:	4b20      	ldr	r3, [pc, #128]	@ (80067fc <HAL_ADC_Start_DMA+0x204>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	2b00      	cmp	r3, #0
 8006784:	d130      	bne.n	80067e8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d129      	bne.n	80067e8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	e020      	b.n	80067e8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a18      	ldr	r2, [pc, #96]	@ (800680c <HAL_ADC_Start_DMA+0x214>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d11b      	bne.n	80067e8 <HAL_ADC_Start_DMA+0x1f0>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d114      	bne.n	80067e8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80067cc:	609a      	str	r2, [r3, #8]
 80067ce:	e00b      	b.n	80067e8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	f043 0210 	orr.w	r2, r3, #16
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e0:	f043 0201 	orr.w	r2, r3, #1
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000038 	.word	0x20000038
 80067f8:	431bde83 	.word	0x431bde83
 80067fc:	40012300 	.word	0x40012300
 8006800:	08006c91 	.word	0x08006c91
 8006804:	08006d4b 	.word	0x08006d4b
 8006808:	08006d67 	.word	0x08006d67
 800680c:	40012000 	.word	0x40012000
 8006810:	40012100 	.word	0x40012100
 8006814:	40012200 	.word	0x40012200

08006818 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_ADC_ConfigChannel+0x1c>
 800686c:	2302      	movs	r3, #2
 800686e:	e105      	b.n	8006a7c <HAL_ADC_ConfigChannel+0x228>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b09      	cmp	r3, #9
 800687e:	d925      	bls.n	80068cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68d9      	ldr	r1, [r3, #12]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	b29b      	uxth	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	3b1e      	subs	r3, #30
 8006896:	2207      	movs	r2, #7
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	43da      	mvns	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	400a      	ands	r2, r1
 80068a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68d9      	ldr	r1, [r3, #12]
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	4618      	mov	r0, r3
 80068b8:	4603      	mov	r3, r0
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4403      	add	r3, r0
 80068be:	3b1e      	subs	r3, #30
 80068c0:	409a      	lsls	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	e022      	b.n	8006912 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6919      	ldr	r1, [r3, #16]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	4613      	mov	r3, r2
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	4413      	add	r3, r2
 80068e0:	2207      	movs	r2, #7
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43da      	mvns	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	400a      	ands	r2, r1
 80068ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6919      	ldr	r1, [r3, #16]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	4618      	mov	r0, r3
 8006902:	4603      	mov	r3, r0
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	4403      	add	r3, r0
 8006908:	409a      	lsls	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b06      	cmp	r3, #6
 8006918:	d824      	bhi.n	8006964 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	3b05      	subs	r3, #5
 800692c:	221f      	movs	r2, #31
 800692e:	fa02 f303 	lsl.w	r3, r2, r3
 8006932:	43da      	mvns	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	400a      	ands	r2, r1
 800693a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	4618      	mov	r0, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	3b05      	subs	r3, #5
 8006956:	fa00 f203 	lsl.w	r2, r0, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	635a      	str	r2, [r3, #52]	@ 0x34
 8006962:	e04c      	b.n	80069fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	d824      	bhi.n	80069b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	3b23      	subs	r3, #35	@ 0x23
 800697e:	221f      	movs	r2, #31
 8006980:	fa02 f303 	lsl.w	r3, r2, r3
 8006984:	43da      	mvns	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	400a      	ands	r2, r1
 800698c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	4618      	mov	r0, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	3b23      	subs	r3, #35	@ 0x23
 80069a8:	fa00 f203 	lsl.w	r2, r0, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80069b4:	e023      	b.n	80069fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	3b41      	subs	r3, #65	@ 0x41
 80069c8:	221f      	movs	r2, #31
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	43da      	mvns	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	400a      	ands	r2, r1
 80069d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	4618      	mov	r0, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	3b41      	subs	r3, #65	@ 0x41
 80069f2:	fa00 f203 	lsl.w	r2, r0, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069fe:	4b22      	ldr	r3, [pc, #136]	@ (8006a88 <HAL_ADC_ConfigChannel+0x234>)
 8006a00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a21      	ldr	r2, [pc, #132]	@ (8006a8c <HAL_ADC_ConfigChannel+0x238>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d109      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x1cc>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b12      	cmp	r3, #18
 8006a12:	d105      	bne.n	8006a20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a19      	ldr	r2, [pc, #100]	@ (8006a8c <HAL_ADC_ConfigChannel+0x238>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d123      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x21e>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d003      	beq.n	8006a3a <HAL_ADC_ConfigChannel+0x1e6>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b11      	cmp	r3, #17
 8006a38:	d11b      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d111      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a4e:	4b10      	ldr	r3, [pc, #64]	@ (8006a90 <HAL_ADC_ConfigChannel+0x23c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a10      	ldr	r2, [pc, #64]	@ (8006a94 <HAL_ADC_ConfigChannel+0x240>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	0c9a      	lsrs	r2, r3, #18
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a64:	e002      	b.n	8006a6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f9      	bne.n	8006a66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	40012300 	.word	0x40012300
 8006a8c:	40012000 	.word	0x40012000
 8006a90:	20000038 	.word	0x20000038
 8006a94:	431bde83 	.word	0x431bde83

08006a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006aa0:	4b79      	ldr	r3, [pc, #484]	@ (8006c88 <ADC_Init+0x1f0>)
 8006aa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	431a      	orrs	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6859      	ldr	r1, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	021a      	lsls	r2, r3, #8
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6859      	ldr	r1, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689a      	ldr	r2, [r3, #8]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6899      	ldr	r1, [r3, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	430a      	orrs	r2, r1
 8006b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	4a58      	ldr	r2, [pc, #352]	@ (8006c8c <ADC_Init+0x1f4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6899      	ldr	r1, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	609a      	str	r2, [r3, #8]
 8006b74:	e00f      	b.n	8006b96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006b94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0202 	bic.w	r2, r2, #2
 8006ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	6899      	ldr	r1, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7e1b      	ldrb	r3, [r3, #24]
 8006bb0:	005a      	lsls	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d01b      	beq.n	8006bfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006be2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6859      	ldr	r1, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	035a      	lsls	r2, r3, #13
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	e007      	b.n	8006c0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	69db      	ldr	r3, [r3, #28]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	051a      	lsls	r2, r3, #20
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689a      	ldr	r2, [r3, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006c40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6899      	ldr	r1, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006c4e:	025a      	lsls	r2, r3, #9
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689a      	ldr	r2, [r3, #8]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6899      	ldr	r1, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	029a      	lsls	r2, r3, #10
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	609a      	str	r2, [r3, #8]
}
 8006c7c:	bf00      	nop
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	40012300 	.word	0x40012300
 8006c8c:	0f000001 	.word	0x0f000001

08006c90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d13c      	bne.n	8006d24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d12b      	bne.n	8006d1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d127      	bne.n	8006d1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d006      	beq.n	8006ce8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d119      	bne.n	8006d1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0220 	bic.w	r2, r2, #32
 8006cf6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d105      	bne.n	8006d1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d14:	f043 0201 	orr.w	r2, r3, #1
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff fd7b 	bl	8006818 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d22:	e00e      	b.n	8006d42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d003      	beq.n	8006d38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f7ff fd85 	bl	8006840 <HAL_ADC_ErrorCallback>
}
 8006d36:	e004      	b.n	8006d42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
}
 8006d42:	bf00      	nop
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fd67 	bl	800682c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b084      	sub	sp, #16
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2240      	movs	r2, #64	@ 0x40
 8006d78:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d7e:	f043 0204 	orr.w	r2, r3, #4
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fd5a 	bl	8006840 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006da4:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006db0:	4013      	ands	r3, r2
 8006db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dc6:	4a04      	ldr	r2, [pc, #16]	@ (8006dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	60d3      	str	r3, [r2, #12]
}
 8006dcc:	bf00      	nop
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	e000ed00 	.word	0xe000ed00

08006ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006de0:	4b04      	ldr	r3, [pc, #16]	@ (8006df4 <__NVIC_GetPriorityGrouping+0x18>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	0a1b      	lsrs	r3, r3, #8
 8006de6:	f003 0307 	and.w	r3, r3, #7
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	e000ed00 	.word	0xe000ed00

08006df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	db0b      	blt.n	8006e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e0a:	79fb      	ldrb	r3, [r7, #7]
 8006e0c:	f003 021f 	and.w	r2, r3, #31
 8006e10:	4907      	ldr	r1, [pc, #28]	@ (8006e30 <__NVIC_EnableIRQ+0x38>)
 8006e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	2001      	movs	r0, #1
 8006e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e22:	bf00      	nop
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	e000e100 	.word	0xe000e100

08006e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	6039      	str	r1, [r7, #0]
 8006e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	db0a      	blt.n	8006e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	b2da      	uxtb	r2, r3
 8006e4c:	490c      	ldr	r1, [pc, #48]	@ (8006e80 <__NVIC_SetPriority+0x4c>)
 8006e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e52:	0112      	lsls	r2, r2, #4
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	440b      	add	r3, r1
 8006e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e5c:	e00a      	b.n	8006e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	4908      	ldr	r1, [pc, #32]	@ (8006e84 <__NVIC_SetPriority+0x50>)
 8006e64:	79fb      	ldrb	r3, [r7, #7]
 8006e66:	f003 030f 	and.w	r3, r3, #15
 8006e6a:	3b04      	subs	r3, #4
 8006e6c:	0112      	lsls	r2, r2, #4
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	440b      	add	r3, r1
 8006e72:	761a      	strb	r2, [r3, #24]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	e000e100 	.word	0xe000e100
 8006e84:	e000ed00 	.word	0xe000ed00

08006e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b089      	sub	sp, #36	@ 0x24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f1c3 0307 	rsb	r3, r3, #7
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	bf28      	it	cs
 8006ea6:	2304      	movcs	r3, #4
 8006ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	3304      	adds	r3, #4
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	d902      	bls.n	8006eb8 <NVIC_EncodePriority+0x30>
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	3b03      	subs	r3, #3
 8006eb6:	e000      	b.n	8006eba <NVIC_EncodePriority+0x32>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	43da      	mvns	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	401a      	ands	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eda:	43d9      	mvns	r1, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ee0:	4313      	orrs	r3, r2
         );
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3724      	adds	r7, #36	@ 0x24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
	...

08006ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f00:	d301      	bcc.n	8006f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f02:	2301      	movs	r3, #1
 8006f04:	e00f      	b.n	8006f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f06:	4a0a      	ldr	r2, [pc, #40]	@ (8006f30 <SysTick_Config+0x40>)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f0e:	210f      	movs	r1, #15
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	f7ff ff8e 	bl	8006e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f18:	4b05      	ldr	r3, [pc, #20]	@ (8006f30 <SysTick_Config+0x40>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f1e:	4b04      	ldr	r3, [pc, #16]	@ (8006f30 <SysTick_Config+0x40>)
 8006f20:	2207      	movs	r2, #7
 8006f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	e000e010 	.word	0xe000e010

08006f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff ff29 	bl	8006d94 <__NVIC_SetPriorityGrouping>
}
 8006f42:	bf00      	nop
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	4603      	mov	r3, r0
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]
 8006f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f5c:	f7ff ff3e 	bl	8006ddc <__NVIC_GetPriorityGrouping>
 8006f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	6978      	ldr	r0, [r7, #20]
 8006f68:	f7ff ff8e 	bl	8006e88 <NVIC_EncodePriority>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f72:	4611      	mov	r1, r2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff ff5d 	bl	8006e34 <__NVIC_SetPriority>
}
 8006f7a:	bf00      	nop
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b082      	sub	sp, #8
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	4603      	mov	r3, r0
 8006f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff ff31 	bl	8006df8 <__NVIC_EnableIRQ>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff ffa2 	bl	8006ef0 <SysTick_Config>
 8006fac:	4603      	mov	r3, r0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fc4:	f7ff faa4 	bl	8006510 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e099      	b.n	8007108 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0201 	bic.w	r2, r2, #1
 8006ff2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ff4:	e00f      	b.n	8007016 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ff6:	f7ff fa8b 	bl	8006510 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b05      	cmp	r3, #5
 8007002:	d908      	bls.n	8007016 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2203      	movs	r2, #3
 800700e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e078      	b.n	8007108 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e8      	bne.n	8006ff6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4b38      	ldr	r3, [pc, #224]	@ (8007110 <HAL_DMA_Init+0x158>)
 8007030:	4013      	ands	r3, r2
 8007032:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007042:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800704e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800705a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	4313      	orrs	r3, r2
 8007066:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706c:	2b04      	cmp	r3, #4
 800706e:	d107      	bne.n	8007080 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007078:	4313      	orrs	r3, r2
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0307 	bic.w	r3, r3, #7
 8007096:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d117      	bne.n	80070da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00e      	beq.n	80070da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fb01 	bl	80076c4 <DMA_CheckFifoParam>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d008      	beq.n	80070da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2240      	movs	r2, #64	@ 0x40
 80070cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80070d6:	2301      	movs	r3, #1
 80070d8:	e016      	b.n	8007108 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fab8 	bl	8007658 <DMA_CalcBaseAndBitshift>
 80070e8:	4603      	mov	r3, r0
 80070ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f0:	223f      	movs	r2, #63	@ 0x3f
 80070f2:	409a      	lsls	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	f010803f 	.word	0xf010803f

08007114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_DMA_Start_IT+0x26>
 8007136:	2302      	movs	r3, #2
 8007138:	e040      	b.n	80071bc <HAL_DMA_Start_IT+0xa8>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	d12f      	bne.n	80071ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2202      	movs	r2, #2
 8007152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fa4a 	bl	80075fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716c:	223f      	movs	r2, #63	@ 0x3f
 800716e:	409a      	lsls	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0216 	orr.w	r2, r2, #22
 8007182:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0208 	orr.w	r2, r2, #8
 800719a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	e005      	b.n	80071ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
 80071b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071d2:	f7ff f99d 	bl	8006510 <HAL_GetTick>
 80071d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d008      	beq.n	80071f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2280      	movs	r2, #128	@ 0x80
 80071e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e052      	b.n	800729c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0216 	bic.w	r2, r2, #22
 8007204:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695a      	ldr	r2, [r3, #20]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007214:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <HAL_DMA_Abort+0x62>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f022 0208 	bic.w	r2, r2, #8
 8007234:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0201 	bic.w	r2, r2, #1
 8007244:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007246:	e013      	b.n	8007270 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007248:	f7ff f962 	bl	8006510 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b05      	cmp	r3, #5
 8007254:	d90c      	bls.n	8007270 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2203      	movs	r2, #3
 8007260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e015      	b.n	800729c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e4      	bne.n	8007248 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007282:	223f      	movs	r2, #63	@ 0x3f
 8007284:	409a      	lsls	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d004      	beq.n	80072c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2280      	movs	r2, #128	@ 0x80
 80072bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e00c      	b.n	80072dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2205      	movs	r2, #5
 80072c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0201 	bic.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072f4:	4b8e      	ldr	r3, [pc, #568]	@ (8007530 <HAL_DMA_IRQHandler+0x248>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a8e      	ldr	r2, [pc, #568]	@ (8007534 <HAL_DMA_IRQHandler+0x24c>)
 80072fa:	fba2 2303 	umull	r2, r3, r2, r3
 80072fe:	0a9b      	lsrs	r3, r3, #10
 8007300:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007306:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007312:	2208      	movs	r2, #8
 8007314:	409a      	lsls	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4013      	ands	r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01a      	beq.n	8007354 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d013      	beq.n	8007354 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0204 	bic.w	r2, r2, #4
 800733a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007340:	2208      	movs	r2, #8
 8007342:	409a      	lsls	r2, r3
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800734c:	f043 0201 	orr.w	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4013      	ands	r3, r2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d012      	beq.n	800738a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007376:	2201      	movs	r2, #1
 8007378:	409a      	lsls	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007382:	f043 0202 	orr.w	r2, r3, #2
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800738e:	2204      	movs	r2, #4
 8007390:	409a      	lsls	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4013      	ands	r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d012      	beq.n	80073c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00b      	beq.n	80073c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073ac:	2204      	movs	r2, #4
 80073ae:	409a      	lsls	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073b8:	f043 0204 	orr.w	r2, r3, #4
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073c4:	2210      	movs	r2, #16
 80073c6:	409a      	lsls	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d043      	beq.n	8007458 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d03c      	beq.n	8007458 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073e2:	2210      	movs	r2, #16
 80073e4:	409a      	lsls	r2, r3
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d018      	beq.n	800742a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d108      	bne.n	8007418 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d024      	beq.n	8007458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
 8007416:	e01f      	b.n	8007458 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01b      	beq.n	8007458 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
 8007428:	e016      	b.n	8007458 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d107      	bne.n	8007448 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0208 	bic.w	r2, r2, #8
 8007446:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745c:	2220      	movs	r2, #32
 800745e:	409a      	lsls	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4013      	ands	r3, r2
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 808f 	beq.w	8007588 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8087 	beq.w	8007588 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800747e:	2220      	movs	r2, #32
 8007480:	409a      	lsls	r2, r3
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b05      	cmp	r3, #5
 8007490:	d136      	bne.n	8007500 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0216 	bic.w	r2, r2, #22
 80074a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	695a      	ldr	r2, [r3, #20]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <HAL_DMA_IRQHandler+0x1da>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d007      	beq.n	80074d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0208 	bic.w	r2, r2, #8
 80074d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d6:	223f      	movs	r2, #63	@ 0x3f
 80074d8:	409a      	lsls	r2, r3
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d07e      	beq.n	80075f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
        }
        return;
 80074fe:	e079      	b.n	80075f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d01d      	beq.n	800754a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10d      	bne.n	8007538 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007520:	2b00      	cmp	r3, #0
 8007522:	d031      	beq.n	8007588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
 800752c:	e02c      	b.n	8007588 <HAL_DMA_IRQHandler+0x2a0>
 800752e:	bf00      	nop
 8007530:	20000038 	.word	0x20000038
 8007534:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d023      	beq.n	8007588 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
 8007548:	e01e      	b.n	8007588 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10f      	bne.n	8007578 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0210 	bic.w	r2, r2, #16
 8007566:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800758c:	2b00      	cmp	r3, #0
 800758e:	d032      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d022      	beq.n	80075e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2205      	movs	r2, #5
 80075a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	3301      	adds	r3, #1
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d307      	bcc.n	80075d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f2      	bne.n	80075b4 <HAL_DMA_IRQHandler+0x2cc>
 80075ce:	e000      	b.n	80075d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80075d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d005      	beq.n	80075f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	4798      	blx	r3
 80075f2:	e000      	b.n	80075f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80075f4:	bf00      	nop
    }
  }
}
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007618:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	2b40      	cmp	r3, #64	@ 0x40
 8007628:	d108      	bne.n	800763c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800763a:	e007      	b.n	800764c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	60da      	str	r2, [r3, #12]
}
 800764c:	bf00      	nop
 800764e:	3714      	adds	r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	b2db      	uxtb	r3, r3
 8007666:	3b10      	subs	r3, #16
 8007668:	4a14      	ldr	r2, [pc, #80]	@ (80076bc <DMA_CalcBaseAndBitshift+0x64>)
 800766a:	fba2 2303 	umull	r2, r3, r2, r3
 800766e:	091b      	lsrs	r3, r3, #4
 8007670:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007672:	4a13      	ldr	r2, [pc, #76]	@ (80076c0 <DMA_CalcBaseAndBitshift+0x68>)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b03      	cmp	r3, #3
 8007684:	d909      	bls.n	800769a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	659a      	str	r2, [r3, #88]	@ 0x58
 8007698:	e007      	b.n	80076aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80076a2:	f023 0303 	bic.w	r3, r3, #3
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	aaaaaaab 	.word	0xaaaaaaab
 80076c0:	08010cfc 	.word	0x08010cfc

080076c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d11f      	bne.n	800771e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d856      	bhi.n	8007792 <DMA_CheckFifoParam+0xce>
 80076e4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ec <DMA_CheckFifoParam+0x28>)
 80076e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ea:	bf00      	nop
 80076ec:	080076fd 	.word	0x080076fd
 80076f0:	0800770f 	.word	0x0800770f
 80076f4:	080076fd 	.word	0x080076fd
 80076f8:	08007793 	.word	0x08007793
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d046      	beq.n	8007796 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800770c:	e043      	b.n	8007796 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007712:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007716:	d140      	bne.n	800779a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800771c:	e03d      	b.n	800779a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007726:	d121      	bne.n	800776c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d837      	bhi.n	800779e <DMA_CheckFifoParam+0xda>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <DMA_CheckFifoParam+0x70>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007745 	.word	0x08007745
 8007738:	0800774b 	.word	0x0800774b
 800773c:	08007745 	.word	0x08007745
 8007740:	0800775d 	.word	0x0800775d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e030      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d025      	beq.n	80077a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800775a:	e022      	b.n	80077a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007760:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007764:	d11f      	bne.n	80077a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800776a:	e01c      	b.n	80077a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d903      	bls.n	800777a <DMA_CheckFifoParam+0xb6>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d003      	beq.n	8007780 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007778:	e018      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	73fb      	strb	r3, [r7, #15]
      break;
 800777e:	e015      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007784:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00e      	beq.n	80077aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	73fb      	strb	r3, [r7, #15]
      break;
 8007790:	e00b      	b.n	80077aa <DMA_CheckFifoParam+0xe6>
      break;
 8007792:	bf00      	nop
 8007794:	e00a      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      break;
 8007796:	bf00      	nop
 8007798:	e008      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      break;
 800779a:	bf00      	nop
 800779c:	e006      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      break;
 800779e:	bf00      	nop
 80077a0:	e004      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      break;
 80077a2:	bf00      	nop
 80077a4:	e002      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      break;   
 80077a6:	bf00      	nop
 80077a8:	e000      	b.n	80077ac <DMA_CheckFifoParam+0xe8>
      break;
 80077aa:	bf00      	nop
    }
  } 
  
  return status; 
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop

080077bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077bc:	b480      	push	{r7}
 80077be:	b089      	sub	sp, #36	@ 0x24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
 80077d6:	e16b      	b.n	8007ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80077d8:	2201      	movs	r2, #1
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4013      	ands	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	f040 815a 	bne.w	8007aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d005      	beq.n	800780e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800780a:	2b02      	cmp	r3, #2
 800780c:	d130      	bne.n	8007870 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	2203      	movs	r2, #3
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	43db      	mvns	r3, r3
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	4013      	ands	r3, r2
 8007824:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	4313      	orrs	r3, r2
 8007836:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69ba      	ldr	r2, [r7, #24]
 800783c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007844:	2201      	movs	r2, #1
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	43db      	mvns	r3, r3
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	4013      	ands	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	091b      	lsrs	r3, r3, #4
 800785a:	f003 0201 	and.w	r2, r3, #1
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	fa02 f303 	lsl.w	r3, r2, r3
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	4313      	orrs	r3, r2
 8007868:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	2b03      	cmp	r3, #3
 800787a:	d017      	beq.n	80078ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	2203      	movs	r2, #3
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	43db      	mvns	r3, r3
 800788e:	69ba      	ldr	r2, [r7, #24]
 8007890:	4013      	ands	r3, r2
 8007892:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	fa02 f303 	lsl.w	r3, r2, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f003 0303 	and.w	r3, r3, #3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d123      	bne.n	8007900 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	08da      	lsrs	r2, r3, #3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3208      	adds	r2, #8
 80078c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	220f      	movs	r2, #15
 80078d0:	fa02 f303 	lsl.w	r3, r2, r3
 80078d4:	43db      	mvns	r3, r3
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	4013      	ands	r3, r2
 80078da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	08da      	lsrs	r2, r3, #3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3208      	adds	r2, #8
 80078fa:	69b9      	ldr	r1, [r7, #24]
 80078fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	2203      	movs	r2, #3
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	43db      	mvns	r3, r3
 8007912:	69ba      	ldr	r2, [r7, #24]
 8007914:	4013      	ands	r3, r2
 8007916:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f003 0203 	and.w	r2, r3, #3
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	fa02 f303 	lsl.w	r3, r2, r3
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	4313      	orrs	r3, r2
 800792c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69ba      	ldr	r2, [r7, #24]
 8007932:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 80b4 	beq.w	8007aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	4b60      	ldr	r3, [pc, #384]	@ (8007ac8 <HAL_GPIO_Init+0x30c>)
 8007948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800794a:	4a5f      	ldr	r2, [pc, #380]	@ (8007ac8 <HAL_GPIO_Init+0x30c>)
 800794c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007950:	6453      	str	r3, [r2, #68]	@ 0x44
 8007952:	4b5d      	ldr	r3, [pc, #372]	@ (8007ac8 <HAL_GPIO_Init+0x30c>)
 8007954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800795e:	4a5b      	ldr	r2, [pc, #364]	@ (8007acc <HAL_GPIO_Init+0x310>)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	089b      	lsrs	r3, r3, #2
 8007964:	3302      	adds	r3, #2
 8007966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800796a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	220f      	movs	r2, #15
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	43db      	mvns	r3, r3
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	4013      	ands	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a52      	ldr	r2, [pc, #328]	@ (8007ad0 <HAL_GPIO_Init+0x314>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d02b      	beq.n	80079e2 <HAL_GPIO_Init+0x226>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a51      	ldr	r2, [pc, #324]	@ (8007ad4 <HAL_GPIO_Init+0x318>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d025      	beq.n	80079de <HAL_GPIO_Init+0x222>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a50      	ldr	r2, [pc, #320]	@ (8007ad8 <HAL_GPIO_Init+0x31c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01f      	beq.n	80079da <HAL_GPIO_Init+0x21e>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a4f      	ldr	r2, [pc, #316]	@ (8007adc <HAL_GPIO_Init+0x320>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d019      	beq.n	80079d6 <HAL_GPIO_Init+0x21a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a4e      	ldr	r2, [pc, #312]	@ (8007ae0 <HAL_GPIO_Init+0x324>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d013      	beq.n	80079d2 <HAL_GPIO_Init+0x216>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a4d      	ldr	r2, [pc, #308]	@ (8007ae4 <HAL_GPIO_Init+0x328>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d00d      	beq.n	80079ce <HAL_GPIO_Init+0x212>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a4c      	ldr	r2, [pc, #304]	@ (8007ae8 <HAL_GPIO_Init+0x32c>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d007      	beq.n	80079ca <HAL_GPIO_Init+0x20e>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a4b      	ldr	r2, [pc, #300]	@ (8007aec <HAL_GPIO_Init+0x330>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d101      	bne.n	80079c6 <HAL_GPIO_Init+0x20a>
 80079c2:	2307      	movs	r3, #7
 80079c4:	e00e      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079c6:	2308      	movs	r3, #8
 80079c8:	e00c      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079ca:	2306      	movs	r3, #6
 80079cc:	e00a      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079ce:	2305      	movs	r3, #5
 80079d0:	e008      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079d2:	2304      	movs	r3, #4
 80079d4:	e006      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079d6:	2303      	movs	r3, #3
 80079d8:	e004      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079da:	2302      	movs	r3, #2
 80079dc:	e002      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <HAL_GPIO_Init+0x228>
 80079e2:	2300      	movs	r3, #0
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	f002 0203 	and.w	r2, r2, #3
 80079ea:	0092      	lsls	r2, r2, #2
 80079ec:	4093      	lsls	r3, r2
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079f4:	4935      	ldr	r1, [pc, #212]	@ (8007acc <HAL_GPIO_Init+0x310>)
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	089b      	lsrs	r3, r3, #2
 80079fa:	3302      	adds	r3, #2
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a02:	4b3b      	ldr	r3, [pc, #236]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	43db      	mvns	r3, r3
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007a1e:	69ba      	ldr	r2, [r7, #24]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a26:	4a32      	ldr	r2, [pc, #200]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007a2c:	4b30      	ldr	r3, [pc, #192]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	43db      	mvns	r3, r3
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a50:	4a27      	ldr	r2, [pc, #156]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007a56:	4b26      	ldr	r3, [pc, #152]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a80:	4b1b      	ldr	r3, [pc, #108]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	43db      	mvns	r3, r3
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007aa4:	4a12      	ldr	r2, [pc, #72]	@ (8007af0 <HAL_GPIO_Init+0x334>)
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	3301      	adds	r3, #1
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2b0f      	cmp	r3, #15
 8007ab4:	f67f ae90 	bls.w	80077d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	3724      	adds	r7, #36	@ 0x24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40013800 	.word	0x40013800
 8007ad0:	40020000 	.word	0x40020000
 8007ad4:	40020400 	.word	0x40020400
 8007ad8:	40020800 	.word	0x40020800
 8007adc:	40020c00 	.word	0x40020c00
 8007ae0:	40021000 	.word	0x40021000
 8007ae4:	40021400 	.word	0x40021400
 8007ae8:	40021800 	.word	0x40021800
 8007aec:	40021c00 	.word	0x40021c00
 8007af0:	40013c00 	.word	0x40013c00

08007af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	691a      	ldr	r2, [r3, #16]
 8007b04:	887b      	ldrh	r3, [r7, #2]
 8007b06:	4013      	ands	r3, r2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
 8007b10:	e001      	b.n	8007b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	807b      	strh	r3, [r7, #2]
 8007b30:	4613      	mov	r3, r2
 8007b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b34:	787b      	ldrb	r3, [r7, #1]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d003      	beq.n	8007b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b3a:	887a      	ldrh	r2, [r7, #2]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007b40:	e003      	b.n	8007b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007b42:	887b      	ldrh	r3, [r7, #2]
 8007b44:	041a      	lsls	r2, r3, #16
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	619a      	str	r2, [r3, #24]
}
 8007b4a:	bf00      	nop
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b085      	sub	sp, #20
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b68:	887a      	ldrh	r2, [r7, #2]
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	041a      	lsls	r2, r3, #16
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	43d9      	mvns	r1, r3
 8007b74:	887b      	ldrh	r3, [r7, #2]
 8007b76:	400b      	ands	r3, r1
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	619a      	str	r2, [r3, #24]
}
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e12b      	b.n	8007df6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d106      	bne.n	8007bb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fa fb36 	bl	8002224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2224      	movs	r2, #36	@ 0x24
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007bde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007bee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007bf0:	f001 fbfc 	bl	80093ec <HAL_RCC_GetPCLK1Freq>
 8007bf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	4a81      	ldr	r2, [pc, #516]	@ (8007e00 <HAL_I2C_Init+0x274>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d807      	bhi.n	8007c10 <HAL_I2C_Init+0x84>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	4a80      	ldr	r2, [pc, #512]	@ (8007e04 <HAL_I2C_Init+0x278>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	bf94      	ite	ls
 8007c08:	2301      	movls	r3, #1
 8007c0a:	2300      	movhi	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	e006      	b.n	8007c1e <HAL_I2C_Init+0x92>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4a7d      	ldr	r2, [pc, #500]	@ (8007e08 <HAL_I2C_Init+0x27c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	bf94      	ite	ls
 8007c18:	2301      	movls	r3, #1
 8007c1a:	2300      	movhi	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e0e7      	b.n	8007df6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4a78      	ldr	r2, [pc, #480]	@ (8007e0c <HAL_I2C_Init+0x280>)
 8007c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2e:	0c9b      	lsrs	r3, r3, #18
 8007c30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4a6a      	ldr	r2, [pc, #424]	@ (8007e00 <HAL_I2C_Init+0x274>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d802      	bhi.n	8007c60 <HAL_I2C_Init+0xd4>
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	e009      	b.n	8007c74 <HAL_I2C_Init+0xe8>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007c66:	fb02 f303 	mul.w	r3, r2, r3
 8007c6a:	4a69      	ldr	r2, [pc, #420]	@ (8007e10 <HAL_I2C_Init+0x284>)
 8007c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c70:	099b      	lsrs	r3, r3, #6
 8007c72:	3301      	adds	r3, #1
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6812      	ldr	r2, [r2, #0]
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69db      	ldr	r3, [r3, #28]
 8007c82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	495c      	ldr	r1, [pc, #368]	@ (8007e00 <HAL_I2C_Init+0x274>)
 8007c90:	428b      	cmp	r3, r1
 8007c92:	d819      	bhi.n	8007cc8 <HAL_I2C_Init+0x13c>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	1e59      	subs	r1, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ca2:	1c59      	adds	r1, r3, #1
 8007ca4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007ca8:	400b      	ands	r3, r1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <HAL_I2C_Init+0x138>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1e59      	subs	r1, r3, #1
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc2:	e051      	b.n	8007d68 <HAL_I2C_Init+0x1dc>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	e04f      	b.n	8007d68 <HAL_I2C_Init+0x1dc>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d111      	bne.n	8007cf4 <HAL_I2C_Init+0x168>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	1e58      	subs	r0, r3, #1
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6859      	ldr	r1, [r3, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	440b      	add	r3, r1
 8007cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bf0c      	ite	eq
 8007cec:	2301      	moveq	r3, #1
 8007cee:	2300      	movne	r3, #0
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	e012      	b.n	8007d1a <HAL_I2C_Init+0x18e>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	1e58      	subs	r0, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6859      	ldr	r1, [r3, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	0099      	lsls	r1, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_I2C_Init+0x196>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e022      	b.n	8007d68 <HAL_I2C_Init+0x1dc>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10e      	bne.n	8007d48 <HAL_I2C_Init+0x1bc>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	1e58      	subs	r0, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6859      	ldr	r1, [r3, #4]
 8007d32:	460b      	mov	r3, r1
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	440b      	add	r3, r1
 8007d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d46:	e00f      	b.n	8007d68 <HAL_I2C_Init+0x1dc>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	1e58      	subs	r0, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6859      	ldr	r1, [r3, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	440b      	add	r3, r1
 8007d56:	0099      	lsls	r1, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007d5e:	3301      	adds	r3, #1
 8007d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d68:	6879      	ldr	r1, [r7, #4]
 8007d6a:	6809      	ldr	r1, [r1, #0]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69da      	ldr	r2, [r3, #28]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6911      	ldr	r1, [r2, #16]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	68d2      	ldr	r2, [r2, #12]
 8007da2:	4311      	orrs	r1, r2
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6812      	ldr	r2, [r2, #0]
 8007da8:	430b      	orrs	r3, r1
 8007daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	695a      	ldr	r2, [r3, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	000186a0 	.word	0x000186a0
 8007e04:	001e847f 	.word	0x001e847f
 8007e08:	003d08ff 	.word	0x003d08ff
 8007e0c:	431bde83 	.word	0x431bde83
 8007e10:	10624dd3 	.word	0x10624dd3

08007e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af02      	add	r7, sp, #8
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	4611      	mov	r1, r2
 8007e20:	461a      	mov	r2, r3
 8007e22:	4603      	mov	r3, r0
 8007e24:	817b      	strh	r3, [r7, #10]
 8007e26:	460b      	mov	r3, r1
 8007e28:	813b      	strh	r3, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e2e:	f7fe fb6f 	bl	8006510 <HAL_GetTick>
 8007e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	f040 80d9 	bne.w	8007ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	2319      	movs	r3, #25
 8007e48:	2201      	movs	r2, #1
 8007e4a:	496d      	ldr	r1, [pc, #436]	@ (8008000 <HAL_I2C_Mem_Write+0x1ec>)
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fc7f 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e0cc      	b.n	8007ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <HAL_I2C_Mem_Write+0x56>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e0c5      	b.n	8007ff6 <HAL_I2C_Mem_Write+0x1e2>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d007      	beq.n	8007e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2221      	movs	r2, #33	@ 0x21
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2240      	movs	r2, #64	@ 0x40
 8007eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6a3a      	ldr	r2, [r7, #32]
 8007eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a4d      	ldr	r2, [pc, #308]	@ (8008004 <HAL_I2C_Mem_Write+0x1f0>)
 8007ed0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ed2:	88f8      	ldrh	r0, [r7, #6]
 8007ed4:	893a      	ldrh	r2, [r7, #8]
 8007ed6:	8979      	ldrh	r1, [r7, #10]
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f000 fab6 	bl	8008454 <I2C_RequestMemoryWrite>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d052      	beq.n	8007f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e081      	b.n	8007ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 fd00 	bl	80088fc <I2C_WaitOnTXEFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00d      	beq.n	8007f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	d107      	bne.n	8007f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e06b      	b.n	8007ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b04      	cmp	r3, #4
 8007f5a:	d11b      	bne.n	8007f94 <HAL_I2C_Mem_Write+0x180>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d017      	beq.n	8007f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f68:	781a      	ldrb	r2, [r3, #0]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1aa      	bne.n	8007ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fcec 	bl	800897e <I2C_WaitOnBTFFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00d      	beq.n	8007fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d107      	bne.n	8007fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e016      	b.n	8007ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e000      	b.n	8007ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
  }
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	00100002 	.word	0x00100002
 8008004:	ffff0000 	.word	0xffff0000

08008008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b08c      	sub	sp, #48	@ 0x30
 800800c:	af02      	add	r7, sp, #8
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	4608      	mov	r0, r1
 8008012:	4611      	mov	r1, r2
 8008014:	461a      	mov	r2, r3
 8008016:	4603      	mov	r3, r0
 8008018:	817b      	strh	r3, [r7, #10]
 800801a:	460b      	mov	r3, r1
 800801c:	813b      	strh	r3, [r7, #8]
 800801e:	4613      	mov	r3, r2
 8008020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008022:	f7fe fa75 	bl	8006510 <HAL_GetTick>
 8008026:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b20      	cmp	r3, #32
 8008032:	f040 8208 	bne.w	8008446 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	2319      	movs	r3, #25
 800803c:	2201      	movs	r2, #1
 800803e:	497b      	ldr	r1, [pc, #492]	@ (800822c <HAL_I2C_Mem_Read+0x224>)
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 fb85 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800804c:	2302      	movs	r3, #2
 800804e:	e1fb      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_I2C_Mem_Read+0x56>
 800805a:	2302      	movs	r3, #2
 800805c:	e1f4      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b01      	cmp	r3, #1
 8008072:	d007      	beq.n	8008084 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2222      	movs	r2, #34	@ 0x22
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2240      	movs	r2, #64	@ 0x40
 80080a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80080b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4a5b      	ldr	r2, [pc, #364]	@ (8008230 <HAL_I2C_Mem_Read+0x228>)
 80080c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080c6:	88f8      	ldrh	r0, [r7, #6]
 80080c8:	893a      	ldrh	r2, [r7, #8]
 80080ca:	8979      	ldrh	r1, [r7, #10]
 80080cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	4603      	mov	r3, r0
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f000 fa52 	bl	8008580 <I2C_RequestMemoryRead>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e1b0      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d113      	bne.n	8008116 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ee:	2300      	movs	r3, #0
 80080f0:	623b      	str	r3, [r7, #32]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	623b      	str	r3, [r7, #32]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	623b      	str	r3, [r7, #32]
 8008102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e184      	b.n	8008420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800811a:	2b01      	cmp	r3, #1
 800811c:	d11b      	bne.n	8008156 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800812c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800812e:	2300      	movs	r3, #0
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	e164      	b.n	8008420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800815a:	2b02      	cmp	r3, #2
 800815c:	d11b      	bne.n	8008196 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800816c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800817c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800817e:	2300      	movs	r3, #0
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	61bb      	str	r3, [r7, #24]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	e144      	b.n	8008420 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	617b      	str	r3, [r7, #20]
 80081aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80081ac:	e138      	b.n	8008420 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	f200 80f1 	bhi.w	800839a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d123      	bne.n	8008208 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 fc1b 	bl	8008a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e139      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691a      	ldr	r2, [r3, #16]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	b2d2      	uxtb	r2, r2
 80081e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008206:	e10b      	b.n	8008420 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800820c:	2b02      	cmp	r3, #2
 800820e:	d14e      	bne.n	80082ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008216:	2200      	movs	r2, #0
 8008218:	4906      	ldr	r1, [pc, #24]	@ (8008234 <HAL_I2C_Mem_Read+0x22c>)
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 fa98 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d008      	beq.n	8008238 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e10e      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
 800822a:	bf00      	nop
 800822c:	00100002 	.word	0x00100002
 8008230:	ffff0000 	.word	0xffff0000
 8008234:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691a      	ldr	r2, [r3, #16]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	691a      	ldr	r2, [r3, #16]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008296:	3b01      	subs	r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80082ac:	e0b8      	b.n	8008420 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b4:	2200      	movs	r2, #0
 80082b6:	4966      	ldr	r1, [pc, #408]	@ (8008450 <HAL_I2C_Mem_Read+0x448>)
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 fa49 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e0bf      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	691a      	ldr	r2, [r3, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e2:	b2d2      	uxtb	r2, r2
 80082e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29a      	uxth	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008300:	b29b      	uxth	r3, r3
 8008302:	3b01      	subs	r3, #1
 8008304:	b29a      	uxth	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008310:	2200      	movs	r2, #0
 8008312:	494f      	ldr	r1, [pc, #316]	@ (8008450 <HAL_I2C_Mem_Read+0x448>)
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 fa1b 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d001      	beq.n	8008324 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e091      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	691a      	ldr	r2, [r3, #16]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833e:	b2d2      	uxtb	r2, r2
 8008340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008370:	b2d2      	uxtb	r2, r2
 8008372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008378:	1c5a      	adds	r2, r3, #1
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008382:	3b01      	subs	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800838e:	b29b      	uxth	r3, r3
 8008390:	3b01      	subs	r3, #1
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008398:	e042      	b.n	8008420 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800839a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800839c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 fb2e 	bl	8008a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d001      	beq.n	80083ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e04c      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b8:	b2d2      	uxtb	r2, r2
 80083ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d118      	bne.n	8008420 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	b2d2      	uxtb	r2, r2
 80083fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008424:	2b00      	cmp	r3, #0
 8008426:	f47f aec2 	bne.w	80081ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	e000      	b.n	8008448 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008446:	2302      	movs	r3, #2
  }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3728      	adds	r7, #40	@ 0x28
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	00010004 	.word	0x00010004

08008454 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	4608      	mov	r0, r1
 800845e:	4611      	mov	r1, r2
 8008460:	461a      	mov	r2, r3
 8008462:	4603      	mov	r3, r0
 8008464:	817b      	strh	r3, [r7, #10]
 8008466:	460b      	mov	r3, r1
 8008468:	813b      	strh	r3, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800847c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	2200      	movs	r2, #0
 8008486:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f960 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00d      	beq.n	80084b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084a4:	d103      	bne.n	80084ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e05f      	b.n	8008572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084b2:	897b      	ldrh	r3, [r7, #10]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	461a      	mov	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80084c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c4:	6a3a      	ldr	r2, [r7, #32]
 80084c6:	492d      	ldr	r1, [pc, #180]	@ (800857c <I2C_RequestMemoryWrite+0x128>)
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f998 	bl	80087fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e04c      	b.n	8008572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f0:	6a39      	ldr	r1, [r7, #32]
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f000 fa02 	bl	80088fc <I2C_WaitOnTXEFlagUntilTimeout>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00d      	beq.n	800851a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008502:	2b04      	cmp	r3, #4
 8008504:	d107      	bne.n	8008516 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008514:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e02b      	b.n	8008572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800851a:	88fb      	ldrh	r3, [r7, #6]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d105      	bne.n	800852c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008520:	893b      	ldrh	r3, [r7, #8]
 8008522:	b2da      	uxtb	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	611a      	str	r2, [r3, #16]
 800852a:	e021      	b.n	8008570 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800852c:	893b      	ldrh	r3, [r7, #8]
 800852e:	0a1b      	lsrs	r3, r3, #8
 8008530:	b29b      	uxth	r3, r3
 8008532:	b2da      	uxtb	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800853a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800853c:	6a39      	ldr	r1, [r7, #32]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 f9dc 	bl	80088fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00d      	beq.n	8008566 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854e:	2b04      	cmp	r3, #4
 8008550:	d107      	bne.n	8008562 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008560:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e005      	b.n	8008572 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008566:	893b      	ldrh	r3, [r7, #8]
 8008568:	b2da      	uxtb	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	00010002 	.word	0x00010002

08008580 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	4608      	mov	r0, r1
 800858a:	4611      	mov	r1, r2
 800858c:	461a      	mov	r2, r3
 800858e:	4603      	mov	r3, r0
 8008590:	817b      	strh	r3, [r7, #10]
 8008592:	460b      	mov	r3, r1
 8008594:	813b      	strh	r3, [r7, #8]
 8008596:	4613      	mov	r3, r2
 8008598:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f8c2 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e0:	d103      	bne.n	80085ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e0aa      	b.n	8008744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085ee:	897b      	ldrh	r3, [r7, #10]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80085fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	6a3a      	ldr	r2, [r7, #32]
 8008602:	4952      	ldr	r1, [pc, #328]	@ (800874c <I2C_RequestMemoryRead+0x1cc>)
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f8fa 	bl	80087fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e097      	b.n	8008744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008614:	2300      	movs	r3, #0
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800862a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800862c:	6a39      	ldr	r1, [r7, #32]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f964 	bl	80088fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00d      	beq.n	8008656 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	2b04      	cmp	r3, #4
 8008640:	d107      	bne.n	8008652 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e076      	b.n	8008744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d105      	bne.n	8008668 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800865c:	893b      	ldrh	r3, [r7, #8]
 800865e:	b2da      	uxtb	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	611a      	str	r2, [r3, #16]
 8008666:	e021      	b.n	80086ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008668:	893b      	ldrh	r3, [r7, #8]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	b29b      	uxth	r3, r3
 800866e:	b2da      	uxtb	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008678:	6a39      	ldr	r1, [r7, #32]
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f000 f93e 	bl	80088fc <I2C_WaitOnTXEFlagUntilTimeout>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00d      	beq.n	80086a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868a:	2b04      	cmp	r3, #4
 800868c:	d107      	bne.n	800869e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800869c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e050      	b.n	8008744 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086a2:	893b      	ldrh	r3, [r7, #8]
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ae:	6a39      	ldr	r1, [r7, #32]
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 f923 	bl	80088fc <I2C_WaitOnTXEFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00d      	beq.n	80086d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	d107      	bne.n	80086d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e035      	b.n	8008744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f82b 	bl	8008750 <I2C_WaitOnFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00d      	beq.n	800871c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800870e:	d103      	bne.n	8008718 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008716:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e013      	b.n	8008744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800871c:	897b      	ldrh	r3, [r7, #10]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	f043 0301 	orr.w	r3, r3, #1
 8008724:	b2da      	uxtb	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	6a3a      	ldr	r2, [r7, #32]
 8008730:	4906      	ldr	r1, [pc, #24]	@ (800874c <I2C_RequestMemoryRead+0x1cc>)
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f863 	bl	80087fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	00010002 	.word	0x00010002

08008750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	603b      	str	r3, [r7, #0]
 800875c:	4613      	mov	r3, r2
 800875e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008760:	e025      	b.n	80087ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d021      	beq.n	80087ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876a:	f7fd fed1 	bl	8006510 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d302      	bcc.n	8008780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d116      	bne.n	80087ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2220      	movs	r2, #32
 800878a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879a:	f043 0220 	orr.w	r2, r3, #32
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e023      	b.n	80087f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	0c1b      	lsrs	r3, r3, #16
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d10d      	bne.n	80087d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	43da      	mvns	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4013      	ands	r3, r2
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bf0c      	ite	eq
 80087ca:	2301      	moveq	r3, #1
 80087cc:	2300      	movne	r3, #0
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	e00c      	b.n	80087ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	43da      	mvns	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4013      	ands	r3, r2
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bf0c      	ite	eq
 80087e6:	2301      	moveq	r3, #1
 80087e8:	2300      	movne	r3, #0
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	461a      	mov	r2, r3
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d0b6      	beq.n	8008762 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800880c:	e051      	b.n	80088b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800881c:	d123      	bne.n	8008866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800882c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008836:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008852:	f043 0204 	orr.w	r2, r3, #4
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e046      	b.n	80088f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886c:	d021      	beq.n	80088b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886e:	f7fd fe4f 	bl	8006510 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	429a      	cmp	r2, r3
 800887c:	d302      	bcc.n	8008884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d116      	bne.n	80088b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889e:	f043 0220 	orr.w	r2, r3, #32
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e020      	b.n	80088f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	0c1b      	lsrs	r3, r3, #16
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d10c      	bne.n	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	43da      	mvns	r2, r3
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4013      	ands	r3, r2
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bf14      	ite	ne
 80088ce:	2301      	movne	r3, #1
 80088d0:	2300      	moveq	r3, #0
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	e00b      	b.n	80088ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	43da      	mvns	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	4013      	ands	r3, r2
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bf14      	ite	ne
 80088e8:	2301      	movne	r3, #1
 80088ea:	2300      	moveq	r3, #0
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d18d      	bne.n	800880e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008908:	e02d      	b.n	8008966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 f8ce 	bl	8008aac <I2C_IsAcknowledgeFailed>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e02d      	b.n	8008976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d021      	beq.n	8008966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008922:	f7fd fdf5 	bl	8006510 <HAL_GetTick>
 8008926:	4602      	mov	r2, r0
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	68ba      	ldr	r2, [r7, #8]
 800892e:	429a      	cmp	r2, r3
 8008930:	d302      	bcc.n	8008938 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d116      	bne.n	8008966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	f043 0220 	orr.w	r2, r3, #32
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e007      	b.n	8008976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008970:	2b80      	cmp	r3, #128	@ 0x80
 8008972:	d1ca      	bne.n	800890a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800898a:	e02d      	b.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 f88d 	bl	8008aac <I2C_IsAcknowledgeFailed>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d001      	beq.n	800899c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e02d      	b.n	80089f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d021      	beq.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a4:	f7fd fdb4 	bl	8006510 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	68ba      	ldr	r2, [r7, #8]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d302      	bcc.n	80089ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d116      	bne.n	80089e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2220      	movs	r2, #32
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d4:	f043 0220 	orr.w	r2, r3, #32
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e007      	b.n	80089f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d1ca      	bne.n	800898c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a0c:	e042      	b.n	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	f003 0310 	and.w	r3, r3, #16
 8008a18:	2b10      	cmp	r3, #16
 8008a1a:	d119      	bne.n	8008a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0210 	mvn.w	r2, #16
 8008a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e029      	b.n	8008aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a50:	f7fd fd5e 	bl	8006510 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d302      	bcc.n	8008a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d116      	bne.n	8008a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	f043 0220 	orr.w	r2, r3, #32
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e007      	b.n	8008aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a9e:	2b40      	cmp	r3, #64	@ 0x40
 8008aa0:	d1b5      	bne.n	8008a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ac2:	d11b      	bne.n	8008afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae8:	f043 0204 	orr.w	r2, r3, #4
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e000      	b.n	8008afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	370c      	adds	r7, #12
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
	...

08008b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d101      	bne.n	8008b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e267      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d075      	beq.n	8008c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b2a:	4b88      	ldr	r3, [pc, #544]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f003 030c 	and.w	r3, r3, #12
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d00c      	beq.n	8008b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b36:	4b85      	ldr	r3, [pc, #532]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d112      	bne.n	8008b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b42:	4b82      	ldr	r3, [pc, #520]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b4e:	d10b      	bne.n	8008b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b50:	4b7e      	ldr	r3, [pc, #504]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d05b      	beq.n	8008c14 <HAL_RCC_OscConfig+0x108>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d157      	bne.n	8008c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e242      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b70:	d106      	bne.n	8008b80 <HAL_RCC_OscConfig+0x74>
 8008b72:	4b76      	ldr	r3, [pc, #472]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a75      	ldr	r2, [pc, #468]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	e01d      	b.n	8008bbc <HAL_RCC_OscConfig+0xb0>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b88:	d10c      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x98>
 8008b8a:	4b70      	ldr	r3, [pc, #448]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a6f      	ldr	r2, [pc, #444]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	4b6d      	ldr	r3, [pc, #436]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a6c      	ldr	r2, [pc, #432]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	e00b      	b.n	8008bbc <HAL_RCC_OscConfig+0xb0>
 8008ba4:	4b69      	ldr	r3, [pc, #420]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a68      	ldr	r2, [pc, #416]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008bae:	6013      	str	r3, [r2, #0]
 8008bb0:	4b66      	ldr	r3, [pc, #408]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a65      	ldr	r2, [pc, #404]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d013      	beq.n	8008bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bc4:	f7fd fca4 	bl	8006510 <HAL_GetTick>
 8008bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bca:	e008      	b.n	8008bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bcc:	f7fd fca0 	bl	8006510 <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	2b64      	cmp	r3, #100	@ 0x64
 8008bd8:	d901      	bls.n	8008bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e207      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bde:	4b5b      	ldr	r3, [pc, #364]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0f0      	beq.n	8008bcc <HAL_RCC_OscConfig+0xc0>
 8008bea:	e014      	b.n	8008c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bec:	f7fd fc90 	bl	8006510 <HAL_GetTick>
 8008bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008bf2:	e008      	b.n	8008c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008bf4:	f7fd fc8c 	bl	8006510 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	2b64      	cmp	r3, #100	@ 0x64
 8008c00:	d901      	bls.n	8008c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e1f3      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c06:	4b51      	ldr	r3, [pc, #324]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1f0      	bne.n	8008bf4 <HAL_RCC_OscConfig+0xe8>
 8008c12:	e000      	b.n	8008c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d063      	beq.n	8008cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c22:	4b4a      	ldr	r3, [pc, #296]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 030c 	and.w	r3, r3, #12
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00b      	beq.n	8008c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c2e:	4b47      	ldr	r3, [pc, #284]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d11c      	bne.n	8008c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c3a:	4b44      	ldr	r3, [pc, #272]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d116      	bne.n	8008c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c46:	4b41      	ldr	r3, [pc, #260]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <HAL_RCC_OscConfig+0x152>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d001      	beq.n	8008c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e1c7      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	4937      	ldr	r1, [pc, #220]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008c72:	e03a      	b.n	8008cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d020      	beq.n	8008cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c7c:	4b34      	ldr	r3, [pc, #208]	@ (8008d50 <HAL_RCC_OscConfig+0x244>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c82:	f7fd fc45 	bl	8006510 <HAL_GetTick>
 8008c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c88:	e008      	b.n	8008c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c8a:	f7fd fc41 	bl	8006510 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e1a8      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0f0      	beq.n	8008c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ca8:	4b28      	ldr	r3, [pc, #160]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	4925      	ldr	r1, [pc, #148]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	600b      	str	r3, [r1, #0]
 8008cbc:	e015      	b.n	8008cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008cbe:	4b24      	ldr	r3, [pc, #144]	@ (8008d50 <HAL_RCC_OscConfig+0x244>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc4:	f7fd fc24 	bl	8006510 <HAL_GetTick>
 8008cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cca:	e008      	b.n	8008cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ccc:	f7fd fc20 	bl	8006510 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e187      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008cde:	4b1b      	ldr	r3, [pc, #108]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1f0      	bne.n	8008ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0308 	and.w	r3, r3, #8
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d036      	beq.n	8008d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d016      	beq.n	8008d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008cfe:	4b15      	ldr	r3, [pc, #84]	@ (8008d54 <HAL_RCC_OscConfig+0x248>)
 8008d00:	2201      	movs	r2, #1
 8008d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d04:	f7fd fc04 	bl	8006510 <HAL_GetTick>
 8008d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d0a:	e008      	b.n	8008d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d0c:	f7fd fc00 	bl	8006510 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d901      	bls.n	8008d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e167      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d4c <HAL_RCC_OscConfig+0x240>)
 8008d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0f0      	beq.n	8008d0c <HAL_RCC_OscConfig+0x200>
 8008d2a:	e01b      	b.n	8008d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d2c:	4b09      	ldr	r3, [pc, #36]	@ (8008d54 <HAL_RCC_OscConfig+0x248>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d32:	f7fd fbed 	bl	8006510 <HAL_GetTick>
 8008d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d38:	e00e      	b.n	8008d58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d3a:	f7fd fbe9 	bl	8006510 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d907      	bls.n	8008d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e150      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
 8008d4c:	40023800 	.word	0x40023800
 8008d50:	42470000 	.word	0x42470000
 8008d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d58:	4b88      	ldr	r3, [pc, #544]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d5c:	f003 0302 	and.w	r3, r3, #2
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1ea      	bne.n	8008d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 8097 	beq.w	8008ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d72:	2300      	movs	r3, #0
 8008d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d76:	4b81      	ldr	r3, [pc, #516]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d10f      	bne.n	8008da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d82:	2300      	movs	r3, #0
 8008d84:	60bb      	str	r3, [r7, #8]
 8008d86:	4b7d      	ldr	r3, [pc, #500]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8a:	4a7c      	ldr	r2, [pc, #496]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d92:	4b7a      	ldr	r3, [pc, #488]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d9a:	60bb      	str	r3, [r7, #8]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008da2:	4b77      	ldr	r3, [pc, #476]	@ (8008f80 <HAL_RCC_OscConfig+0x474>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d118      	bne.n	8008de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dae:	4b74      	ldr	r3, [pc, #464]	@ (8008f80 <HAL_RCC_OscConfig+0x474>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a73      	ldr	r2, [pc, #460]	@ (8008f80 <HAL_RCC_OscConfig+0x474>)
 8008db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dba:	f7fd fba9 	bl	8006510 <HAL_GetTick>
 8008dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dc0:	e008      	b.n	8008dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dc2:	f7fd fba5 	bl	8006510 <HAL_GetTick>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	1ad3      	subs	r3, r2, r3
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d901      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e10c      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8008f80 <HAL_RCC_OscConfig+0x474>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0f0      	beq.n	8008dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d106      	bne.n	8008df6 <HAL_RCC_OscConfig+0x2ea>
 8008de8:	4b64      	ldr	r3, [pc, #400]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dec:	4a63      	ldr	r2, [pc, #396]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008df4:	e01c      	b.n	8008e30 <HAL_RCC_OscConfig+0x324>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	d10c      	bne.n	8008e18 <HAL_RCC_OscConfig+0x30c>
 8008dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e02:	4a5e      	ldr	r2, [pc, #376]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e04:	f043 0304 	orr.w	r3, r3, #4
 8008e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e10:	f043 0301 	orr.w	r3, r3, #1
 8008e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e16:	e00b      	b.n	8008e30 <HAL_RCC_OscConfig+0x324>
 8008e18:	4b58      	ldr	r3, [pc, #352]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1c:	4a57      	ldr	r2, [pc, #348]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e1e:	f023 0301 	bic.w	r3, r3, #1
 8008e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e24:	4b55      	ldr	r3, [pc, #340]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e28:	4a54      	ldr	r2, [pc, #336]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e2a:	f023 0304 	bic.w	r3, r3, #4
 8008e2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d015      	beq.n	8008e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e38:	f7fd fb6a 	bl	8006510 <HAL_GetTick>
 8008e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e3e:	e00a      	b.n	8008e56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e40:	f7fd fb66 	bl	8006510 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d901      	bls.n	8008e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	e0cb      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e56:	4b49      	ldr	r3, [pc, #292]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e5a:	f003 0302 	and.w	r3, r3, #2
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0ee      	beq.n	8008e40 <HAL_RCC_OscConfig+0x334>
 8008e62:	e014      	b.n	8008e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e64:	f7fd fb54 	bl	8006510 <HAL_GetTick>
 8008e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e6a:	e00a      	b.n	8008e82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e6c:	f7fd fb50 	bl	8006510 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e0b5      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e82:	4b3e      	ldr	r3, [pc, #248]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1ee      	bne.n	8008e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d105      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e94:	4b39      	ldr	r3, [pc, #228]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e98:	4a38      	ldr	r2, [pc, #224]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80a1 	beq.w	8008fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008eaa:	4b34      	ldr	r3, [pc, #208]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f003 030c 	and.w	r3, r3, #12
 8008eb2:	2b08      	cmp	r3, #8
 8008eb4:	d05c      	beq.n	8008f70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d141      	bne.n	8008f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ebe:	4b31      	ldr	r3, [pc, #196]	@ (8008f84 <HAL_RCC_OscConfig+0x478>)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ec4:	f7fd fb24 	bl	8006510 <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ecc:	f7fd fb20 	bl	8006510 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e087      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ede:	4b27      	ldr	r3, [pc, #156]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f0      	bne.n	8008ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	69da      	ldr	r2, [r3, #28]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ef8:	019b      	lsls	r3, r3, #6
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	3b01      	subs	r3, #1
 8008f04:	041b      	lsls	r3, r3, #16
 8008f06:	431a      	orrs	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	061b      	lsls	r3, r3, #24
 8008f0e:	491b      	ldr	r1, [pc, #108]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f14:	4b1b      	ldr	r3, [pc, #108]	@ (8008f84 <HAL_RCC_OscConfig+0x478>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f1a:	f7fd faf9 	bl	8006510 <HAL_GetTick>
 8008f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f20:	e008      	b.n	8008f34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f22:	f7fd faf5 	bl	8006510 <HAL_GetTick>
 8008f26:	4602      	mov	r2, r0
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d901      	bls.n	8008f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e05c      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f34:	4b11      	ldr	r3, [pc, #68]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0f0      	beq.n	8008f22 <HAL_RCC_OscConfig+0x416>
 8008f40:	e054      	b.n	8008fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f42:	4b10      	ldr	r3, [pc, #64]	@ (8008f84 <HAL_RCC_OscConfig+0x478>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f48:	f7fd fae2 	bl	8006510 <HAL_GetTick>
 8008f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f4e:	e008      	b.n	8008f62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f50:	f7fd fade 	bl	8006510 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d901      	bls.n	8008f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e045      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f62:	4b06      	ldr	r3, [pc, #24]	@ (8008f7c <HAL_RCC_OscConfig+0x470>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f0      	bne.n	8008f50 <HAL_RCC_OscConfig+0x444>
 8008f6e:	e03d      	b.n	8008fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d107      	bne.n	8008f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e038      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
 8008f7c:	40023800 	.word	0x40023800
 8008f80:	40007000 	.word	0x40007000
 8008f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008f88:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff8 <HAL_RCC_OscConfig+0x4ec>)
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d028      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d121      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d11a      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008fb8:	4013      	ands	r3, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d111      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fce:	085b      	lsrs	r3, r3, #1
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d107      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d001      	beq.n	8008fec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e000      	b.n	8008fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	40023800 	.word	0x40023800

08008ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e0cc      	b.n	80091aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009010:	4b68      	ldr	r3, [pc, #416]	@ (80091b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0307 	and.w	r3, r3, #7
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d90c      	bls.n	8009038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800901e:	4b65      	ldr	r3, [pc, #404]	@ (80091b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	b2d2      	uxtb	r2, r2
 8009024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009026:	4b63      	ldr	r3, [pc, #396]	@ (80091b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0307 	and.w	r3, r3, #7
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d001      	beq.n	8009038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e0b8      	b.n	80091aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d020      	beq.n	8009086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d005      	beq.n	800905c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009050:	4b59      	ldr	r3, [pc, #356]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	4a58      	ldr	r2, [pc, #352]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009056:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800905a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009068:	4b53      	ldr	r3, [pc, #332]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	4a52      	ldr	r2, [pc, #328]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 800906e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009074:	4b50      	ldr	r3, [pc, #320]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	494d      	ldr	r1, [pc, #308]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009082:	4313      	orrs	r3, r2
 8009084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0301 	and.w	r3, r3, #1
 800908e:	2b00      	cmp	r3, #0
 8009090:	d044      	beq.n	800911c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d107      	bne.n	80090aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	4b47      	ldr	r3, [pc, #284]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d119      	bne.n	80090da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e07f      	b.n	80091aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d003      	beq.n	80090ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d107      	bne.n	80090ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090ba:	4b3f      	ldr	r3, [pc, #252]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d109      	bne.n	80090da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e06f      	b.n	80091aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090ca:	4b3b      	ldr	r3, [pc, #236]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d101      	bne.n	80090da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e067      	b.n	80091aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090da:	4b37      	ldr	r3, [pc, #220]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f023 0203 	bic.w	r2, r3, #3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	4934      	ldr	r1, [pc, #208]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 80090e8:	4313      	orrs	r3, r2
 80090ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090ec:	f7fd fa10 	bl	8006510 <HAL_GetTick>
 80090f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090f2:	e00a      	b.n	800910a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090f4:	f7fd fa0c 	bl	8006510 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009102:	4293      	cmp	r3, r2
 8009104:	d901      	bls.n	800910a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e04f      	b.n	80091aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800910a:	4b2b      	ldr	r3, [pc, #172]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 020c 	and.w	r2, r3, #12
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	429a      	cmp	r2, r3
 800911a:	d1eb      	bne.n	80090f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800911c:	4b25      	ldr	r3, [pc, #148]	@ (80091b4 <HAL_RCC_ClockConfig+0x1b8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d20c      	bcs.n	8009144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800912a:	4b22      	ldr	r3, [pc, #136]	@ (80091b4 <HAL_RCC_ClockConfig+0x1b8>)
 800912c:	683a      	ldr	r2, [r7, #0]
 800912e:	b2d2      	uxtb	r2, r2
 8009130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009132:	4b20      	ldr	r3, [pc, #128]	@ (80091b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d001      	beq.n	8009144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e032      	b.n	80091aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0304 	and.w	r3, r3, #4
 800914c:	2b00      	cmp	r3, #0
 800914e:	d008      	beq.n	8009162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009150:	4b19      	ldr	r3, [pc, #100]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	4916      	ldr	r1, [pc, #88]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 800915e:	4313      	orrs	r3, r2
 8009160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d009      	beq.n	8009182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800916e:	4b12      	ldr	r3, [pc, #72]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	490e      	ldr	r1, [pc, #56]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 800917e:	4313      	orrs	r3, r2
 8009180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009182:	f000 f821 	bl	80091c8 <HAL_RCC_GetSysClockFreq>
 8009186:	4602      	mov	r2, r0
 8009188:	4b0b      	ldr	r3, [pc, #44]	@ (80091b8 <HAL_RCC_ClockConfig+0x1bc>)
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	091b      	lsrs	r3, r3, #4
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	490a      	ldr	r1, [pc, #40]	@ (80091bc <HAL_RCC_ClockConfig+0x1c0>)
 8009194:	5ccb      	ldrb	r3, [r1, r3]
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	4a09      	ldr	r2, [pc, #36]	@ (80091c0 <HAL_RCC_ClockConfig+0x1c4>)
 800919c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <HAL_RCC_ClockConfig+0x1c8>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fd f970 	bl	8006488 <HAL_InitTick>

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	40023c00 	.word	0x40023c00
 80091b8:	40023800 	.word	0x40023800
 80091bc:	08010ce4 	.word	0x08010ce4
 80091c0:	20000038 	.word	0x20000038
 80091c4:	20000074 	.word	0x20000074

080091c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091cc:	b094      	sub	sp, #80	@ 0x50
 80091ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80091d4:	2300      	movs	r3, #0
 80091d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d8:	2300      	movs	r3, #0
 80091da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80091dc:	2300      	movs	r3, #0
 80091de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80091e0:	4b79      	ldr	r3, [pc, #484]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	f003 030c 	and.w	r3, r3, #12
 80091e8:	2b08      	cmp	r3, #8
 80091ea:	d00d      	beq.n	8009208 <HAL_RCC_GetSysClockFreq+0x40>
 80091ec:	2b08      	cmp	r3, #8
 80091ee:	f200 80e1 	bhi.w	80093b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d002      	beq.n	80091fc <HAL_RCC_GetSysClockFreq+0x34>
 80091f6:	2b04      	cmp	r3, #4
 80091f8:	d003      	beq.n	8009202 <HAL_RCC_GetSysClockFreq+0x3a>
 80091fa:	e0db      	b.n	80093b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80091fc:	4b73      	ldr	r3, [pc, #460]	@ (80093cc <HAL_RCC_GetSysClockFreq+0x204>)
 80091fe:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8009200:	e0db      	b.n	80093ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009202:	4b73      	ldr	r3, [pc, #460]	@ (80093d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009204:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009206:	e0d8      	b.n	80093ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009208:	4b6f      	ldr	r3, [pc, #444]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009210:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009212:	4b6d      	ldr	r3, [pc, #436]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d063      	beq.n	80092e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800921e:	4b6a      	ldr	r3, [pc, #424]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	099b      	lsrs	r3, r3, #6
 8009224:	2200      	movs	r2, #0
 8009226:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009228:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009230:	633b      	str	r3, [r7, #48]	@ 0x30
 8009232:	2300      	movs	r3, #0
 8009234:	637b      	str	r3, [r7, #52]	@ 0x34
 8009236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	f04f 0000 	mov.w	r0, #0
 8009242:	f04f 0100 	mov.w	r1, #0
 8009246:	0159      	lsls	r1, r3, #5
 8009248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800924c:	0150      	lsls	r0, r2, #5
 800924e:	4602      	mov	r2, r0
 8009250:	460b      	mov	r3, r1
 8009252:	4621      	mov	r1, r4
 8009254:	1a51      	subs	r1, r2, r1
 8009256:	6139      	str	r1, [r7, #16]
 8009258:	4629      	mov	r1, r5
 800925a:	eb63 0301 	sbc.w	r3, r3, r1
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	f04f 0300 	mov.w	r3, #0
 8009268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800926c:	4659      	mov	r1, fp
 800926e:	018b      	lsls	r3, r1, #6
 8009270:	4651      	mov	r1, sl
 8009272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009276:	4651      	mov	r1, sl
 8009278:	018a      	lsls	r2, r1, #6
 800927a:	4651      	mov	r1, sl
 800927c:	ebb2 0801 	subs.w	r8, r2, r1
 8009280:	4659      	mov	r1, fp
 8009282:	eb63 0901 	sbc.w	r9, r3, r1
 8009286:	f04f 0200 	mov.w	r2, #0
 800928a:	f04f 0300 	mov.w	r3, #0
 800928e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800929a:	4690      	mov	r8, r2
 800929c:	4699      	mov	r9, r3
 800929e:	4623      	mov	r3, r4
 80092a0:	eb18 0303 	adds.w	r3, r8, r3
 80092a4:	60bb      	str	r3, [r7, #8]
 80092a6:	462b      	mov	r3, r5
 80092a8:	eb49 0303 	adc.w	r3, r9, r3
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80092ba:	4629      	mov	r1, r5
 80092bc:	024b      	lsls	r3, r1, #9
 80092be:	4621      	mov	r1, r4
 80092c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80092c4:	4621      	mov	r1, r4
 80092c6:	024a      	lsls	r2, r1, #9
 80092c8:	4610      	mov	r0, r2
 80092ca:	4619      	mov	r1, r3
 80092cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092ce:	2200      	movs	r2, #0
 80092d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092d8:	f7f7 fca6 	bl	8000c28 <__aeabi_uldivmod>
 80092dc:	4602      	mov	r2, r0
 80092de:	460b      	mov	r3, r1
 80092e0:	4613      	mov	r3, r2
 80092e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80092e4:	e058      	b.n	8009398 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092e6:	4b38      	ldr	r3, [pc, #224]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	099b      	lsrs	r3, r3, #6
 80092ec:	2200      	movs	r2, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	4611      	mov	r1, r2
 80092f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80092f6:	623b      	str	r3, [r7, #32]
 80092f8:	2300      	movs	r3, #0
 80092fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80092fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009300:	4642      	mov	r2, r8
 8009302:	464b      	mov	r3, r9
 8009304:	f04f 0000 	mov.w	r0, #0
 8009308:	f04f 0100 	mov.w	r1, #0
 800930c:	0159      	lsls	r1, r3, #5
 800930e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009312:	0150      	lsls	r0, r2, #5
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4641      	mov	r1, r8
 800931a:	ebb2 0a01 	subs.w	sl, r2, r1
 800931e:	4649      	mov	r1, r9
 8009320:	eb63 0b01 	sbc.w	fp, r3, r1
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	f04f 0300 	mov.w	r3, #0
 800932c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009330:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009334:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009338:	ebb2 040a 	subs.w	r4, r2, sl
 800933c:	eb63 050b 	sbc.w	r5, r3, fp
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	00eb      	lsls	r3, r5, #3
 800934a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800934e:	00e2      	lsls	r2, r4, #3
 8009350:	4614      	mov	r4, r2
 8009352:	461d      	mov	r5, r3
 8009354:	4643      	mov	r3, r8
 8009356:	18e3      	adds	r3, r4, r3
 8009358:	603b      	str	r3, [r7, #0]
 800935a:	464b      	mov	r3, r9
 800935c:	eb45 0303 	adc.w	r3, r5, r3
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800936e:	4629      	mov	r1, r5
 8009370:	028b      	lsls	r3, r1, #10
 8009372:	4621      	mov	r1, r4
 8009374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009378:	4621      	mov	r1, r4
 800937a:	028a      	lsls	r2, r1, #10
 800937c:	4610      	mov	r0, r2
 800937e:	4619      	mov	r1, r3
 8009380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009382:	2200      	movs	r2, #0
 8009384:	61bb      	str	r3, [r7, #24]
 8009386:	61fa      	str	r2, [r7, #28]
 8009388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800938c:	f7f7 fc4c 	bl	8000c28 <__aeabi_uldivmod>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4613      	mov	r3, r2
 8009396:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009398:	4b0b      	ldr	r3, [pc, #44]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	f003 0303 	and.w	r3, r3, #3
 80093a2:	3301      	adds	r3, #1
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80093a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80093b2:	e002      	b.n	80093ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80093b4:	4b05      	ldr	r3, [pc, #20]	@ (80093cc <HAL_RCC_GetSysClockFreq+0x204>)
 80093b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80093b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80093ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3750      	adds	r7, #80	@ 0x50
 80093c0:	46bd      	mov	sp, r7
 80093c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093c6:	bf00      	nop
 80093c8:	40023800 	.word	0x40023800
 80093cc:	00f42400 	.word	0x00f42400
 80093d0:	007a1200 	.word	0x007a1200

080093d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093d4:	b480      	push	{r7}
 80093d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093d8:	4b03      	ldr	r3, [pc, #12]	@ (80093e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80093da:	681b      	ldr	r3, [r3, #0]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	20000038 	.word	0x20000038

080093ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80093f0:	f7ff fff0 	bl	80093d4 <HAL_RCC_GetHCLKFreq>
 80093f4:	4602      	mov	r2, r0
 80093f6:	4b05      	ldr	r3, [pc, #20]	@ (800940c <HAL_RCC_GetPCLK1Freq+0x20>)
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	0a9b      	lsrs	r3, r3, #10
 80093fc:	f003 0307 	and.w	r3, r3, #7
 8009400:	4903      	ldr	r1, [pc, #12]	@ (8009410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009402:	5ccb      	ldrb	r3, [r1, r3]
 8009404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009408:	4618      	mov	r0, r3
 800940a:	bd80      	pop	{r7, pc}
 800940c:	40023800 	.word	0x40023800
 8009410:	08010cf4 	.word	0x08010cf4

08009414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009418:	f7ff ffdc 	bl	80093d4 <HAL_RCC_GetHCLKFreq>
 800941c:	4602      	mov	r2, r0
 800941e:	4b05      	ldr	r3, [pc, #20]	@ (8009434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	0b5b      	lsrs	r3, r3, #13
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	4903      	ldr	r1, [pc, #12]	@ (8009438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800942a:	5ccb      	ldrb	r3, [r1, r3]
 800942c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009430:	4618      	mov	r0, r3
 8009432:	bd80      	pop	{r7, pc}
 8009434:	40023800 	.word	0x40023800
 8009438:	08010cf4 	.word	0x08010cf4

0800943c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800944a:	2301      	movs	r3, #1
 800944c:	e07b      	b.n	8009546 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	2b00      	cmp	r3, #0
 8009454:	d108      	bne.n	8009468 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800945e:	d009      	beq.n	8009474 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	61da      	str	r2, [r3, #28]
 8009466:	e005      	b.n	8009474 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d106      	bne.n	8009494 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7fb fba8 	bl	8004be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094c6:	431a      	orrs	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094e4:	431a      	orrs	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
 80094f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094f8:	ea42 0103 	orr.w	r1, r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009500:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	430a      	orrs	r2, r1
 800950a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	0c1b      	lsrs	r3, r3, #16
 8009512:	f003 0104 	and.w	r1, r3, #4
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951a:	f003 0210 	and.w	r2, r3, #16
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	69da      	ldr	r2, [r3, #28]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009534:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b088      	sub	sp, #32
 8009552:	af00      	add	r7, sp, #0
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	603b      	str	r3, [r7, #0]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_SPI_Transmit+0x22>
 800956c:	2302      	movs	r3, #2
 800956e:	e126      	b.n	80097be <HAL_SPI_Transmit+0x270>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009578:	f7fc ffca 	bl	8006510 <HAL_GetTick>
 800957c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800957e:	88fb      	ldrh	r3, [r7, #6]
 8009580:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b01      	cmp	r3, #1
 800958c:	d002      	beq.n	8009594 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800958e:	2302      	movs	r3, #2
 8009590:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009592:	e10b      	b.n	80097ac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <HAL_SPI_Transmit+0x52>
 800959a:	88fb      	ldrh	r3, [r7, #6]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095a4:	e102      	b.n	80097ac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2203      	movs	r2, #3
 80095aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68ba      	ldr	r2, [r7, #8]
 80095b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	88fa      	ldrh	r2, [r7, #6]
 80095be:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2200      	movs	r2, #0
 80095ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ec:	d10f      	bne.n	800960e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800960c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009618:	2b40      	cmp	r3, #64	@ 0x40
 800961a:	d007      	beq.n	800962c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800962a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009634:	d14b      	bne.n	80096ce <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_SPI_Transmit+0xf6>
 800963e:	8afb      	ldrh	r3, [r7, #22]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d13e      	bne.n	80096c2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009648:	881a      	ldrh	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009654:	1c9a      	adds	r2, r3, #2
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b01      	subs	r3, #1
 8009662:	b29a      	uxth	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009668:	e02b      	b.n	80096c2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b02      	cmp	r3, #2
 8009676:	d112      	bne.n	800969e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800967c:	881a      	ldrh	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009688:	1c9a      	adds	r2, r3, #2
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009692:	b29b      	uxth	r3, r3
 8009694:	3b01      	subs	r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800969c:	e011      	b.n	80096c2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800969e:	f7fc ff37 	bl	8006510 <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d803      	bhi.n	80096b6 <HAL_SPI_Transmit+0x168>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b4:	d102      	bne.n	80096bc <HAL_SPI_Transmit+0x16e>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096c0:	e074      	b.n	80097ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1ce      	bne.n	800966a <HAL_SPI_Transmit+0x11c>
 80096cc:	e04c      	b.n	8009768 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <HAL_SPI_Transmit+0x18e>
 80096d6:	8afb      	ldrh	r3, [r7, #22]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d140      	bne.n	800975e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	330c      	adds	r3, #12
 80096e6:	7812      	ldrb	r2, [r2, #0]
 80096e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009702:	e02c      	b.n	800975e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b02      	cmp	r3, #2
 8009710:	d113      	bne.n	800973a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	330c      	adds	r3, #12
 800971c:	7812      	ldrb	r2, [r2, #0]
 800971e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009724:	1c5a      	adds	r2, r3, #1
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800972e:	b29b      	uxth	r3, r3
 8009730:	3b01      	subs	r3, #1
 8009732:	b29a      	uxth	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009738:	e011      	b.n	800975e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800973a:	f7fc fee9 	bl	8006510 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d803      	bhi.n	8009752 <HAL_SPI_Transmit+0x204>
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d102      	bne.n	8009758 <HAL_SPI_Transmit+0x20a>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d102      	bne.n	800975e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800975c:	e026      	b.n	80097ac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009762:	b29b      	uxth	r3, r3
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1cd      	bne.n	8009704 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f000 fbcb 	bl	8009f08 <SPI_EndRxTxTransaction>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009786:	2300      	movs	r3, #0
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	613b      	str	r3, [r7, #16]
 800979a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	77fb      	strb	r3, [r7, #31]
 80097a8:	e000      	b.n	80097ac <HAL_SPI_Transmit+0x25e>
  }

error:
 80097aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80097bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b088      	sub	sp, #32
 80097ca:	af02      	add	r7, sp, #8
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	603b      	str	r3, [r7, #0]
 80097d2:	4613      	mov	r3, r2
 80097d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097e2:	d112      	bne.n	800980a <HAL_SPI_Receive+0x44>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10e      	bne.n	800980a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2204      	movs	r2, #4
 80097f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80097f4:	88fa      	ldrh	r2, [r7, #6]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	4613      	mov	r3, r2
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 f8f1 	bl	80099e8 <HAL_SPI_TransmitReceive>
 8009806:	4603      	mov	r3, r0
 8009808:	e0ea      	b.n	80099e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_SPI_Receive+0x52>
 8009814:	2302      	movs	r3, #2
 8009816:	e0e3      	b.n	80099e0 <HAL_SPI_Receive+0x21a>
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009820:	f7fc fe76 	bl	8006510 <HAL_GetTick>
 8009824:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b01      	cmp	r3, #1
 8009830:	d002      	beq.n	8009838 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009832:	2302      	movs	r3, #2
 8009834:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009836:	e0ca      	b.n	80099ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_SPI_Receive+0x7e>
 800983e:	88fb      	ldrh	r3, [r7, #6]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009848:	e0c1      	b.n	80099ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2204      	movs	r2, #4
 800984e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2200      	movs	r2, #0
 8009856:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	88fa      	ldrh	r2, [r7, #6]
 8009862:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	88fa      	ldrh	r2, [r7, #6]
 8009868:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009890:	d10f      	bne.n	80098b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098bc:	2b40      	cmp	r3, #64	@ 0x40
 80098be:	d007      	beq.n	80098d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80098ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d162      	bne.n	800999e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80098d8:	e02e      	b.n	8009938 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d115      	bne.n	8009914 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f103 020c 	add.w	r2, r3, #12
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f4:	7812      	ldrb	r2, [r2, #0]
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009908:	b29b      	uxth	r3, r3
 800990a:	3b01      	subs	r3, #1
 800990c:	b29a      	uxth	r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009912:	e011      	b.n	8009938 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009914:	f7fc fdfc 	bl	8006510 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	429a      	cmp	r2, r3
 8009922:	d803      	bhi.n	800992c <HAL_SPI_Receive+0x166>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992a:	d102      	bne.n	8009932 <HAL_SPI_Receive+0x16c>
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009936:	e04a      	b.n	80099ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1cb      	bne.n	80098da <HAL_SPI_Receive+0x114>
 8009942:	e031      	b.n	80099a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b01      	cmp	r3, #1
 8009950:	d113      	bne.n	800997a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	68da      	ldr	r2, [r3, #12]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995c:	b292      	uxth	r2, r2
 800995e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009964:	1c9a      	adds	r2, r3, #2
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800996e:	b29b      	uxth	r3, r3
 8009970:	3b01      	subs	r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009978:	e011      	b.n	800999e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800997a:	f7fc fdc9 	bl	8006510 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d803      	bhi.n	8009992 <HAL_SPI_Receive+0x1cc>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009990:	d102      	bne.n	8009998 <HAL_SPI_Receive+0x1d2>
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d102      	bne.n	800999e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800999c:	e017      	b.n	80099ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1cd      	bne.n	8009944 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fa45 	bl	8009e3c <SPI_EndRxTransaction>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2220      	movs	r2, #32
 80099bc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	75fb      	strb	r3, [r7, #23]
 80099ca:	e000      	b.n	80099ce <HAL_SPI_Receive+0x208>
  }

error :
 80099cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80099de:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08c      	sub	sp, #48	@ 0x30
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
 80099f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099f6:	2301      	movs	r3, #1
 80099f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d101      	bne.n	8009a0e <HAL_SPI_TransmitReceive+0x26>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e18a      	b.n	8009d24 <HAL_SPI_TransmitReceive+0x33c>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a16:	f7fc fd7b 	bl	8006510 <HAL_GetTick>
 8009a1a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009a2c:	887b      	ldrh	r3, [r7, #2]
 8009a2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d00f      	beq.n	8009a58 <HAL_SPI_TransmitReceive+0x70>
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a3e:	d107      	bne.n	8009a50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d103      	bne.n	8009a50 <HAL_SPI_TransmitReceive+0x68>
 8009a48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d003      	beq.n	8009a58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a50:	2302      	movs	r3, #2
 8009a52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009a56:	e15b      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d005      	beq.n	8009a6a <HAL_SPI_TransmitReceive+0x82>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <HAL_SPI_TransmitReceive+0x82>
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d103      	bne.n	8009a72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8009a70:	e14e      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d003      	beq.n	8009a86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2205      	movs	r2, #5
 8009a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	887a      	ldrh	r2, [r7, #2]
 8009a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	887a      	ldrh	r2, [r7, #2]
 8009a9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	887a      	ldrh	r2, [r7, #2]
 8009aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	887a      	ldrh	r2, [r7, #2]
 8009aae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac6:	2b40      	cmp	r3, #64	@ 0x40
 8009ac8:	d007      	beq.n	8009ada <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ad8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ae2:	d178      	bne.n	8009bd6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <HAL_SPI_TransmitReceive+0x10a>
 8009aec:	8b7b      	ldrh	r3, [r7, #26]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	d166      	bne.n	8009bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af6:	881a      	ldrh	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b02:	1c9a      	adds	r2, r3, #2
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b16:	e053      	b.n	8009bc0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d11b      	bne.n	8009b5e <HAL_SPI_TransmitReceive+0x176>
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d016      	beq.n	8009b5e <HAL_SPI_TransmitReceive+0x176>
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d113      	bne.n	8009b5e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3a:	881a      	ldrh	r2, [r3, #0]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b46:	1c9a      	adds	r2, r3, #2
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f003 0301 	and.w	r3, r3, #1
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d119      	bne.n	8009ba0 <HAL_SPI_TransmitReceive+0x1b8>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d014      	beq.n	8009ba0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b80:	b292      	uxth	r2, r2
 8009b82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b88:	1c9a      	adds	r2, r3, #2
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	3b01      	subs	r3, #1
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ba0:	f7fc fcb6 	bl	8006510 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d807      	bhi.n	8009bc0 <HAL_SPI_TransmitReceive+0x1d8>
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb6:	d003      	beq.n	8009bc0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8009bbe:	e0a7      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1a6      	bne.n	8009b18 <HAL_SPI_TransmitReceive+0x130>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1a1      	bne.n	8009b18 <HAL_SPI_TransmitReceive+0x130>
 8009bd4:	e07c      	b.n	8009cd0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d002      	beq.n	8009be4 <HAL_SPI_TransmitReceive+0x1fc>
 8009bde:	8b7b      	ldrh	r3, [r7, #26]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d16b      	bne.n	8009cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	330c      	adds	r3, #12
 8009bee:	7812      	ldrb	r2, [r2, #0]
 8009bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	1c5a      	adds	r2, r3, #1
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	3b01      	subs	r3, #1
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c0a:	e057      	b.n	8009cbc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	f003 0302 	and.w	r3, r3, #2
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d11c      	bne.n	8009c54 <HAL_SPI_TransmitReceive+0x26c>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d017      	beq.n	8009c54 <HAL_SPI_TransmitReceive+0x26c>
 8009c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d114      	bne.n	8009c54 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	330c      	adds	r3, #12
 8009c34:	7812      	ldrb	r2, [r2, #0]
 8009c36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c3c:	1c5a      	adds	r2, r3, #1
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c50:	2300      	movs	r3, #0
 8009c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d119      	bne.n	8009c96 <HAL_SPI_TransmitReceive+0x2ae>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d014      	beq.n	8009c96 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c92:	2301      	movs	r3, #1
 8009c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c96:	f7fc fc3b 	bl	8006510 <HAL_GetTick>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9e:	1ad3      	subs	r3, r2, r3
 8009ca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d803      	bhi.n	8009cae <HAL_SPI_TransmitReceive+0x2c6>
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cac:	d102      	bne.n	8009cb4 <HAL_SPI_TransmitReceive+0x2cc>
 8009cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d103      	bne.n	8009cbc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8009cba:	e029      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1a2      	bne.n	8009c0c <HAL_SPI_TransmitReceive+0x224>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d19d      	bne.n	8009c0c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cd2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f000 f917 	bl	8009f08 <SPI_EndRxTxTransaction>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8009cec:	e010      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10b      	bne.n	8009d0e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	e000      	b.n	8009d10 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009d0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8009d20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3730      	adds	r7, #48	@ 0x30
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d3c:	f7fc fbe8 	bl	8006510 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	4413      	add	r3, r2
 8009d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d4c:	f7fc fbe0 	bl	8006510 <HAL_GetTick>
 8009d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d52:	4b39      	ldr	r3, [pc, #228]	@ (8009e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	015b      	lsls	r3, r3, #5
 8009d58:	0d1b      	lsrs	r3, r3, #20
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	fb02 f303 	mul.w	r3, r2, r3
 8009d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d62:	e054      	b.n	8009e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6a:	d050      	beq.n	8009e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d6c:	f7fc fbd0 	bl	8006510 <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d902      	bls.n	8009d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d13d      	bne.n	8009dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d9a:	d111      	bne.n	8009dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009da4:	d004      	beq.n	8009db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dae:	d107      	bne.n	8009dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009dc8:	d10f      	bne.n	8009dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e017      	b.n	8009e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689a      	ldr	r2, [r3, #8]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4013      	ands	r3, r2
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	bf0c      	ite	eq
 8009e1e:	2301      	moveq	r3, #1
 8009e20:	2300      	movne	r3, #0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	79fb      	ldrb	r3, [r7, #7]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d19b      	bne.n	8009d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3720      	adds	r7, #32
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20000038 	.word	0x20000038

08009e3c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e50:	d111      	bne.n	8009e76 <SPI_EndRxTransaction+0x3a>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e5a:	d004      	beq.n	8009e66 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e64:	d107      	bne.n	8009e76 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e74:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e7e:	d12a      	bne.n	8009ed6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e88:	d012      	beq.n	8009eb0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2200      	movs	r2, #0
 8009e92:	2180      	movs	r1, #128	@ 0x80
 8009e94:	68f8      	ldr	r0, [r7, #12]
 8009e96:	f7ff ff49 	bl	8009d2c <SPI_WaitFlagStateUntilTimeout>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d02d      	beq.n	8009efc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ea4:	f043 0220 	orr.w	r2, r3, #32
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009eac:	2303      	movs	r3, #3
 8009eae:	e026      	b.n	8009efe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	2101      	movs	r1, #1
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff ff36 	bl	8009d2c <SPI_WaitFlagStateUntilTimeout>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01a      	beq.n	8009efc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009eca:	f043 0220 	orr.w	r2, r3, #32
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e013      	b.n	8009efe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2200      	movs	r2, #0
 8009ede:	2101      	movs	r1, #1
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f7ff ff23 	bl	8009d2c <SPI_WaitFlagStateUntilTimeout>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ef0:	f043 0220 	orr.w	r2, r3, #32
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e000      	b.n	8009efe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
	...

08009f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009f14:	4b1b      	ldr	r3, [pc, #108]	@ (8009f84 <SPI_EndRxTxTransaction+0x7c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a1b      	ldr	r2, [pc, #108]	@ (8009f88 <SPI_EndRxTxTransaction+0x80>)
 8009f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1e:	0d5b      	lsrs	r3, r3, #21
 8009f20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009f24:	fb02 f303 	mul.w	r3, r2, r3
 8009f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f32:	d112      	bne.n	8009f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	2180      	movs	r1, #128	@ 0x80
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f7ff fef4 	bl	8009d2c <SPI_WaitFlagStateUntilTimeout>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d016      	beq.n	8009f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f4e:	f043 0220 	orr.w	r2, r3, #32
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e00f      	b.n	8009f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00a      	beq.n	8009f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f70:	2b80      	cmp	r3, #128	@ 0x80
 8009f72:	d0f2      	beq.n	8009f5a <SPI_EndRxTxTransaction+0x52>
 8009f74:	e000      	b.n	8009f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8009f76:	bf00      	nop
  }

  return HAL_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3718      	adds	r7, #24
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	20000038 	.word	0x20000038
 8009f88:	165e9f81 	.word	0x165e9f81

08009f8c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e034      	b.n	800a00c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7f7 ffe6 	bl	8001f88 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f002 f93c 	bl	800c244 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6818      	ldr	r0, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	f002 f986 	bl	800c2e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6858      	ldr	r0, [r3, #4]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fe8:	6879      	ldr	r1, [r7, #4]
 8009fea:	f002 f9bb 	bl	800c364 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	6892      	ldr	r2, [r2, #8]
 8009ff6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	6892      	ldr	r2, [r2, #8]
 800a002:	f041 0101 	orr.w	r1, r1, #1
 800a006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e041      	b.n	800a0aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d106      	bne.n	800a040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f7fb f85c 	bl	80050f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3304      	adds	r3, #4
 800a050:	4619      	mov	r1, r3
 800a052:	4610      	mov	r0, r2
 800a054:	f000 fce2 	bl	800aa1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d001      	beq.n	800a0cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e046      	b.n	800a15a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a23      	ldr	r2, [pc, #140]	@ (800a168 <HAL_TIM_Base_Start+0xb4>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d022      	beq.n	800a124 <HAL_TIM_Base_Start+0x70>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0e6:	d01d      	beq.n	800a124 <HAL_TIM_Base_Start+0x70>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a1f      	ldr	r2, [pc, #124]	@ (800a16c <HAL_TIM_Base_Start+0xb8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d018      	beq.n	800a124 <HAL_TIM_Base_Start+0x70>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a1e      	ldr	r2, [pc, #120]	@ (800a170 <HAL_TIM_Base_Start+0xbc>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d013      	beq.n	800a124 <HAL_TIM_Base_Start+0x70>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a1c      	ldr	r2, [pc, #112]	@ (800a174 <HAL_TIM_Base_Start+0xc0>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d00e      	beq.n	800a124 <HAL_TIM_Base_Start+0x70>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a1b      	ldr	r2, [pc, #108]	@ (800a178 <HAL_TIM_Base_Start+0xc4>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d009      	beq.n	800a124 <HAL_TIM_Base_Start+0x70>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a19      	ldr	r2, [pc, #100]	@ (800a17c <HAL_TIM_Base_Start+0xc8>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d004      	beq.n	800a124 <HAL_TIM_Base_Start+0x70>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a18      	ldr	r2, [pc, #96]	@ (800a180 <HAL_TIM_Base_Start+0xcc>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d111      	bne.n	800a148 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 0307 	and.w	r3, r3, #7
 800a12e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2b06      	cmp	r3, #6
 800a134:	d010      	beq.n	800a158 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f042 0201 	orr.w	r2, r2, #1
 800a144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a146:	e007      	b.n	800a158 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 0201 	orr.w	r2, r2, #1
 800a156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40010000 	.word	0x40010000
 800a16c:	40000400 	.word	0x40000400
 800a170:	40000800 	.word	0x40000800
 800a174:	40000c00 	.word	0x40000c00
 800a178:	40010400 	.word	0x40010400
 800a17c:	40014000 	.word	0x40014000
 800a180:	40001800 	.word	0x40001800

0800a184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b01      	cmp	r3, #1
 800a196:	d001      	beq.n	800a19c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e04e      	b.n	800a23a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a23      	ldr	r2, [pc, #140]	@ (800a248 <HAL_TIM_Base_Start_IT+0xc4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d022      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1c6:	d01d      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a24c <HAL_TIM_Base_Start_IT+0xc8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d018      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a1e      	ldr	r2, [pc, #120]	@ (800a250 <HAL_TIM_Base_Start_IT+0xcc>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d013      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1c      	ldr	r2, [pc, #112]	@ (800a254 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00e      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a1b      	ldr	r2, [pc, #108]	@ (800a258 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d009      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a19      	ldr	r2, [pc, #100]	@ (800a25c <HAL_TIM_Base_Start_IT+0xd8>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a18      	ldr	r2, [pc, #96]	@ (800a260 <HAL_TIM_Base_Start_IT+0xdc>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d111      	bne.n	800a228 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f003 0307 	and.w	r3, r3, #7
 800a20e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b06      	cmp	r3, #6
 800a214:	d010      	beq.n	800a238 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f042 0201 	orr.w	r2, r2, #1
 800a224:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a226:	e007      	b.n	800a238 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f042 0201 	orr.w	r2, r2, #1
 800a236:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	40010000 	.word	0x40010000
 800a24c:	40000400 	.word	0x40000400
 800a250:	40000800 	.word	0x40000800
 800a254:	40000c00 	.word	0x40000c00
 800a258:	40010400 	.word	0x40010400
 800a25c:	40014000 	.word	0x40014000
 800a260:	40001800 	.word	0x40001800

0800a264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e041      	b.n	800a2fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f839 	bl	800a302 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2202      	movs	r2, #2
 800a294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	3304      	adds	r3, #4
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	4610      	mov	r0, r2
 800a2a4:	f000 fbba 	bl	800aa1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d109      	bne.n	800a33c <HAL_TIM_PWM_Start+0x24>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b01      	cmp	r3, #1
 800a332:	bf14      	ite	ne
 800a334:	2301      	movne	r3, #1
 800a336:	2300      	moveq	r3, #0
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	e022      	b.n	800a382 <HAL_TIM_PWM_Start+0x6a>
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d109      	bne.n	800a356 <HAL_TIM_PWM_Start+0x3e>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	bf14      	ite	ne
 800a34e:	2301      	movne	r3, #1
 800a350:	2300      	moveq	r3, #0
 800a352:	b2db      	uxtb	r3, r3
 800a354:	e015      	b.n	800a382 <HAL_TIM_PWM_Start+0x6a>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b08      	cmp	r3, #8
 800a35a:	d109      	bne.n	800a370 <HAL_TIM_PWM_Start+0x58>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a362:	b2db      	uxtb	r3, r3
 800a364:	2b01      	cmp	r3, #1
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	e008      	b.n	800a382 <HAL_TIM_PWM_Start+0x6a>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a376:	b2db      	uxtb	r3, r3
 800a378:	2b01      	cmp	r3, #1
 800a37a:	bf14      	ite	ne
 800a37c:	2301      	movne	r3, #1
 800a37e:	2300      	moveq	r3, #0
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e07c      	b.n	800a484 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d104      	bne.n	800a39a <HAL_TIM_PWM_Start+0x82>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2202      	movs	r2, #2
 800a394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a398:	e013      	b.n	800a3c2 <HAL_TIM_PWM_Start+0xaa>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d104      	bne.n	800a3aa <HAL_TIM_PWM_Start+0x92>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3a8:	e00b      	b.n	800a3c2 <HAL_TIM_PWM_Start+0xaa>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d104      	bne.n	800a3ba <HAL_TIM_PWM_Start+0xa2>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3b8:	e003      	b.n	800a3c2 <HAL_TIM_PWM_Start+0xaa>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2202      	movs	r2, #2
 800a3be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fe10 	bl	800aff0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a2d      	ldr	r2, [pc, #180]	@ (800a48c <HAL_TIM_PWM_Start+0x174>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d004      	beq.n	800a3e4 <HAL_TIM_PWM_Start+0xcc>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a2c      	ldr	r2, [pc, #176]	@ (800a490 <HAL_TIM_PWM_Start+0x178>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d101      	bne.n	800a3e8 <HAL_TIM_PWM_Start+0xd0>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e000      	b.n	800a3ea <HAL_TIM_PWM_Start+0xd2>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d007      	beq.n	800a3fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a22      	ldr	r2, [pc, #136]	@ (800a48c <HAL_TIM_PWM_Start+0x174>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d022      	beq.n	800a44e <HAL_TIM_PWM_Start+0x136>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a410:	d01d      	beq.n	800a44e <HAL_TIM_PWM_Start+0x136>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a1f      	ldr	r2, [pc, #124]	@ (800a494 <HAL_TIM_PWM_Start+0x17c>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d018      	beq.n	800a44e <HAL_TIM_PWM_Start+0x136>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1d      	ldr	r2, [pc, #116]	@ (800a498 <HAL_TIM_PWM_Start+0x180>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d013      	beq.n	800a44e <HAL_TIM_PWM_Start+0x136>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a1c      	ldr	r2, [pc, #112]	@ (800a49c <HAL_TIM_PWM_Start+0x184>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d00e      	beq.n	800a44e <HAL_TIM_PWM_Start+0x136>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a16      	ldr	r2, [pc, #88]	@ (800a490 <HAL_TIM_PWM_Start+0x178>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d009      	beq.n	800a44e <HAL_TIM_PWM_Start+0x136>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a18      	ldr	r2, [pc, #96]	@ (800a4a0 <HAL_TIM_PWM_Start+0x188>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d004      	beq.n	800a44e <HAL_TIM_PWM_Start+0x136>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a16      	ldr	r2, [pc, #88]	@ (800a4a4 <HAL_TIM_PWM_Start+0x18c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d111      	bne.n	800a472 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	f003 0307 	and.w	r3, r3, #7
 800a458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b06      	cmp	r3, #6
 800a45e:	d010      	beq.n	800a482 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f042 0201 	orr.w	r2, r2, #1
 800a46e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a470:	e007      	b.n	800a482 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f042 0201 	orr.w	r2, r2, #1
 800a480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3710      	adds	r7, #16
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	40010000 	.word	0x40010000
 800a490:	40010400 	.word	0x40010400
 800a494:	40000400 	.word	0x40000400
 800a498:	40000800 	.word	0x40000800
 800a49c:	40000c00 	.word	0x40000c00
 800a4a0:	40014000 	.word	0x40014000
 800a4a4:	40001800 	.word	0x40001800

0800a4a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d122      	bne.n	800a504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d11b      	bne.n	800a504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f06f 0202 	mvn.w	r2, #2
 800a4d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	f003 0303 	and.w	r3, r3, #3
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fa77 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a4f0:	e005      	b.n	800a4fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 fa69 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fa7a 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	691b      	ldr	r3, [r3, #16]
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d122      	bne.n	800a558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f003 0304 	and.w	r3, r3, #4
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	d11b      	bne.n	800a558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f06f 0204 	mvn.w	r2, #4
 800a528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2202      	movs	r2, #2
 800a52e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fa4d 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a544:	e005      	b.n	800a552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fa3f 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fa50 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b08      	cmp	r3, #8
 800a564:	d122      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	f003 0308 	and.w	r3, r3, #8
 800a570:	2b08      	cmp	r3, #8
 800a572:	d11b      	bne.n	800a5ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f06f 0208 	mvn.w	r2, #8
 800a57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2204      	movs	r2, #4
 800a582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	f003 0303 	and.w	r3, r3, #3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa23 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a598:	e005      	b.n	800a5a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa15 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fa26 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f003 0310 	and.w	r3, r3, #16
 800a5b6:	2b10      	cmp	r3, #16
 800a5b8:	d122      	bne.n	800a600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b10      	cmp	r3, #16
 800a5c6:	d11b      	bne.n	800a600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f06f 0210 	mvn.w	r2, #16
 800a5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f9f9 	bl	800a9de <HAL_TIM_IC_CaptureCallback>
 800a5ec:	e005      	b.n	800a5fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f9eb 	bl	800a9ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f9fc 	bl	800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d10e      	bne.n	800a62c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d107      	bne.n	800a62c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f06f 0201 	mvn.w	r2, #1
 800a624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7fa f9da 	bl	80049e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a636:	2b80      	cmp	r3, #128	@ 0x80
 800a638:	d10e      	bne.n	800a658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a644:	2b80      	cmp	r3, #128	@ 0x80
 800a646:	d107      	bne.n	800a658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fd78 	bl	800b148 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a662:	2b40      	cmp	r3, #64	@ 0x40
 800a664:	d10e      	bne.n	800a684 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a670:	2b40      	cmp	r3, #64	@ 0x40
 800a672:	d107      	bne.n	800a684 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a67c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f9c1 	bl	800aa06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f003 0320 	and.w	r3, r3, #32
 800a68e:	2b20      	cmp	r3, #32
 800a690:	d10e      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	f003 0320 	and.w	r3, r3, #32
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d107      	bne.n	800a6b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f06f 0220 	mvn.w	r2, #32
 800a6a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fd42 	bl	800b134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d101      	bne.n	800a6d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a6d2:	2302      	movs	r3, #2
 800a6d4:	e0ae      	b.n	800a834 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2b0c      	cmp	r3, #12
 800a6e2:	f200 809f 	bhi.w	800a824 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a6e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ec:	0800a721 	.word	0x0800a721
 800a6f0:	0800a825 	.word	0x0800a825
 800a6f4:	0800a825 	.word	0x0800a825
 800a6f8:	0800a825 	.word	0x0800a825
 800a6fc:	0800a761 	.word	0x0800a761
 800a700:	0800a825 	.word	0x0800a825
 800a704:	0800a825 	.word	0x0800a825
 800a708:	0800a825 	.word	0x0800a825
 800a70c:	0800a7a3 	.word	0x0800a7a3
 800a710:	0800a825 	.word	0x0800a825
 800a714:	0800a825 	.word	0x0800a825
 800a718:	0800a825 	.word	0x0800a825
 800a71c:	0800a7e3 	.word	0x0800a7e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fa18 	bl	800ab5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f042 0208 	orr.w	r2, r2, #8
 800a73a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f022 0204 	bic.w	r2, r2, #4
 800a74a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6999      	ldr	r1, [r3, #24]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	691a      	ldr	r2, [r3, #16]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	619a      	str	r2, [r3, #24]
      break;
 800a75e:	e064      	b.n	800a82a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68b9      	ldr	r1, [r7, #8]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 fa68 	bl	800ac3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a77a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	699a      	ldr	r2, [r3, #24]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a78a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6999      	ldr	r1, [r3, #24]
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	021a      	lsls	r2, r3, #8
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	619a      	str	r2, [r3, #24]
      break;
 800a7a0:	e043      	b.n	800a82a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fabd 	bl	800ad28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69da      	ldr	r2, [r3, #28]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f042 0208 	orr.w	r2, r2, #8
 800a7bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f022 0204 	bic.w	r2, r2, #4
 800a7cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69d9      	ldr	r1, [r3, #28]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	691a      	ldr	r2, [r3, #16]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	61da      	str	r2, [r3, #28]
      break;
 800a7e0:	e023      	b.n	800a82a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fb11 	bl	800ae10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69da      	ldr	r2, [r3, #28]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	69da      	ldr	r2, [r3, #28]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a80c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	69d9      	ldr	r1, [r3, #28]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	691b      	ldr	r3, [r3, #16]
 800a818:	021a      	lsls	r2, r3, #8
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	61da      	str	r2, [r3, #28]
      break;
 800a822:	e002      	b.n	800a82a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	75fb      	strb	r3, [r7, #23]
      break;
 800a828:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_TIM_ConfigClockSource+0x1c>
 800a854:	2302      	movs	r3, #2
 800a856:	e0b4      	b.n	800a9c2 <HAL_TIM_ConfigClockSource+0x186>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a87e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a890:	d03e      	beq.n	800a910 <HAL_TIM_ConfigClockSource+0xd4>
 800a892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a896:	f200 8087 	bhi.w	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a89a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a89e:	f000 8086 	beq.w	800a9ae <HAL_TIM_ConfigClockSource+0x172>
 800a8a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8a6:	d87f      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8a8:	2b70      	cmp	r3, #112	@ 0x70
 800a8aa:	d01a      	beq.n	800a8e2 <HAL_TIM_ConfigClockSource+0xa6>
 800a8ac:	2b70      	cmp	r3, #112	@ 0x70
 800a8ae:	d87b      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b0:	2b60      	cmp	r3, #96	@ 0x60
 800a8b2:	d050      	beq.n	800a956 <HAL_TIM_ConfigClockSource+0x11a>
 800a8b4:	2b60      	cmp	r3, #96	@ 0x60
 800a8b6:	d877      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8b8:	2b50      	cmp	r3, #80	@ 0x50
 800a8ba:	d03c      	beq.n	800a936 <HAL_TIM_ConfigClockSource+0xfa>
 800a8bc:	2b50      	cmp	r3, #80	@ 0x50
 800a8be:	d873      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8c0:	2b40      	cmp	r3, #64	@ 0x40
 800a8c2:	d058      	beq.n	800a976 <HAL_TIM_ConfigClockSource+0x13a>
 800a8c4:	2b40      	cmp	r3, #64	@ 0x40
 800a8c6:	d86f      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8c8:	2b30      	cmp	r3, #48	@ 0x30
 800a8ca:	d064      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x15a>
 800a8cc:	2b30      	cmp	r3, #48	@ 0x30
 800a8ce:	d86b      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8d0:	2b20      	cmp	r3, #32
 800a8d2:	d060      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x15a>
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	d867      	bhi.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d05c      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x15a>
 800a8dc:	2b10      	cmp	r3, #16
 800a8de:	d05a      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0x15a>
 800a8e0:	e062      	b.n	800a9a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6818      	ldr	r0, [r3, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	6899      	ldr	r1, [r3, #8]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	f000 fb5d 	bl	800afb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	609a      	str	r2, [r3, #8]
      break;
 800a90e:	e04f      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6818      	ldr	r0, [r3, #0]
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	6899      	ldr	r1, [r3, #8]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f000 fb46 	bl	800afb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a932:	609a      	str	r2, [r3, #8]
      break;
 800a934:	e03c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	6859      	ldr	r1, [r3, #4]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	461a      	mov	r2, r3
 800a944:	f000 faba 	bl	800aebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2150      	movs	r1, #80	@ 0x50
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 fb13 	bl	800af7a <TIM_ITRx_SetConfig>
      break;
 800a954:	e02c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	6859      	ldr	r1, [r3, #4]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	461a      	mov	r2, r3
 800a964:	f000 fad9 	bl	800af1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2160      	movs	r1, #96	@ 0x60
 800a96e:	4618      	mov	r0, r3
 800a970:	f000 fb03 	bl	800af7a <TIM_ITRx_SetConfig>
      break;
 800a974:	e01c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6818      	ldr	r0, [r3, #0]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	6859      	ldr	r1, [r3, #4]
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	461a      	mov	r2, r3
 800a984:	f000 fa9a 	bl	800aebc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2140      	movs	r1, #64	@ 0x40
 800a98e:	4618      	mov	r0, r3
 800a990:	f000 faf3 	bl	800af7a <TIM_ITRx_SetConfig>
      break;
 800a994:	e00c      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f000 faea 	bl	800af7a <TIM_ITRx_SetConfig>
      break;
 800a9a6:	e003      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ac:	e000      	b.n	800a9b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a9ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b083      	sub	sp, #12
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9fa:	bf00      	nop
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa0e:	bf00      	nop
 800aa10:	370c      	adds	r7, #12
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
	...

0800aa1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	4a40      	ldr	r2, [pc, #256]	@ (800ab30 <TIM_Base_SetConfig+0x114>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d013      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa3a:	d00f      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	4a3d      	ldr	r2, [pc, #244]	@ (800ab34 <TIM_Base_SetConfig+0x118>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d00b      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a3c      	ldr	r2, [pc, #240]	@ (800ab38 <TIM_Base_SetConfig+0x11c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d007      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a3b      	ldr	r2, [pc, #236]	@ (800ab3c <TIM_Base_SetConfig+0x120>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d003      	beq.n	800aa5c <TIM_Base_SetConfig+0x40>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a3a      	ldr	r2, [pc, #232]	@ (800ab40 <TIM_Base_SetConfig+0x124>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d108      	bne.n	800aa6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a2f      	ldr	r2, [pc, #188]	@ (800ab30 <TIM_Base_SetConfig+0x114>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d02b      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa7c:	d027      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a2c      	ldr	r2, [pc, #176]	@ (800ab34 <TIM_Base_SetConfig+0x118>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d023      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a2b      	ldr	r2, [pc, #172]	@ (800ab38 <TIM_Base_SetConfig+0x11c>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d01f      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a2a      	ldr	r2, [pc, #168]	@ (800ab3c <TIM_Base_SetConfig+0x120>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d01b      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a29      	ldr	r2, [pc, #164]	@ (800ab40 <TIM_Base_SetConfig+0x124>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d017      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a28      	ldr	r2, [pc, #160]	@ (800ab44 <TIM_Base_SetConfig+0x128>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d013      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a27      	ldr	r2, [pc, #156]	@ (800ab48 <TIM_Base_SetConfig+0x12c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00f      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a26      	ldr	r2, [pc, #152]	@ (800ab4c <TIM_Base_SetConfig+0x130>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d00b      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a25      	ldr	r2, [pc, #148]	@ (800ab50 <TIM_Base_SetConfig+0x134>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d007      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a24      	ldr	r2, [pc, #144]	@ (800ab54 <TIM_Base_SetConfig+0x138>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d003      	beq.n	800aace <TIM_Base_SetConfig+0xb2>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a23      	ldr	r2, [pc, #140]	@ (800ab58 <TIM_Base_SetConfig+0x13c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d108      	bne.n	800aae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	4313      	orrs	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a0a      	ldr	r2, [pc, #40]	@ (800ab30 <TIM_Base_SetConfig+0x114>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d003      	beq.n	800ab14 <TIM_Base_SetConfig+0xf8>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a0c      	ldr	r2, [pc, #48]	@ (800ab40 <TIM_Base_SetConfig+0x124>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d103      	bne.n	800ab1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	691a      	ldr	r2, [r3, #16]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	615a      	str	r2, [r3, #20]
}
 800ab22:	bf00      	nop
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40010000 	.word	0x40010000
 800ab34:	40000400 	.word	0x40000400
 800ab38:	40000800 	.word	0x40000800
 800ab3c:	40000c00 	.word	0x40000c00
 800ab40:	40010400 	.word	0x40010400
 800ab44:	40014000 	.word	0x40014000
 800ab48:	40014400 	.word	0x40014400
 800ab4c:	40014800 	.word	0x40014800
 800ab50:	40001800 	.word	0x40001800
 800ab54:	40001c00 	.word	0x40001c00
 800ab58:	40002000 	.word	0x40002000

0800ab5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	f023 0201 	bic.w	r2, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f023 0303 	bic.w	r3, r3, #3
 800ab92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	f023 0302 	bic.w	r3, r3, #2
 800aba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	4313      	orrs	r3, r2
 800abae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a20      	ldr	r2, [pc, #128]	@ (800ac34 <TIM_OC1_SetConfig+0xd8>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d003      	beq.n	800abc0 <TIM_OC1_SetConfig+0x64>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a1f      	ldr	r2, [pc, #124]	@ (800ac38 <TIM_OC1_SetConfig+0xdc>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d10c      	bne.n	800abda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	f023 0308 	bic.w	r3, r3, #8
 800abc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	4313      	orrs	r3, r2
 800abd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f023 0304 	bic.w	r3, r3, #4
 800abd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a15      	ldr	r2, [pc, #84]	@ (800ac34 <TIM_OC1_SetConfig+0xd8>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_OC1_SetConfig+0x8e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a14      	ldr	r2, [pc, #80]	@ (800ac38 <TIM_OC1_SetConfig+0xdc>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d111      	bne.n	800ac0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	693a      	ldr	r2, [r7, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	621a      	str	r2, [r3, #32]
}
 800ac28:	bf00      	nop
 800ac2a:	371c      	adds	r7, #28
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40010400 	.word	0x40010400

0800ac3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	f023 0210 	bic.w	r2, r3, #16
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	f023 0320 	bic.w	r3, r3, #32
 800ac86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a22      	ldr	r2, [pc, #136]	@ (800ad20 <TIM_OC2_SetConfig+0xe4>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d003      	beq.n	800aca4 <TIM_OC2_SetConfig+0x68>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4a21      	ldr	r2, [pc, #132]	@ (800ad24 <TIM_OC2_SetConfig+0xe8>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d10d      	bne.n	800acc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	011b      	lsls	r3, r3, #4
 800acb2:	697a      	ldr	r2, [r7, #20]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a17      	ldr	r2, [pc, #92]	@ (800ad20 <TIM_OC2_SetConfig+0xe4>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d003      	beq.n	800acd0 <TIM_OC2_SetConfig+0x94>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a16      	ldr	r2, [pc, #88]	@ (800ad24 <TIM_OC2_SetConfig+0xe8>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d113      	bne.n	800acf8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	699b      	ldr	r3, [r3, #24]
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	697a      	ldr	r2, [r7, #20]
 800ad10:	621a      	str	r2, [r3, #32]
}
 800ad12:	bf00      	nop
 800ad14:	371c      	adds	r7, #28
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	40010000 	.word	0x40010000
 800ad24:	40010400 	.word	0x40010400

0800ad28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a1b      	ldr	r3, [r3, #32]
 800ad36:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f023 0303 	bic.w	r3, r3, #3
 800ad5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a21      	ldr	r2, [pc, #132]	@ (800ae08 <TIM_OC3_SetConfig+0xe0>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d003      	beq.n	800ad8e <TIM_OC3_SetConfig+0x66>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a20      	ldr	r2, [pc, #128]	@ (800ae0c <TIM_OC3_SetConfig+0xe4>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d10d      	bne.n	800adaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ada8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a16      	ldr	r2, [pc, #88]	@ (800ae08 <TIM_OC3_SetConfig+0xe0>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d003      	beq.n	800adba <TIM_OC3_SetConfig+0x92>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a15      	ldr	r2, [pc, #84]	@ (800ae0c <TIM_OC3_SetConfig+0xe4>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d113      	bne.n	800ade2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800adc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800adc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	011b      	lsls	r3, r3, #4
 800add0:	693a      	ldr	r2, [r7, #16]
 800add2:	4313      	orrs	r3, r2
 800add4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	699b      	ldr	r3, [r3, #24]
 800adda:	011b      	lsls	r3, r3, #4
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	4313      	orrs	r3, r2
 800ade0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	697a      	ldr	r2, [r7, #20]
 800adfa:	621a      	str	r2, [r3, #32]
}
 800adfc:	bf00      	nop
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	40010000 	.word	0x40010000
 800ae0c:	40010400 	.word	0x40010400

0800ae10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	69db      	ldr	r3, [r3, #28]
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	021b      	lsls	r3, r3, #8
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	031b      	lsls	r3, r3, #12
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a12      	ldr	r2, [pc, #72]	@ (800aeb4 <TIM_OC4_SetConfig+0xa4>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d003      	beq.n	800ae78 <TIM_OC4_SetConfig+0x68>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a11      	ldr	r2, [pc, #68]	@ (800aeb8 <TIM_OC4_SetConfig+0xa8>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d109      	bne.n	800ae8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	019b      	lsls	r3, r3, #6
 800ae86:	697a      	ldr	r2, [r7, #20]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	697a      	ldr	r2, [r7, #20]
 800ae90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	621a      	str	r2, [r3, #32]
}
 800aea6:	bf00      	nop
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	40010000 	.word	0x40010000
 800aeb8:	40010400 	.word	0x40010400

0800aebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6a1b      	ldr	r3, [r3, #32]
 800aecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	f023 0201 	bic.w	r2, r3, #1
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f023 030a 	bic.w	r3, r3, #10
 800aef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	4313      	orrs	r3, r2
 800af00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	621a      	str	r2, [r3, #32]
}
 800af0e:	bf00      	nop
 800af10:	371c      	adds	r7, #28
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr

0800af1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af1a:	b480      	push	{r7}
 800af1c:	b087      	sub	sp, #28
 800af1e:	af00      	add	r7, sp, #0
 800af20:	60f8      	str	r0, [r7, #12]
 800af22:	60b9      	str	r1, [r7, #8]
 800af24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	f023 0210 	bic.w	r2, r3, #16
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6a1b      	ldr	r3, [r3, #32]
 800af3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	031b      	lsls	r3, r3, #12
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	011b      	lsls	r3, r3, #4
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	4313      	orrs	r3, r2
 800af60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	621a      	str	r2, [r3, #32]
}
 800af6e:	bf00      	nop
 800af70:	371c      	adds	r7, #28
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b085      	sub	sp, #20
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	4313      	orrs	r3, r2
 800af98:	f043 0307 	orr.w	r3, r3, #7
 800af9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	609a      	str	r2, [r3, #8]
}
 800afa4:	bf00      	nop
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b087      	sub	sp, #28
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800afca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	021a      	lsls	r2, r3, #8
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	431a      	orrs	r2, r3
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	697a      	ldr	r2, [r7, #20]
 800afda:	4313      	orrs	r3, r2
 800afdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	609a      	str	r2, [r3, #8]
}
 800afe4:	bf00      	nop
 800afe6:	371c      	adds	r7, #28
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	f003 031f 	and.w	r3, r3, #31
 800b002:	2201      	movs	r2, #1
 800b004:	fa02 f303 	lsl.w	r3, r2, r3
 800b008:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	6a1a      	ldr	r2, [r3, #32]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	43db      	mvns	r3, r3
 800b012:	401a      	ands	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6a1a      	ldr	r2, [r3, #32]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f003 031f 	and.w	r3, r3, #31
 800b022:	6879      	ldr	r1, [r7, #4]
 800b024:	fa01 f303 	lsl.w	r3, r1, r3
 800b028:	431a      	orrs	r2, r3
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	621a      	str	r2, [r3, #32]
}
 800b02e:	bf00      	nop
 800b030:	371c      	adds	r7, #28
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
	...

0800b03c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d101      	bne.n	800b054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b050:	2302      	movs	r3, #2
 800b052:	e05a      	b.n	800b10a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b07a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	4313      	orrs	r3, r2
 800b084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a21      	ldr	r2, [pc, #132]	@ (800b118 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d022      	beq.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0a0:	d01d      	beq.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b11c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d018      	beq.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a1b      	ldr	r2, [pc, #108]	@ (800b120 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d013      	beq.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a1a      	ldr	r2, [pc, #104]	@ (800b124 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d00e      	beq.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a18      	ldr	r2, [pc, #96]	@ (800b128 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d009      	beq.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a17      	ldr	r2, [pc, #92]	@ (800b12c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d004      	beq.n	800b0de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a15      	ldr	r2, [pc, #84]	@ (800b130 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d10c      	bne.n	800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	40010000 	.word	0x40010000
 800b11c:	40000400 	.word	0x40000400
 800b120:	40000800 	.word	0x40000800
 800b124:	40000c00 	.word	0x40000c00
 800b128:	40010400 	.word	0x40010400
 800b12c:	40014000 	.word	0x40014000
 800b130:	40001800 	.word	0x40001800

0800b134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d101      	bne.n	800b16e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e03f      	b.n	800b1ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7fb f8a8 	bl	80062d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2224      	movs	r2, #36	@ 0x24
 800b18c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b19e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fddb 	bl	800bd5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	691a      	ldr	r2, [r3, #16]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b1b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	695a      	ldr	r2, [r3, #20]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b1c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68da      	ldr	r2, [r3, #12]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b1d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2220      	movs	r2, #32
 800b1e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3708      	adds	r7, #8
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b08a      	sub	sp, #40	@ 0x28
 800b1fa:	af02      	add	r7, sp, #8
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	603b      	str	r3, [r7, #0]
 800b202:	4613      	mov	r3, r2
 800b204:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b20      	cmp	r3, #32
 800b214:	d17c      	bne.n	800b310 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <HAL_UART_Transmit+0x2c>
 800b21c:	88fb      	ldrh	r3, [r7, #6]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d101      	bne.n	800b226 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e075      	b.n	800b312 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d101      	bne.n	800b234 <HAL_UART_Transmit+0x3e>
 800b230:	2302      	movs	r3, #2
 800b232:	e06e      	b.n	800b312 <HAL_UART_Transmit+0x11c>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2221      	movs	r2, #33	@ 0x21
 800b246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b24a:	f7fb f961 	bl	8006510 <HAL_GetTick>
 800b24e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	88fa      	ldrh	r2, [r7, #6]
 800b254:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	88fa      	ldrh	r2, [r7, #6]
 800b25a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b264:	d108      	bne.n	800b278 <HAL_UART_Transmit+0x82>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d104      	bne.n	800b278 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b26e:	2300      	movs	r3, #0
 800b270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	61bb      	str	r3, [r7, #24]
 800b276:	e003      	b.n	800b280 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800b288:	e02a      	b.n	800b2e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2200      	movs	r2, #0
 800b292:	2180      	movs	r1, #128	@ 0x80
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fb1f 	bl	800b8d8 <UART_WaitOnFlagUntilTimeout>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b2a0:	2303      	movs	r3, #3
 800b2a2:	e036      	b.n	800b312 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10b      	bne.n	800b2c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	3302      	adds	r3, #2
 800b2be:	61bb      	str	r3, [r7, #24]
 800b2c0:	e007      	b.n	800b2d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	781a      	ldrb	r2, [r3, #0]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d1cf      	bne.n	800b28a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	2140      	movs	r1, #64	@ 0x40
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 faef 	bl	800b8d8 <UART_WaitOnFlagUntilTimeout>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b300:	2303      	movs	r3, #3
 800b302:	e006      	b.n	800b312 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2220      	movs	r2, #32
 800b308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	e000      	b.n	800b312 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b310:	2302      	movs	r3, #2
  }
}
 800b312:	4618      	mov	r0, r3
 800b314:	3720      	adds	r7, #32
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	60f8      	str	r0, [r7, #12]
 800b322:	60b9      	str	r1, [r7, #8]
 800b324:	4613      	mov	r3, r2
 800b326:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b20      	cmp	r3, #32
 800b332:	d11d      	bne.n	800b370 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d002      	beq.n	800b340 <HAL_UART_Receive_IT+0x26>
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e016      	b.n	800b372 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d101      	bne.n	800b352 <HAL_UART_Receive_IT+0x38>
 800b34e:	2302      	movs	r3, #2
 800b350:	e00f      	b.n	800b372 <HAL_UART_Receive_IT+0x58>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2201      	movs	r2, #1
 800b356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b360:	88fb      	ldrh	r3, [r7, #6]
 800b362:	461a      	mov	r2, r3
 800b364:	68b9      	ldr	r1, [r7, #8]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f000 fb24 	bl	800b9b4 <UART_Start_Receive_IT>
 800b36c:	4603      	mov	r3, r0
 800b36e:	e000      	b.n	800b372 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b370:	2302      	movs	r3, #2
  }
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b0ba      	sub	sp, #232	@ 0xe8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	68db      	ldr	r3, [r3, #12]
 800b394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	695b      	ldr	r3, [r3, #20]
 800b39e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3b2:	f003 030f 	and.w	r3, r3, #15
 800b3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800b3ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10f      	bne.n	800b3e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3c6:	f003 0320 	and.w	r3, r3, #32
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d009      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x66>
 800b3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d003      	beq.n	800b3e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fc03 	bl	800bbe6 <UART_Receive_IT>
      return;
 800b3e0:	e256      	b.n	800b890 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b3e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 80de 	beq.w	800b5a8 <HAL_UART_IRQHandler+0x22c>
 800b3ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3f0:	f003 0301 	and.w	r3, r3, #1
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d106      	bne.n	800b406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b3f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 80d1 	beq.w	800b5a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00b      	beq.n	800b42a <HAL_UART_IRQHandler+0xae>
 800b412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d005      	beq.n	800b42a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b422:	f043 0201 	orr.w	r2, r3, #1
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b42e:	f003 0304 	and.w	r3, r3, #4
 800b432:	2b00      	cmp	r3, #0
 800b434:	d00b      	beq.n	800b44e <HAL_UART_IRQHandler+0xd2>
 800b436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d005      	beq.n	800b44e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b446:	f043 0202 	orr.w	r2, r3, #2
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00b      	beq.n	800b472 <HAL_UART_IRQHandler+0xf6>
 800b45a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d005      	beq.n	800b472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b46a:	f043 0204 	orr.w	r2, r3, #4
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b476:	f003 0308 	and.w	r3, r3, #8
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d011      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x126>
 800b47e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b482:	f003 0320 	and.w	r3, r3, #32
 800b486:	2b00      	cmp	r3, #0
 800b488:	d105      	bne.n	800b496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b48a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d005      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b49a:	f043 0208 	orr.w	r2, r3, #8
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 81ed 	beq.w	800b886 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4b0:	f003 0320 	and.w	r3, r3, #32
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d008      	beq.n	800b4ca <HAL_UART_IRQHandler+0x14e>
 800b4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4bc:	f003 0320 	and.w	r3, r3, #32
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fb8e 	bl	800bbe6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4d4:	2b40      	cmp	r3, #64	@ 0x40
 800b4d6:	bf0c      	ite	eq
 800b4d8:	2301      	moveq	r3, #1
 800b4da:	2300      	movne	r3, #0
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4e6:	f003 0308 	and.w	r3, r3, #8
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d103      	bne.n	800b4f6 <HAL_UART_IRQHandler+0x17a>
 800b4ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d04f      	beq.n	800b596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fa96 	bl	800ba28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b506:	2b40      	cmp	r3, #64	@ 0x40
 800b508:	d141      	bne.n	800b58e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3314      	adds	r3, #20
 800b510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b518:	e853 3f00 	ldrex	r3, [r3]
 800b51c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3314      	adds	r3, #20
 800b532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b536:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b53a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b54e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1d9      	bne.n	800b50a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d013      	beq.n	800b586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b562:	4a7d      	ldr	r2, [pc, #500]	@ (800b758 <HAL_UART_IRQHandler+0x3dc>)
 800b564:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fb fe9a 	bl	80072a4 <HAL_DMA_Abort_IT>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d016      	beq.n	800b5a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b57a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b580:	4610      	mov	r0, r2
 800b582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b584:	e00e      	b.n	800b5a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f990 	bl	800b8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b58c:	e00a      	b.n	800b5a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f98c 	bl	800b8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b594:	e006      	b.n	800b5a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f988 	bl	800b8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800b5a2:	e170      	b.n	800b886 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5a4:	bf00      	nop
    return;
 800b5a6:	e16e      	b.n	800b886 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	f040 814a 	bne.w	800b846 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5b6:	f003 0310 	and.w	r3, r3, #16
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 8143 	beq.w	800b846 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5c4:	f003 0310 	and.w	r3, r3, #16
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 813c 	beq.w	800b846 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60bb      	str	r3, [r7, #8]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	60bb      	str	r3, [r7, #8]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	60bb      	str	r3, [r7, #8]
 800b5e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ee:	2b40      	cmp	r3, #64	@ 0x40
 800b5f0:	f040 80b4 	bne.w	800b75c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 8140 	beq.w	800b88a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b60e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b612:	429a      	cmp	r2, r3
 800b614:	f080 8139 	bcs.w	800b88a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b61e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b62a:	f000 8088 	beq.w	800b73e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	330c      	adds	r3, #12
 800b634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b63c:	e853 3f00 	ldrex	r3, [r3]
 800b640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b64c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	330c      	adds	r3, #12
 800b656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800b65a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b65e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b662:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b666:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1d9      	bne.n	800b62e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3314      	adds	r3, #20
 800b680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b68a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b68c:	f023 0301 	bic.w	r3, r3, #1
 800b690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3314      	adds	r3, #20
 800b69a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b69e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b6a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b6a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b6aa:	e841 2300 	strex	r3, r2, [r1]
 800b6ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b6b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1e1      	bne.n	800b67a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3314      	adds	r3, #20
 800b6bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6c0:	e853 3f00 	ldrex	r3, [r3]
 800b6c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b6c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3314      	adds	r3, #20
 800b6d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b6da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6e2:	e841 2300 	strex	r3, r2, [r1]
 800b6e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1e3      	bne.n	800b6b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	330c      	adds	r3, #12
 800b702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b706:	e853 3f00 	ldrex	r3, [r3]
 800b70a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b70c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b70e:	f023 0310 	bic.w	r3, r3, #16
 800b712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	330c      	adds	r3, #12
 800b71c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800b720:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b722:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b728:	e841 2300 	strex	r3, r2, [r1]
 800b72c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b72e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1e3      	bne.n	800b6fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fb fd43 	bl	80071c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b746:	b29b      	uxth	r3, r3
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f8b6 	bl	800b8c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b754:	e099      	b.n	800b88a <HAL_UART_IRQHandler+0x50e>
 800b756:	bf00      	nop
 800b758:	0800baef 	.word	0x0800baef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b764:	b29b      	uxth	r3, r3
 800b766:	1ad3      	subs	r3, r2, r3
 800b768:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b770:	b29b      	uxth	r3, r3
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 808b 	beq.w	800b88e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b778:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f000 8086 	beq.w	800b88e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	330c      	adds	r3, #12
 800b788:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b798:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	330c      	adds	r3, #12
 800b7a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b7a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800b7a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7ae:	e841 2300 	strex	r3, r2, [r1]
 800b7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1e3      	bne.n	800b782 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	3314      	adds	r3, #20
 800b7c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c4:	e853 3f00 	ldrex	r3, [r3]
 800b7c8:	623b      	str	r3, [r7, #32]
   return(result);
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	f023 0301 	bic.w	r3, r3, #1
 800b7d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3314      	adds	r3, #20
 800b7da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b7de:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7e6:	e841 2300 	strex	r3, r2, [r1]
 800b7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1e3      	bne.n	800b7ba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	330c      	adds	r3, #12
 800b806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	e853 3f00 	ldrex	r3, [r3]
 800b80e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f023 0310 	bic.w	r3, r3, #16
 800b816:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	330c      	adds	r3, #12
 800b820:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b824:	61fa      	str	r2, [r7, #28]
 800b826:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b828:	69b9      	ldr	r1, [r7, #24]
 800b82a:	69fa      	ldr	r2, [r7, #28]
 800b82c:	e841 2300 	strex	r3, r2, [r1]
 800b830:	617b      	str	r3, [r7, #20]
   return(result);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1e3      	bne.n	800b800 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b838:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f83e 	bl	800b8c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b844:	e023      	b.n	800b88e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b84a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d009      	beq.n	800b866 <HAL_UART_IRQHandler+0x4ea>
 800b852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d003      	beq.n	800b866 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 f959 	bl	800bb16 <UART_Transmit_IT>
    return;
 800b864:	e014      	b.n	800b890 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b86a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00e      	beq.n	800b890 <HAL_UART_IRQHandler+0x514>
 800b872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d008      	beq.n	800b890 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 f999 	bl	800bbb6 <UART_EndTransmit_IT>
    return;
 800b884:	e004      	b.n	800b890 <HAL_UART_IRQHandler+0x514>
    return;
 800b886:	bf00      	nop
 800b888:	e002      	b.n	800b890 <HAL_UART_IRQHandler+0x514>
      return;
 800b88a:	bf00      	nop
 800b88c:	e000      	b.n	800b890 <HAL_UART_IRQHandler+0x514>
      return;
 800b88e:	bf00      	nop
  }
}
 800b890:	37e8      	adds	r7, #232	@ 0xe8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop

0800b898 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b8cc:	bf00      	nop
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b090      	sub	sp, #64	@ 0x40
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8e8:	e050      	b.n	800b98c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f0:	d04c      	beq.n	800b98c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b8f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d007      	beq.n	800b908 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8f8:	f7fa fe0a 	bl	8006510 <HAL_GetTick>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b904:	429a      	cmp	r2, r3
 800b906:	d241      	bcs.n	800b98c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	330c      	adds	r3, #12
 800b90e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b912:	e853 3f00 	ldrex	r3, [r3]
 800b916:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b91a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	330c      	adds	r3, #12
 800b926:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b928:	637a      	str	r2, [r7, #52]	@ 0x34
 800b92a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b92e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b930:	e841 2300 	strex	r3, r2, [r1]
 800b934:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1e5      	bne.n	800b908 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3314      	adds	r3, #20
 800b942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	613b      	str	r3, [r7, #16]
   return(result);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f023 0301 	bic.w	r3, r3, #1
 800b952:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	3314      	adds	r3, #20
 800b95a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b95c:	623a      	str	r2, [r7, #32]
 800b95e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	69f9      	ldr	r1, [r7, #28]
 800b962:	6a3a      	ldr	r2, [r7, #32]
 800b964:	e841 2300 	strex	r3, r2, [r1]
 800b968:	61bb      	str	r3, [r7, #24]
   return(result);
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e5      	bne.n	800b93c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2220      	movs	r2, #32
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800b988:	2303      	movs	r3, #3
 800b98a:	e00f      	b.n	800b9ac <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	4013      	ands	r3, r2
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	429a      	cmp	r2, r3
 800b99a:	bf0c      	ite	eq
 800b99c:	2301      	moveq	r3, #1
 800b99e:	2300      	movne	r3, #0
 800b9a0:	b2db      	uxtb	r3, r3
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d09f      	beq.n	800b8ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3740      	adds	r7, #64	@ 0x40
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	88fa      	ldrh	r2, [r7, #6]
 800b9cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	88fa      	ldrh	r2, [r7, #6]
 800b9d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2222      	movs	r2, #34	@ 0x22
 800b9de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68da      	ldr	r2, [r3, #12]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b9f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	695a      	ldr	r2, [r3, #20]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f042 0201 	orr.w	r2, r2, #1
 800ba08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f042 0220 	orr.w	r2, r2, #32
 800ba18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b095      	sub	sp, #84	@ 0x54
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	330c      	adds	r3, #12
 800ba36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3a:	e853 3f00 	ldrex	r3, [r3]
 800ba3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	330c      	adds	r3, #12
 800ba4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba50:	643a      	str	r2, [r7, #64]	@ 0x40
 800ba52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba58:	e841 2300 	strex	r3, r2, [r1]
 800ba5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d1e5      	bne.n	800ba30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	3314      	adds	r3, #20
 800ba6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	e853 3f00 	ldrex	r3, [r3]
 800ba72:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	f023 0301 	bic.w	r3, r3, #1
 800ba7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3314      	adds	r3, #20
 800ba82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba8c:	e841 2300 	strex	r3, r2, [r1]
 800ba90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1e5      	bne.n	800ba64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d119      	bne.n	800bad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	330c      	adds	r3, #12
 800baa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	e853 3f00 	ldrex	r3, [r3]
 800baae:	60bb      	str	r3, [r7, #8]
   return(result);
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	f023 0310 	bic.w	r3, r3, #16
 800bab6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	330c      	adds	r3, #12
 800babe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bac0:	61ba      	str	r2, [r7, #24]
 800bac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac4:	6979      	ldr	r1, [r7, #20]
 800bac6:	69ba      	ldr	r2, [r7, #24]
 800bac8:	e841 2300 	strex	r3, r2, [r1]
 800bacc:	613b      	str	r3, [r7, #16]
   return(result);
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d1e5      	bne.n	800baa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2220      	movs	r2, #32
 800bad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bae2:	bf00      	nop
 800bae4:	3754      	adds	r7, #84	@ 0x54
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f7ff fecf 	bl	800b8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b21      	cmp	r3, #33	@ 0x21
 800bb28:	d13e      	bne.n	800bba8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb32:	d114      	bne.n	800bb5e <UART_Transmit_IT+0x48>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d110      	bne.n	800bb5e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	1c9a      	adds	r2, r3, #2
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	621a      	str	r2, [r3, #32]
 800bb5c:	e008      	b.n	800bb70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	1c59      	adds	r1, r3, #1
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	6211      	str	r1, [r2, #32]
 800bb68:	781a      	ldrb	r2, [r3, #0]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10f      	bne.n	800bba4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68da      	ldr	r2, [r3, #12]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	68da      	ldr	r2, [r3, #12]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bba2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	e000      	b.n	800bbaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bba8:	2302      	movs	r3, #2
  }
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b082      	sub	sp, #8
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68da      	ldr	r2, [r3, #12]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bbcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2220      	movs	r2, #32
 800bbd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7ff fe5e 	bl	800b898 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b08c      	sub	sp, #48	@ 0x30
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	2b22      	cmp	r3, #34	@ 0x22
 800bbf8:	f040 80ab 	bne.w	800bd52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc04:	d117      	bne.n	800bc36 <UART_Receive_IT+0x50>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d113      	bne.n	800bc36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc24:	b29a      	uxth	r2, r3
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc2e:	1c9a      	adds	r2, r3, #2
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	629a      	str	r2, [r3, #40]	@ 0x28
 800bc34:	e026      	b.n	800bc84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	689b      	ldr	r3, [r3, #8]
 800bc44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc48:	d007      	beq.n	800bc5a <UART_Receive_IT+0x74>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10a      	bne.n	800bc68 <UART_Receive_IT+0x82>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d106      	bne.n	800bc68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc64:	701a      	strb	r2, [r3, #0]
 800bc66:	e008      	b.n	800bc7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc74:	b2da      	uxtb	r2, r3
 800bc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	4619      	mov	r1, r3
 800bc92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d15a      	bne.n	800bd4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	68da      	ldr	r2, [r3, #12]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f022 0220 	bic.w	r2, r2, #32
 800bca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68da      	ldr	r2, [r3, #12]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bcb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	695a      	ldr	r2, [r3, #20]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f022 0201 	bic.w	r2, r2, #1
 800bcc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d135      	bne.n	800bd44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	330c      	adds	r3, #12
 800bce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	e853 3f00 	ldrex	r3, [r3]
 800bcec:	613b      	str	r3, [r7, #16]
   return(result);
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	f023 0310 	bic.w	r3, r3, #16
 800bcf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	330c      	adds	r3, #12
 800bcfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcfe:	623a      	str	r2, [r7, #32]
 800bd00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd02:	69f9      	ldr	r1, [r7, #28]
 800bd04:	6a3a      	ldr	r2, [r7, #32]
 800bd06:	e841 2300 	strex	r3, r2, [r1]
 800bd0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1e5      	bne.n	800bcde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0310 	and.w	r3, r3, #16
 800bd1c:	2b10      	cmp	r3, #16
 800bd1e:	d10a      	bne.n	800bd36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd20:	2300      	movs	r3, #0
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7ff fdbf 	bl	800b8c0 <HAL_UARTEx_RxEventCallback>
 800bd42:	e002      	b.n	800bd4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7fa fa3f 	bl	80061c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e002      	b.n	800bd54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	e000      	b.n	800bd54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bd52:	2302      	movs	r3, #2
  }
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3730      	adds	r7, #48	@ 0x30
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd60:	b0c0      	sub	sp, #256	@ 0x100
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd78:	68d9      	ldr	r1, [r3, #12]
 800bd7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	ea40 0301 	orr.w	r3, r0, r1
 800bd84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bd86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd8a:	689a      	ldr	r2, [r3, #8]
 800bd8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	431a      	orrs	r2, r3
 800bd94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bda8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800bdb4:	f021 010c 	bic.w	r1, r1, #12
 800bdb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800bdc2:	430b      	orrs	r3, r1
 800bdc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bdc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	695b      	ldr	r3, [r3, #20]
 800bdce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800bdd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdd6:	6999      	ldr	r1, [r3, #24]
 800bdd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	ea40 0301 	orr.w	r3, r0, r1
 800bde2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bde4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	4b8f      	ldr	r3, [pc, #572]	@ (800c028 <UART_SetConfig+0x2cc>)
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d005      	beq.n	800bdfc <UART_SetConfig+0xa0>
 800bdf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	4b8d      	ldr	r3, [pc, #564]	@ (800c02c <UART_SetConfig+0x2d0>)
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d104      	bne.n	800be06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bdfc:	f7fd fb0a 	bl	8009414 <HAL_RCC_GetPCLK2Freq>
 800be00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800be04:	e003      	b.n	800be0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800be06:	f7fd faf1 	bl	80093ec <HAL_RCC_GetPCLK1Freq>
 800be0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be12:	69db      	ldr	r3, [r3, #28]
 800be14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be18:	f040 810c 	bne.w	800c034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800be1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800be20:	2200      	movs	r2, #0
 800be22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800be26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800be2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800be2e:	4622      	mov	r2, r4
 800be30:	462b      	mov	r3, r5
 800be32:	1891      	adds	r1, r2, r2
 800be34:	65b9      	str	r1, [r7, #88]	@ 0x58
 800be36:	415b      	adcs	r3, r3
 800be38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800be3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800be3e:	4621      	mov	r1, r4
 800be40:	eb12 0801 	adds.w	r8, r2, r1
 800be44:	4629      	mov	r1, r5
 800be46:	eb43 0901 	adc.w	r9, r3, r1
 800be4a:	f04f 0200 	mov.w	r2, #0
 800be4e:	f04f 0300 	mov.w	r3, #0
 800be52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800be56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800be5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800be5e:	4690      	mov	r8, r2
 800be60:	4699      	mov	r9, r3
 800be62:	4623      	mov	r3, r4
 800be64:	eb18 0303 	adds.w	r3, r8, r3
 800be68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800be6c:	462b      	mov	r3, r5
 800be6e:	eb49 0303 	adc.w	r3, r9, r3
 800be72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800be76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	2200      	movs	r2, #0
 800be7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800be82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800be86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800be8a:	460b      	mov	r3, r1
 800be8c:	18db      	adds	r3, r3, r3
 800be8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800be90:	4613      	mov	r3, r2
 800be92:	eb42 0303 	adc.w	r3, r2, r3
 800be96:	657b      	str	r3, [r7, #84]	@ 0x54
 800be98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800be9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800bea0:	f7f4 fec2 	bl	8000c28 <__aeabi_uldivmod>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4b61      	ldr	r3, [pc, #388]	@ (800c030 <UART_SetConfig+0x2d4>)
 800beaa:	fba3 2302 	umull	r2, r3, r3, r2
 800beae:	095b      	lsrs	r3, r3, #5
 800beb0:	011c      	lsls	r4, r3, #4
 800beb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bebc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800bec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800bec4:	4642      	mov	r2, r8
 800bec6:	464b      	mov	r3, r9
 800bec8:	1891      	adds	r1, r2, r2
 800beca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800becc:	415b      	adcs	r3, r3
 800bece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800bed4:	4641      	mov	r1, r8
 800bed6:	eb12 0a01 	adds.w	sl, r2, r1
 800beda:	4649      	mov	r1, r9
 800bedc:	eb43 0b01 	adc.w	fp, r3, r1
 800bee0:	f04f 0200 	mov.w	r2, #0
 800bee4:	f04f 0300 	mov.w	r3, #0
 800bee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800beec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bef4:	4692      	mov	sl, r2
 800bef6:	469b      	mov	fp, r3
 800bef8:	4643      	mov	r3, r8
 800befa:	eb1a 0303 	adds.w	r3, sl, r3
 800befe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bf02:	464b      	mov	r3, r9
 800bf04:	eb4b 0303 	adc.w	r3, fp, r3
 800bf08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bf0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bf18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800bf1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bf20:	460b      	mov	r3, r1
 800bf22:	18db      	adds	r3, r3, r3
 800bf24:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf26:	4613      	mov	r3, r2
 800bf28:	eb42 0303 	adc.w	r3, r2, r3
 800bf2c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bf32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bf36:	f7f4 fe77 	bl	8000c28 <__aeabi_uldivmod>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4611      	mov	r1, r2
 800bf40:	4b3b      	ldr	r3, [pc, #236]	@ (800c030 <UART_SetConfig+0x2d4>)
 800bf42:	fba3 2301 	umull	r2, r3, r3, r1
 800bf46:	095b      	lsrs	r3, r3, #5
 800bf48:	2264      	movs	r2, #100	@ 0x64
 800bf4a:	fb02 f303 	mul.w	r3, r2, r3
 800bf4e:	1acb      	subs	r3, r1, r3
 800bf50:	00db      	lsls	r3, r3, #3
 800bf52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bf56:	4b36      	ldr	r3, [pc, #216]	@ (800c030 <UART_SetConfig+0x2d4>)
 800bf58:	fba3 2302 	umull	r2, r3, r3, r2
 800bf5c:	095b      	lsrs	r3, r3, #5
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bf64:	441c      	add	r4, r3
 800bf66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bf70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bf74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bf78:	4642      	mov	r2, r8
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	1891      	adds	r1, r2, r2
 800bf7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bf80:	415b      	adcs	r3, r3
 800bf82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bf88:	4641      	mov	r1, r8
 800bf8a:	1851      	adds	r1, r2, r1
 800bf8c:	6339      	str	r1, [r7, #48]	@ 0x30
 800bf8e:	4649      	mov	r1, r9
 800bf90:	414b      	adcs	r3, r1
 800bf92:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf94:	f04f 0200 	mov.w	r2, #0
 800bf98:	f04f 0300 	mov.w	r3, #0
 800bf9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bfa0:	4659      	mov	r1, fp
 800bfa2:	00cb      	lsls	r3, r1, #3
 800bfa4:	4651      	mov	r1, sl
 800bfa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bfaa:	4651      	mov	r1, sl
 800bfac:	00ca      	lsls	r2, r1, #3
 800bfae:	4610      	mov	r0, r2
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	189b      	adds	r3, r3, r2
 800bfb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bfbc:	464b      	mov	r3, r9
 800bfbe:	460a      	mov	r2, r1
 800bfc0:	eb42 0303 	adc.w	r3, r2, r3
 800bfc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bfc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bfd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bfd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bfdc:	460b      	mov	r3, r1
 800bfde:	18db      	adds	r3, r3, r3
 800bfe0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	eb42 0303 	adc.w	r3, r2, r3
 800bfe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bfea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bfee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bff2:	f7f4 fe19 	bl	8000c28 <__aeabi_uldivmod>
 800bff6:	4602      	mov	r2, r0
 800bff8:	460b      	mov	r3, r1
 800bffa:	4b0d      	ldr	r3, [pc, #52]	@ (800c030 <UART_SetConfig+0x2d4>)
 800bffc:	fba3 1302 	umull	r1, r3, r3, r2
 800c000:	095b      	lsrs	r3, r3, #5
 800c002:	2164      	movs	r1, #100	@ 0x64
 800c004:	fb01 f303 	mul.w	r3, r1, r3
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	3332      	adds	r3, #50	@ 0x32
 800c00e:	4a08      	ldr	r2, [pc, #32]	@ (800c030 <UART_SetConfig+0x2d4>)
 800c010:	fba2 2303 	umull	r2, r3, r2, r3
 800c014:	095b      	lsrs	r3, r3, #5
 800c016:	f003 0207 	and.w	r2, r3, #7
 800c01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4422      	add	r2, r4
 800c022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c024:	e106      	b.n	800c234 <UART_SetConfig+0x4d8>
 800c026:	bf00      	nop
 800c028:	40011000 	.word	0x40011000
 800c02c:	40011400 	.word	0x40011400
 800c030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c038:	2200      	movs	r2, #0
 800c03a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c03e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800c042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800c046:	4642      	mov	r2, r8
 800c048:	464b      	mov	r3, r9
 800c04a:	1891      	adds	r1, r2, r2
 800c04c:	6239      	str	r1, [r7, #32]
 800c04e:	415b      	adcs	r3, r3
 800c050:	627b      	str	r3, [r7, #36]	@ 0x24
 800c052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c056:	4641      	mov	r1, r8
 800c058:	1854      	adds	r4, r2, r1
 800c05a:	4649      	mov	r1, r9
 800c05c:	eb43 0501 	adc.w	r5, r3, r1
 800c060:	f04f 0200 	mov.w	r2, #0
 800c064:	f04f 0300 	mov.w	r3, #0
 800c068:	00eb      	lsls	r3, r5, #3
 800c06a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c06e:	00e2      	lsls	r2, r4, #3
 800c070:	4614      	mov	r4, r2
 800c072:	461d      	mov	r5, r3
 800c074:	4643      	mov	r3, r8
 800c076:	18e3      	adds	r3, r4, r3
 800c078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c07c:	464b      	mov	r3, r9
 800c07e:	eb45 0303 	adc.w	r3, r5, r3
 800c082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c092:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c096:	f04f 0200 	mov.w	r2, #0
 800c09a:	f04f 0300 	mov.w	r3, #0
 800c09e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	008b      	lsls	r3, r1, #2
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	008a      	lsls	r2, r1, #2
 800c0b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c0b4:	f7f4 fdb8 	bl	8000c28 <__aeabi_uldivmod>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4b60      	ldr	r3, [pc, #384]	@ (800c240 <UART_SetConfig+0x4e4>)
 800c0be:	fba3 2302 	umull	r2, r3, r3, r2
 800c0c2:	095b      	lsrs	r3, r3, #5
 800c0c4:	011c      	lsls	r4, r3, #4
 800c0c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c0d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c0d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800c0d8:	4642      	mov	r2, r8
 800c0da:	464b      	mov	r3, r9
 800c0dc:	1891      	adds	r1, r2, r2
 800c0de:	61b9      	str	r1, [r7, #24]
 800c0e0:	415b      	adcs	r3, r3
 800c0e2:	61fb      	str	r3, [r7, #28]
 800c0e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0e8:	4641      	mov	r1, r8
 800c0ea:	1851      	adds	r1, r2, r1
 800c0ec:	6139      	str	r1, [r7, #16]
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	414b      	adcs	r3, r1
 800c0f2:	617b      	str	r3, [r7, #20]
 800c0f4:	f04f 0200 	mov.w	r2, #0
 800c0f8:	f04f 0300 	mov.w	r3, #0
 800c0fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c100:	4659      	mov	r1, fp
 800c102:	00cb      	lsls	r3, r1, #3
 800c104:	4651      	mov	r1, sl
 800c106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c10a:	4651      	mov	r1, sl
 800c10c:	00ca      	lsls	r2, r1, #3
 800c10e:	4610      	mov	r0, r2
 800c110:	4619      	mov	r1, r3
 800c112:	4603      	mov	r3, r0
 800c114:	4642      	mov	r2, r8
 800c116:	189b      	adds	r3, r3, r2
 800c118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c11c:	464b      	mov	r3, r9
 800c11e:	460a      	mov	r2, r1
 800c120:	eb42 0303 	adc.w	r3, r2, r3
 800c124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	2200      	movs	r2, #0
 800c130:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c132:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c134:	f04f 0200 	mov.w	r2, #0
 800c138:	f04f 0300 	mov.w	r3, #0
 800c13c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c140:	4649      	mov	r1, r9
 800c142:	008b      	lsls	r3, r1, #2
 800c144:	4641      	mov	r1, r8
 800c146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c14a:	4641      	mov	r1, r8
 800c14c:	008a      	lsls	r2, r1, #2
 800c14e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c152:	f7f4 fd69 	bl	8000c28 <__aeabi_uldivmod>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4611      	mov	r1, r2
 800c15c:	4b38      	ldr	r3, [pc, #224]	@ (800c240 <UART_SetConfig+0x4e4>)
 800c15e:	fba3 2301 	umull	r2, r3, r3, r1
 800c162:	095b      	lsrs	r3, r3, #5
 800c164:	2264      	movs	r2, #100	@ 0x64
 800c166:	fb02 f303 	mul.w	r3, r2, r3
 800c16a:	1acb      	subs	r3, r1, r3
 800c16c:	011b      	lsls	r3, r3, #4
 800c16e:	3332      	adds	r3, #50	@ 0x32
 800c170:	4a33      	ldr	r2, [pc, #204]	@ (800c240 <UART_SetConfig+0x4e4>)
 800c172:	fba2 2303 	umull	r2, r3, r2, r3
 800c176:	095b      	lsrs	r3, r3, #5
 800c178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c17c:	441c      	add	r4, r3
 800c17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c182:	2200      	movs	r2, #0
 800c184:	673b      	str	r3, [r7, #112]	@ 0x70
 800c186:	677a      	str	r2, [r7, #116]	@ 0x74
 800c188:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800c18c:	4642      	mov	r2, r8
 800c18e:	464b      	mov	r3, r9
 800c190:	1891      	adds	r1, r2, r2
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	415b      	adcs	r3, r3
 800c196:	60fb      	str	r3, [r7, #12]
 800c198:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c19c:	4641      	mov	r1, r8
 800c19e:	1851      	adds	r1, r2, r1
 800c1a0:	6039      	str	r1, [r7, #0]
 800c1a2:	4649      	mov	r1, r9
 800c1a4:	414b      	adcs	r3, r1
 800c1a6:	607b      	str	r3, [r7, #4]
 800c1a8:	f04f 0200 	mov.w	r2, #0
 800c1ac:	f04f 0300 	mov.w	r3, #0
 800c1b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c1b4:	4659      	mov	r1, fp
 800c1b6:	00cb      	lsls	r3, r1, #3
 800c1b8:	4651      	mov	r1, sl
 800c1ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1be:	4651      	mov	r1, sl
 800c1c0:	00ca      	lsls	r2, r1, #3
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	189b      	adds	r3, r3, r2
 800c1cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1ce:	464b      	mov	r3, r9
 800c1d0:	460a      	mov	r2, r1
 800c1d2:	eb42 0303 	adc.w	r3, r2, r3
 800c1d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c1e2:	667a      	str	r2, [r7, #100]	@ 0x64
 800c1e4:	f04f 0200 	mov.w	r2, #0
 800c1e8:	f04f 0300 	mov.w	r3, #0
 800c1ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800c1f0:	4649      	mov	r1, r9
 800c1f2:	008b      	lsls	r3, r1, #2
 800c1f4:	4641      	mov	r1, r8
 800c1f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c1fa:	4641      	mov	r1, r8
 800c1fc:	008a      	lsls	r2, r1, #2
 800c1fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800c202:	f7f4 fd11 	bl	8000c28 <__aeabi_uldivmod>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4b0d      	ldr	r3, [pc, #52]	@ (800c240 <UART_SetConfig+0x4e4>)
 800c20c:	fba3 1302 	umull	r1, r3, r3, r2
 800c210:	095b      	lsrs	r3, r3, #5
 800c212:	2164      	movs	r1, #100	@ 0x64
 800c214:	fb01 f303 	mul.w	r3, r1, r3
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	011b      	lsls	r3, r3, #4
 800c21c:	3332      	adds	r3, #50	@ 0x32
 800c21e:	4a08      	ldr	r2, [pc, #32]	@ (800c240 <UART_SetConfig+0x4e4>)
 800c220:	fba2 2303 	umull	r2, r3, r2, r3
 800c224:	095b      	lsrs	r3, r3, #5
 800c226:	f003 020f 	and.w	r2, r3, #15
 800c22a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4422      	add	r2, r4
 800c232:	609a      	str	r2, [r3, #8]
}
 800c234:	bf00      	nop
 800c236:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c23a:	46bd      	mov	sp, r7
 800c23c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c240:	51eb851f 	.word	0x51eb851f

0800c244 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c24e:	2300      	movs	r3, #0
 800c250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	4b20      	ldr	r3, [pc, #128]	@ (800c2e4 <FSMC_NORSRAM_Init+0xa0>)
 800c262:	4013      	ands	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c26e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c274:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c27a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c280:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800c286:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800c28c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c292:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800c298:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 800c29e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 800c2a4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800c2aa:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 800c2b0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c2b2:	68fa      	ldr	r2, [r7, #12]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	2b08      	cmp	r3, #8
 800c2be:	d103      	bne.n	800c2c8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68f9      	ldr	r1, [r7, #12]
 800c2d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	fff00080 	.word	0xfff00080

0800c2e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b087      	sub	sp, #28
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c302:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c30a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c316:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c31e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c326:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	3b01      	subs	r3, #1
 800c32e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c330:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	3b02      	subs	r3, #2
 800c338:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c33a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c340:	4313      	orrs	r3, r2
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	4313      	orrs	r3, r2
 800c346:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	1c5a      	adds	r2, r3, #1
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6979      	ldr	r1, [r7, #20]
 800c350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	371c      	adds	r7, #28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
	...

0800c364 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c372:	2300      	movs	r3, #0
 800c374:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c37c:	d122      	bne.n	800c3c4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c386:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	4b15      	ldr	r3, [pc, #84]	@ (800c3e0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c39a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c3a2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c3aa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c3b0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	6979      	ldr	r1, [r7, #20]
 800c3be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c3c2:	e005      	b.n	800c3d0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c3cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c3d0:	2300      	movs	r3, #0
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	371c      	adds	r7, #28
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	cff00000 	.word	0xcff00000

0800c3e4 <malloc>:
 800c3e4:	4b02      	ldr	r3, [pc, #8]	@ (800c3f0 <malloc+0xc>)
 800c3e6:	4601      	mov	r1, r0
 800c3e8:	6818      	ldr	r0, [r3, #0]
 800c3ea:	f000 b825 	b.w	800c438 <_malloc_r>
 800c3ee:	bf00      	nop
 800c3f0:	20000088 	.word	0x20000088

0800c3f4 <sbrk_aligned>:
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	4e0f      	ldr	r6, [pc, #60]	@ (800c434 <sbrk_aligned+0x40>)
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	6831      	ldr	r1, [r6, #0]
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	b911      	cbnz	r1, 800c406 <sbrk_aligned+0x12>
 800c400:	f000 fa46 	bl	800c890 <_sbrk_r>
 800c404:	6030      	str	r0, [r6, #0]
 800c406:	4621      	mov	r1, r4
 800c408:	4628      	mov	r0, r5
 800c40a:	f000 fa41 	bl	800c890 <_sbrk_r>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d103      	bne.n	800c41a <sbrk_aligned+0x26>
 800c412:	f04f 34ff 	mov.w	r4, #4294967295
 800c416:	4620      	mov	r0, r4
 800c418:	bd70      	pop	{r4, r5, r6, pc}
 800c41a:	1cc4      	adds	r4, r0, #3
 800c41c:	f024 0403 	bic.w	r4, r4, #3
 800c420:	42a0      	cmp	r0, r4
 800c422:	d0f8      	beq.n	800c416 <sbrk_aligned+0x22>
 800c424:	1a21      	subs	r1, r4, r0
 800c426:	4628      	mov	r0, r5
 800c428:	f000 fa32 	bl	800c890 <_sbrk_r>
 800c42c:	3001      	adds	r0, #1
 800c42e:	d1f2      	bne.n	800c416 <sbrk_aligned+0x22>
 800c430:	e7ef      	b.n	800c412 <sbrk_aligned+0x1e>
 800c432:	bf00      	nop
 800c434:	20000e6c 	.word	0x20000e6c

0800c438 <_malloc_r>:
 800c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c43c:	1ccd      	adds	r5, r1, #3
 800c43e:	f025 0503 	bic.w	r5, r5, #3
 800c442:	3508      	adds	r5, #8
 800c444:	2d0c      	cmp	r5, #12
 800c446:	bf38      	it	cc
 800c448:	250c      	movcc	r5, #12
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	4606      	mov	r6, r0
 800c44e:	db01      	blt.n	800c454 <_malloc_r+0x1c>
 800c450:	42a9      	cmp	r1, r5
 800c452:	d904      	bls.n	800c45e <_malloc_r+0x26>
 800c454:	230c      	movs	r3, #12
 800c456:	6033      	str	r3, [r6, #0]
 800c458:	2000      	movs	r0, #0
 800c45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c534 <_malloc_r+0xfc>
 800c462:	f000 f869 	bl	800c538 <__malloc_lock>
 800c466:	f8d8 3000 	ldr.w	r3, [r8]
 800c46a:	461c      	mov	r4, r3
 800c46c:	bb44      	cbnz	r4, 800c4c0 <_malloc_r+0x88>
 800c46e:	4629      	mov	r1, r5
 800c470:	4630      	mov	r0, r6
 800c472:	f7ff ffbf 	bl	800c3f4 <sbrk_aligned>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	4604      	mov	r4, r0
 800c47a:	d158      	bne.n	800c52e <_malloc_r+0xf6>
 800c47c:	f8d8 4000 	ldr.w	r4, [r8]
 800c480:	4627      	mov	r7, r4
 800c482:	2f00      	cmp	r7, #0
 800c484:	d143      	bne.n	800c50e <_malloc_r+0xd6>
 800c486:	2c00      	cmp	r4, #0
 800c488:	d04b      	beq.n	800c522 <_malloc_r+0xea>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	4639      	mov	r1, r7
 800c48e:	4630      	mov	r0, r6
 800c490:	eb04 0903 	add.w	r9, r4, r3
 800c494:	f000 f9fc 	bl	800c890 <_sbrk_r>
 800c498:	4581      	cmp	r9, r0
 800c49a:	d142      	bne.n	800c522 <_malloc_r+0xea>
 800c49c:	6821      	ldr	r1, [r4, #0]
 800c49e:	1a6d      	subs	r5, r5, r1
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f7ff ffa6 	bl	800c3f4 <sbrk_aligned>
 800c4a8:	3001      	adds	r0, #1
 800c4aa:	d03a      	beq.n	800c522 <_malloc_r+0xea>
 800c4ac:	6823      	ldr	r3, [r4, #0]
 800c4ae:	442b      	add	r3, r5
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	bb62      	cbnz	r2, 800c514 <_malloc_r+0xdc>
 800c4ba:	f8c8 7000 	str.w	r7, [r8]
 800c4be:	e00f      	b.n	800c4e0 <_malloc_r+0xa8>
 800c4c0:	6822      	ldr	r2, [r4, #0]
 800c4c2:	1b52      	subs	r2, r2, r5
 800c4c4:	d420      	bmi.n	800c508 <_malloc_r+0xd0>
 800c4c6:	2a0b      	cmp	r2, #11
 800c4c8:	d917      	bls.n	800c4fa <_malloc_r+0xc2>
 800c4ca:	1961      	adds	r1, r4, r5
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	6025      	str	r5, [r4, #0]
 800c4d0:	bf18      	it	ne
 800c4d2:	6059      	strne	r1, [r3, #4]
 800c4d4:	6863      	ldr	r3, [r4, #4]
 800c4d6:	bf08      	it	eq
 800c4d8:	f8c8 1000 	streq.w	r1, [r8]
 800c4dc:	5162      	str	r2, [r4, r5]
 800c4de:	604b      	str	r3, [r1, #4]
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f000 f82f 	bl	800c544 <__malloc_unlock>
 800c4e6:	f104 000b 	add.w	r0, r4, #11
 800c4ea:	1d23      	adds	r3, r4, #4
 800c4ec:	f020 0007 	bic.w	r0, r0, #7
 800c4f0:	1ac2      	subs	r2, r0, r3
 800c4f2:	bf1c      	itt	ne
 800c4f4:	1a1b      	subne	r3, r3, r0
 800c4f6:	50a3      	strne	r3, [r4, r2]
 800c4f8:	e7af      	b.n	800c45a <_malloc_r+0x22>
 800c4fa:	6862      	ldr	r2, [r4, #4]
 800c4fc:	42a3      	cmp	r3, r4
 800c4fe:	bf0c      	ite	eq
 800c500:	f8c8 2000 	streq.w	r2, [r8]
 800c504:	605a      	strne	r2, [r3, #4]
 800c506:	e7eb      	b.n	800c4e0 <_malloc_r+0xa8>
 800c508:	4623      	mov	r3, r4
 800c50a:	6864      	ldr	r4, [r4, #4]
 800c50c:	e7ae      	b.n	800c46c <_malloc_r+0x34>
 800c50e:	463c      	mov	r4, r7
 800c510:	687f      	ldr	r7, [r7, #4]
 800c512:	e7b6      	b.n	800c482 <_malloc_r+0x4a>
 800c514:	461a      	mov	r2, r3
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	42a3      	cmp	r3, r4
 800c51a:	d1fb      	bne.n	800c514 <_malloc_r+0xdc>
 800c51c:	2300      	movs	r3, #0
 800c51e:	6053      	str	r3, [r2, #4]
 800c520:	e7de      	b.n	800c4e0 <_malloc_r+0xa8>
 800c522:	230c      	movs	r3, #12
 800c524:	6033      	str	r3, [r6, #0]
 800c526:	4630      	mov	r0, r6
 800c528:	f000 f80c 	bl	800c544 <__malloc_unlock>
 800c52c:	e794      	b.n	800c458 <_malloc_r+0x20>
 800c52e:	6005      	str	r5, [r0, #0]
 800c530:	e7d6      	b.n	800c4e0 <_malloc_r+0xa8>
 800c532:	bf00      	nop
 800c534:	20000e70 	.word	0x20000e70

0800c538 <__malloc_lock>:
 800c538:	4801      	ldr	r0, [pc, #4]	@ (800c540 <__malloc_lock+0x8>)
 800c53a:	f000 b9f6 	b.w	800c92a <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	20000fb4 	.word	0x20000fb4

0800c544 <__malloc_unlock>:
 800c544:	4801      	ldr	r0, [pc, #4]	@ (800c54c <__malloc_unlock+0x8>)
 800c546:	f000 b9f1 	b.w	800c92c <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	20000fb4 	.word	0x20000fb4

0800c550 <rand>:
 800c550:	4b16      	ldr	r3, [pc, #88]	@ (800c5ac <rand+0x5c>)
 800c552:	b510      	push	{r4, lr}
 800c554:	681c      	ldr	r4, [r3, #0]
 800c556:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c558:	b9b3      	cbnz	r3, 800c588 <rand+0x38>
 800c55a:	2018      	movs	r0, #24
 800c55c:	f7ff ff42 	bl	800c3e4 <malloc>
 800c560:	4602      	mov	r2, r0
 800c562:	6320      	str	r0, [r4, #48]	@ 0x30
 800c564:	b920      	cbnz	r0, 800c570 <rand+0x20>
 800c566:	4b12      	ldr	r3, [pc, #72]	@ (800c5b0 <rand+0x60>)
 800c568:	4812      	ldr	r0, [pc, #72]	@ (800c5b4 <rand+0x64>)
 800c56a:	2152      	movs	r1, #82	@ 0x52
 800c56c:	f000 f9e0 	bl	800c930 <__assert_func>
 800c570:	4911      	ldr	r1, [pc, #68]	@ (800c5b8 <rand+0x68>)
 800c572:	4b12      	ldr	r3, [pc, #72]	@ (800c5bc <rand+0x6c>)
 800c574:	e9c0 1300 	strd	r1, r3, [r0]
 800c578:	4b11      	ldr	r3, [pc, #68]	@ (800c5c0 <rand+0x70>)
 800c57a:	6083      	str	r3, [r0, #8]
 800c57c:	230b      	movs	r3, #11
 800c57e:	8183      	strh	r3, [r0, #12]
 800c580:	2100      	movs	r1, #0
 800c582:	2001      	movs	r0, #1
 800c584:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c588:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c58a:	480e      	ldr	r0, [pc, #56]	@ (800c5c4 <rand+0x74>)
 800c58c:	690b      	ldr	r3, [r1, #16]
 800c58e:	694c      	ldr	r4, [r1, #20]
 800c590:	4a0d      	ldr	r2, [pc, #52]	@ (800c5c8 <rand+0x78>)
 800c592:	4358      	muls	r0, r3
 800c594:	fb02 0004 	mla	r0, r2, r4, r0
 800c598:	fba3 3202 	umull	r3, r2, r3, r2
 800c59c:	3301      	adds	r3, #1
 800c59e:	eb40 0002 	adc.w	r0, r0, r2
 800c5a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c5a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c5aa:	bd10      	pop	{r4, pc}
 800c5ac:	20000088 	.word	0x20000088
 800c5b0:	08010d04 	.word	0x08010d04
 800c5b4:	08010d1b 	.word	0x08010d1b
 800c5b8:	abcd330e 	.word	0xabcd330e
 800c5bc:	e66d1234 	.word	0xe66d1234
 800c5c0:	0005deec 	.word	0x0005deec
 800c5c4:	5851f42d 	.word	0x5851f42d
 800c5c8:	4c957f2d 	.word	0x4c957f2d

0800c5cc <std>:
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	b510      	push	{r4, lr}
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c5d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5da:	6083      	str	r3, [r0, #8]
 800c5dc:	8181      	strh	r1, [r0, #12]
 800c5de:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5e0:	81c2      	strh	r2, [r0, #14]
 800c5e2:	6183      	str	r3, [r0, #24]
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	2208      	movs	r2, #8
 800c5e8:	305c      	adds	r0, #92	@ 0x5c
 800c5ea:	f000 f914 	bl	800c816 <memset>
 800c5ee:	4b0d      	ldr	r3, [pc, #52]	@ (800c624 <std+0x58>)
 800c5f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c628 <std+0x5c>)
 800c5f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c62c <std+0x60>)
 800c5f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c630 <std+0x64>)
 800c5fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c634 <std+0x68>)
 800c600:	6224      	str	r4, [r4, #32]
 800c602:	429c      	cmp	r4, r3
 800c604:	d006      	beq.n	800c614 <std+0x48>
 800c606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c60a:	4294      	cmp	r4, r2
 800c60c:	d002      	beq.n	800c614 <std+0x48>
 800c60e:	33d0      	adds	r3, #208	@ 0xd0
 800c610:	429c      	cmp	r4, r3
 800c612:	d105      	bne.n	800c620 <std+0x54>
 800c614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c61c:	f000 b984 	b.w	800c928 <__retarget_lock_init_recursive>
 800c620:	bd10      	pop	{r4, pc}
 800c622:	bf00      	nop
 800c624:	0800c791 	.word	0x0800c791
 800c628:	0800c7b3 	.word	0x0800c7b3
 800c62c:	0800c7eb 	.word	0x0800c7eb
 800c630:	0800c80f 	.word	0x0800c80f
 800c634:	20000e74 	.word	0x20000e74

0800c638 <stdio_exit_handler>:
 800c638:	4a02      	ldr	r2, [pc, #8]	@ (800c644 <stdio_exit_handler+0xc>)
 800c63a:	4903      	ldr	r1, [pc, #12]	@ (800c648 <stdio_exit_handler+0x10>)
 800c63c:	4803      	ldr	r0, [pc, #12]	@ (800c64c <stdio_exit_handler+0x14>)
 800c63e:	f000 b869 	b.w	800c714 <_fwalk_sglue>
 800c642:	bf00      	nop
 800c644:	2000007c 	.word	0x2000007c
 800c648:	0800d0d5 	.word	0x0800d0d5
 800c64c:	2000008c 	.word	0x2000008c

0800c650 <cleanup_stdio>:
 800c650:	6841      	ldr	r1, [r0, #4]
 800c652:	4b0c      	ldr	r3, [pc, #48]	@ (800c684 <cleanup_stdio+0x34>)
 800c654:	4299      	cmp	r1, r3
 800c656:	b510      	push	{r4, lr}
 800c658:	4604      	mov	r4, r0
 800c65a:	d001      	beq.n	800c660 <cleanup_stdio+0x10>
 800c65c:	f000 fd3a 	bl	800d0d4 <_fflush_r>
 800c660:	68a1      	ldr	r1, [r4, #8]
 800c662:	4b09      	ldr	r3, [pc, #36]	@ (800c688 <cleanup_stdio+0x38>)
 800c664:	4299      	cmp	r1, r3
 800c666:	d002      	beq.n	800c66e <cleanup_stdio+0x1e>
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 fd33 	bl	800d0d4 <_fflush_r>
 800c66e:	68e1      	ldr	r1, [r4, #12]
 800c670:	4b06      	ldr	r3, [pc, #24]	@ (800c68c <cleanup_stdio+0x3c>)
 800c672:	4299      	cmp	r1, r3
 800c674:	d004      	beq.n	800c680 <cleanup_stdio+0x30>
 800c676:	4620      	mov	r0, r4
 800c678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c67c:	f000 bd2a 	b.w	800d0d4 <_fflush_r>
 800c680:	bd10      	pop	{r4, pc}
 800c682:	bf00      	nop
 800c684:	20000e74 	.word	0x20000e74
 800c688:	20000edc 	.word	0x20000edc
 800c68c:	20000f44 	.word	0x20000f44

0800c690 <global_stdio_init.part.0>:
 800c690:	b510      	push	{r4, lr}
 800c692:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c0 <global_stdio_init.part.0+0x30>)
 800c694:	4c0b      	ldr	r4, [pc, #44]	@ (800c6c4 <global_stdio_init.part.0+0x34>)
 800c696:	4a0c      	ldr	r2, [pc, #48]	@ (800c6c8 <global_stdio_init.part.0+0x38>)
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	4620      	mov	r0, r4
 800c69c:	2200      	movs	r2, #0
 800c69e:	2104      	movs	r1, #4
 800c6a0:	f7ff ff94 	bl	800c5cc <std>
 800c6a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	2109      	movs	r1, #9
 800c6ac:	f7ff ff8e 	bl	800c5cc <std>
 800c6b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6b4:	2202      	movs	r2, #2
 800c6b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6ba:	2112      	movs	r1, #18
 800c6bc:	f7ff bf86 	b.w	800c5cc <std>
 800c6c0:	20000fac 	.word	0x20000fac
 800c6c4:	20000e74 	.word	0x20000e74
 800c6c8:	0800c639 	.word	0x0800c639

0800c6cc <__sfp_lock_acquire>:
 800c6cc:	4801      	ldr	r0, [pc, #4]	@ (800c6d4 <__sfp_lock_acquire+0x8>)
 800c6ce:	f000 b92c 	b.w	800c92a <__retarget_lock_acquire_recursive>
 800c6d2:	bf00      	nop
 800c6d4:	20000fb5 	.word	0x20000fb5

0800c6d8 <__sfp_lock_release>:
 800c6d8:	4801      	ldr	r0, [pc, #4]	@ (800c6e0 <__sfp_lock_release+0x8>)
 800c6da:	f000 b927 	b.w	800c92c <__retarget_lock_release_recursive>
 800c6de:	bf00      	nop
 800c6e0:	20000fb5 	.word	0x20000fb5

0800c6e4 <__sinit>:
 800c6e4:	b510      	push	{r4, lr}
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	f7ff fff0 	bl	800c6cc <__sfp_lock_acquire>
 800c6ec:	6a23      	ldr	r3, [r4, #32]
 800c6ee:	b11b      	cbz	r3, 800c6f8 <__sinit+0x14>
 800c6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6f4:	f7ff bff0 	b.w	800c6d8 <__sfp_lock_release>
 800c6f8:	4b04      	ldr	r3, [pc, #16]	@ (800c70c <__sinit+0x28>)
 800c6fa:	6223      	str	r3, [r4, #32]
 800c6fc:	4b04      	ldr	r3, [pc, #16]	@ (800c710 <__sinit+0x2c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d1f5      	bne.n	800c6f0 <__sinit+0xc>
 800c704:	f7ff ffc4 	bl	800c690 <global_stdio_init.part.0>
 800c708:	e7f2      	b.n	800c6f0 <__sinit+0xc>
 800c70a:	bf00      	nop
 800c70c:	0800c651 	.word	0x0800c651
 800c710:	20000fac 	.word	0x20000fac

0800c714 <_fwalk_sglue>:
 800c714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c718:	4607      	mov	r7, r0
 800c71a:	4688      	mov	r8, r1
 800c71c:	4614      	mov	r4, r2
 800c71e:	2600      	movs	r6, #0
 800c720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c724:	f1b9 0901 	subs.w	r9, r9, #1
 800c728:	d505      	bpl.n	800c736 <_fwalk_sglue+0x22>
 800c72a:	6824      	ldr	r4, [r4, #0]
 800c72c:	2c00      	cmp	r4, #0
 800c72e:	d1f7      	bne.n	800c720 <_fwalk_sglue+0xc>
 800c730:	4630      	mov	r0, r6
 800c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c736:	89ab      	ldrh	r3, [r5, #12]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d907      	bls.n	800c74c <_fwalk_sglue+0x38>
 800c73c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c740:	3301      	adds	r3, #1
 800c742:	d003      	beq.n	800c74c <_fwalk_sglue+0x38>
 800c744:	4629      	mov	r1, r5
 800c746:	4638      	mov	r0, r7
 800c748:	47c0      	blx	r8
 800c74a:	4306      	orrs	r6, r0
 800c74c:	3568      	adds	r5, #104	@ 0x68
 800c74e:	e7e9      	b.n	800c724 <_fwalk_sglue+0x10>

0800c750 <siprintf>:
 800c750:	b40e      	push	{r1, r2, r3}
 800c752:	b500      	push	{lr}
 800c754:	b09c      	sub	sp, #112	@ 0x70
 800c756:	ab1d      	add	r3, sp, #116	@ 0x74
 800c758:	9002      	str	r0, [sp, #8]
 800c75a:	9006      	str	r0, [sp, #24]
 800c75c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c760:	4809      	ldr	r0, [pc, #36]	@ (800c788 <siprintf+0x38>)
 800c762:	9107      	str	r1, [sp, #28]
 800c764:	9104      	str	r1, [sp, #16]
 800c766:	4909      	ldr	r1, [pc, #36]	@ (800c78c <siprintf+0x3c>)
 800c768:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76c:	9105      	str	r1, [sp, #20]
 800c76e:	6800      	ldr	r0, [r0, #0]
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	a902      	add	r1, sp, #8
 800c774:	f000 f9a0 	bl	800cab8 <_svfiprintf_r>
 800c778:	9b02      	ldr	r3, [sp, #8]
 800c77a:	2200      	movs	r2, #0
 800c77c:	701a      	strb	r2, [r3, #0]
 800c77e:	b01c      	add	sp, #112	@ 0x70
 800c780:	f85d eb04 	ldr.w	lr, [sp], #4
 800c784:	b003      	add	sp, #12
 800c786:	4770      	bx	lr
 800c788:	20000088 	.word	0x20000088
 800c78c:	ffff0208 	.word	0xffff0208

0800c790 <__sread>:
 800c790:	b510      	push	{r4, lr}
 800c792:	460c      	mov	r4, r1
 800c794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c798:	f000 f868 	bl	800c86c <_read_r>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	bfab      	itete	ge
 800c7a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c7a4:	181b      	addge	r3, r3, r0
 800c7a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7aa:	bfac      	ite	ge
 800c7ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7ae:	81a3      	strhlt	r3, [r4, #12]
 800c7b0:	bd10      	pop	{r4, pc}

0800c7b2 <__swrite>:
 800c7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b6:	461f      	mov	r7, r3
 800c7b8:	898b      	ldrh	r3, [r1, #12]
 800c7ba:	05db      	lsls	r3, r3, #23
 800c7bc:	4605      	mov	r5, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	4616      	mov	r6, r2
 800c7c2:	d505      	bpl.n	800c7d0 <__swrite+0x1e>
 800c7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f000 f83c 	bl	800c848 <_lseek_r>
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7da:	81a3      	strh	r3, [r4, #12]
 800c7dc:	4632      	mov	r2, r6
 800c7de:	463b      	mov	r3, r7
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e6:	f000 b863 	b.w	800c8b0 <_write_r>

0800c7ea <__sseek>:
 800c7ea:	b510      	push	{r4, lr}
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f2:	f000 f829 	bl	800c848 <_lseek_r>
 800c7f6:	1c43      	adds	r3, r0, #1
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	bf15      	itete	ne
 800c7fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c802:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c806:	81a3      	strheq	r3, [r4, #12]
 800c808:	bf18      	it	ne
 800c80a:	81a3      	strhne	r3, [r4, #12]
 800c80c:	bd10      	pop	{r4, pc}

0800c80e <__sclose>:
 800c80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c812:	f000 b809 	b.w	800c828 <_close_r>

0800c816 <memset>:
 800c816:	4402      	add	r2, r0
 800c818:	4603      	mov	r3, r0
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d100      	bne.n	800c820 <memset+0xa>
 800c81e:	4770      	bx	lr
 800c820:	f803 1b01 	strb.w	r1, [r3], #1
 800c824:	e7f9      	b.n	800c81a <memset+0x4>
	...

0800c828 <_close_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d06      	ldr	r5, [pc, #24]	@ (800c844 <_close_r+0x1c>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	602b      	str	r3, [r5, #0]
 800c834:	f7f8 fafa 	bl	8004e2c <_close>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d102      	bne.n	800c842 <_close_r+0x1a>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	b103      	cbz	r3, 800c842 <_close_r+0x1a>
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	20000fb0 	.word	0x20000fb0

0800c848 <_lseek_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d07      	ldr	r5, [pc, #28]	@ (800c868 <_lseek_r+0x20>)
 800c84c:	4604      	mov	r4, r0
 800c84e:	4608      	mov	r0, r1
 800c850:	4611      	mov	r1, r2
 800c852:	2200      	movs	r2, #0
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	f7f8 fb0f 	bl	8004e7a <_lseek>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_lseek_r+0x1e>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_lseek_r+0x1e>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	20000fb0 	.word	0x20000fb0

0800c86c <_read_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d07      	ldr	r5, [pc, #28]	@ (800c88c <_read_r+0x20>)
 800c870:	4604      	mov	r4, r0
 800c872:	4608      	mov	r0, r1
 800c874:	4611      	mov	r1, r2
 800c876:	2200      	movs	r2, #0
 800c878:	602a      	str	r2, [r5, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	f7f8 fa9d 	bl	8004dba <_read>
 800c880:	1c43      	adds	r3, r0, #1
 800c882:	d102      	bne.n	800c88a <_read_r+0x1e>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	b103      	cbz	r3, 800c88a <_read_r+0x1e>
 800c888:	6023      	str	r3, [r4, #0]
 800c88a:	bd38      	pop	{r3, r4, r5, pc}
 800c88c:	20000fb0 	.word	0x20000fb0

0800c890 <_sbrk_r>:
 800c890:	b538      	push	{r3, r4, r5, lr}
 800c892:	4d06      	ldr	r5, [pc, #24]	@ (800c8ac <_sbrk_r+0x1c>)
 800c894:	2300      	movs	r3, #0
 800c896:	4604      	mov	r4, r0
 800c898:	4608      	mov	r0, r1
 800c89a:	602b      	str	r3, [r5, #0]
 800c89c:	f7f8 fafa 	bl	8004e94 <_sbrk>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_sbrk_r+0x1a>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_sbrk_r+0x1a>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	20000fb0 	.word	0x20000fb0

0800c8b0 <_write_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d07      	ldr	r5, [pc, #28]	@ (800c8d0 <_write_r+0x20>)
 800c8b4:	4604      	mov	r4, r0
 800c8b6:	4608      	mov	r0, r1
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	602a      	str	r2, [r5, #0]
 800c8be:	461a      	mov	r2, r3
 800c8c0:	f7f8 fa98 	bl	8004df4 <_write>
 800c8c4:	1c43      	adds	r3, r0, #1
 800c8c6:	d102      	bne.n	800c8ce <_write_r+0x1e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	b103      	cbz	r3, 800c8ce <_write_r+0x1e>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}
 800c8d0:	20000fb0 	.word	0x20000fb0

0800c8d4 <__errno>:
 800c8d4:	4b01      	ldr	r3, [pc, #4]	@ (800c8dc <__errno+0x8>)
 800c8d6:	6818      	ldr	r0, [r3, #0]
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	20000088 	.word	0x20000088

0800c8e0 <__libc_init_array>:
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	4d0d      	ldr	r5, [pc, #52]	@ (800c918 <__libc_init_array+0x38>)
 800c8e4:	4c0d      	ldr	r4, [pc, #52]	@ (800c91c <__libc_init_array+0x3c>)
 800c8e6:	1b64      	subs	r4, r4, r5
 800c8e8:	10a4      	asrs	r4, r4, #2
 800c8ea:	2600      	movs	r6, #0
 800c8ec:	42a6      	cmp	r6, r4
 800c8ee:	d109      	bne.n	800c904 <__libc_init_array+0x24>
 800c8f0:	4d0b      	ldr	r5, [pc, #44]	@ (800c920 <__libc_init_array+0x40>)
 800c8f2:	4c0c      	ldr	r4, [pc, #48]	@ (800c924 <__libc_init_array+0x44>)
 800c8f4:	f001 f830 	bl	800d958 <_init>
 800c8f8:	1b64      	subs	r4, r4, r5
 800c8fa:	10a4      	asrs	r4, r4, #2
 800c8fc:	2600      	movs	r6, #0
 800c8fe:	42a6      	cmp	r6, r4
 800c900:	d105      	bne.n	800c90e <__libc_init_array+0x2e>
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	f855 3b04 	ldr.w	r3, [r5], #4
 800c908:	4798      	blx	r3
 800c90a:	3601      	adds	r6, #1
 800c90c:	e7ee      	b.n	800c8ec <__libc_init_array+0xc>
 800c90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c912:	4798      	blx	r3
 800c914:	3601      	adds	r6, #1
 800c916:	e7f2      	b.n	800c8fe <__libc_init_array+0x1e>
 800c918:	08010dec 	.word	0x08010dec
 800c91c:	08010dec 	.word	0x08010dec
 800c920:	08010dec 	.word	0x08010dec
 800c924:	08010df0 	.word	0x08010df0

0800c928 <__retarget_lock_init_recursive>:
 800c928:	4770      	bx	lr

0800c92a <__retarget_lock_acquire_recursive>:
 800c92a:	4770      	bx	lr

0800c92c <__retarget_lock_release_recursive>:
 800c92c:	4770      	bx	lr
	...

0800c930 <__assert_func>:
 800c930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c932:	4614      	mov	r4, r2
 800c934:	461a      	mov	r2, r3
 800c936:	4b09      	ldr	r3, [pc, #36]	@ (800c95c <__assert_func+0x2c>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4605      	mov	r5, r0
 800c93c:	68d8      	ldr	r0, [r3, #12]
 800c93e:	b954      	cbnz	r4, 800c956 <__assert_func+0x26>
 800c940:	4b07      	ldr	r3, [pc, #28]	@ (800c960 <__assert_func+0x30>)
 800c942:	461c      	mov	r4, r3
 800c944:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c948:	9100      	str	r1, [sp, #0]
 800c94a:	462b      	mov	r3, r5
 800c94c:	4905      	ldr	r1, [pc, #20]	@ (800c964 <__assert_func+0x34>)
 800c94e:	f000 fbe9 	bl	800d124 <fiprintf>
 800c952:	f000 fc21 	bl	800d198 <abort>
 800c956:	4b04      	ldr	r3, [pc, #16]	@ (800c968 <__assert_func+0x38>)
 800c958:	e7f4      	b.n	800c944 <__assert_func+0x14>
 800c95a:	bf00      	nop
 800c95c:	20000088 	.word	0x20000088
 800c960:	08010dae 	.word	0x08010dae
 800c964:	08010d80 	.word	0x08010d80
 800c968:	08010d73 	.word	0x08010d73

0800c96c <_free_r>:
 800c96c:	b538      	push	{r3, r4, r5, lr}
 800c96e:	4605      	mov	r5, r0
 800c970:	2900      	cmp	r1, #0
 800c972:	d041      	beq.n	800c9f8 <_free_r+0x8c>
 800c974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c978:	1f0c      	subs	r4, r1, #4
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	bfb8      	it	lt
 800c97e:	18e4      	addlt	r4, r4, r3
 800c980:	f7ff fdda 	bl	800c538 <__malloc_lock>
 800c984:	4a1d      	ldr	r2, [pc, #116]	@ (800c9fc <_free_r+0x90>)
 800c986:	6813      	ldr	r3, [r2, #0]
 800c988:	b933      	cbnz	r3, 800c998 <_free_r+0x2c>
 800c98a:	6063      	str	r3, [r4, #4]
 800c98c:	6014      	str	r4, [r2, #0]
 800c98e:	4628      	mov	r0, r5
 800c990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c994:	f7ff bdd6 	b.w	800c544 <__malloc_unlock>
 800c998:	42a3      	cmp	r3, r4
 800c99a:	d908      	bls.n	800c9ae <_free_r+0x42>
 800c99c:	6820      	ldr	r0, [r4, #0]
 800c99e:	1821      	adds	r1, r4, r0
 800c9a0:	428b      	cmp	r3, r1
 800c9a2:	bf01      	itttt	eq
 800c9a4:	6819      	ldreq	r1, [r3, #0]
 800c9a6:	685b      	ldreq	r3, [r3, #4]
 800c9a8:	1809      	addeq	r1, r1, r0
 800c9aa:	6021      	streq	r1, [r4, #0]
 800c9ac:	e7ed      	b.n	800c98a <_free_r+0x1e>
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	b10b      	cbz	r3, 800c9b8 <_free_r+0x4c>
 800c9b4:	42a3      	cmp	r3, r4
 800c9b6:	d9fa      	bls.n	800c9ae <_free_r+0x42>
 800c9b8:	6811      	ldr	r1, [r2, #0]
 800c9ba:	1850      	adds	r0, r2, r1
 800c9bc:	42a0      	cmp	r0, r4
 800c9be:	d10b      	bne.n	800c9d8 <_free_r+0x6c>
 800c9c0:	6820      	ldr	r0, [r4, #0]
 800c9c2:	4401      	add	r1, r0
 800c9c4:	1850      	adds	r0, r2, r1
 800c9c6:	4283      	cmp	r3, r0
 800c9c8:	6011      	str	r1, [r2, #0]
 800c9ca:	d1e0      	bne.n	800c98e <_free_r+0x22>
 800c9cc:	6818      	ldr	r0, [r3, #0]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	6053      	str	r3, [r2, #4]
 800c9d2:	4408      	add	r0, r1
 800c9d4:	6010      	str	r0, [r2, #0]
 800c9d6:	e7da      	b.n	800c98e <_free_r+0x22>
 800c9d8:	d902      	bls.n	800c9e0 <_free_r+0x74>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	602b      	str	r3, [r5, #0]
 800c9de:	e7d6      	b.n	800c98e <_free_r+0x22>
 800c9e0:	6820      	ldr	r0, [r4, #0]
 800c9e2:	1821      	adds	r1, r4, r0
 800c9e4:	428b      	cmp	r3, r1
 800c9e6:	bf04      	itt	eq
 800c9e8:	6819      	ldreq	r1, [r3, #0]
 800c9ea:	685b      	ldreq	r3, [r3, #4]
 800c9ec:	6063      	str	r3, [r4, #4]
 800c9ee:	bf04      	itt	eq
 800c9f0:	1809      	addeq	r1, r1, r0
 800c9f2:	6021      	streq	r1, [r4, #0]
 800c9f4:	6054      	str	r4, [r2, #4]
 800c9f6:	e7ca      	b.n	800c98e <_free_r+0x22>
 800c9f8:	bd38      	pop	{r3, r4, r5, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20000e70 	.word	0x20000e70

0800ca00 <__ssputs_r>:
 800ca00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	688e      	ldr	r6, [r1, #8]
 800ca06:	461f      	mov	r7, r3
 800ca08:	42be      	cmp	r6, r7
 800ca0a:	680b      	ldr	r3, [r1, #0]
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	460c      	mov	r4, r1
 800ca10:	4690      	mov	r8, r2
 800ca12:	d82d      	bhi.n	800ca70 <__ssputs_r+0x70>
 800ca14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca1c:	d026      	beq.n	800ca6c <__ssputs_r+0x6c>
 800ca1e:	6965      	ldr	r5, [r4, #20]
 800ca20:	6909      	ldr	r1, [r1, #16]
 800ca22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca26:	eba3 0901 	sub.w	r9, r3, r1
 800ca2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca2e:	1c7b      	adds	r3, r7, #1
 800ca30:	444b      	add	r3, r9
 800ca32:	106d      	asrs	r5, r5, #1
 800ca34:	429d      	cmp	r5, r3
 800ca36:	bf38      	it	cc
 800ca38:	461d      	movcc	r5, r3
 800ca3a:	0553      	lsls	r3, r2, #21
 800ca3c:	d527      	bpl.n	800ca8e <__ssputs_r+0x8e>
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f7ff fcfa 	bl	800c438 <_malloc_r>
 800ca44:	4606      	mov	r6, r0
 800ca46:	b360      	cbz	r0, 800caa2 <__ssputs_r+0xa2>
 800ca48:	6921      	ldr	r1, [r4, #16]
 800ca4a:	464a      	mov	r2, r9
 800ca4c:	f000 fb96 	bl	800d17c <memcpy>
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca5a:	81a3      	strh	r3, [r4, #12]
 800ca5c:	6126      	str	r6, [r4, #16]
 800ca5e:	6165      	str	r5, [r4, #20]
 800ca60:	444e      	add	r6, r9
 800ca62:	eba5 0509 	sub.w	r5, r5, r9
 800ca66:	6026      	str	r6, [r4, #0]
 800ca68:	60a5      	str	r5, [r4, #8]
 800ca6a:	463e      	mov	r6, r7
 800ca6c:	42be      	cmp	r6, r7
 800ca6e:	d900      	bls.n	800ca72 <__ssputs_r+0x72>
 800ca70:	463e      	mov	r6, r7
 800ca72:	6820      	ldr	r0, [r4, #0]
 800ca74:	4632      	mov	r2, r6
 800ca76:	4641      	mov	r1, r8
 800ca78:	f000 fb66 	bl	800d148 <memmove>
 800ca7c:	68a3      	ldr	r3, [r4, #8]
 800ca7e:	1b9b      	subs	r3, r3, r6
 800ca80:	60a3      	str	r3, [r4, #8]
 800ca82:	6823      	ldr	r3, [r4, #0]
 800ca84:	4433      	add	r3, r6
 800ca86:	6023      	str	r3, [r4, #0]
 800ca88:	2000      	movs	r0, #0
 800ca8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca8e:	462a      	mov	r2, r5
 800ca90:	f000 fb89 	bl	800d1a6 <_realloc_r>
 800ca94:	4606      	mov	r6, r0
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d1e0      	bne.n	800ca5c <__ssputs_r+0x5c>
 800ca9a:	6921      	ldr	r1, [r4, #16]
 800ca9c:	4650      	mov	r0, sl
 800ca9e:	f7ff ff65 	bl	800c96c <_free_r>
 800caa2:	230c      	movs	r3, #12
 800caa4:	f8ca 3000 	str.w	r3, [sl]
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800caae:	81a3      	strh	r3, [r4, #12]
 800cab0:	f04f 30ff 	mov.w	r0, #4294967295
 800cab4:	e7e9      	b.n	800ca8a <__ssputs_r+0x8a>
	...

0800cab8 <_svfiprintf_r>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	4698      	mov	r8, r3
 800cabe:	898b      	ldrh	r3, [r1, #12]
 800cac0:	061b      	lsls	r3, r3, #24
 800cac2:	b09d      	sub	sp, #116	@ 0x74
 800cac4:	4607      	mov	r7, r0
 800cac6:	460d      	mov	r5, r1
 800cac8:	4614      	mov	r4, r2
 800caca:	d510      	bpl.n	800caee <_svfiprintf_r+0x36>
 800cacc:	690b      	ldr	r3, [r1, #16]
 800cace:	b973      	cbnz	r3, 800caee <_svfiprintf_r+0x36>
 800cad0:	2140      	movs	r1, #64	@ 0x40
 800cad2:	f7ff fcb1 	bl	800c438 <_malloc_r>
 800cad6:	6028      	str	r0, [r5, #0]
 800cad8:	6128      	str	r0, [r5, #16]
 800cada:	b930      	cbnz	r0, 800caea <_svfiprintf_r+0x32>
 800cadc:	230c      	movs	r3, #12
 800cade:	603b      	str	r3, [r7, #0]
 800cae0:	f04f 30ff 	mov.w	r0, #4294967295
 800cae4:	b01d      	add	sp, #116	@ 0x74
 800cae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caea:	2340      	movs	r3, #64	@ 0x40
 800caec:	616b      	str	r3, [r5, #20]
 800caee:	2300      	movs	r3, #0
 800caf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800caf2:	2320      	movs	r3, #32
 800caf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800caf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cafc:	2330      	movs	r3, #48	@ 0x30
 800cafe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cc9c <_svfiprintf_r+0x1e4>
 800cb02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb06:	f04f 0901 	mov.w	r9, #1
 800cb0a:	4623      	mov	r3, r4
 800cb0c:	469a      	mov	sl, r3
 800cb0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb12:	b10a      	cbz	r2, 800cb18 <_svfiprintf_r+0x60>
 800cb14:	2a25      	cmp	r2, #37	@ 0x25
 800cb16:	d1f9      	bne.n	800cb0c <_svfiprintf_r+0x54>
 800cb18:	ebba 0b04 	subs.w	fp, sl, r4
 800cb1c:	d00b      	beq.n	800cb36 <_svfiprintf_r+0x7e>
 800cb1e:	465b      	mov	r3, fp
 800cb20:	4622      	mov	r2, r4
 800cb22:	4629      	mov	r1, r5
 800cb24:	4638      	mov	r0, r7
 800cb26:	f7ff ff6b 	bl	800ca00 <__ssputs_r>
 800cb2a:	3001      	adds	r0, #1
 800cb2c:	f000 80a7 	beq.w	800cc7e <_svfiprintf_r+0x1c6>
 800cb30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb32:	445a      	add	r2, fp
 800cb34:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb36:	f89a 3000 	ldrb.w	r3, [sl]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	f000 809f 	beq.w	800cc7e <_svfiprintf_r+0x1c6>
 800cb40:	2300      	movs	r3, #0
 800cb42:	f04f 32ff 	mov.w	r2, #4294967295
 800cb46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb4a:	f10a 0a01 	add.w	sl, sl, #1
 800cb4e:	9304      	str	r3, [sp, #16]
 800cb50:	9307      	str	r3, [sp, #28]
 800cb52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb56:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb58:	4654      	mov	r4, sl
 800cb5a:	2205      	movs	r2, #5
 800cb5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb60:	484e      	ldr	r0, [pc, #312]	@ (800cc9c <_svfiprintf_r+0x1e4>)
 800cb62:	f7f3 fb35 	bl	80001d0 <memchr>
 800cb66:	9a04      	ldr	r2, [sp, #16]
 800cb68:	b9d8      	cbnz	r0, 800cba2 <_svfiprintf_r+0xea>
 800cb6a:	06d0      	lsls	r0, r2, #27
 800cb6c:	bf44      	itt	mi
 800cb6e:	2320      	movmi	r3, #32
 800cb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb74:	0711      	lsls	r1, r2, #28
 800cb76:	bf44      	itt	mi
 800cb78:	232b      	movmi	r3, #43	@ 0x2b
 800cb7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb82:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb84:	d015      	beq.n	800cbb2 <_svfiprintf_r+0xfa>
 800cb86:	9a07      	ldr	r2, [sp, #28]
 800cb88:	4654      	mov	r4, sl
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	f04f 0c0a 	mov.w	ip, #10
 800cb90:	4621      	mov	r1, r4
 800cb92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb96:	3b30      	subs	r3, #48	@ 0x30
 800cb98:	2b09      	cmp	r3, #9
 800cb9a:	d94b      	bls.n	800cc34 <_svfiprintf_r+0x17c>
 800cb9c:	b1b0      	cbz	r0, 800cbcc <_svfiprintf_r+0x114>
 800cb9e:	9207      	str	r2, [sp, #28]
 800cba0:	e014      	b.n	800cbcc <_svfiprintf_r+0x114>
 800cba2:	eba0 0308 	sub.w	r3, r0, r8
 800cba6:	fa09 f303 	lsl.w	r3, r9, r3
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	9304      	str	r3, [sp, #16]
 800cbae:	46a2      	mov	sl, r4
 800cbb0:	e7d2      	b.n	800cb58 <_svfiprintf_r+0xa0>
 800cbb2:	9b03      	ldr	r3, [sp, #12]
 800cbb4:	1d19      	adds	r1, r3, #4
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	9103      	str	r1, [sp, #12]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	bfbb      	ittet	lt
 800cbbe:	425b      	neglt	r3, r3
 800cbc0:	f042 0202 	orrlt.w	r2, r2, #2
 800cbc4:	9307      	strge	r3, [sp, #28]
 800cbc6:	9307      	strlt	r3, [sp, #28]
 800cbc8:	bfb8      	it	lt
 800cbca:	9204      	strlt	r2, [sp, #16]
 800cbcc:	7823      	ldrb	r3, [r4, #0]
 800cbce:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbd0:	d10a      	bne.n	800cbe8 <_svfiprintf_r+0x130>
 800cbd2:	7863      	ldrb	r3, [r4, #1]
 800cbd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbd6:	d132      	bne.n	800cc3e <_svfiprintf_r+0x186>
 800cbd8:	9b03      	ldr	r3, [sp, #12]
 800cbda:	1d1a      	adds	r2, r3, #4
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	9203      	str	r2, [sp, #12]
 800cbe0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbe4:	3402      	adds	r4, #2
 800cbe6:	9305      	str	r3, [sp, #20]
 800cbe8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ccac <_svfiprintf_r+0x1f4>
 800cbec:	7821      	ldrb	r1, [r4, #0]
 800cbee:	2203      	movs	r2, #3
 800cbf0:	4650      	mov	r0, sl
 800cbf2:	f7f3 faed 	bl	80001d0 <memchr>
 800cbf6:	b138      	cbz	r0, 800cc08 <_svfiprintf_r+0x150>
 800cbf8:	9b04      	ldr	r3, [sp, #16]
 800cbfa:	eba0 000a 	sub.w	r0, r0, sl
 800cbfe:	2240      	movs	r2, #64	@ 0x40
 800cc00:	4082      	lsls	r2, r0
 800cc02:	4313      	orrs	r3, r2
 800cc04:	3401      	adds	r4, #1
 800cc06:	9304      	str	r3, [sp, #16]
 800cc08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc0c:	4824      	ldr	r0, [pc, #144]	@ (800cca0 <_svfiprintf_r+0x1e8>)
 800cc0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc12:	2206      	movs	r2, #6
 800cc14:	f7f3 fadc 	bl	80001d0 <memchr>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d036      	beq.n	800cc8a <_svfiprintf_r+0x1d2>
 800cc1c:	4b21      	ldr	r3, [pc, #132]	@ (800cca4 <_svfiprintf_r+0x1ec>)
 800cc1e:	bb1b      	cbnz	r3, 800cc68 <_svfiprintf_r+0x1b0>
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	3307      	adds	r3, #7
 800cc24:	f023 0307 	bic.w	r3, r3, #7
 800cc28:	3308      	adds	r3, #8
 800cc2a:	9303      	str	r3, [sp, #12]
 800cc2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc2e:	4433      	add	r3, r6
 800cc30:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc32:	e76a      	b.n	800cb0a <_svfiprintf_r+0x52>
 800cc34:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc38:	460c      	mov	r4, r1
 800cc3a:	2001      	movs	r0, #1
 800cc3c:	e7a8      	b.n	800cb90 <_svfiprintf_r+0xd8>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	3401      	adds	r4, #1
 800cc42:	9305      	str	r3, [sp, #20]
 800cc44:	4619      	mov	r1, r3
 800cc46:	f04f 0c0a 	mov.w	ip, #10
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc50:	3a30      	subs	r2, #48	@ 0x30
 800cc52:	2a09      	cmp	r2, #9
 800cc54:	d903      	bls.n	800cc5e <_svfiprintf_r+0x1a6>
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0c6      	beq.n	800cbe8 <_svfiprintf_r+0x130>
 800cc5a:	9105      	str	r1, [sp, #20]
 800cc5c:	e7c4      	b.n	800cbe8 <_svfiprintf_r+0x130>
 800cc5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc62:	4604      	mov	r4, r0
 800cc64:	2301      	movs	r3, #1
 800cc66:	e7f0      	b.n	800cc4a <_svfiprintf_r+0x192>
 800cc68:	ab03      	add	r3, sp, #12
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	462a      	mov	r2, r5
 800cc6e:	4b0e      	ldr	r3, [pc, #56]	@ (800cca8 <_svfiprintf_r+0x1f0>)
 800cc70:	a904      	add	r1, sp, #16
 800cc72:	4638      	mov	r0, r7
 800cc74:	f3af 8000 	nop.w
 800cc78:	1c42      	adds	r2, r0, #1
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	d1d6      	bne.n	800cc2c <_svfiprintf_r+0x174>
 800cc7e:	89ab      	ldrh	r3, [r5, #12]
 800cc80:	065b      	lsls	r3, r3, #25
 800cc82:	f53f af2d 	bmi.w	800cae0 <_svfiprintf_r+0x28>
 800cc86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc88:	e72c      	b.n	800cae4 <_svfiprintf_r+0x2c>
 800cc8a:	ab03      	add	r3, sp, #12
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	462a      	mov	r2, r5
 800cc90:	4b05      	ldr	r3, [pc, #20]	@ (800cca8 <_svfiprintf_r+0x1f0>)
 800cc92:	a904      	add	r1, sp, #16
 800cc94:	4638      	mov	r0, r7
 800cc96:	f000 f879 	bl	800cd8c <_printf_i>
 800cc9a:	e7ed      	b.n	800cc78 <_svfiprintf_r+0x1c0>
 800cc9c:	08010daf 	.word	0x08010daf
 800cca0:	08010db9 	.word	0x08010db9
 800cca4:	00000000 	.word	0x00000000
 800cca8:	0800ca01 	.word	0x0800ca01
 800ccac:	08010db5 	.word	0x08010db5

0800ccb0 <_printf_common>:
 800ccb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb4:	4616      	mov	r6, r2
 800ccb6:	4698      	mov	r8, r3
 800ccb8:	688a      	ldr	r2, [r1, #8]
 800ccba:	690b      	ldr	r3, [r1, #16]
 800ccbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	bfb8      	it	lt
 800ccc4:	4613      	movlt	r3, r2
 800ccc6:	6033      	str	r3, [r6, #0]
 800ccc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cccc:	4607      	mov	r7, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	b10a      	cbz	r2, 800ccd6 <_printf_common+0x26>
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	6033      	str	r3, [r6, #0]
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	0699      	lsls	r1, r3, #26
 800ccda:	bf42      	ittt	mi
 800ccdc:	6833      	ldrmi	r3, [r6, #0]
 800ccde:	3302      	addmi	r3, #2
 800cce0:	6033      	strmi	r3, [r6, #0]
 800cce2:	6825      	ldr	r5, [r4, #0]
 800cce4:	f015 0506 	ands.w	r5, r5, #6
 800cce8:	d106      	bne.n	800ccf8 <_printf_common+0x48>
 800ccea:	f104 0a19 	add.w	sl, r4, #25
 800ccee:	68e3      	ldr	r3, [r4, #12]
 800ccf0:	6832      	ldr	r2, [r6, #0]
 800ccf2:	1a9b      	subs	r3, r3, r2
 800ccf4:	42ab      	cmp	r3, r5
 800ccf6:	dc26      	bgt.n	800cd46 <_printf_common+0x96>
 800ccf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ccfc:	6822      	ldr	r2, [r4, #0]
 800ccfe:	3b00      	subs	r3, #0
 800cd00:	bf18      	it	ne
 800cd02:	2301      	movne	r3, #1
 800cd04:	0692      	lsls	r2, r2, #26
 800cd06:	d42b      	bmi.n	800cd60 <_printf_common+0xb0>
 800cd08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd0c:	4641      	mov	r1, r8
 800cd0e:	4638      	mov	r0, r7
 800cd10:	47c8      	blx	r9
 800cd12:	3001      	adds	r0, #1
 800cd14:	d01e      	beq.n	800cd54 <_printf_common+0xa4>
 800cd16:	6823      	ldr	r3, [r4, #0]
 800cd18:	6922      	ldr	r2, [r4, #16]
 800cd1a:	f003 0306 	and.w	r3, r3, #6
 800cd1e:	2b04      	cmp	r3, #4
 800cd20:	bf02      	ittt	eq
 800cd22:	68e5      	ldreq	r5, [r4, #12]
 800cd24:	6833      	ldreq	r3, [r6, #0]
 800cd26:	1aed      	subeq	r5, r5, r3
 800cd28:	68a3      	ldr	r3, [r4, #8]
 800cd2a:	bf0c      	ite	eq
 800cd2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd30:	2500      	movne	r5, #0
 800cd32:	4293      	cmp	r3, r2
 800cd34:	bfc4      	itt	gt
 800cd36:	1a9b      	subgt	r3, r3, r2
 800cd38:	18ed      	addgt	r5, r5, r3
 800cd3a:	2600      	movs	r6, #0
 800cd3c:	341a      	adds	r4, #26
 800cd3e:	42b5      	cmp	r5, r6
 800cd40:	d11a      	bne.n	800cd78 <_printf_common+0xc8>
 800cd42:	2000      	movs	r0, #0
 800cd44:	e008      	b.n	800cd58 <_printf_common+0xa8>
 800cd46:	2301      	movs	r3, #1
 800cd48:	4652      	mov	r2, sl
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	47c8      	blx	r9
 800cd50:	3001      	adds	r0, #1
 800cd52:	d103      	bne.n	800cd5c <_printf_common+0xac>
 800cd54:	f04f 30ff 	mov.w	r0, #4294967295
 800cd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5c:	3501      	adds	r5, #1
 800cd5e:	e7c6      	b.n	800ccee <_printf_common+0x3e>
 800cd60:	18e1      	adds	r1, r4, r3
 800cd62:	1c5a      	adds	r2, r3, #1
 800cd64:	2030      	movs	r0, #48	@ 0x30
 800cd66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd6a:	4422      	add	r2, r4
 800cd6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd74:	3302      	adds	r3, #2
 800cd76:	e7c7      	b.n	800cd08 <_printf_common+0x58>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	4622      	mov	r2, r4
 800cd7c:	4641      	mov	r1, r8
 800cd7e:	4638      	mov	r0, r7
 800cd80:	47c8      	blx	r9
 800cd82:	3001      	adds	r0, #1
 800cd84:	d0e6      	beq.n	800cd54 <_printf_common+0xa4>
 800cd86:	3601      	adds	r6, #1
 800cd88:	e7d9      	b.n	800cd3e <_printf_common+0x8e>
	...

0800cd8c <_printf_i>:
 800cd8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd90:	7e0f      	ldrb	r7, [r1, #24]
 800cd92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd94:	2f78      	cmp	r7, #120	@ 0x78
 800cd96:	4691      	mov	r9, r2
 800cd98:	4680      	mov	r8, r0
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	469a      	mov	sl, r3
 800cd9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cda2:	d807      	bhi.n	800cdb4 <_printf_i+0x28>
 800cda4:	2f62      	cmp	r7, #98	@ 0x62
 800cda6:	d80a      	bhi.n	800cdbe <_printf_i+0x32>
 800cda8:	2f00      	cmp	r7, #0
 800cdaa:	f000 80d2 	beq.w	800cf52 <_printf_i+0x1c6>
 800cdae:	2f58      	cmp	r7, #88	@ 0x58
 800cdb0:	f000 80b9 	beq.w	800cf26 <_printf_i+0x19a>
 800cdb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdbc:	e03a      	b.n	800ce34 <_printf_i+0xa8>
 800cdbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdc2:	2b15      	cmp	r3, #21
 800cdc4:	d8f6      	bhi.n	800cdb4 <_printf_i+0x28>
 800cdc6:	a101      	add	r1, pc, #4	@ (adr r1, 800cdcc <_printf_i+0x40>)
 800cdc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdcc:	0800ce25 	.word	0x0800ce25
 800cdd0:	0800ce39 	.word	0x0800ce39
 800cdd4:	0800cdb5 	.word	0x0800cdb5
 800cdd8:	0800cdb5 	.word	0x0800cdb5
 800cddc:	0800cdb5 	.word	0x0800cdb5
 800cde0:	0800cdb5 	.word	0x0800cdb5
 800cde4:	0800ce39 	.word	0x0800ce39
 800cde8:	0800cdb5 	.word	0x0800cdb5
 800cdec:	0800cdb5 	.word	0x0800cdb5
 800cdf0:	0800cdb5 	.word	0x0800cdb5
 800cdf4:	0800cdb5 	.word	0x0800cdb5
 800cdf8:	0800cf39 	.word	0x0800cf39
 800cdfc:	0800ce63 	.word	0x0800ce63
 800ce00:	0800cef3 	.word	0x0800cef3
 800ce04:	0800cdb5 	.word	0x0800cdb5
 800ce08:	0800cdb5 	.word	0x0800cdb5
 800ce0c:	0800cf5b 	.word	0x0800cf5b
 800ce10:	0800cdb5 	.word	0x0800cdb5
 800ce14:	0800ce63 	.word	0x0800ce63
 800ce18:	0800cdb5 	.word	0x0800cdb5
 800ce1c:	0800cdb5 	.word	0x0800cdb5
 800ce20:	0800cefb 	.word	0x0800cefb
 800ce24:	6833      	ldr	r3, [r6, #0]
 800ce26:	1d1a      	adds	r2, r3, #4
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6032      	str	r2, [r6, #0]
 800ce2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce34:	2301      	movs	r3, #1
 800ce36:	e09d      	b.n	800cf74 <_printf_i+0x1e8>
 800ce38:	6833      	ldr	r3, [r6, #0]
 800ce3a:	6820      	ldr	r0, [r4, #0]
 800ce3c:	1d19      	adds	r1, r3, #4
 800ce3e:	6031      	str	r1, [r6, #0]
 800ce40:	0606      	lsls	r6, r0, #24
 800ce42:	d501      	bpl.n	800ce48 <_printf_i+0xbc>
 800ce44:	681d      	ldr	r5, [r3, #0]
 800ce46:	e003      	b.n	800ce50 <_printf_i+0xc4>
 800ce48:	0645      	lsls	r5, r0, #25
 800ce4a:	d5fb      	bpl.n	800ce44 <_printf_i+0xb8>
 800ce4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce50:	2d00      	cmp	r5, #0
 800ce52:	da03      	bge.n	800ce5c <_printf_i+0xd0>
 800ce54:	232d      	movs	r3, #45	@ 0x2d
 800ce56:	426d      	negs	r5, r5
 800ce58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce5c:	4859      	ldr	r0, [pc, #356]	@ (800cfc4 <_printf_i+0x238>)
 800ce5e:	230a      	movs	r3, #10
 800ce60:	e011      	b.n	800ce86 <_printf_i+0xfa>
 800ce62:	6821      	ldr	r1, [r4, #0]
 800ce64:	6833      	ldr	r3, [r6, #0]
 800ce66:	0608      	lsls	r0, r1, #24
 800ce68:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce6c:	d402      	bmi.n	800ce74 <_printf_i+0xe8>
 800ce6e:	0649      	lsls	r1, r1, #25
 800ce70:	bf48      	it	mi
 800ce72:	b2ad      	uxthmi	r5, r5
 800ce74:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce76:	4853      	ldr	r0, [pc, #332]	@ (800cfc4 <_printf_i+0x238>)
 800ce78:	6033      	str	r3, [r6, #0]
 800ce7a:	bf14      	ite	ne
 800ce7c:	230a      	movne	r3, #10
 800ce7e:	2308      	moveq	r3, #8
 800ce80:	2100      	movs	r1, #0
 800ce82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce86:	6866      	ldr	r6, [r4, #4]
 800ce88:	60a6      	str	r6, [r4, #8]
 800ce8a:	2e00      	cmp	r6, #0
 800ce8c:	bfa2      	ittt	ge
 800ce8e:	6821      	ldrge	r1, [r4, #0]
 800ce90:	f021 0104 	bicge.w	r1, r1, #4
 800ce94:	6021      	strge	r1, [r4, #0]
 800ce96:	b90d      	cbnz	r5, 800ce9c <_printf_i+0x110>
 800ce98:	2e00      	cmp	r6, #0
 800ce9a:	d04b      	beq.n	800cf34 <_printf_i+0x1a8>
 800ce9c:	4616      	mov	r6, r2
 800ce9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cea2:	fb03 5711 	mls	r7, r3, r1, r5
 800cea6:	5dc7      	ldrb	r7, [r0, r7]
 800cea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ceac:	462f      	mov	r7, r5
 800ceae:	42bb      	cmp	r3, r7
 800ceb0:	460d      	mov	r5, r1
 800ceb2:	d9f4      	bls.n	800ce9e <_printf_i+0x112>
 800ceb4:	2b08      	cmp	r3, #8
 800ceb6:	d10b      	bne.n	800ced0 <_printf_i+0x144>
 800ceb8:	6823      	ldr	r3, [r4, #0]
 800ceba:	07df      	lsls	r7, r3, #31
 800cebc:	d508      	bpl.n	800ced0 <_printf_i+0x144>
 800cebe:	6923      	ldr	r3, [r4, #16]
 800cec0:	6861      	ldr	r1, [r4, #4]
 800cec2:	4299      	cmp	r1, r3
 800cec4:	bfde      	ittt	le
 800cec6:	2330      	movle	r3, #48	@ 0x30
 800cec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cecc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ced0:	1b92      	subs	r2, r2, r6
 800ced2:	6122      	str	r2, [r4, #16]
 800ced4:	f8cd a000 	str.w	sl, [sp]
 800ced8:	464b      	mov	r3, r9
 800ceda:	aa03      	add	r2, sp, #12
 800cedc:	4621      	mov	r1, r4
 800cede:	4640      	mov	r0, r8
 800cee0:	f7ff fee6 	bl	800ccb0 <_printf_common>
 800cee4:	3001      	adds	r0, #1
 800cee6:	d14a      	bne.n	800cf7e <_printf_i+0x1f2>
 800cee8:	f04f 30ff 	mov.w	r0, #4294967295
 800ceec:	b004      	add	sp, #16
 800ceee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	f043 0320 	orr.w	r3, r3, #32
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	4833      	ldr	r0, [pc, #204]	@ (800cfc8 <_printf_i+0x23c>)
 800cefc:	2778      	movs	r7, #120	@ 0x78
 800cefe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	6831      	ldr	r1, [r6, #0]
 800cf06:	061f      	lsls	r7, r3, #24
 800cf08:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf0c:	d402      	bmi.n	800cf14 <_printf_i+0x188>
 800cf0e:	065f      	lsls	r7, r3, #25
 800cf10:	bf48      	it	mi
 800cf12:	b2ad      	uxthmi	r5, r5
 800cf14:	6031      	str	r1, [r6, #0]
 800cf16:	07d9      	lsls	r1, r3, #31
 800cf18:	bf44      	itt	mi
 800cf1a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf1e:	6023      	strmi	r3, [r4, #0]
 800cf20:	b11d      	cbz	r5, 800cf2a <_printf_i+0x19e>
 800cf22:	2310      	movs	r3, #16
 800cf24:	e7ac      	b.n	800ce80 <_printf_i+0xf4>
 800cf26:	4827      	ldr	r0, [pc, #156]	@ (800cfc4 <_printf_i+0x238>)
 800cf28:	e7e9      	b.n	800cefe <_printf_i+0x172>
 800cf2a:	6823      	ldr	r3, [r4, #0]
 800cf2c:	f023 0320 	bic.w	r3, r3, #32
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	e7f6      	b.n	800cf22 <_printf_i+0x196>
 800cf34:	4616      	mov	r6, r2
 800cf36:	e7bd      	b.n	800ceb4 <_printf_i+0x128>
 800cf38:	6833      	ldr	r3, [r6, #0]
 800cf3a:	6825      	ldr	r5, [r4, #0]
 800cf3c:	6961      	ldr	r1, [r4, #20]
 800cf3e:	1d18      	adds	r0, r3, #4
 800cf40:	6030      	str	r0, [r6, #0]
 800cf42:	062e      	lsls	r6, r5, #24
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	d501      	bpl.n	800cf4c <_printf_i+0x1c0>
 800cf48:	6019      	str	r1, [r3, #0]
 800cf4a:	e002      	b.n	800cf52 <_printf_i+0x1c6>
 800cf4c:	0668      	lsls	r0, r5, #25
 800cf4e:	d5fb      	bpl.n	800cf48 <_printf_i+0x1bc>
 800cf50:	8019      	strh	r1, [r3, #0]
 800cf52:	2300      	movs	r3, #0
 800cf54:	6123      	str	r3, [r4, #16]
 800cf56:	4616      	mov	r6, r2
 800cf58:	e7bc      	b.n	800ced4 <_printf_i+0x148>
 800cf5a:	6833      	ldr	r3, [r6, #0]
 800cf5c:	1d1a      	adds	r2, r3, #4
 800cf5e:	6032      	str	r2, [r6, #0]
 800cf60:	681e      	ldr	r6, [r3, #0]
 800cf62:	6862      	ldr	r2, [r4, #4]
 800cf64:	2100      	movs	r1, #0
 800cf66:	4630      	mov	r0, r6
 800cf68:	f7f3 f932 	bl	80001d0 <memchr>
 800cf6c:	b108      	cbz	r0, 800cf72 <_printf_i+0x1e6>
 800cf6e:	1b80      	subs	r0, r0, r6
 800cf70:	6060      	str	r0, [r4, #4]
 800cf72:	6863      	ldr	r3, [r4, #4]
 800cf74:	6123      	str	r3, [r4, #16]
 800cf76:	2300      	movs	r3, #0
 800cf78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf7c:	e7aa      	b.n	800ced4 <_printf_i+0x148>
 800cf7e:	6923      	ldr	r3, [r4, #16]
 800cf80:	4632      	mov	r2, r6
 800cf82:	4649      	mov	r1, r9
 800cf84:	4640      	mov	r0, r8
 800cf86:	47d0      	blx	sl
 800cf88:	3001      	adds	r0, #1
 800cf8a:	d0ad      	beq.n	800cee8 <_printf_i+0x15c>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	079b      	lsls	r3, r3, #30
 800cf90:	d413      	bmi.n	800cfba <_printf_i+0x22e>
 800cf92:	68e0      	ldr	r0, [r4, #12]
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	4298      	cmp	r0, r3
 800cf98:	bfb8      	it	lt
 800cf9a:	4618      	movlt	r0, r3
 800cf9c:	e7a6      	b.n	800ceec <_printf_i+0x160>
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	4632      	mov	r2, r6
 800cfa2:	4649      	mov	r1, r9
 800cfa4:	4640      	mov	r0, r8
 800cfa6:	47d0      	blx	sl
 800cfa8:	3001      	adds	r0, #1
 800cfaa:	d09d      	beq.n	800cee8 <_printf_i+0x15c>
 800cfac:	3501      	adds	r5, #1
 800cfae:	68e3      	ldr	r3, [r4, #12]
 800cfb0:	9903      	ldr	r1, [sp, #12]
 800cfb2:	1a5b      	subs	r3, r3, r1
 800cfb4:	42ab      	cmp	r3, r5
 800cfb6:	dcf2      	bgt.n	800cf9e <_printf_i+0x212>
 800cfb8:	e7eb      	b.n	800cf92 <_printf_i+0x206>
 800cfba:	2500      	movs	r5, #0
 800cfbc:	f104 0619 	add.w	r6, r4, #25
 800cfc0:	e7f5      	b.n	800cfae <_printf_i+0x222>
 800cfc2:	bf00      	nop
 800cfc4:	08010dc0 	.word	0x08010dc0
 800cfc8:	08010dd1 	.word	0x08010dd1

0800cfcc <__sflush_r>:
 800cfcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd4:	0716      	lsls	r6, r2, #28
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	460c      	mov	r4, r1
 800cfda:	d454      	bmi.n	800d086 <__sflush_r+0xba>
 800cfdc:	684b      	ldr	r3, [r1, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	dc02      	bgt.n	800cfe8 <__sflush_r+0x1c>
 800cfe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd48      	ble.n	800d07a <__sflush_r+0xae>
 800cfe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfea:	2e00      	cmp	r6, #0
 800cfec:	d045      	beq.n	800d07a <__sflush_r+0xae>
 800cfee:	2300      	movs	r3, #0
 800cff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cff4:	682f      	ldr	r7, [r5, #0]
 800cff6:	6a21      	ldr	r1, [r4, #32]
 800cff8:	602b      	str	r3, [r5, #0]
 800cffa:	d030      	beq.n	800d05e <__sflush_r+0x92>
 800cffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	0759      	lsls	r1, r3, #29
 800d002:	d505      	bpl.n	800d010 <__sflush_r+0x44>
 800d004:	6863      	ldr	r3, [r4, #4]
 800d006:	1ad2      	subs	r2, r2, r3
 800d008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d00a:	b10b      	cbz	r3, 800d010 <__sflush_r+0x44>
 800d00c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d00e:	1ad2      	subs	r2, r2, r3
 800d010:	2300      	movs	r3, #0
 800d012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d014:	6a21      	ldr	r1, [r4, #32]
 800d016:	4628      	mov	r0, r5
 800d018:	47b0      	blx	r6
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	d106      	bne.n	800d02e <__sflush_r+0x62>
 800d020:	6829      	ldr	r1, [r5, #0]
 800d022:	291d      	cmp	r1, #29
 800d024:	d82b      	bhi.n	800d07e <__sflush_r+0xb2>
 800d026:	4a2a      	ldr	r2, [pc, #168]	@ (800d0d0 <__sflush_r+0x104>)
 800d028:	410a      	asrs	r2, r1
 800d02a:	07d6      	lsls	r6, r2, #31
 800d02c:	d427      	bmi.n	800d07e <__sflush_r+0xb2>
 800d02e:	2200      	movs	r2, #0
 800d030:	6062      	str	r2, [r4, #4]
 800d032:	04d9      	lsls	r1, r3, #19
 800d034:	6922      	ldr	r2, [r4, #16]
 800d036:	6022      	str	r2, [r4, #0]
 800d038:	d504      	bpl.n	800d044 <__sflush_r+0x78>
 800d03a:	1c42      	adds	r2, r0, #1
 800d03c:	d101      	bne.n	800d042 <__sflush_r+0x76>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b903      	cbnz	r3, 800d044 <__sflush_r+0x78>
 800d042:	6560      	str	r0, [r4, #84]	@ 0x54
 800d044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d046:	602f      	str	r7, [r5, #0]
 800d048:	b1b9      	cbz	r1, 800d07a <__sflush_r+0xae>
 800d04a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d04e:	4299      	cmp	r1, r3
 800d050:	d002      	beq.n	800d058 <__sflush_r+0x8c>
 800d052:	4628      	mov	r0, r5
 800d054:	f7ff fc8a 	bl	800c96c <_free_r>
 800d058:	2300      	movs	r3, #0
 800d05a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d05c:	e00d      	b.n	800d07a <__sflush_r+0xae>
 800d05e:	2301      	movs	r3, #1
 800d060:	4628      	mov	r0, r5
 800d062:	47b0      	blx	r6
 800d064:	4602      	mov	r2, r0
 800d066:	1c50      	adds	r0, r2, #1
 800d068:	d1c9      	bne.n	800cffe <__sflush_r+0x32>
 800d06a:	682b      	ldr	r3, [r5, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0c6      	beq.n	800cffe <__sflush_r+0x32>
 800d070:	2b1d      	cmp	r3, #29
 800d072:	d001      	beq.n	800d078 <__sflush_r+0xac>
 800d074:	2b16      	cmp	r3, #22
 800d076:	d11e      	bne.n	800d0b6 <__sflush_r+0xea>
 800d078:	602f      	str	r7, [r5, #0]
 800d07a:	2000      	movs	r0, #0
 800d07c:	e022      	b.n	800d0c4 <__sflush_r+0xf8>
 800d07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d082:	b21b      	sxth	r3, r3
 800d084:	e01b      	b.n	800d0be <__sflush_r+0xf2>
 800d086:	690f      	ldr	r7, [r1, #16]
 800d088:	2f00      	cmp	r7, #0
 800d08a:	d0f6      	beq.n	800d07a <__sflush_r+0xae>
 800d08c:	0793      	lsls	r3, r2, #30
 800d08e:	680e      	ldr	r6, [r1, #0]
 800d090:	bf08      	it	eq
 800d092:	694b      	ldreq	r3, [r1, #20]
 800d094:	600f      	str	r7, [r1, #0]
 800d096:	bf18      	it	ne
 800d098:	2300      	movne	r3, #0
 800d09a:	eba6 0807 	sub.w	r8, r6, r7
 800d09e:	608b      	str	r3, [r1, #8]
 800d0a0:	f1b8 0f00 	cmp.w	r8, #0
 800d0a4:	dde9      	ble.n	800d07a <__sflush_r+0xae>
 800d0a6:	6a21      	ldr	r1, [r4, #32]
 800d0a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0aa:	4643      	mov	r3, r8
 800d0ac:	463a      	mov	r2, r7
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	47b0      	blx	r6
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	dc08      	bgt.n	800d0c8 <__sflush_r+0xfc>
 800d0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0be:	81a3      	strh	r3, [r4, #12]
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	4407      	add	r7, r0
 800d0ca:	eba8 0800 	sub.w	r8, r8, r0
 800d0ce:	e7e7      	b.n	800d0a0 <__sflush_r+0xd4>
 800d0d0:	dfbffffe 	.word	0xdfbffffe

0800d0d4 <_fflush_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	690b      	ldr	r3, [r1, #16]
 800d0d8:	4605      	mov	r5, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b913      	cbnz	r3, 800d0e4 <_fflush_r+0x10>
 800d0de:	2500      	movs	r5, #0
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	bd38      	pop	{r3, r4, r5, pc}
 800d0e4:	b118      	cbz	r0, 800d0ee <_fflush_r+0x1a>
 800d0e6:	6a03      	ldr	r3, [r0, #32]
 800d0e8:	b90b      	cbnz	r3, 800d0ee <_fflush_r+0x1a>
 800d0ea:	f7ff fafb 	bl	800c6e4 <__sinit>
 800d0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0f3      	beq.n	800d0de <_fflush_r+0xa>
 800d0f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0f8:	07d0      	lsls	r0, r2, #31
 800d0fa:	d404      	bmi.n	800d106 <_fflush_r+0x32>
 800d0fc:	0599      	lsls	r1, r3, #22
 800d0fe:	d402      	bmi.n	800d106 <_fflush_r+0x32>
 800d100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d102:	f7ff fc12 	bl	800c92a <__retarget_lock_acquire_recursive>
 800d106:	4628      	mov	r0, r5
 800d108:	4621      	mov	r1, r4
 800d10a:	f7ff ff5f 	bl	800cfcc <__sflush_r>
 800d10e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d110:	07da      	lsls	r2, r3, #31
 800d112:	4605      	mov	r5, r0
 800d114:	d4e4      	bmi.n	800d0e0 <_fflush_r+0xc>
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	059b      	lsls	r3, r3, #22
 800d11a:	d4e1      	bmi.n	800d0e0 <_fflush_r+0xc>
 800d11c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d11e:	f7ff fc05 	bl	800c92c <__retarget_lock_release_recursive>
 800d122:	e7dd      	b.n	800d0e0 <_fflush_r+0xc>

0800d124 <fiprintf>:
 800d124:	b40e      	push	{r1, r2, r3}
 800d126:	b503      	push	{r0, r1, lr}
 800d128:	4601      	mov	r1, r0
 800d12a:	ab03      	add	r3, sp, #12
 800d12c:	4805      	ldr	r0, [pc, #20]	@ (800d144 <fiprintf+0x20>)
 800d12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d132:	6800      	ldr	r0, [r0, #0]
 800d134:	9301      	str	r3, [sp, #4]
 800d136:	f000 f88d 	bl	800d254 <_vfiprintf_r>
 800d13a:	b002      	add	sp, #8
 800d13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d140:	b003      	add	sp, #12
 800d142:	4770      	bx	lr
 800d144:	20000088 	.word	0x20000088

0800d148 <memmove>:
 800d148:	4288      	cmp	r0, r1
 800d14a:	b510      	push	{r4, lr}
 800d14c:	eb01 0402 	add.w	r4, r1, r2
 800d150:	d902      	bls.n	800d158 <memmove+0x10>
 800d152:	4284      	cmp	r4, r0
 800d154:	4623      	mov	r3, r4
 800d156:	d807      	bhi.n	800d168 <memmove+0x20>
 800d158:	1e43      	subs	r3, r0, #1
 800d15a:	42a1      	cmp	r1, r4
 800d15c:	d008      	beq.n	800d170 <memmove+0x28>
 800d15e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d162:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d166:	e7f8      	b.n	800d15a <memmove+0x12>
 800d168:	4402      	add	r2, r0
 800d16a:	4601      	mov	r1, r0
 800d16c:	428a      	cmp	r2, r1
 800d16e:	d100      	bne.n	800d172 <memmove+0x2a>
 800d170:	bd10      	pop	{r4, pc}
 800d172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d17a:	e7f7      	b.n	800d16c <memmove+0x24>

0800d17c <memcpy>:
 800d17c:	440a      	add	r2, r1
 800d17e:	4291      	cmp	r1, r2
 800d180:	f100 33ff 	add.w	r3, r0, #4294967295
 800d184:	d100      	bne.n	800d188 <memcpy+0xc>
 800d186:	4770      	bx	lr
 800d188:	b510      	push	{r4, lr}
 800d18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d18e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d192:	4291      	cmp	r1, r2
 800d194:	d1f9      	bne.n	800d18a <memcpy+0xe>
 800d196:	bd10      	pop	{r4, pc}

0800d198 <abort>:
 800d198:	b508      	push	{r3, lr}
 800d19a:	2006      	movs	r0, #6
 800d19c:	f000 fa2e 	bl	800d5fc <raise>
 800d1a0:	2001      	movs	r0, #1
 800d1a2:	f7f7 fdff 	bl	8004da4 <_exit>

0800d1a6 <_realloc_r>:
 800d1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1aa:	4680      	mov	r8, r0
 800d1ac:	4615      	mov	r5, r2
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b921      	cbnz	r1, 800d1bc <_realloc_r+0x16>
 800d1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	f7ff b93e 	b.w	800c438 <_malloc_r>
 800d1bc:	b92a      	cbnz	r2, 800d1ca <_realloc_r+0x24>
 800d1be:	f7ff fbd5 	bl	800c96c <_free_r>
 800d1c2:	2400      	movs	r4, #0
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1ca:	f000 fa33 	bl	800d634 <_malloc_usable_size_r>
 800d1ce:	4285      	cmp	r5, r0
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	d802      	bhi.n	800d1da <_realloc_r+0x34>
 800d1d4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d1d8:	d8f4      	bhi.n	800d1c4 <_realloc_r+0x1e>
 800d1da:	4629      	mov	r1, r5
 800d1dc:	4640      	mov	r0, r8
 800d1de:	f7ff f92b 	bl	800c438 <_malloc_r>
 800d1e2:	4607      	mov	r7, r0
 800d1e4:	2800      	cmp	r0, #0
 800d1e6:	d0ec      	beq.n	800d1c2 <_realloc_r+0x1c>
 800d1e8:	42b5      	cmp	r5, r6
 800d1ea:	462a      	mov	r2, r5
 800d1ec:	4621      	mov	r1, r4
 800d1ee:	bf28      	it	cs
 800d1f0:	4632      	movcs	r2, r6
 800d1f2:	f7ff ffc3 	bl	800d17c <memcpy>
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	f7ff fbb7 	bl	800c96c <_free_r>
 800d1fe:	463c      	mov	r4, r7
 800d200:	e7e0      	b.n	800d1c4 <_realloc_r+0x1e>

0800d202 <__sfputc_r>:
 800d202:	6893      	ldr	r3, [r2, #8]
 800d204:	3b01      	subs	r3, #1
 800d206:	2b00      	cmp	r3, #0
 800d208:	b410      	push	{r4}
 800d20a:	6093      	str	r3, [r2, #8]
 800d20c:	da08      	bge.n	800d220 <__sfputc_r+0x1e>
 800d20e:	6994      	ldr	r4, [r2, #24]
 800d210:	42a3      	cmp	r3, r4
 800d212:	db01      	blt.n	800d218 <__sfputc_r+0x16>
 800d214:	290a      	cmp	r1, #10
 800d216:	d103      	bne.n	800d220 <__sfputc_r+0x1e>
 800d218:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d21c:	f000 b932 	b.w	800d484 <__swbuf_r>
 800d220:	6813      	ldr	r3, [r2, #0]
 800d222:	1c58      	adds	r0, r3, #1
 800d224:	6010      	str	r0, [r2, #0]
 800d226:	7019      	strb	r1, [r3, #0]
 800d228:	4608      	mov	r0, r1
 800d22a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <__sfputs_r>:
 800d230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d232:	4606      	mov	r6, r0
 800d234:	460f      	mov	r7, r1
 800d236:	4614      	mov	r4, r2
 800d238:	18d5      	adds	r5, r2, r3
 800d23a:	42ac      	cmp	r4, r5
 800d23c:	d101      	bne.n	800d242 <__sfputs_r+0x12>
 800d23e:	2000      	movs	r0, #0
 800d240:	e007      	b.n	800d252 <__sfputs_r+0x22>
 800d242:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d246:	463a      	mov	r2, r7
 800d248:	4630      	mov	r0, r6
 800d24a:	f7ff ffda 	bl	800d202 <__sfputc_r>
 800d24e:	1c43      	adds	r3, r0, #1
 800d250:	d1f3      	bne.n	800d23a <__sfputs_r+0xa>
 800d252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d254 <_vfiprintf_r>:
 800d254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d258:	460d      	mov	r5, r1
 800d25a:	b09d      	sub	sp, #116	@ 0x74
 800d25c:	4614      	mov	r4, r2
 800d25e:	4698      	mov	r8, r3
 800d260:	4606      	mov	r6, r0
 800d262:	b118      	cbz	r0, 800d26c <_vfiprintf_r+0x18>
 800d264:	6a03      	ldr	r3, [r0, #32]
 800d266:	b90b      	cbnz	r3, 800d26c <_vfiprintf_r+0x18>
 800d268:	f7ff fa3c 	bl	800c6e4 <__sinit>
 800d26c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d26e:	07d9      	lsls	r1, r3, #31
 800d270:	d405      	bmi.n	800d27e <_vfiprintf_r+0x2a>
 800d272:	89ab      	ldrh	r3, [r5, #12]
 800d274:	059a      	lsls	r2, r3, #22
 800d276:	d402      	bmi.n	800d27e <_vfiprintf_r+0x2a>
 800d278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d27a:	f7ff fb56 	bl	800c92a <__retarget_lock_acquire_recursive>
 800d27e:	89ab      	ldrh	r3, [r5, #12]
 800d280:	071b      	lsls	r3, r3, #28
 800d282:	d501      	bpl.n	800d288 <_vfiprintf_r+0x34>
 800d284:	692b      	ldr	r3, [r5, #16]
 800d286:	b99b      	cbnz	r3, 800d2b0 <_vfiprintf_r+0x5c>
 800d288:	4629      	mov	r1, r5
 800d28a:	4630      	mov	r0, r6
 800d28c:	f000 f938 	bl	800d500 <__swsetup_r>
 800d290:	b170      	cbz	r0, 800d2b0 <_vfiprintf_r+0x5c>
 800d292:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d294:	07dc      	lsls	r4, r3, #31
 800d296:	d504      	bpl.n	800d2a2 <_vfiprintf_r+0x4e>
 800d298:	f04f 30ff 	mov.w	r0, #4294967295
 800d29c:	b01d      	add	sp, #116	@ 0x74
 800d29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a2:	89ab      	ldrh	r3, [r5, #12]
 800d2a4:	0598      	lsls	r0, r3, #22
 800d2a6:	d4f7      	bmi.n	800d298 <_vfiprintf_r+0x44>
 800d2a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2aa:	f7ff fb3f 	bl	800c92c <__retarget_lock_release_recursive>
 800d2ae:	e7f3      	b.n	800d298 <_vfiprintf_r+0x44>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2b4:	2320      	movs	r3, #32
 800d2b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2be:	2330      	movs	r3, #48	@ 0x30
 800d2c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d470 <_vfiprintf_r+0x21c>
 800d2c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2c8:	f04f 0901 	mov.w	r9, #1
 800d2cc:	4623      	mov	r3, r4
 800d2ce:	469a      	mov	sl, r3
 800d2d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2d4:	b10a      	cbz	r2, 800d2da <_vfiprintf_r+0x86>
 800d2d6:	2a25      	cmp	r2, #37	@ 0x25
 800d2d8:	d1f9      	bne.n	800d2ce <_vfiprintf_r+0x7a>
 800d2da:	ebba 0b04 	subs.w	fp, sl, r4
 800d2de:	d00b      	beq.n	800d2f8 <_vfiprintf_r+0xa4>
 800d2e0:	465b      	mov	r3, fp
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	4629      	mov	r1, r5
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f7ff ffa2 	bl	800d230 <__sfputs_r>
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	f000 80a7 	beq.w	800d440 <_vfiprintf_r+0x1ec>
 800d2f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2f4:	445a      	add	r2, fp
 800d2f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f000 809f 	beq.w	800d440 <_vfiprintf_r+0x1ec>
 800d302:	2300      	movs	r3, #0
 800d304:	f04f 32ff 	mov.w	r2, #4294967295
 800d308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d30c:	f10a 0a01 	add.w	sl, sl, #1
 800d310:	9304      	str	r3, [sp, #16]
 800d312:	9307      	str	r3, [sp, #28]
 800d314:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d318:	931a      	str	r3, [sp, #104]	@ 0x68
 800d31a:	4654      	mov	r4, sl
 800d31c:	2205      	movs	r2, #5
 800d31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d322:	4853      	ldr	r0, [pc, #332]	@ (800d470 <_vfiprintf_r+0x21c>)
 800d324:	f7f2 ff54 	bl	80001d0 <memchr>
 800d328:	9a04      	ldr	r2, [sp, #16]
 800d32a:	b9d8      	cbnz	r0, 800d364 <_vfiprintf_r+0x110>
 800d32c:	06d1      	lsls	r1, r2, #27
 800d32e:	bf44      	itt	mi
 800d330:	2320      	movmi	r3, #32
 800d332:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d336:	0713      	lsls	r3, r2, #28
 800d338:	bf44      	itt	mi
 800d33a:	232b      	movmi	r3, #43	@ 0x2b
 800d33c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d340:	f89a 3000 	ldrb.w	r3, [sl]
 800d344:	2b2a      	cmp	r3, #42	@ 0x2a
 800d346:	d015      	beq.n	800d374 <_vfiprintf_r+0x120>
 800d348:	9a07      	ldr	r2, [sp, #28]
 800d34a:	4654      	mov	r4, sl
 800d34c:	2000      	movs	r0, #0
 800d34e:	f04f 0c0a 	mov.w	ip, #10
 800d352:	4621      	mov	r1, r4
 800d354:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d358:	3b30      	subs	r3, #48	@ 0x30
 800d35a:	2b09      	cmp	r3, #9
 800d35c:	d94b      	bls.n	800d3f6 <_vfiprintf_r+0x1a2>
 800d35e:	b1b0      	cbz	r0, 800d38e <_vfiprintf_r+0x13a>
 800d360:	9207      	str	r2, [sp, #28]
 800d362:	e014      	b.n	800d38e <_vfiprintf_r+0x13a>
 800d364:	eba0 0308 	sub.w	r3, r0, r8
 800d368:	fa09 f303 	lsl.w	r3, r9, r3
 800d36c:	4313      	orrs	r3, r2
 800d36e:	9304      	str	r3, [sp, #16]
 800d370:	46a2      	mov	sl, r4
 800d372:	e7d2      	b.n	800d31a <_vfiprintf_r+0xc6>
 800d374:	9b03      	ldr	r3, [sp, #12]
 800d376:	1d19      	adds	r1, r3, #4
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	9103      	str	r1, [sp, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	bfbb      	ittet	lt
 800d380:	425b      	neglt	r3, r3
 800d382:	f042 0202 	orrlt.w	r2, r2, #2
 800d386:	9307      	strge	r3, [sp, #28]
 800d388:	9307      	strlt	r3, [sp, #28]
 800d38a:	bfb8      	it	lt
 800d38c:	9204      	strlt	r2, [sp, #16]
 800d38e:	7823      	ldrb	r3, [r4, #0]
 800d390:	2b2e      	cmp	r3, #46	@ 0x2e
 800d392:	d10a      	bne.n	800d3aa <_vfiprintf_r+0x156>
 800d394:	7863      	ldrb	r3, [r4, #1]
 800d396:	2b2a      	cmp	r3, #42	@ 0x2a
 800d398:	d132      	bne.n	800d400 <_vfiprintf_r+0x1ac>
 800d39a:	9b03      	ldr	r3, [sp, #12]
 800d39c:	1d1a      	adds	r2, r3, #4
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	9203      	str	r2, [sp, #12]
 800d3a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3a6:	3402      	adds	r4, #2
 800d3a8:	9305      	str	r3, [sp, #20]
 800d3aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d480 <_vfiprintf_r+0x22c>
 800d3ae:	7821      	ldrb	r1, [r4, #0]
 800d3b0:	2203      	movs	r2, #3
 800d3b2:	4650      	mov	r0, sl
 800d3b4:	f7f2 ff0c 	bl	80001d0 <memchr>
 800d3b8:	b138      	cbz	r0, 800d3ca <_vfiprintf_r+0x176>
 800d3ba:	9b04      	ldr	r3, [sp, #16]
 800d3bc:	eba0 000a 	sub.w	r0, r0, sl
 800d3c0:	2240      	movs	r2, #64	@ 0x40
 800d3c2:	4082      	lsls	r2, r0
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	3401      	adds	r4, #1
 800d3c8:	9304      	str	r3, [sp, #16]
 800d3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ce:	4829      	ldr	r0, [pc, #164]	@ (800d474 <_vfiprintf_r+0x220>)
 800d3d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3d4:	2206      	movs	r2, #6
 800d3d6:	f7f2 fefb 	bl	80001d0 <memchr>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d03f      	beq.n	800d45e <_vfiprintf_r+0x20a>
 800d3de:	4b26      	ldr	r3, [pc, #152]	@ (800d478 <_vfiprintf_r+0x224>)
 800d3e0:	bb1b      	cbnz	r3, 800d42a <_vfiprintf_r+0x1d6>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	3307      	adds	r3, #7
 800d3e6:	f023 0307 	bic.w	r3, r3, #7
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	9303      	str	r3, [sp, #12]
 800d3ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f0:	443b      	add	r3, r7
 800d3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3f4:	e76a      	b.n	800d2cc <_vfiprintf_r+0x78>
 800d3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	e7a8      	b.n	800d352 <_vfiprintf_r+0xfe>
 800d400:	2300      	movs	r3, #0
 800d402:	3401      	adds	r4, #1
 800d404:	9305      	str	r3, [sp, #20]
 800d406:	4619      	mov	r1, r3
 800d408:	f04f 0c0a 	mov.w	ip, #10
 800d40c:	4620      	mov	r0, r4
 800d40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d412:	3a30      	subs	r2, #48	@ 0x30
 800d414:	2a09      	cmp	r2, #9
 800d416:	d903      	bls.n	800d420 <_vfiprintf_r+0x1cc>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d0c6      	beq.n	800d3aa <_vfiprintf_r+0x156>
 800d41c:	9105      	str	r1, [sp, #20]
 800d41e:	e7c4      	b.n	800d3aa <_vfiprintf_r+0x156>
 800d420:	fb0c 2101 	mla	r1, ip, r1, r2
 800d424:	4604      	mov	r4, r0
 800d426:	2301      	movs	r3, #1
 800d428:	e7f0      	b.n	800d40c <_vfiprintf_r+0x1b8>
 800d42a:	ab03      	add	r3, sp, #12
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	462a      	mov	r2, r5
 800d430:	4b12      	ldr	r3, [pc, #72]	@ (800d47c <_vfiprintf_r+0x228>)
 800d432:	a904      	add	r1, sp, #16
 800d434:	4630      	mov	r0, r6
 800d436:	f3af 8000 	nop.w
 800d43a:	4607      	mov	r7, r0
 800d43c:	1c78      	adds	r0, r7, #1
 800d43e:	d1d6      	bne.n	800d3ee <_vfiprintf_r+0x19a>
 800d440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d442:	07d9      	lsls	r1, r3, #31
 800d444:	d405      	bmi.n	800d452 <_vfiprintf_r+0x1fe>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	059a      	lsls	r2, r3, #22
 800d44a:	d402      	bmi.n	800d452 <_vfiprintf_r+0x1fe>
 800d44c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d44e:	f7ff fa6d 	bl	800c92c <__retarget_lock_release_recursive>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	065b      	lsls	r3, r3, #25
 800d456:	f53f af1f 	bmi.w	800d298 <_vfiprintf_r+0x44>
 800d45a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d45c:	e71e      	b.n	800d29c <_vfiprintf_r+0x48>
 800d45e:	ab03      	add	r3, sp, #12
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	462a      	mov	r2, r5
 800d464:	4b05      	ldr	r3, [pc, #20]	@ (800d47c <_vfiprintf_r+0x228>)
 800d466:	a904      	add	r1, sp, #16
 800d468:	4630      	mov	r0, r6
 800d46a:	f7ff fc8f 	bl	800cd8c <_printf_i>
 800d46e:	e7e4      	b.n	800d43a <_vfiprintf_r+0x1e6>
 800d470:	08010daf 	.word	0x08010daf
 800d474:	08010db9 	.word	0x08010db9
 800d478:	00000000 	.word	0x00000000
 800d47c:	0800d231 	.word	0x0800d231
 800d480:	08010db5 	.word	0x08010db5

0800d484 <__swbuf_r>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	460e      	mov	r6, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	4605      	mov	r5, r0
 800d48c:	b118      	cbz	r0, 800d496 <__swbuf_r+0x12>
 800d48e:	6a03      	ldr	r3, [r0, #32]
 800d490:	b90b      	cbnz	r3, 800d496 <__swbuf_r+0x12>
 800d492:	f7ff f927 	bl	800c6e4 <__sinit>
 800d496:	69a3      	ldr	r3, [r4, #24]
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	071a      	lsls	r2, r3, #28
 800d49e:	d501      	bpl.n	800d4a4 <__swbuf_r+0x20>
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	b943      	cbnz	r3, 800d4b6 <__swbuf_r+0x32>
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f000 f82a 	bl	800d500 <__swsetup_r>
 800d4ac:	b118      	cbz	r0, 800d4b6 <__swbuf_r+0x32>
 800d4ae:	f04f 37ff 	mov.w	r7, #4294967295
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	6922      	ldr	r2, [r4, #16]
 800d4ba:	1a98      	subs	r0, r3, r2
 800d4bc:	6963      	ldr	r3, [r4, #20]
 800d4be:	b2f6      	uxtb	r6, r6
 800d4c0:	4283      	cmp	r3, r0
 800d4c2:	4637      	mov	r7, r6
 800d4c4:	dc05      	bgt.n	800d4d2 <__swbuf_r+0x4e>
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	f7ff fe03 	bl	800d0d4 <_fflush_r>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	d1ed      	bne.n	800d4ae <__swbuf_r+0x2a>
 800d4d2:	68a3      	ldr	r3, [r4, #8]
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	60a3      	str	r3, [r4, #8]
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	6022      	str	r2, [r4, #0]
 800d4de:	701e      	strb	r6, [r3, #0]
 800d4e0:	6962      	ldr	r2, [r4, #20]
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d004      	beq.n	800d4f2 <__swbuf_r+0x6e>
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	07db      	lsls	r3, r3, #31
 800d4ec:	d5e1      	bpl.n	800d4b2 <__swbuf_r+0x2e>
 800d4ee:	2e0a      	cmp	r6, #10
 800d4f0:	d1df      	bne.n	800d4b2 <__swbuf_r+0x2e>
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f7ff fded 	bl	800d0d4 <_fflush_r>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d0d9      	beq.n	800d4b2 <__swbuf_r+0x2e>
 800d4fe:	e7d6      	b.n	800d4ae <__swbuf_r+0x2a>

0800d500 <__swsetup_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4b29      	ldr	r3, [pc, #164]	@ (800d5a8 <__swsetup_r+0xa8>)
 800d504:	4605      	mov	r5, r0
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	460c      	mov	r4, r1
 800d50a:	b118      	cbz	r0, 800d514 <__swsetup_r+0x14>
 800d50c:	6a03      	ldr	r3, [r0, #32]
 800d50e:	b90b      	cbnz	r3, 800d514 <__swsetup_r+0x14>
 800d510:	f7ff f8e8 	bl	800c6e4 <__sinit>
 800d514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d518:	0719      	lsls	r1, r3, #28
 800d51a:	d422      	bmi.n	800d562 <__swsetup_r+0x62>
 800d51c:	06da      	lsls	r2, r3, #27
 800d51e:	d407      	bmi.n	800d530 <__swsetup_r+0x30>
 800d520:	2209      	movs	r2, #9
 800d522:	602a      	str	r2, [r5, #0]
 800d524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d528:	81a3      	strh	r3, [r4, #12]
 800d52a:	f04f 30ff 	mov.w	r0, #4294967295
 800d52e:	e033      	b.n	800d598 <__swsetup_r+0x98>
 800d530:	0758      	lsls	r0, r3, #29
 800d532:	d512      	bpl.n	800d55a <__swsetup_r+0x5a>
 800d534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d536:	b141      	cbz	r1, 800d54a <__swsetup_r+0x4a>
 800d538:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d53c:	4299      	cmp	r1, r3
 800d53e:	d002      	beq.n	800d546 <__swsetup_r+0x46>
 800d540:	4628      	mov	r0, r5
 800d542:	f7ff fa13 	bl	800c96c <_free_r>
 800d546:	2300      	movs	r3, #0
 800d548:	6363      	str	r3, [r4, #52]	@ 0x34
 800d54a:	89a3      	ldrh	r3, [r4, #12]
 800d54c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d550:	81a3      	strh	r3, [r4, #12]
 800d552:	2300      	movs	r3, #0
 800d554:	6063      	str	r3, [r4, #4]
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f043 0308 	orr.w	r3, r3, #8
 800d560:	81a3      	strh	r3, [r4, #12]
 800d562:	6923      	ldr	r3, [r4, #16]
 800d564:	b94b      	cbnz	r3, 800d57a <__swsetup_r+0x7a>
 800d566:	89a3      	ldrh	r3, [r4, #12]
 800d568:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d56c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d570:	d003      	beq.n	800d57a <__swsetup_r+0x7a>
 800d572:	4621      	mov	r1, r4
 800d574:	4628      	mov	r0, r5
 800d576:	f000 f88b 	bl	800d690 <__smakebuf_r>
 800d57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d57e:	f013 0201 	ands.w	r2, r3, #1
 800d582:	d00a      	beq.n	800d59a <__swsetup_r+0x9a>
 800d584:	2200      	movs	r2, #0
 800d586:	60a2      	str	r2, [r4, #8]
 800d588:	6962      	ldr	r2, [r4, #20]
 800d58a:	4252      	negs	r2, r2
 800d58c:	61a2      	str	r2, [r4, #24]
 800d58e:	6922      	ldr	r2, [r4, #16]
 800d590:	b942      	cbnz	r2, 800d5a4 <__swsetup_r+0xa4>
 800d592:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d596:	d1c5      	bne.n	800d524 <__swsetup_r+0x24>
 800d598:	bd38      	pop	{r3, r4, r5, pc}
 800d59a:	0799      	lsls	r1, r3, #30
 800d59c:	bf58      	it	pl
 800d59e:	6962      	ldrpl	r2, [r4, #20]
 800d5a0:	60a2      	str	r2, [r4, #8]
 800d5a2:	e7f4      	b.n	800d58e <__swsetup_r+0x8e>
 800d5a4:	2000      	movs	r0, #0
 800d5a6:	e7f7      	b.n	800d598 <__swsetup_r+0x98>
 800d5a8:	20000088 	.word	0x20000088

0800d5ac <_raise_r>:
 800d5ac:	291f      	cmp	r1, #31
 800d5ae:	b538      	push	{r3, r4, r5, lr}
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	d904      	bls.n	800d5c0 <_raise_r+0x14>
 800d5b6:	2316      	movs	r3, #22
 800d5b8:	6003      	str	r3, [r0, #0]
 800d5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d5be:	bd38      	pop	{r3, r4, r5, pc}
 800d5c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d5c2:	b112      	cbz	r2, 800d5ca <_raise_r+0x1e>
 800d5c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5c8:	b94b      	cbnz	r3, 800d5de <_raise_r+0x32>
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	f000 f830 	bl	800d630 <_getpid_r>
 800d5d0:	4622      	mov	r2, r4
 800d5d2:	4601      	mov	r1, r0
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5da:	f000 b817 	b.w	800d60c <_kill_r>
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d00a      	beq.n	800d5f8 <_raise_r+0x4c>
 800d5e2:	1c59      	adds	r1, r3, #1
 800d5e4:	d103      	bne.n	800d5ee <_raise_r+0x42>
 800d5e6:	2316      	movs	r3, #22
 800d5e8:	6003      	str	r3, [r0, #0]
 800d5ea:	2001      	movs	r0, #1
 800d5ec:	e7e7      	b.n	800d5be <_raise_r+0x12>
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	4798      	blx	r3
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	e7e0      	b.n	800d5be <_raise_r+0x12>

0800d5fc <raise>:
 800d5fc:	4b02      	ldr	r3, [pc, #8]	@ (800d608 <raise+0xc>)
 800d5fe:	4601      	mov	r1, r0
 800d600:	6818      	ldr	r0, [r3, #0]
 800d602:	f7ff bfd3 	b.w	800d5ac <_raise_r>
 800d606:	bf00      	nop
 800d608:	20000088 	.word	0x20000088

0800d60c <_kill_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d07      	ldr	r5, [pc, #28]	@ (800d62c <_kill_r+0x20>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	4611      	mov	r1, r2
 800d618:	602b      	str	r3, [r5, #0]
 800d61a:	f7f7 fbb3 	bl	8004d84 <_kill>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	d102      	bne.n	800d628 <_kill_r+0x1c>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	b103      	cbz	r3, 800d628 <_kill_r+0x1c>
 800d626:	6023      	str	r3, [r4, #0]
 800d628:	bd38      	pop	{r3, r4, r5, pc}
 800d62a:	bf00      	nop
 800d62c:	20000fb0 	.word	0x20000fb0

0800d630 <_getpid_r>:
 800d630:	f7f7 bba0 	b.w	8004d74 <_getpid>

0800d634 <_malloc_usable_size_r>:
 800d634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d638:	1f18      	subs	r0, r3, #4
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	bfbc      	itt	lt
 800d63e:	580b      	ldrlt	r3, [r1, r0]
 800d640:	18c0      	addlt	r0, r0, r3
 800d642:	4770      	bx	lr

0800d644 <__swhatbuf_r>:
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	460c      	mov	r4, r1
 800d648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d64c:	2900      	cmp	r1, #0
 800d64e:	b096      	sub	sp, #88	@ 0x58
 800d650:	4615      	mov	r5, r2
 800d652:	461e      	mov	r6, r3
 800d654:	da0d      	bge.n	800d672 <__swhatbuf_r+0x2e>
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d65c:	f04f 0100 	mov.w	r1, #0
 800d660:	bf14      	ite	ne
 800d662:	2340      	movne	r3, #64	@ 0x40
 800d664:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d668:	2000      	movs	r0, #0
 800d66a:	6031      	str	r1, [r6, #0]
 800d66c:	602b      	str	r3, [r5, #0]
 800d66e:	b016      	add	sp, #88	@ 0x58
 800d670:	bd70      	pop	{r4, r5, r6, pc}
 800d672:	466a      	mov	r2, sp
 800d674:	f000 f848 	bl	800d708 <_fstat_r>
 800d678:	2800      	cmp	r0, #0
 800d67a:	dbec      	blt.n	800d656 <__swhatbuf_r+0x12>
 800d67c:	9901      	ldr	r1, [sp, #4]
 800d67e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d682:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d686:	4259      	negs	r1, r3
 800d688:	4159      	adcs	r1, r3
 800d68a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d68e:	e7eb      	b.n	800d668 <__swhatbuf_r+0x24>

0800d690 <__smakebuf_r>:
 800d690:	898b      	ldrh	r3, [r1, #12]
 800d692:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d694:	079d      	lsls	r5, r3, #30
 800d696:	4606      	mov	r6, r0
 800d698:	460c      	mov	r4, r1
 800d69a:	d507      	bpl.n	800d6ac <__smakebuf_r+0x1c>
 800d69c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	6123      	str	r3, [r4, #16]
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	6163      	str	r3, [r4, #20]
 800d6a8:	b003      	add	sp, #12
 800d6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6ac:	ab01      	add	r3, sp, #4
 800d6ae:	466a      	mov	r2, sp
 800d6b0:	f7ff ffc8 	bl	800d644 <__swhatbuf_r>
 800d6b4:	9f00      	ldr	r7, [sp, #0]
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	4639      	mov	r1, r7
 800d6ba:	4630      	mov	r0, r6
 800d6bc:	f7fe febc 	bl	800c438 <_malloc_r>
 800d6c0:	b948      	cbnz	r0, 800d6d6 <__smakebuf_r+0x46>
 800d6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c6:	059a      	lsls	r2, r3, #22
 800d6c8:	d4ee      	bmi.n	800d6a8 <__smakebuf_r+0x18>
 800d6ca:	f023 0303 	bic.w	r3, r3, #3
 800d6ce:	f043 0302 	orr.w	r3, r3, #2
 800d6d2:	81a3      	strh	r3, [r4, #12]
 800d6d4:	e7e2      	b.n	800d69c <__smakebuf_r+0xc>
 800d6d6:	89a3      	ldrh	r3, [r4, #12]
 800d6d8:	6020      	str	r0, [r4, #0]
 800d6da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6de:	81a3      	strh	r3, [r4, #12]
 800d6e0:	9b01      	ldr	r3, [sp, #4]
 800d6e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d6e6:	b15b      	cbz	r3, 800d700 <__smakebuf_r+0x70>
 800d6e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f000 f81d 	bl	800d72c <_isatty_r>
 800d6f2:	b128      	cbz	r0, 800d700 <__smakebuf_r+0x70>
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	f023 0303 	bic.w	r3, r3, #3
 800d6fa:	f043 0301 	orr.w	r3, r3, #1
 800d6fe:	81a3      	strh	r3, [r4, #12]
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	431d      	orrs	r5, r3
 800d704:	81a5      	strh	r5, [r4, #12]
 800d706:	e7cf      	b.n	800d6a8 <__smakebuf_r+0x18>

0800d708 <_fstat_r>:
 800d708:	b538      	push	{r3, r4, r5, lr}
 800d70a:	4d07      	ldr	r5, [pc, #28]	@ (800d728 <_fstat_r+0x20>)
 800d70c:	2300      	movs	r3, #0
 800d70e:	4604      	mov	r4, r0
 800d710:	4608      	mov	r0, r1
 800d712:	4611      	mov	r1, r2
 800d714:	602b      	str	r3, [r5, #0]
 800d716:	f7f7 fb95 	bl	8004e44 <_fstat>
 800d71a:	1c43      	adds	r3, r0, #1
 800d71c:	d102      	bne.n	800d724 <_fstat_r+0x1c>
 800d71e:	682b      	ldr	r3, [r5, #0]
 800d720:	b103      	cbz	r3, 800d724 <_fstat_r+0x1c>
 800d722:	6023      	str	r3, [r4, #0]
 800d724:	bd38      	pop	{r3, r4, r5, pc}
 800d726:	bf00      	nop
 800d728:	20000fb0 	.word	0x20000fb0

0800d72c <_isatty_r>:
 800d72c:	b538      	push	{r3, r4, r5, lr}
 800d72e:	4d06      	ldr	r5, [pc, #24]	@ (800d748 <_isatty_r+0x1c>)
 800d730:	2300      	movs	r3, #0
 800d732:	4604      	mov	r4, r0
 800d734:	4608      	mov	r0, r1
 800d736:	602b      	str	r3, [r5, #0]
 800d738:	f7f7 fb94 	bl	8004e64 <_isatty>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <_isatty_r+0x1a>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	b103      	cbz	r3, 800d746 <_isatty_r+0x1a>
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	bd38      	pop	{r3, r4, r5, pc}
 800d748:	20000fb0 	.word	0x20000fb0

0800d74c <sqrt>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	ed2d 8b02 	vpush	{d8}
 800d752:	ec55 4b10 	vmov	r4, r5, d0
 800d756:	f000 f825 	bl	800d7a4 <__ieee754_sqrt>
 800d75a:	4622      	mov	r2, r4
 800d75c:	462b      	mov	r3, r5
 800d75e:	4620      	mov	r0, r4
 800d760:	4629      	mov	r1, r5
 800d762:	eeb0 8a40 	vmov.f32	s16, s0
 800d766:	eef0 8a60 	vmov.f32	s17, s1
 800d76a:	f7f3 f9d7 	bl	8000b1c <__aeabi_dcmpun>
 800d76e:	b990      	cbnz	r0, 800d796 <sqrt+0x4a>
 800d770:	2200      	movs	r2, #0
 800d772:	2300      	movs	r3, #0
 800d774:	4620      	mov	r0, r4
 800d776:	4629      	mov	r1, r5
 800d778:	f7f3 f9a8 	bl	8000acc <__aeabi_dcmplt>
 800d77c:	b158      	cbz	r0, 800d796 <sqrt+0x4a>
 800d77e:	f7ff f8a9 	bl	800c8d4 <__errno>
 800d782:	2321      	movs	r3, #33	@ 0x21
 800d784:	6003      	str	r3, [r0, #0]
 800d786:	2200      	movs	r2, #0
 800d788:	2300      	movs	r3, #0
 800d78a:	4610      	mov	r0, r2
 800d78c:	4619      	mov	r1, r3
 800d78e:	f7f3 f855 	bl	800083c <__aeabi_ddiv>
 800d792:	ec41 0b18 	vmov	d8, r0, r1
 800d796:	eeb0 0a48 	vmov.f32	s0, s16
 800d79a:	eef0 0a68 	vmov.f32	s1, s17
 800d79e:	ecbd 8b02 	vpop	{d8}
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}

0800d7a4 <__ieee754_sqrt>:
 800d7a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	4a68      	ldr	r2, [pc, #416]	@ (800d94c <__ieee754_sqrt+0x1a8>)
 800d7aa:	ec55 4b10 	vmov	r4, r5, d0
 800d7ae:	43aa      	bics	r2, r5
 800d7b0:	462b      	mov	r3, r5
 800d7b2:	4621      	mov	r1, r4
 800d7b4:	d110      	bne.n	800d7d8 <__ieee754_sqrt+0x34>
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	4629      	mov	r1, r5
 800d7bc:	f7f2 ff14 	bl	80005e8 <__aeabi_dmul>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	f7f2 fd58 	bl	800027c <__adddf3>
 800d7cc:	4604      	mov	r4, r0
 800d7ce:	460d      	mov	r5, r1
 800d7d0:	ec45 4b10 	vmov	d0, r4, r5
 800d7d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d8:	2d00      	cmp	r5, #0
 800d7da:	dc0e      	bgt.n	800d7fa <__ieee754_sqrt+0x56>
 800d7dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d7e0:	4322      	orrs	r2, r4
 800d7e2:	d0f5      	beq.n	800d7d0 <__ieee754_sqrt+0x2c>
 800d7e4:	b19d      	cbz	r5, 800d80e <__ieee754_sqrt+0x6a>
 800d7e6:	4622      	mov	r2, r4
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	4629      	mov	r1, r5
 800d7ec:	f7f2 fd44 	bl	8000278 <__aeabi_dsub>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	460b      	mov	r3, r1
 800d7f4:	f7f3 f822 	bl	800083c <__aeabi_ddiv>
 800d7f8:	e7e8      	b.n	800d7cc <__ieee754_sqrt+0x28>
 800d7fa:	152a      	asrs	r2, r5, #20
 800d7fc:	d115      	bne.n	800d82a <__ieee754_sqrt+0x86>
 800d7fe:	2000      	movs	r0, #0
 800d800:	e009      	b.n	800d816 <__ieee754_sqrt+0x72>
 800d802:	0acb      	lsrs	r3, r1, #11
 800d804:	3a15      	subs	r2, #21
 800d806:	0549      	lsls	r1, r1, #21
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d0fa      	beq.n	800d802 <__ieee754_sqrt+0x5e>
 800d80c:	e7f7      	b.n	800d7fe <__ieee754_sqrt+0x5a>
 800d80e:	462a      	mov	r2, r5
 800d810:	e7fa      	b.n	800d808 <__ieee754_sqrt+0x64>
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	3001      	adds	r0, #1
 800d816:	02dc      	lsls	r4, r3, #11
 800d818:	d5fb      	bpl.n	800d812 <__ieee754_sqrt+0x6e>
 800d81a:	1e44      	subs	r4, r0, #1
 800d81c:	1b12      	subs	r2, r2, r4
 800d81e:	f1c0 0420 	rsb	r4, r0, #32
 800d822:	fa21 f404 	lsr.w	r4, r1, r4
 800d826:	4323      	orrs	r3, r4
 800d828:	4081      	lsls	r1, r0
 800d82a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d82e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d836:	07d2      	lsls	r2, r2, #31
 800d838:	bf5c      	itt	pl
 800d83a:	005b      	lslpl	r3, r3, #1
 800d83c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d840:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d844:	bf58      	it	pl
 800d846:	0049      	lslpl	r1, r1, #1
 800d848:	2600      	movs	r6, #0
 800d84a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d84e:	106d      	asrs	r5, r5, #1
 800d850:	0049      	lsls	r1, r1, #1
 800d852:	2016      	movs	r0, #22
 800d854:	4632      	mov	r2, r6
 800d856:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d85a:	1917      	adds	r7, r2, r4
 800d85c:	429f      	cmp	r7, r3
 800d85e:	bfde      	ittt	le
 800d860:	193a      	addle	r2, r7, r4
 800d862:	1bdb      	suble	r3, r3, r7
 800d864:	1936      	addle	r6, r6, r4
 800d866:	0fcf      	lsrs	r7, r1, #31
 800d868:	3801      	subs	r0, #1
 800d86a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d86e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d872:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d876:	d1f0      	bne.n	800d85a <__ieee754_sqrt+0xb6>
 800d878:	4604      	mov	r4, r0
 800d87a:	2720      	movs	r7, #32
 800d87c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d880:	429a      	cmp	r2, r3
 800d882:	eb00 0e0c 	add.w	lr, r0, ip
 800d886:	db02      	blt.n	800d88e <__ieee754_sqrt+0xea>
 800d888:	d113      	bne.n	800d8b2 <__ieee754_sqrt+0x10e>
 800d88a:	458e      	cmp	lr, r1
 800d88c:	d811      	bhi.n	800d8b2 <__ieee754_sqrt+0x10e>
 800d88e:	f1be 0f00 	cmp.w	lr, #0
 800d892:	eb0e 000c 	add.w	r0, lr, ip
 800d896:	da42      	bge.n	800d91e <__ieee754_sqrt+0x17a>
 800d898:	2800      	cmp	r0, #0
 800d89a:	db40      	blt.n	800d91e <__ieee754_sqrt+0x17a>
 800d89c:	f102 0801 	add.w	r8, r2, #1
 800d8a0:	1a9b      	subs	r3, r3, r2
 800d8a2:	458e      	cmp	lr, r1
 800d8a4:	bf88      	it	hi
 800d8a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d8aa:	eba1 010e 	sub.w	r1, r1, lr
 800d8ae:	4464      	add	r4, ip
 800d8b0:	4642      	mov	r2, r8
 800d8b2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d8b6:	3f01      	subs	r7, #1
 800d8b8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d8bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d8c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d8c4:	d1dc      	bne.n	800d880 <__ieee754_sqrt+0xdc>
 800d8c6:	4319      	orrs	r1, r3
 800d8c8:	d01b      	beq.n	800d902 <__ieee754_sqrt+0x15e>
 800d8ca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d950 <__ieee754_sqrt+0x1ac>
 800d8ce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d954 <__ieee754_sqrt+0x1b0>
 800d8d2:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8d6:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8da:	f7f2 fccd 	bl	8000278 <__aeabi_dsub>
 800d8de:	e9da 8900 	ldrd	r8, r9, [sl]
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	f7f3 f8f9 	bl	8000ae0 <__aeabi_dcmple>
 800d8ee:	b140      	cbz	r0, 800d902 <__ieee754_sqrt+0x15e>
 800d8f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d8f4:	e9da 0100 	ldrd	r0, r1, [sl]
 800d8f8:	e9db 2300 	ldrd	r2, r3, [fp]
 800d8fc:	d111      	bne.n	800d922 <__ieee754_sqrt+0x17e>
 800d8fe:	3601      	adds	r6, #1
 800d900:	463c      	mov	r4, r7
 800d902:	1072      	asrs	r2, r6, #1
 800d904:	0863      	lsrs	r3, r4, #1
 800d906:	07f1      	lsls	r1, r6, #31
 800d908:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d90c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d910:	bf48      	it	mi
 800d912:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d916:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d91a:	4618      	mov	r0, r3
 800d91c:	e756      	b.n	800d7cc <__ieee754_sqrt+0x28>
 800d91e:	4690      	mov	r8, r2
 800d920:	e7be      	b.n	800d8a0 <__ieee754_sqrt+0xfc>
 800d922:	f7f2 fcab 	bl	800027c <__adddf3>
 800d926:	e9da 8900 	ldrd	r8, r9, [sl]
 800d92a:	4602      	mov	r2, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	4640      	mov	r0, r8
 800d930:	4649      	mov	r1, r9
 800d932:	f7f3 f8cb 	bl	8000acc <__aeabi_dcmplt>
 800d936:	b120      	cbz	r0, 800d942 <__ieee754_sqrt+0x19e>
 800d938:	1ca0      	adds	r0, r4, #2
 800d93a:	bf08      	it	eq
 800d93c:	3601      	addeq	r6, #1
 800d93e:	3402      	adds	r4, #2
 800d940:	e7df      	b.n	800d902 <__ieee754_sqrt+0x15e>
 800d942:	1c63      	adds	r3, r4, #1
 800d944:	f023 0401 	bic.w	r4, r3, #1
 800d948:	e7db      	b.n	800d902 <__ieee754_sqrt+0x15e>
 800d94a:	bf00      	nop
 800d94c:	7ff00000 	.word	0x7ff00000
 800d950:	200000e0 	.word	0x200000e0
 800d954:	200000d8 	.word	0x200000d8

0800d958 <_init>:
 800d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95a:	bf00      	nop
 800d95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d95e:	bc08      	pop	{r3}
 800d960:	469e      	mov	lr, r3
 800d962:	4770      	bx	lr

0800d964 <_fini>:
 800d964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d966:	bf00      	nop
 800d968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d96a:	bc08      	pop	{r3}
 800d96c:	469e      	mov	lr, r3
 800d96e:	4770      	bx	lr
